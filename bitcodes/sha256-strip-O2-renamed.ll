; ModuleID = 'sha256-strip-O2-renamed.bc'
source_filename = "sha256/block/sha256.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { [8 x i32], i64, i32, [64 x i8] }

@0 = internal constant <{ i8, [63 x i8] }> <{ i8 -128, [63 x i8] zeroinitializer }>, align 16

; Function Attrs: norecurse nounwind uwtable
define dso_local void @blk_SHA256_Init(%0* nocapture %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %0, %0* %0, i64 0, i32 2
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %0, %0* %0, i64 0, i32 1
  store i64 0, i64* %3, align 8
  %4 = bitcast %0* %0 to <4 x i32>*
  store <4 x i32> <i32 1779033703, i32 -1150833019, i32 1013904242, i32 -1521486534>, <4 x i32>* %4, align 8
  %5 = getelementptr inbounds %0, %0* %0, i64 0, i32 0, i64 4
  %6 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 1359893119, i32 -1694144372, i32 528734635, i32 1541459225>, <4 x i32>* %6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @blk_SHA256_Update(%0* nocapture %0, i8* nocapture readonly %1, i64 %2) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %0, %0* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 63
  %8 = add i64 %5, %2
  store i64 %8, i64* %4, align 8
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %3
  %11 = sub nsw i32 64, %7
  %12 = zext i32 %11 to i64
  %13 = icmp ugt i64 %12, %2
  %14 = trunc i64 %2 to i32
  %15 = select i1 %13, i32 %14, i32 %11
  %16 = zext i32 %7 to i64
  %17 = getelementptr inbounds %0, %0* %0, i64 0, i32 3, i64 %16
  %18 = zext i32 %15 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* align 1 %1, i64 %18, i1 false)
  %19 = add i32 %15, %6
  %20 = and i32 %19, 63
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %49

22:                                               ; preds = %10
  %23 = getelementptr inbounds i8, i8* %1, i64 %18
  %24 = sub i64 %2, %18
  %25 = getelementptr inbounds %0, %0* %0, i64 0, i32 3, i64 0
  tail call fastcc void @1(%0* nonnull %0, i8* nonnull %25)
  br label %26

26:                                               ; preds = %22, %3
  %27 = phi i8* [ %1, %3 ], [ %23, %22 ]
  %28 = phi i64 [ %2, %3 ], [ %24, %22 ]
  %29 = icmp ugt i64 %28, 63
  br i1 %29, label %30, label %43

30:                                               ; preds = %26
  %31 = add i64 %28, -64
  %32 = and i64 %31, -64
  %33 = add i64 %32, 64
  %34 = getelementptr i8, i8* %27, i64 %33
  br label %35

35:                                               ; preds = %30, %35
  %36 = phi i64 [ %39, %35 ], [ %28, %30 ]
  %37 = phi i8* [ %38, %35 ], [ %27, %30 ]
  tail call fastcc void @1(%0* %0, i8* %37)
  %38 = getelementptr inbounds i8, i8* %37, i64 64
  %39 = add i64 %36, -64
  %40 = icmp ugt i64 %39, 63
  br i1 %40, label %35, label %41

41:                                               ; preds = %35
  %42 = sub i64 %31, %32
  br label %43

43:                                               ; preds = %41, %26
  %44 = phi i8* [ %27, %26 ], [ %34, %41 ]
  %45 = phi i64 [ %28, %26 ], [ %42, %41 ]
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %0, %0* %0, i64 0, i32 3, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 1 %44, i64 %45, i1 false)
  br label %49

49:                                               ; preds = %47, %43, %10
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @1(%0* nocapture %0, i8* nocapture readonly %1) unnamed_addr #1 {
  %3 = bitcast %0* %0 to i8*
  %4 = alloca [8 x i32], align 16
  %5 = bitcast [8 x i32]* %4 to i8*
  %6 = alloca [64 x i32], align 16
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #3
  %7 = bitcast [64 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 4 %3, i64 32, i1 false)
  %8 = bitcast i8* %1 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %9) #4
  %11 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 0
  store i32 %10, i32* %11, align 16
  %12 = getelementptr inbounds i8, i8* %1, i64 4
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %14) #4
  %16 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 1
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %19) #4
  %21 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 2
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds i8, i8* %1, i64 12
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %24) #4
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 3
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds i8, i8* %1, i64 16
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %29) #4
  %31 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 4
  store i32 %30, i32* %31, align 16
  %32 = getelementptr inbounds i8, i8* %1, i64 20
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %34) #4
  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 5
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds i8, i8* %1, i64 24
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %39) #4
  %41 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 6
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds i8, i8* %1, i64 28
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %44) #4
  %46 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 7
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %1, i64 32
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %49) #4
  %51 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 8
  store i32 %50, i32* %51, align 16
  %52 = getelementptr inbounds i8, i8* %1, i64 36
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %54) #4
  %56 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 9
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds i8, i8* %1, i64 40
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %59) #4
  %61 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 10
  store i32 %60, i32* %61, align 8
  %62 = getelementptr inbounds i8, i8* %1, i64 44
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %64) #4
  %66 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 11
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds i8, i8* %1, i64 48
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %69) #4
  %71 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 12
  store i32 %70, i32* %71, align 16
  %72 = getelementptr inbounds i8, i8* %1, i64 52
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %74) #4
  %76 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 13
  store i32 %75, i32* %76, align 4
  %77 = getelementptr inbounds i8, i8* %1, i64 56
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %79) #4
  %81 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 14
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds i8, i8* %1, i64 60
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %84) #4
  %86 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 15
  store i32 %85, i32* %86, align 4
  br label %87

87:                                               ; preds = %87, %2
  %88 = phi i32 [ %10, %2 ], [ %107, %87 ]
  %89 = phi i64 [ 16, %2 ], [ %121, %87 ]
  %90 = add nsw i64 %89, -2
  %91 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = lshr i32 %92, 17
  %94 = shl i32 %92, 15
  %95 = or i32 %94, %93
  %96 = lshr i32 %92, 19
  %97 = shl i32 %92, 13
  %98 = or i32 %97, %96
  %99 = lshr i32 %92, 10
  %100 = xor i32 %98, %99
  %101 = xor i32 %100, %95
  %102 = add nsw i64 %89, -7
  %103 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i64 %89, -15
  %106 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = lshr i32 %107, 7
  %109 = shl i32 %107, 25
  %110 = or i32 %109, %108
  %111 = lshr i32 %107, 18
  %112 = shl i32 %107, 14
  %113 = or i32 %112, %111
  %114 = lshr i32 %107, 3
  %115 = xor i32 %113, %114
  %116 = xor i32 %115, %110
  %117 = add i32 %88, %104
  %118 = add i32 %117, %101
  %119 = add i32 %118, %116
  %120 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 %89
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %89, 1
  %122 = icmp eq i64 %121, 64
  br i1 %122, label %123, label %87

123:                                              ; preds = %87
  %124 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 7
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 4
  %127 = load i32, i32* %126, align 16
  %128 = lshr i32 %127, 6
  %129 = shl i32 %127, 26
  %130 = or i32 %129, %128
  %131 = lshr i32 %127, 11
  %132 = shl i32 %127, 21
  %133 = or i32 %132, %131
  %134 = xor i32 %130, %133
  %135 = lshr i32 %127, 25
  %136 = shl i32 %127, 7
  %137 = or i32 %136, %135
  %138 = xor i32 %134, %137
  %139 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 5
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 6
  %142 = load i32, i32* %141, align 8
  %143 = xor i32 %142, %140
  %144 = and i32 %143, %127
  %145 = xor i32 %144, %142
  %146 = load i32, i32* %11, align 16
  %147 = add i32 %125, 1116352408
  %148 = add i32 %147, %146
  %149 = add i32 %148, %138
  %150 = add i32 %149, %145
  %151 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 0
  %152 = load i32, i32* %151, align 16
  %153 = lshr i32 %152, 2
  %154 = shl i32 %152, 30
  %155 = or i32 %154, %153
  %156 = lshr i32 %152, 13
  %157 = shl i32 %152, 19
  %158 = or i32 %157, %156
  %159 = xor i32 %155, %158
  %160 = lshr i32 %152, 22
  %161 = shl i32 %152, 10
  %162 = or i32 %161, %160
  %163 = xor i32 %159, %162
  %164 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 1
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 2
  %167 = load i32, i32* %166, align 8
  %168 = or i32 %165, %152
  %169 = and i32 %168, %167
  %170 = and i32 %165, %152
  %171 = or i32 %169, %170
  %172 = add i32 %163, %171
  %173 = getelementptr inbounds [8 x i32], [8 x i32]* %4, i64 0, i64 3
  %174 = load i32, i32* %173, align 4
  %175 = add i32 %150, %174
  store i32 %175, i32* %173, align 4
  %176 = add i32 %172, %150
  store i32 %176, i32* %124, align 4
  %177 = lshr i32 %175, 6
  %178 = shl i32 %175, 26
  %179 = or i32 %178, %177
  %180 = lshr i32 %175, 11
  %181 = shl i32 %175, 21
  %182 = or i32 %181, %180
  %183 = xor i32 %179, %182
  %184 = lshr i32 %175, 25
  %185 = shl i32 %175, 7
  %186 = or i32 %185, %184
  %187 = xor i32 %183, %186
  %188 = xor i32 %140, %127
  %189 = and i32 %175, %188
  %190 = xor i32 %189, %140
  %191 = load i32, i32* %16, align 4
  %192 = add i32 %142, 1899447441
  %193 = add i32 %192, %191
  %194 = add i32 %193, %190
  %195 = add i32 %194, %187
  %196 = lshr i32 %176, 2
  %197 = shl i32 %176, 30
  %198 = or i32 %197, %196
  %199 = lshr i32 %176, 13
  %200 = shl i32 %176, 19
  %201 = or i32 %200, %199
  %202 = xor i32 %198, %201
  %203 = lshr i32 %176, 22
  %204 = shl i32 %176, 10
  %205 = or i32 %204, %203
  %206 = xor i32 %202, %205
  %207 = or i32 %176, %152
  %208 = and i32 %207, %165
  %209 = and i32 %176, %152
  %210 = or i32 %208, %209
  %211 = add i32 %206, %210
  %212 = add i32 %195, %167
  store i32 %212, i32* %166, align 8
  %213 = add i32 %211, %195
  store i32 %213, i32* %141, align 8
  %214 = lshr i32 %212, 6
  %215 = shl i32 %212, 26
  %216 = or i32 %215, %214
  %217 = lshr i32 %212, 11
  %218 = shl i32 %212, 21
  %219 = or i32 %218, %217
  %220 = xor i32 %216, %219
  %221 = lshr i32 %212, 25
  %222 = shl i32 %212, 7
  %223 = or i32 %222, %221
  %224 = xor i32 %220, %223
  %225 = xor i32 %175, %127
  %226 = and i32 %212, %225
  %227 = xor i32 %226, %127
  %228 = load i32, i32* %21, align 8
  %229 = add i32 %140, -1245643825
  %230 = add i32 %229, %228
  %231 = add i32 %230, %227
  %232 = add i32 %231, %224
  %233 = lshr i32 %213, 2
  %234 = shl i32 %213, 30
  %235 = or i32 %234, %233
  %236 = lshr i32 %213, 13
  %237 = shl i32 %213, 19
  %238 = or i32 %237, %236
  %239 = xor i32 %235, %238
  %240 = lshr i32 %213, 22
  %241 = shl i32 %213, 10
  %242 = or i32 %241, %240
  %243 = xor i32 %239, %242
  %244 = or i32 %213, %176
  %245 = and i32 %244, %152
  %246 = and i32 %213, %176
  %247 = or i32 %245, %246
  %248 = add i32 %243, %247
  %249 = add i32 %232, %165
  store i32 %249, i32* %164, align 4
  %250 = add i32 %248, %232
  store i32 %250, i32* %139, align 4
  %251 = lshr i32 %249, 6
  %252 = shl i32 %249, 26
  %253 = or i32 %252, %251
  %254 = lshr i32 %249, 11
  %255 = shl i32 %249, 21
  %256 = or i32 %255, %254
  %257 = xor i32 %253, %256
  %258 = lshr i32 %249, 25
  %259 = shl i32 %249, 7
  %260 = or i32 %259, %258
  %261 = xor i32 %257, %260
  %262 = xor i32 %212, %175
  %263 = and i32 %249, %262
  %264 = xor i32 %263, %175
  %265 = load i32, i32* %26, align 4
  %266 = add i32 %127, -373957723
  %267 = add i32 %266, %265
  %268 = add i32 %267, %264
  %269 = add i32 %268, %261
  %270 = lshr i32 %250, 2
  %271 = shl i32 %250, 30
  %272 = or i32 %271, %270
  %273 = lshr i32 %250, 13
  %274 = shl i32 %250, 19
  %275 = or i32 %274, %273
  %276 = xor i32 %272, %275
  %277 = lshr i32 %250, 22
  %278 = shl i32 %250, 10
  %279 = or i32 %278, %277
  %280 = xor i32 %276, %279
  %281 = or i32 %250, %213
  %282 = and i32 %281, %176
  %283 = and i32 %250, %213
  %284 = or i32 %282, %283
  %285 = add i32 %280, %284
  %286 = add i32 %269, %152
  store i32 %286, i32* %151, align 16
  %287 = add i32 %285, %269
  store i32 %287, i32* %126, align 16
  %288 = lshr i32 %286, 6
  %289 = shl i32 %286, 26
  %290 = or i32 %289, %288
  %291 = lshr i32 %286, 11
  %292 = shl i32 %286, 21
  %293 = or i32 %292, %291
  %294 = xor i32 %290, %293
  %295 = lshr i32 %286, 25
  %296 = shl i32 %286, 7
  %297 = or i32 %296, %295
  %298 = xor i32 %294, %297
  %299 = xor i32 %249, %212
  %300 = and i32 %286, %299
  %301 = xor i32 %300, %212
  %302 = load i32, i32* %31, align 16
  %303 = add i32 %175, 961987163
  %304 = add i32 %303, %302
  %305 = add i32 %304, %301
  %306 = add i32 %305, %298
  %307 = lshr i32 %287, 2
  %308 = shl i32 %287, 30
  %309 = or i32 %308, %307
  %310 = lshr i32 %287, 13
  %311 = shl i32 %287, 19
  %312 = or i32 %311, %310
  %313 = xor i32 %309, %312
  %314 = lshr i32 %287, 22
  %315 = shl i32 %287, 10
  %316 = or i32 %315, %314
  %317 = xor i32 %313, %316
  %318 = or i32 %287, %250
  %319 = and i32 %318, %213
  %320 = and i32 %287, %250
  %321 = or i32 %319, %320
  %322 = add i32 %317, %321
  %323 = add i32 %306, %176
  store i32 %323, i32* %124, align 4
  %324 = add i32 %322, %306
  store i32 %324, i32* %173, align 4
  %325 = lshr i32 %323, 6
  %326 = shl i32 %323, 26
  %327 = or i32 %326, %325
  %328 = lshr i32 %323, 11
  %329 = shl i32 %323, 21
  %330 = or i32 %329, %328
  %331 = xor i32 %327, %330
  %332 = lshr i32 %323, 25
  %333 = shl i32 %323, 7
  %334 = or i32 %333, %332
  %335 = xor i32 %331, %334
  %336 = xor i32 %286, %249
  %337 = and i32 %323, %336
  %338 = xor i32 %337, %249
  %339 = load i32, i32* %36, align 4
  %340 = add i32 %212, 1508970993
  %341 = add i32 %340, %339
  %342 = add i32 %341, %338
  %343 = add i32 %342, %335
  %344 = lshr i32 %324, 2
  %345 = shl i32 %324, 30
  %346 = or i32 %345, %344
  %347 = lshr i32 %324, 13
  %348 = shl i32 %324, 19
  %349 = or i32 %348, %347
  %350 = xor i32 %346, %349
  %351 = lshr i32 %324, 22
  %352 = shl i32 %324, 10
  %353 = or i32 %352, %351
  %354 = xor i32 %350, %353
  %355 = or i32 %324, %287
  %356 = and i32 %355, %250
  %357 = and i32 %324, %287
  %358 = or i32 %356, %357
  %359 = add i32 %354, %358
  %360 = add i32 %343, %213
  store i32 %360, i32* %141, align 8
  %361 = add i32 %359, %343
  store i32 %361, i32* %166, align 8
  %362 = lshr i32 %360, 6
  %363 = shl i32 %360, 26
  %364 = or i32 %363, %362
  %365 = lshr i32 %360, 11
  %366 = shl i32 %360, 21
  %367 = or i32 %366, %365
  %368 = xor i32 %364, %367
  %369 = lshr i32 %360, 25
  %370 = shl i32 %360, 7
  %371 = or i32 %370, %369
  %372 = xor i32 %368, %371
  %373 = xor i32 %323, %286
  %374 = and i32 %360, %373
  %375 = xor i32 %374, %286
  %376 = load i32, i32* %41, align 8
  %377 = add i32 %376, -1841331548
  %378 = add i32 %377, %249
  %379 = add i32 %378, %375
  %380 = add i32 %379, %372
  %381 = lshr i32 %361, 2
  %382 = shl i32 %361, 30
  %383 = or i32 %382, %381
  %384 = lshr i32 %361, 13
  %385 = shl i32 %361, 19
  %386 = or i32 %385, %384
  %387 = xor i32 %383, %386
  %388 = lshr i32 %361, 22
  %389 = shl i32 %361, 10
  %390 = or i32 %389, %388
  %391 = xor i32 %387, %390
  %392 = or i32 %361, %324
  %393 = and i32 %392, %287
  %394 = and i32 %361, %324
  %395 = or i32 %393, %394
  %396 = add i32 %391, %395
  %397 = add i32 %380, %250
  store i32 %397, i32* %139, align 4
  %398 = add i32 %396, %380
  store i32 %398, i32* %164, align 4
  %399 = lshr i32 %397, 6
  %400 = shl i32 %397, 26
  %401 = or i32 %400, %399
  %402 = lshr i32 %397, 11
  %403 = shl i32 %397, 21
  %404 = or i32 %403, %402
  %405 = xor i32 %401, %404
  %406 = lshr i32 %397, 25
  %407 = shl i32 %397, 7
  %408 = or i32 %407, %406
  %409 = xor i32 %405, %408
  %410 = xor i32 %360, %323
  %411 = and i32 %397, %410
  %412 = xor i32 %411, %323
  %413 = load i32, i32* %46, align 4
  %414 = add i32 %413, -1424204075
  %415 = add i32 %414, %286
  %416 = add i32 %415, %412
  %417 = add i32 %416, %409
  %418 = lshr i32 %398, 2
  %419 = shl i32 %398, 30
  %420 = or i32 %419, %418
  %421 = lshr i32 %398, 13
  %422 = shl i32 %398, 19
  %423 = or i32 %422, %421
  %424 = xor i32 %420, %423
  %425 = lshr i32 %398, 22
  %426 = shl i32 %398, 10
  %427 = or i32 %426, %425
  %428 = xor i32 %424, %427
  %429 = or i32 %398, %361
  %430 = and i32 %429, %324
  %431 = and i32 %398, %361
  %432 = or i32 %430, %431
  %433 = add i32 %428, %432
  %434 = add i32 %417, %287
  store i32 %434, i32* %126, align 16
  %435 = add i32 %433, %417
  store i32 %435, i32* %151, align 16
  %436 = lshr i32 %434, 6
  %437 = shl i32 %434, 26
  %438 = or i32 %437, %436
  %439 = lshr i32 %434, 11
  %440 = shl i32 %434, 21
  %441 = or i32 %440, %439
  %442 = xor i32 %438, %441
  %443 = lshr i32 %434, 25
  %444 = shl i32 %434, 7
  %445 = or i32 %444, %443
  %446 = xor i32 %442, %445
  %447 = xor i32 %397, %360
  %448 = and i32 %434, %447
  %449 = xor i32 %448, %360
  %450 = load i32, i32* %51, align 16
  %451 = add i32 %450, -670586216
  %452 = add i32 %451, %323
  %453 = add i32 %452, %449
  %454 = add i32 %453, %446
  %455 = lshr i32 %435, 2
  %456 = shl i32 %435, 30
  %457 = or i32 %456, %455
  %458 = lshr i32 %435, 13
  %459 = shl i32 %435, 19
  %460 = or i32 %459, %458
  %461 = xor i32 %457, %460
  %462 = lshr i32 %435, 22
  %463 = shl i32 %435, 10
  %464 = or i32 %463, %462
  %465 = xor i32 %461, %464
  %466 = or i32 %435, %398
  %467 = and i32 %466, %361
  %468 = and i32 %435, %398
  %469 = or i32 %467, %468
  %470 = add i32 %465, %469
  %471 = add i32 %454, %324
  store i32 %471, i32* %173, align 4
  %472 = add i32 %470, %454
  store i32 %472, i32* %124, align 4
  %473 = lshr i32 %471, 6
  %474 = shl i32 %471, 26
  %475 = or i32 %474, %473
  %476 = lshr i32 %471, 11
  %477 = shl i32 %471, 21
  %478 = or i32 %477, %476
  %479 = xor i32 %475, %478
  %480 = lshr i32 %471, 25
  %481 = shl i32 %471, 7
  %482 = or i32 %481, %480
  %483 = xor i32 %479, %482
  %484 = xor i32 %434, %397
  %485 = and i32 %471, %484
  %486 = xor i32 %485, %397
  %487 = load i32, i32* %56, align 4
  %488 = add i32 %487, 310598401
  %489 = add i32 %488, %360
  %490 = add i32 %489, %486
  %491 = add i32 %490, %483
  %492 = lshr i32 %472, 2
  %493 = shl i32 %472, 30
  %494 = or i32 %493, %492
  %495 = lshr i32 %472, 13
  %496 = shl i32 %472, 19
  %497 = or i32 %496, %495
  %498 = xor i32 %494, %497
  %499 = lshr i32 %472, 22
  %500 = shl i32 %472, 10
  %501 = or i32 %500, %499
  %502 = xor i32 %498, %501
  %503 = or i32 %472, %435
  %504 = and i32 %503, %398
  %505 = and i32 %472, %435
  %506 = or i32 %504, %505
  %507 = add i32 %502, %506
  %508 = add i32 %491, %361
  store i32 %508, i32* %166, align 8
  %509 = add i32 %507, %491
  store i32 %509, i32* %141, align 8
  %510 = lshr i32 %508, 6
  %511 = shl i32 %508, 26
  %512 = or i32 %511, %510
  %513 = lshr i32 %508, 11
  %514 = shl i32 %508, 21
  %515 = or i32 %514, %513
  %516 = xor i32 %512, %515
  %517 = lshr i32 %508, 25
  %518 = shl i32 %508, 7
  %519 = or i32 %518, %517
  %520 = xor i32 %516, %519
  %521 = xor i32 %471, %434
  %522 = and i32 %508, %521
  %523 = xor i32 %522, %434
  %524 = load i32, i32* %61, align 8
  %525 = add i32 %524, 607225278
  %526 = add i32 %525, %397
  %527 = add i32 %526, %523
  %528 = add i32 %527, %520
  %529 = lshr i32 %509, 2
  %530 = shl i32 %509, 30
  %531 = or i32 %530, %529
  %532 = lshr i32 %509, 13
  %533 = shl i32 %509, 19
  %534 = or i32 %533, %532
  %535 = xor i32 %531, %534
  %536 = lshr i32 %509, 22
  %537 = shl i32 %509, 10
  %538 = or i32 %537, %536
  %539 = xor i32 %535, %538
  %540 = or i32 %509, %472
  %541 = and i32 %540, %435
  %542 = and i32 %509, %472
  %543 = or i32 %541, %542
  %544 = add i32 %539, %543
  %545 = add i32 %528, %398
  store i32 %545, i32* %164, align 4
  %546 = add i32 %544, %528
  store i32 %546, i32* %139, align 4
  %547 = lshr i32 %545, 6
  %548 = shl i32 %545, 26
  %549 = or i32 %548, %547
  %550 = lshr i32 %545, 11
  %551 = shl i32 %545, 21
  %552 = or i32 %551, %550
  %553 = xor i32 %549, %552
  %554 = lshr i32 %545, 25
  %555 = shl i32 %545, 7
  %556 = or i32 %555, %554
  %557 = xor i32 %553, %556
  %558 = xor i32 %508, %471
  %559 = and i32 %545, %558
  %560 = xor i32 %559, %471
  %561 = load i32, i32* %66, align 4
  %562 = add i32 %561, 1426881987
  %563 = add i32 %562, %434
  %564 = add i32 %563, %560
  %565 = add i32 %564, %557
  %566 = lshr i32 %546, 2
  %567 = shl i32 %546, 30
  %568 = or i32 %567, %566
  %569 = lshr i32 %546, 13
  %570 = shl i32 %546, 19
  %571 = or i32 %570, %569
  %572 = xor i32 %568, %571
  %573 = lshr i32 %546, 22
  %574 = shl i32 %546, 10
  %575 = or i32 %574, %573
  %576 = xor i32 %572, %575
  %577 = or i32 %546, %509
  %578 = and i32 %577, %472
  %579 = and i32 %546, %509
  %580 = or i32 %578, %579
  %581 = add i32 %576, %580
  %582 = add i32 %565, %435
  store i32 %582, i32* %151, align 16
  %583 = add i32 %581, %565
  store i32 %583, i32* %126, align 16
  %584 = lshr i32 %582, 6
  %585 = shl i32 %582, 26
  %586 = or i32 %585, %584
  %587 = lshr i32 %582, 11
  %588 = shl i32 %582, 21
  %589 = or i32 %588, %587
  %590 = xor i32 %586, %589
  %591 = lshr i32 %582, 25
  %592 = shl i32 %582, 7
  %593 = or i32 %592, %591
  %594 = xor i32 %590, %593
  %595 = xor i32 %545, %508
  %596 = and i32 %582, %595
  %597 = xor i32 %596, %508
  %598 = load i32, i32* %71, align 16
  %599 = add i32 %598, 1925078388
  %600 = add i32 %599, %471
  %601 = add i32 %600, %597
  %602 = add i32 %601, %594
  %603 = lshr i32 %583, 2
  %604 = shl i32 %583, 30
  %605 = or i32 %604, %603
  %606 = lshr i32 %583, 13
  %607 = shl i32 %583, 19
  %608 = or i32 %607, %606
  %609 = xor i32 %605, %608
  %610 = lshr i32 %583, 22
  %611 = shl i32 %583, 10
  %612 = or i32 %611, %610
  %613 = xor i32 %609, %612
  %614 = or i32 %583, %546
  %615 = and i32 %614, %509
  %616 = and i32 %583, %546
  %617 = or i32 %615, %616
  %618 = add i32 %613, %617
  %619 = add i32 %602, %472
  store i32 %619, i32* %124, align 4
  %620 = add i32 %618, %602
  store i32 %620, i32* %173, align 4
  %621 = lshr i32 %619, 6
  %622 = shl i32 %619, 26
  %623 = or i32 %622, %621
  %624 = lshr i32 %619, 11
  %625 = shl i32 %619, 21
  %626 = or i32 %625, %624
  %627 = xor i32 %623, %626
  %628 = lshr i32 %619, 25
  %629 = shl i32 %619, 7
  %630 = or i32 %629, %628
  %631 = xor i32 %627, %630
  %632 = xor i32 %582, %545
  %633 = and i32 %619, %632
  %634 = xor i32 %633, %545
  %635 = load i32, i32* %76, align 4
  %636 = add i32 %635, -2132889090
  %637 = add i32 %636, %508
  %638 = add i32 %637, %634
  %639 = add i32 %638, %631
  %640 = lshr i32 %620, 2
  %641 = shl i32 %620, 30
  %642 = or i32 %641, %640
  %643 = lshr i32 %620, 13
  %644 = shl i32 %620, 19
  %645 = or i32 %644, %643
  %646 = xor i32 %642, %645
  %647 = lshr i32 %620, 22
  %648 = shl i32 %620, 10
  %649 = or i32 %648, %647
  %650 = xor i32 %646, %649
  %651 = or i32 %620, %583
  %652 = and i32 %651, %546
  %653 = and i32 %620, %583
  %654 = or i32 %652, %653
  %655 = add i32 %650, %654
  %656 = add i32 %639, %509
  store i32 %656, i32* %141, align 8
  %657 = add i32 %655, %639
  store i32 %657, i32* %166, align 8
  %658 = lshr i32 %656, 6
  %659 = shl i32 %656, 26
  %660 = or i32 %659, %658
  %661 = lshr i32 %656, 11
  %662 = shl i32 %656, 21
  %663 = or i32 %662, %661
  %664 = xor i32 %660, %663
  %665 = lshr i32 %656, 25
  %666 = shl i32 %656, 7
  %667 = or i32 %666, %665
  %668 = xor i32 %664, %667
  %669 = xor i32 %619, %582
  %670 = and i32 %656, %669
  %671 = xor i32 %670, %582
  %672 = load i32, i32* %81, align 8
  %673 = add i32 %672, -1680079193
  %674 = add i32 %673, %545
  %675 = add i32 %674, %671
  %676 = add i32 %675, %668
  %677 = lshr i32 %657, 2
  %678 = shl i32 %657, 30
  %679 = or i32 %678, %677
  %680 = lshr i32 %657, 13
  %681 = shl i32 %657, 19
  %682 = or i32 %681, %680
  %683 = xor i32 %679, %682
  %684 = lshr i32 %657, 22
  %685 = shl i32 %657, 10
  %686 = or i32 %685, %684
  %687 = xor i32 %683, %686
  %688 = or i32 %657, %620
  %689 = and i32 %688, %583
  %690 = and i32 %657, %620
  %691 = or i32 %689, %690
  %692 = add i32 %687, %691
  %693 = add i32 %676, %546
  store i32 %693, i32* %139, align 4
  %694 = add i32 %692, %676
  store i32 %694, i32* %164, align 4
  %695 = lshr i32 %693, 6
  %696 = shl i32 %693, 26
  %697 = or i32 %696, %695
  %698 = lshr i32 %693, 11
  %699 = shl i32 %693, 21
  %700 = or i32 %699, %698
  %701 = xor i32 %697, %700
  %702 = lshr i32 %693, 25
  %703 = shl i32 %693, 7
  %704 = or i32 %703, %702
  %705 = xor i32 %701, %704
  %706 = xor i32 %656, %619
  %707 = and i32 %693, %706
  %708 = xor i32 %707, %619
  %709 = load i32, i32* %86, align 4
  %710 = add i32 %709, -1046744716
  %711 = add i32 %710, %582
  %712 = add i32 %711, %708
  %713 = add i32 %712, %705
  %714 = lshr i32 %694, 2
  %715 = shl i32 %694, 30
  %716 = or i32 %715, %714
  %717 = lshr i32 %694, 13
  %718 = shl i32 %694, 19
  %719 = or i32 %718, %717
  %720 = xor i32 %716, %719
  %721 = lshr i32 %694, 22
  %722 = shl i32 %694, 10
  %723 = or i32 %722, %721
  %724 = xor i32 %720, %723
  %725 = or i32 %694, %657
  %726 = and i32 %725, %620
  %727 = and i32 %694, %657
  %728 = or i32 %726, %727
  %729 = add i32 %724, %728
  %730 = add i32 %713, %583
  store i32 %730, i32* %126, align 16
  %731 = add i32 %729, %713
  store i32 %731, i32* %151, align 16
  %732 = lshr i32 %730, 6
  %733 = shl i32 %730, 26
  %734 = or i32 %733, %732
  %735 = lshr i32 %730, 11
  %736 = shl i32 %730, 21
  %737 = or i32 %736, %735
  %738 = xor i32 %734, %737
  %739 = lshr i32 %730, 25
  %740 = shl i32 %730, 7
  %741 = or i32 %740, %739
  %742 = xor i32 %738, %741
  %743 = xor i32 %693, %656
  %744 = and i32 %730, %743
  %745 = xor i32 %744, %656
  %746 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 16
  %747 = load i32, i32* %746, align 16
  %748 = add i32 %747, -459576895
  %749 = add i32 %748, %619
  %750 = add i32 %749, %745
  %751 = add i32 %750, %742
  %752 = lshr i32 %731, 2
  %753 = shl i32 %731, 30
  %754 = or i32 %753, %752
  %755 = lshr i32 %731, 13
  %756 = shl i32 %731, 19
  %757 = or i32 %756, %755
  %758 = xor i32 %754, %757
  %759 = lshr i32 %731, 22
  %760 = shl i32 %731, 10
  %761 = or i32 %760, %759
  %762 = xor i32 %758, %761
  %763 = or i32 %731, %694
  %764 = and i32 %763, %657
  %765 = and i32 %731, %694
  %766 = or i32 %764, %765
  %767 = add i32 %762, %766
  %768 = add i32 %751, %620
  store i32 %768, i32* %173, align 4
  %769 = add i32 %767, %751
  store i32 %769, i32* %124, align 4
  %770 = lshr i32 %768, 6
  %771 = shl i32 %768, 26
  %772 = or i32 %771, %770
  %773 = lshr i32 %768, 11
  %774 = shl i32 %768, 21
  %775 = or i32 %774, %773
  %776 = xor i32 %772, %775
  %777 = lshr i32 %768, 25
  %778 = shl i32 %768, 7
  %779 = or i32 %778, %777
  %780 = xor i32 %776, %779
  %781 = xor i32 %730, %693
  %782 = and i32 %768, %781
  %783 = xor i32 %782, %693
  %784 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 17
  %785 = load i32, i32* %784, align 4
  %786 = add i32 %785, -272742522
  %787 = add i32 %786, %656
  %788 = add i32 %787, %783
  %789 = add i32 %788, %780
  %790 = lshr i32 %769, 2
  %791 = shl i32 %769, 30
  %792 = or i32 %791, %790
  %793 = lshr i32 %769, 13
  %794 = shl i32 %769, 19
  %795 = or i32 %794, %793
  %796 = xor i32 %792, %795
  %797 = lshr i32 %769, 22
  %798 = shl i32 %769, 10
  %799 = or i32 %798, %797
  %800 = xor i32 %796, %799
  %801 = or i32 %769, %731
  %802 = and i32 %801, %694
  %803 = and i32 %769, %731
  %804 = or i32 %802, %803
  %805 = add i32 %800, %804
  %806 = add i32 %789, %657
  store i32 %806, i32* %166, align 8
  %807 = add i32 %805, %789
  store i32 %807, i32* %141, align 8
  %808 = lshr i32 %806, 6
  %809 = shl i32 %806, 26
  %810 = or i32 %809, %808
  %811 = lshr i32 %806, 11
  %812 = shl i32 %806, 21
  %813 = or i32 %812, %811
  %814 = xor i32 %810, %813
  %815 = lshr i32 %806, 25
  %816 = shl i32 %806, 7
  %817 = or i32 %816, %815
  %818 = xor i32 %814, %817
  %819 = xor i32 %768, %730
  %820 = and i32 %806, %819
  %821 = xor i32 %820, %730
  %822 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 18
  %823 = load i32, i32* %822, align 8
  %824 = add i32 %823, 264347078
  %825 = add i32 %824, %693
  %826 = add i32 %825, %821
  %827 = add i32 %826, %818
  %828 = lshr i32 %807, 2
  %829 = shl i32 %807, 30
  %830 = or i32 %829, %828
  %831 = lshr i32 %807, 13
  %832 = shl i32 %807, 19
  %833 = or i32 %832, %831
  %834 = xor i32 %830, %833
  %835 = lshr i32 %807, 22
  %836 = shl i32 %807, 10
  %837 = or i32 %836, %835
  %838 = xor i32 %834, %837
  %839 = or i32 %807, %769
  %840 = and i32 %839, %731
  %841 = and i32 %807, %769
  %842 = or i32 %840, %841
  %843 = add i32 %838, %842
  %844 = add i32 %827, %694
  store i32 %844, i32* %164, align 4
  %845 = add i32 %843, %827
  store i32 %845, i32* %139, align 4
  %846 = lshr i32 %844, 6
  %847 = shl i32 %844, 26
  %848 = or i32 %847, %846
  %849 = lshr i32 %844, 11
  %850 = shl i32 %844, 21
  %851 = or i32 %850, %849
  %852 = xor i32 %848, %851
  %853 = lshr i32 %844, 25
  %854 = shl i32 %844, 7
  %855 = or i32 %854, %853
  %856 = xor i32 %852, %855
  %857 = xor i32 %806, %768
  %858 = and i32 %844, %857
  %859 = xor i32 %858, %768
  %860 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 19
  %861 = load i32, i32* %860, align 4
  %862 = add i32 %861, 604807628
  %863 = add i32 %862, %730
  %864 = add i32 %863, %859
  %865 = add i32 %864, %856
  %866 = lshr i32 %845, 2
  %867 = shl i32 %845, 30
  %868 = or i32 %867, %866
  %869 = lshr i32 %845, 13
  %870 = shl i32 %845, 19
  %871 = or i32 %870, %869
  %872 = xor i32 %868, %871
  %873 = lshr i32 %845, 22
  %874 = shl i32 %845, 10
  %875 = or i32 %874, %873
  %876 = xor i32 %872, %875
  %877 = or i32 %845, %807
  %878 = and i32 %877, %769
  %879 = and i32 %845, %807
  %880 = or i32 %878, %879
  %881 = add i32 %876, %880
  %882 = add i32 %865, %731
  store i32 %882, i32* %151, align 16
  %883 = add i32 %881, %865
  store i32 %883, i32* %126, align 16
  %884 = lshr i32 %882, 6
  %885 = shl i32 %882, 26
  %886 = or i32 %885, %884
  %887 = lshr i32 %882, 11
  %888 = shl i32 %882, 21
  %889 = or i32 %888, %887
  %890 = xor i32 %886, %889
  %891 = lshr i32 %882, 25
  %892 = shl i32 %882, 7
  %893 = or i32 %892, %891
  %894 = xor i32 %890, %893
  %895 = xor i32 %844, %806
  %896 = and i32 %882, %895
  %897 = xor i32 %896, %806
  %898 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 20
  %899 = load i32, i32* %898, align 16
  %900 = add i32 %899, 770255983
  %901 = add i32 %900, %768
  %902 = add i32 %901, %897
  %903 = add i32 %902, %894
  %904 = lshr i32 %883, 2
  %905 = shl i32 %883, 30
  %906 = or i32 %905, %904
  %907 = lshr i32 %883, 13
  %908 = shl i32 %883, 19
  %909 = or i32 %908, %907
  %910 = xor i32 %906, %909
  %911 = lshr i32 %883, 22
  %912 = shl i32 %883, 10
  %913 = or i32 %912, %911
  %914 = xor i32 %910, %913
  %915 = or i32 %883, %845
  %916 = and i32 %915, %807
  %917 = and i32 %883, %845
  %918 = or i32 %916, %917
  %919 = add i32 %914, %918
  %920 = add i32 %903, %769
  store i32 %920, i32* %124, align 4
  %921 = add i32 %919, %903
  store i32 %921, i32* %173, align 4
  %922 = lshr i32 %920, 6
  %923 = shl i32 %920, 26
  %924 = or i32 %923, %922
  %925 = lshr i32 %920, 11
  %926 = shl i32 %920, 21
  %927 = or i32 %926, %925
  %928 = xor i32 %924, %927
  %929 = lshr i32 %920, 25
  %930 = shl i32 %920, 7
  %931 = or i32 %930, %929
  %932 = xor i32 %928, %931
  %933 = xor i32 %882, %844
  %934 = and i32 %920, %933
  %935 = xor i32 %934, %844
  %936 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 21
  %937 = load i32, i32* %936, align 4
  %938 = add i32 %937, 1249150122
  %939 = add i32 %938, %806
  %940 = add i32 %939, %935
  %941 = add i32 %940, %932
  %942 = lshr i32 %921, 2
  %943 = shl i32 %921, 30
  %944 = or i32 %943, %942
  %945 = lshr i32 %921, 13
  %946 = shl i32 %921, 19
  %947 = or i32 %946, %945
  %948 = xor i32 %944, %947
  %949 = lshr i32 %921, 22
  %950 = shl i32 %921, 10
  %951 = or i32 %950, %949
  %952 = xor i32 %948, %951
  %953 = or i32 %921, %883
  %954 = and i32 %953, %845
  %955 = and i32 %921, %883
  %956 = or i32 %954, %955
  %957 = add i32 %952, %956
  %958 = add i32 %941, %807
  store i32 %958, i32* %141, align 8
  %959 = add i32 %957, %941
  store i32 %959, i32* %166, align 8
  %960 = lshr i32 %958, 6
  %961 = shl i32 %958, 26
  %962 = or i32 %961, %960
  %963 = lshr i32 %958, 11
  %964 = shl i32 %958, 21
  %965 = or i32 %964, %963
  %966 = xor i32 %962, %965
  %967 = lshr i32 %958, 25
  %968 = shl i32 %958, 7
  %969 = or i32 %968, %967
  %970 = xor i32 %966, %969
  %971 = xor i32 %920, %882
  %972 = and i32 %958, %971
  %973 = xor i32 %972, %882
  %974 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 22
  %975 = load i32, i32* %974, align 8
  %976 = add i32 %975, 1555081692
  %977 = add i32 %976, %844
  %978 = add i32 %977, %973
  %979 = add i32 %978, %970
  %980 = lshr i32 %959, 2
  %981 = shl i32 %959, 30
  %982 = or i32 %981, %980
  %983 = lshr i32 %959, 13
  %984 = shl i32 %959, 19
  %985 = or i32 %984, %983
  %986 = xor i32 %982, %985
  %987 = lshr i32 %959, 22
  %988 = shl i32 %959, 10
  %989 = or i32 %988, %987
  %990 = xor i32 %986, %989
  %991 = or i32 %959, %921
  %992 = and i32 %991, %883
  %993 = and i32 %959, %921
  %994 = or i32 %992, %993
  %995 = add i32 %990, %994
  %996 = add i32 %979, %845
  store i32 %996, i32* %139, align 4
  %997 = add i32 %995, %979
  store i32 %997, i32* %164, align 4
  %998 = lshr i32 %996, 6
  %999 = shl i32 %996, 26
  %1000 = or i32 %999, %998
  %1001 = lshr i32 %996, 11
  %1002 = shl i32 %996, 21
  %1003 = or i32 %1002, %1001
  %1004 = xor i32 %1000, %1003
  %1005 = lshr i32 %996, 25
  %1006 = shl i32 %996, 7
  %1007 = or i32 %1006, %1005
  %1008 = xor i32 %1004, %1007
  %1009 = xor i32 %958, %920
  %1010 = and i32 %996, %1009
  %1011 = xor i32 %1010, %920
  %1012 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 23
  %1013 = load i32, i32* %1012, align 4
  %1014 = add i32 %1013, 1996064986
  %1015 = add i32 %1014, %882
  %1016 = add i32 %1015, %1011
  %1017 = add i32 %1016, %1008
  %1018 = lshr i32 %997, 2
  %1019 = shl i32 %997, 30
  %1020 = or i32 %1019, %1018
  %1021 = lshr i32 %997, 13
  %1022 = shl i32 %997, 19
  %1023 = or i32 %1022, %1021
  %1024 = xor i32 %1020, %1023
  %1025 = lshr i32 %997, 22
  %1026 = shl i32 %997, 10
  %1027 = or i32 %1026, %1025
  %1028 = xor i32 %1024, %1027
  %1029 = or i32 %997, %959
  %1030 = and i32 %1029, %921
  %1031 = and i32 %997, %959
  %1032 = or i32 %1030, %1031
  %1033 = add i32 %1028, %1032
  %1034 = add i32 %1017, %883
  store i32 %1034, i32* %126, align 16
  %1035 = add i32 %1033, %1017
  store i32 %1035, i32* %151, align 16
  %1036 = lshr i32 %1034, 6
  %1037 = shl i32 %1034, 26
  %1038 = or i32 %1037, %1036
  %1039 = lshr i32 %1034, 11
  %1040 = shl i32 %1034, 21
  %1041 = or i32 %1040, %1039
  %1042 = xor i32 %1038, %1041
  %1043 = lshr i32 %1034, 25
  %1044 = shl i32 %1034, 7
  %1045 = or i32 %1044, %1043
  %1046 = xor i32 %1042, %1045
  %1047 = xor i32 %996, %958
  %1048 = and i32 %1034, %1047
  %1049 = xor i32 %1048, %958
  %1050 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 24
  %1051 = load i32, i32* %1050, align 16
  %1052 = add i32 %1051, -1740746414
  %1053 = add i32 %1052, %920
  %1054 = add i32 %1053, %1049
  %1055 = add i32 %1054, %1046
  %1056 = lshr i32 %1035, 2
  %1057 = shl i32 %1035, 30
  %1058 = or i32 %1057, %1056
  %1059 = lshr i32 %1035, 13
  %1060 = shl i32 %1035, 19
  %1061 = or i32 %1060, %1059
  %1062 = xor i32 %1058, %1061
  %1063 = lshr i32 %1035, 22
  %1064 = shl i32 %1035, 10
  %1065 = or i32 %1064, %1063
  %1066 = xor i32 %1062, %1065
  %1067 = or i32 %1035, %997
  %1068 = and i32 %1067, %959
  %1069 = and i32 %1035, %997
  %1070 = or i32 %1068, %1069
  %1071 = add i32 %1066, %1070
  %1072 = add i32 %1055, %921
  store i32 %1072, i32* %173, align 4
  %1073 = add i32 %1071, %1055
  store i32 %1073, i32* %124, align 4
  %1074 = lshr i32 %1072, 6
  %1075 = shl i32 %1072, 26
  %1076 = or i32 %1075, %1074
  %1077 = lshr i32 %1072, 11
  %1078 = shl i32 %1072, 21
  %1079 = or i32 %1078, %1077
  %1080 = xor i32 %1076, %1079
  %1081 = lshr i32 %1072, 25
  %1082 = shl i32 %1072, 7
  %1083 = or i32 %1082, %1081
  %1084 = xor i32 %1080, %1083
  %1085 = xor i32 %1034, %996
  %1086 = and i32 %1072, %1085
  %1087 = xor i32 %1086, %996
  %1088 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 25
  %1089 = load i32, i32* %1088, align 4
  %1090 = add i32 %1089, -1473132947
  %1091 = add i32 %1090, %958
  %1092 = add i32 %1091, %1087
  %1093 = add i32 %1092, %1084
  %1094 = lshr i32 %1073, 2
  %1095 = shl i32 %1073, 30
  %1096 = or i32 %1095, %1094
  %1097 = lshr i32 %1073, 13
  %1098 = shl i32 %1073, 19
  %1099 = or i32 %1098, %1097
  %1100 = xor i32 %1096, %1099
  %1101 = lshr i32 %1073, 22
  %1102 = shl i32 %1073, 10
  %1103 = or i32 %1102, %1101
  %1104 = xor i32 %1100, %1103
  %1105 = or i32 %1073, %1035
  %1106 = and i32 %1105, %997
  %1107 = and i32 %1073, %1035
  %1108 = or i32 %1106, %1107
  %1109 = add i32 %1104, %1108
  %1110 = add i32 %1093, %959
  store i32 %1110, i32* %166, align 8
  %1111 = add i32 %1109, %1093
  store i32 %1111, i32* %141, align 8
  %1112 = lshr i32 %1110, 6
  %1113 = shl i32 %1110, 26
  %1114 = or i32 %1113, %1112
  %1115 = lshr i32 %1110, 11
  %1116 = shl i32 %1110, 21
  %1117 = or i32 %1116, %1115
  %1118 = xor i32 %1114, %1117
  %1119 = lshr i32 %1110, 25
  %1120 = shl i32 %1110, 7
  %1121 = or i32 %1120, %1119
  %1122 = xor i32 %1118, %1121
  %1123 = xor i32 %1072, %1034
  %1124 = and i32 %1110, %1123
  %1125 = xor i32 %1124, %1034
  %1126 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 26
  %1127 = load i32, i32* %1126, align 8
  %1128 = add i32 %1127, -1341970488
  %1129 = add i32 %1128, %996
  %1130 = add i32 %1129, %1125
  %1131 = add i32 %1130, %1122
  %1132 = lshr i32 %1111, 2
  %1133 = shl i32 %1111, 30
  %1134 = or i32 %1133, %1132
  %1135 = lshr i32 %1111, 13
  %1136 = shl i32 %1111, 19
  %1137 = or i32 %1136, %1135
  %1138 = xor i32 %1134, %1137
  %1139 = lshr i32 %1111, 22
  %1140 = shl i32 %1111, 10
  %1141 = or i32 %1140, %1139
  %1142 = xor i32 %1138, %1141
  %1143 = or i32 %1111, %1073
  %1144 = and i32 %1143, %1035
  %1145 = and i32 %1111, %1073
  %1146 = or i32 %1144, %1145
  %1147 = add i32 %1142, %1146
  %1148 = add i32 %1131, %997
  store i32 %1148, i32* %164, align 4
  %1149 = add i32 %1147, %1131
  store i32 %1149, i32* %139, align 4
  %1150 = lshr i32 %1148, 6
  %1151 = shl i32 %1148, 26
  %1152 = or i32 %1151, %1150
  %1153 = lshr i32 %1148, 11
  %1154 = shl i32 %1148, 21
  %1155 = or i32 %1154, %1153
  %1156 = xor i32 %1152, %1155
  %1157 = lshr i32 %1148, 25
  %1158 = shl i32 %1148, 7
  %1159 = or i32 %1158, %1157
  %1160 = xor i32 %1156, %1159
  %1161 = xor i32 %1110, %1072
  %1162 = and i32 %1148, %1161
  %1163 = xor i32 %1162, %1072
  %1164 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 27
  %1165 = load i32, i32* %1164, align 4
  %1166 = add i32 %1165, -1084653625
  %1167 = add i32 %1166, %1034
  %1168 = add i32 %1167, %1163
  %1169 = add i32 %1168, %1160
  %1170 = lshr i32 %1149, 2
  %1171 = shl i32 %1149, 30
  %1172 = or i32 %1171, %1170
  %1173 = lshr i32 %1149, 13
  %1174 = shl i32 %1149, 19
  %1175 = or i32 %1174, %1173
  %1176 = xor i32 %1172, %1175
  %1177 = lshr i32 %1149, 22
  %1178 = shl i32 %1149, 10
  %1179 = or i32 %1178, %1177
  %1180 = xor i32 %1176, %1179
  %1181 = or i32 %1149, %1111
  %1182 = and i32 %1181, %1073
  %1183 = and i32 %1149, %1111
  %1184 = or i32 %1182, %1183
  %1185 = add i32 %1180, %1184
  %1186 = add i32 %1169, %1035
  store i32 %1186, i32* %151, align 16
  %1187 = add i32 %1185, %1169
  store i32 %1187, i32* %126, align 16
  %1188 = lshr i32 %1186, 6
  %1189 = shl i32 %1186, 26
  %1190 = or i32 %1189, %1188
  %1191 = lshr i32 %1186, 11
  %1192 = shl i32 %1186, 21
  %1193 = or i32 %1192, %1191
  %1194 = xor i32 %1190, %1193
  %1195 = lshr i32 %1186, 25
  %1196 = shl i32 %1186, 7
  %1197 = or i32 %1196, %1195
  %1198 = xor i32 %1194, %1197
  %1199 = xor i32 %1148, %1110
  %1200 = and i32 %1186, %1199
  %1201 = xor i32 %1200, %1110
  %1202 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 28
  %1203 = load i32, i32* %1202, align 16
  %1204 = add i32 %1203, -958395405
  %1205 = add i32 %1204, %1072
  %1206 = add i32 %1205, %1201
  %1207 = add i32 %1206, %1198
  %1208 = lshr i32 %1187, 2
  %1209 = shl i32 %1187, 30
  %1210 = or i32 %1209, %1208
  %1211 = lshr i32 %1187, 13
  %1212 = shl i32 %1187, 19
  %1213 = or i32 %1212, %1211
  %1214 = xor i32 %1210, %1213
  %1215 = lshr i32 %1187, 22
  %1216 = shl i32 %1187, 10
  %1217 = or i32 %1216, %1215
  %1218 = xor i32 %1214, %1217
  %1219 = or i32 %1187, %1149
  %1220 = and i32 %1219, %1111
  %1221 = and i32 %1187, %1149
  %1222 = or i32 %1220, %1221
  %1223 = add i32 %1218, %1222
  %1224 = add i32 %1207, %1073
  store i32 %1224, i32* %124, align 4
  %1225 = add i32 %1223, %1207
  store i32 %1225, i32* %173, align 4
  %1226 = lshr i32 %1224, 6
  %1227 = shl i32 %1224, 26
  %1228 = or i32 %1227, %1226
  %1229 = lshr i32 %1224, 11
  %1230 = shl i32 %1224, 21
  %1231 = or i32 %1230, %1229
  %1232 = xor i32 %1228, %1231
  %1233 = lshr i32 %1224, 25
  %1234 = shl i32 %1224, 7
  %1235 = or i32 %1234, %1233
  %1236 = xor i32 %1232, %1235
  %1237 = xor i32 %1186, %1148
  %1238 = and i32 %1224, %1237
  %1239 = xor i32 %1238, %1148
  %1240 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 29
  %1241 = load i32, i32* %1240, align 4
  %1242 = add i32 %1241, -710438585
  %1243 = add i32 %1242, %1110
  %1244 = add i32 %1243, %1239
  %1245 = add i32 %1244, %1236
  %1246 = lshr i32 %1225, 2
  %1247 = shl i32 %1225, 30
  %1248 = or i32 %1247, %1246
  %1249 = lshr i32 %1225, 13
  %1250 = shl i32 %1225, 19
  %1251 = or i32 %1250, %1249
  %1252 = xor i32 %1248, %1251
  %1253 = lshr i32 %1225, 22
  %1254 = shl i32 %1225, 10
  %1255 = or i32 %1254, %1253
  %1256 = xor i32 %1252, %1255
  %1257 = or i32 %1225, %1187
  %1258 = and i32 %1257, %1149
  %1259 = and i32 %1225, %1187
  %1260 = or i32 %1258, %1259
  %1261 = add i32 %1256, %1260
  %1262 = add i32 %1245, %1111
  store i32 %1262, i32* %141, align 8
  %1263 = add i32 %1261, %1245
  store i32 %1263, i32* %166, align 8
  %1264 = lshr i32 %1262, 6
  %1265 = shl i32 %1262, 26
  %1266 = or i32 %1265, %1264
  %1267 = lshr i32 %1262, 11
  %1268 = shl i32 %1262, 21
  %1269 = or i32 %1268, %1267
  %1270 = xor i32 %1266, %1269
  %1271 = lshr i32 %1262, 25
  %1272 = shl i32 %1262, 7
  %1273 = or i32 %1272, %1271
  %1274 = xor i32 %1270, %1273
  %1275 = xor i32 %1224, %1186
  %1276 = and i32 %1262, %1275
  %1277 = xor i32 %1276, %1186
  %1278 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 30
  %1279 = load i32, i32* %1278, align 8
  %1280 = add i32 %1279, 113926993
  %1281 = add i32 %1280, %1148
  %1282 = add i32 %1281, %1277
  %1283 = add i32 %1282, %1274
  %1284 = lshr i32 %1263, 2
  %1285 = shl i32 %1263, 30
  %1286 = or i32 %1285, %1284
  %1287 = lshr i32 %1263, 13
  %1288 = shl i32 %1263, 19
  %1289 = or i32 %1288, %1287
  %1290 = xor i32 %1286, %1289
  %1291 = lshr i32 %1263, 22
  %1292 = shl i32 %1263, 10
  %1293 = or i32 %1292, %1291
  %1294 = xor i32 %1290, %1293
  %1295 = or i32 %1263, %1225
  %1296 = and i32 %1295, %1187
  %1297 = and i32 %1263, %1225
  %1298 = or i32 %1296, %1297
  %1299 = add i32 %1294, %1298
  %1300 = add i32 %1283, %1149
  store i32 %1300, i32* %139, align 4
  %1301 = add i32 %1299, %1283
  store i32 %1301, i32* %164, align 4
  %1302 = lshr i32 %1300, 6
  %1303 = shl i32 %1300, 26
  %1304 = or i32 %1303, %1302
  %1305 = lshr i32 %1300, 11
  %1306 = shl i32 %1300, 21
  %1307 = or i32 %1306, %1305
  %1308 = xor i32 %1304, %1307
  %1309 = lshr i32 %1300, 25
  %1310 = shl i32 %1300, 7
  %1311 = or i32 %1310, %1309
  %1312 = xor i32 %1308, %1311
  %1313 = xor i32 %1262, %1224
  %1314 = and i32 %1300, %1313
  %1315 = xor i32 %1314, %1224
  %1316 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 31
  %1317 = load i32, i32* %1316, align 4
  %1318 = add i32 %1317, 338241895
  %1319 = add i32 %1318, %1186
  %1320 = add i32 %1319, %1315
  %1321 = add i32 %1320, %1312
  %1322 = lshr i32 %1301, 2
  %1323 = shl i32 %1301, 30
  %1324 = or i32 %1323, %1322
  %1325 = lshr i32 %1301, 13
  %1326 = shl i32 %1301, 19
  %1327 = or i32 %1326, %1325
  %1328 = xor i32 %1324, %1327
  %1329 = lshr i32 %1301, 22
  %1330 = shl i32 %1301, 10
  %1331 = or i32 %1330, %1329
  %1332 = xor i32 %1328, %1331
  %1333 = or i32 %1301, %1263
  %1334 = and i32 %1333, %1225
  %1335 = and i32 %1301, %1263
  %1336 = or i32 %1334, %1335
  %1337 = add i32 %1332, %1336
  %1338 = add i32 %1321, %1187
  store i32 %1338, i32* %126, align 16
  %1339 = add i32 %1337, %1321
  store i32 %1339, i32* %151, align 16
  %1340 = lshr i32 %1338, 6
  %1341 = shl i32 %1338, 26
  %1342 = or i32 %1341, %1340
  %1343 = lshr i32 %1338, 11
  %1344 = shl i32 %1338, 21
  %1345 = or i32 %1344, %1343
  %1346 = xor i32 %1342, %1345
  %1347 = lshr i32 %1338, 25
  %1348 = shl i32 %1338, 7
  %1349 = or i32 %1348, %1347
  %1350 = xor i32 %1346, %1349
  %1351 = xor i32 %1300, %1262
  %1352 = and i32 %1338, %1351
  %1353 = xor i32 %1352, %1262
  %1354 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 32
  %1355 = load i32, i32* %1354, align 16
  %1356 = add i32 %1355, 666307205
  %1357 = add i32 %1356, %1224
  %1358 = add i32 %1357, %1353
  %1359 = add i32 %1358, %1350
  %1360 = lshr i32 %1339, 2
  %1361 = shl i32 %1339, 30
  %1362 = or i32 %1361, %1360
  %1363 = lshr i32 %1339, 13
  %1364 = shl i32 %1339, 19
  %1365 = or i32 %1364, %1363
  %1366 = xor i32 %1362, %1365
  %1367 = lshr i32 %1339, 22
  %1368 = shl i32 %1339, 10
  %1369 = or i32 %1368, %1367
  %1370 = xor i32 %1366, %1369
  %1371 = or i32 %1339, %1301
  %1372 = and i32 %1371, %1263
  %1373 = and i32 %1339, %1301
  %1374 = or i32 %1372, %1373
  %1375 = add i32 %1370, %1374
  %1376 = add i32 %1359, %1225
  store i32 %1376, i32* %173, align 4
  %1377 = add i32 %1375, %1359
  store i32 %1377, i32* %124, align 4
  %1378 = lshr i32 %1376, 6
  %1379 = shl i32 %1376, 26
  %1380 = or i32 %1379, %1378
  %1381 = lshr i32 %1376, 11
  %1382 = shl i32 %1376, 21
  %1383 = or i32 %1382, %1381
  %1384 = xor i32 %1380, %1383
  %1385 = lshr i32 %1376, 25
  %1386 = shl i32 %1376, 7
  %1387 = or i32 %1386, %1385
  %1388 = xor i32 %1384, %1387
  %1389 = xor i32 %1338, %1300
  %1390 = and i32 %1376, %1389
  %1391 = xor i32 %1390, %1300
  %1392 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 33
  %1393 = load i32, i32* %1392, align 4
  %1394 = add i32 %1393, 773529912
  %1395 = add i32 %1394, %1262
  %1396 = add i32 %1395, %1391
  %1397 = add i32 %1396, %1388
  %1398 = lshr i32 %1377, 2
  %1399 = shl i32 %1377, 30
  %1400 = or i32 %1399, %1398
  %1401 = lshr i32 %1377, 13
  %1402 = shl i32 %1377, 19
  %1403 = or i32 %1402, %1401
  %1404 = xor i32 %1400, %1403
  %1405 = lshr i32 %1377, 22
  %1406 = shl i32 %1377, 10
  %1407 = or i32 %1406, %1405
  %1408 = xor i32 %1404, %1407
  %1409 = or i32 %1377, %1339
  %1410 = and i32 %1409, %1301
  %1411 = and i32 %1377, %1339
  %1412 = or i32 %1410, %1411
  %1413 = add i32 %1408, %1412
  %1414 = add i32 %1397, %1263
  store i32 %1414, i32* %166, align 8
  %1415 = add i32 %1413, %1397
  store i32 %1415, i32* %141, align 8
  %1416 = lshr i32 %1414, 6
  %1417 = shl i32 %1414, 26
  %1418 = or i32 %1417, %1416
  %1419 = lshr i32 %1414, 11
  %1420 = shl i32 %1414, 21
  %1421 = or i32 %1420, %1419
  %1422 = xor i32 %1418, %1421
  %1423 = lshr i32 %1414, 25
  %1424 = shl i32 %1414, 7
  %1425 = or i32 %1424, %1423
  %1426 = xor i32 %1422, %1425
  %1427 = xor i32 %1376, %1338
  %1428 = and i32 %1414, %1427
  %1429 = xor i32 %1428, %1338
  %1430 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 34
  %1431 = load i32, i32* %1430, align 8
  %1432 = add i32 %1431, 1294757372
  %1433 = add i32 %1432, %1300
  %1434 = add i32 %1433, %1429
  %1435 = add i32 %1434, %1426
  %1436 = lshr i32 %1415, 2
  %1437 = shl i32 %1415, 30
  %1438 = or i32 %1437, %1436
  %1439 = lshr i32 %1415, 13
  %1440 = shl i32 %1415, 19
  %1441 = or i32 %1440, %1439
  %1442 = xor i32 %1438, %1441
  %1443 = lshr i32 %1415, 22
  %1444 = shl i32 %1415, 10
  %1445 = or i32 %1444, %1443
  %1446 = xor i32 %1442, %1445
  %1447 = or i32 %1415, %1377
  %1448 = and i32 %1447, %1339
  %1449 = and i32 %1415, %1377
  %1450 = or i32 %1448, %1449
  %1451 = add i32 %1446, %1450
  %1452 = add i32 %1435, %1301
  store i32 %1452, i32* %164, align 4
  %1453 = add i32 %1451, %1435
  store i32 %1453, i32* %139, align 4
  %1454 = lshr i32 %1452, 6
  %1455 = shl i32 %1452, 26
  %1456 = or i32 %1455, %1454
  %1457 = lshr i32 %1452, 11
  %1458 = shl i32 %1452, 21
  %1459 = or i32 %1458, %1457
  %1460 = xor i32 %1456, %1459
  %1461 = lshr i32 %1452, 25
  %1462 = shl i32 %1452, 7
  %1463 = or i32 %1462, %1461
  %1464 = xor i32 %1460, %1463
  %1465 = xor i32 %1414, %1376
  %1466 = and i32 %1452, %1465
  %1467 = xor i32 %1466, %1376
  %1468 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 35
  %1469 = load i32, i32* %1468, align 4
  %1470 = add i32 %1469, 1396182291
  %1471 = add i32 %1470, %1338
  %1472 = add i32 %1471, %1467
  %1473 = add i32 %1472, %1464
  %1474 = lshr i32 %1453, 2
  %1475 = shl i32 %1453, 30
  %1476 = or i32 %1475, %1474
  %1477 = lshr i32 %1453, 13
  %1478 = shl i32 %1453, 19
  %1479 = or i32 %1478, %1477
  %1480 = xor i32 %1476, %1479
  %1481 = lshr i32 %1453, 22
  %1482 = shl i32 %1453, 10
  %1483 = or i32 %1482, %1481
  %1484 = xor i32 %1480, %1483
  %1485 = or i32 %1453, %1415
  %1486 = and i32 %1485, %1377
  %1487 = and i32 %1453, %1415
  %1488 = or i32 %1486, %1487
  %1489 = add i32 %1484, %1488
  %1490 = add i32 %1473, %1339
  store i32 %1490, i32* %151, align 16
  %1491 = add i32 %1489, %1473
  store i32 %1491, i32* %126, align 16
  %1492 = lshr i32 %1490, 6
  %1493 = shl i32 %1490, 26
  %1494 = or i32 %1493, %1492
  %1495 = lshr i32 %1490, 11
  %1496 = shl i32 %1490, 21
  %1497 = or i32 %1496, %1495
  %1498 = xor i32 %1494, %1497
  %1499 = lshr i32 %1490, 25
  %1500 = shl i32 %1490, 7
  %1501 = or i32 %1500, %1499
  %1502 = xor i32 %1498, %1501
  %1503 = xor i32 %1452, %1414
  %1504 = and i32 %1490, %1503
  %1505 = xor i32 %1504, %1414
  %1506 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 36
  %1507 = load i32, i32* %1506, align 16
  %1508 = add i32 %1507, 1695183700
  %1509 = add i32 %1508, %1376
  %1510 = add i32 %1509, %1505
  %1511 = add i32 %1510, %1502
  %1512 = lshr i32 %1491, 2
  %1513 = shl i32 %1491, 30
  %1514 = or i32 %1513, %1512
  %1515 = lshr i32 %1491, 13
  %1516 = shl i32 %1491, 19
  %1517 = or i32 %1516, %1515
  %1518 = xor i32 %1514, %1517
  %1519 = lshr i32 %1491, 22
  %1520 = shl i32 %1491, 10
  %1521 = or i32 %1520, %1519
  %1522 = xor i32 %1518, %1521
  %1523 = or i32 %1491, %1453
  %1524 = and i32 %1523, %1415
  %1525 = and i32 %1491, %1453
  %1526 = or i32 %1524, %1525
  %1527 = add i32 %1522, %1526
  %1528 = add i32 %1511, %1377
  store i32 %1528, i32* %124, align 4
  %1529 = add i32 %1527, %1511
  store i32 %1529, i32* %173, align 4
  %1530 = lshr i32 %1528, 6
  %1531 = shl i32 %1528, 26
  %1532 = or i32 %1531, %1530
  %1533 = lshr i32 %1528, 11
  %1534 = shl i32 %1528, 21
  %1535 = or i32 %1534, %1533
  %1536 = xor i32 %1532, %1535
  %1537 = lshr i32 %1528, 25
  %1538 = shl i32 %1528, 7
  %1539 = or i32 %1538, %1537
  %1540 = xor i32 %1536, %1539
  %1541 = xor i32 %1490, %1452
  %1542 = and i32 %1528, %1541
  %1543 = xor i32 %1542, %1452
  %1544 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 37
  %1545 = load i32, i32* %1544, align 4
  %1546 = add i32 %1545, 1986661051
  %1547 = add i32 %1546, %1414
  %1548 = add i32 %1547, %1543
  %1549 = add i32 %1548, %1540
  %1550 = lshr i32 %1529, 2
  %1551 = shl i32 %1529, 30
  %1552 = or i32 %1551, %1550
  %1553 = lshr i32 %1529, 13
  %1554 = shl i32 %1529, 19
  %1555 = or i32 %1554, %1553
  %1556 = xor i32 %1552, %1555
  %1557 = lshr i32 %1529, 22
  %1558 = shl i32 %1529, 10
  %1559 = or i32 %1558, %1557
  %1560 = xor i32 %1556, %1559
  %1561 = or i32 %1529, %1491
  %1562 = and i32 %1561, %1453
  %1563 = and i32 %1529, %1491
  %1564 = or i32 %1562, %1563
  %1565 = add i32 %1560, %1564
  %1566 = add i32 %1549, %1415
  store i32 %1566, i32* %141, align 8
  %1567 = add i32 %1565, %1549
  store i32 %1567, i32* %166, align 8
  %1568 = lshr i32 %1566, 6
  %1569 = shl i32 %1566, 26
  %1570 = or i32 %1569, %1568
  %1571 = lshr i32 %1566, 11
  %1572 = shl i32 %1566, 21
  %1573 = or i32 %1572, %1571
  %1574 = xor i32 %1570, %1573
  %1575 = lshr i32 %1566, 25
  %1576 = shl i32 %1566, 7
  %1577 = or i32 %1576, %1575
  %1578 = xor i32 %1574, %1577
  %1579 = xor i32 %1528, %1490
  %1580 = and i32 %1566, %1579
  %1581 = xor i32 %1580, %1490
  %1582 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 38
  %1583 = load i32, i32* %1582, align 8
  %1584 = add i32 %1583, -2117940946
  %1585 = add i32 %1584, %1452
  %1586 = add i32 %1585, %1581
  %1587 = add i32 %1586, %1578
  %1588 = lshr i32 %1567, 2
  %1589 = shl i32 %1567, 30
  %1590 = or i32 %1589, %1588
  %1591 = lshr i32 %1567, 13
  %1592 = shl i32 %1567, 19
  %1593 = or i32 %1592, %1591
  %1594 = xor i32 %1590, %1593
  %1595 = lshr i32 %1567, 22
  %1596 = shl i32 %1567, 10
  %1597 = or i32 %1596, %1595
  %1598 = xor i32 %1594, %1597
  %1599 = or i32 %1567, %1529
  %1600 = and i32 %1599, %1491
  %1601 = and i32 %1567, %1529
  %1602 = or i32 %1600, %1601
  %1603 = add i32 %1598, %1602
  %1604 = add i32 %1587, %1453
  store i32 %1604, i32* %139, align 4
  %1605 = add i32 %1603, %1587
  store i32 %1605, i32* %164, align 4
  %1606 = lshr i32 %1604, 6
  %1607 = shl i32 %1604, 26
  %1608 = or i32 %1607, %1606
  %1609 = lshr i32 %1604, 11
  %1610 = shl i32 %1604, 21
  %1611 = or i32 %1610, %1609
  %1612 = xor i32 %1608, %1611
  %1613 = lshr i32 %1604, 25
  %1614 = shl i32 %1604, 7
  %1615 = or i32 %1614, %1613
  %1616 = xor i32 %1612, %1615
  %1617 = xor i32 %1566, %1528
  %1618 = and i32 %1604, %1617
  %1619 = xor i32 %1618, %1528
  %1620 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 39
  %1621 = load i32, i32* %1620, align 4
  %1622 = add i32 %1621, -1838011259
  %1623 = add i32 %1622, %1490
  %1624 = add i32 %1623, %1619
  %1625 = add i32 %1624, %1616
  %1626 = lshr i32 %1605, 2
  %1627 = shl i32 %1605, 30
  %1628 = or i32 %1627, %1626
  %1629 = lshr i32 %1605, 13
  %1630 = shl i32 %1605, 19
  %1631 = or i32 %1630, %1629
  %1632 = xor i32 %1628, %1631
  %1633 = lshr i32 %1605, 22
  %1634 = shl i32 %1605, 10
  %1635 = or i32 %1634, %1633
  %1636 = xor i32 %1632, %1635
  %1637 = or i32 %1605, %1567
  %1638 = and i32 %1637, %1529
  %1639 = and i32 %1605, %1567
  %1640 = or i32 %1638, %1639
  %1641 = add i32 %1636, %1640
  %1642 = add i32 %1625, %1491
  store i32 %1642, i32* %126, align 16
  %1643 = add i32 %1641, %1625
  store i32 %1643, i32* %151, align 16
  %1644 = lshr i32 %1642, 6
  %1645 = shl i32 %1642, 26
  %1646 = or i32 %1645, %1644
  %1647 = lshr i32 %1642, 11
  %1648 = shl i32 %1642, 21
  %1649 = or i32 %1648, %1647
  %1650 = xor i32 %1646, %1649
  %1651 = lshr i32 %1642, 25
  %1652 = shl i32 %1642, 7
  %1653 = or i32 %1652, %1651
  %1654 = xor i32 %1650, %1653
  %1655 = xor i32 %1604, %1566
  %1656 = and i32 %1642, %1655
  %1657 = xor i32 %1656, %1566
  %1658 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 40
  %1659 = load i32, i32* %1658, align 16
  %1660 = add i32 %1659, -1564481375
  %1661 = add i32 %1660, %1528
  %1662 = add i32 %1661, %1657
  %1663 = add i32 %1662, %1654
  %1664 = lshr i32 %1643, 2
  %1665 = shl i32 %1643, 30
  %1666 = or i32 %1665, %1664
  %1667 = lshr i32 %1643, 13
  %1668 = shl i32 %1643, 19
  %1669 = or i32 %1668, %1667
  %1670 = xor i32 %1666, %1669
  %1671 = lshr i32 %1643, 22
  %1672 = shl i32 %1643, 10
  %1673 = or i32 %1672, %1671
  %1674 = xor i32 %1670, %1673
  %1675 = or i32 %1643, %1605
  %1676 = and i32 %1675, %1567
  %1677 = and i32 %1643, %1605
  %1678 = or i32 %1676, %1677
  %1679 = add i32 %1674, %1678
  %1680 = add i32 %1663, %1529
  store i32 %1680, i32* %173, align 4
  %1681 = add i32 %1679, %1663
  store i32 %1681, i32* %124, align 4
  %1682 = lshr i32 %1680, 6
  %1683 = shl i32 %1680, 26
  %1684 = or i32 %1683, %1682
  %1685 = lshr i32 %1680, 11
  %1686 = shl i32 %1680, 21
  %1687 = or i32 %1686, %1685
  %1688 = xor i32 %1684, %1687
  %1689 = lshr i32 %1680, 25
  %1690 = shl i32 %1680, 7
  %1691 = or i32 %1690, %1689
  %1692 = xor i32 %1688, %1691
  %1693 = xor i32 %1642, %1604
  %1694 = and i32 %1680, %1693
  %1695 = xor i32 %1694, %1604
  %1696 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 41
  %1697 = load i32, i32* %1696, align 4
  %1698 = add i32 %1697, -1474664885
  %1699 = add i32 %1698, %1566
  %1700 = add i32 %1699, %1695
  %1701 = add i32 %1700, %1692
  %1702 = lshr i32 %1681, 2
  %1703 = shl i32 %1681, 30
  %1704 = or i32 %1703, %1702
  %1705 = lshr i32 %1681, 13
  %1706 = shl i32 %1681, 19
  %1707 = or i32 %1706, %1705
  %1708 = xor i32 %1704, %1707
  %1709 = lshr i32 %1681, 22
  %1710 = shl i32 %1681, 10
  %1711 = or i32 %1710, %1709
  %1712 = xor i32 %1708, %1711
  %1713 = or i32 %1681, %1643
  %1714 = and i32 %1713, %1605
  %1715 = and i32 %1681, %1643
  %1716 = or i32 %1714, %1715
  %1717 = add i32 %1712, %1716
  %1718 = add i32 %1701, %1567
  store i32 %1718, i32* %166, align 8
  %1719 = add i32 %1717, %1701
  store i32 %1719, i32* %141, align 8
  %1720 = lshr i32 %1718, 6
  %1721 = shl i32 %1718, 26
  %1722 = or i32 %1721, %1720
  %1723 = lshr i32 %1718, 11
  %1724 = shl i32 %1718, 21
  %1725 = or i32 %1724, %1723
  %1726 = xor i32 %1722, %1725
  %1727 = lshr i32 %1718, 25
  %1728 = shl i32 %1718, 7
  %1729 = or i32 %1728, %1727
  %1730 = xor i32 %1726, %1729
  %1731 = xor i32 %1680, %1642
  %1732 = and i32 %1718, %1731
  %1733 = xor i32 %1732, %1642
  %1734 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 42
  %1735 = load i32, i32* %1734, align 8
  %1736 = add i32 %1735, -1035236496
  %1737 = add i32 %1736, %1604
  %1738 = add i32 %1737, %1733
  %1739 = add i32 %1738, %1730
  %1740 = lshr i32 %1719, 2
  %1741 = shl i32 %1719, 30
  %1742 = or i32 %1741, %1740
  %1743 = lshr i32 %1719, 13
  %1744 = shl i32 %1719, 19
  %1745 = or i32 %1744, %1743
  %1746 = xor i32 %1742, %1745
  %1747 = lshr i32 %1719, 22
  %1748 = shl i32 %1719, 10
  %1749 = or i32 %1748, %1747
  %1750 = xor i32 %1746, %1749
  %1751 = or i32 %1719, %1681
  %1752 = and i32 %1751, %1643
  %1753 = and i32 %1719, %1681
  %1754 = or i32 %1752, %1753
  %1755 = add i32 %1750, %1754
  %1756 = add i32 %1739, %1605
  store i32 %1756, i32* %164, align 4
  %1757 = add i32 %1755, %1739
  store i32 %1757, i32* %139, align 4
  %1758 = lshr i32 %1756, 6
  %1759 = shl i32 %1756, 26
  %1760 = or i32 %1759, %1758
  %1761 = lshr i32 %1756, 11
  %1762 = shl i32 %1756, 21
  %1763 = or i32 %1762, %1761
  %1764 = xor i32 %1760, %1763
  %1765 = lshr i32 %1756, 25
  %1766 = shl i32 %1756, 7
  %1767 = or i32 %1766, %1765
  %1768 = xor i32 %1764, %1767
  %1769 = xor i32 %1718, %1680
  %1770 = and i32 %1756, %1769
  %1771 = xor i32 %1770, %1680
  %1772 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 43
  %1773 = load i32, i32* %1772, align 4
  %1774 = add i32 %1773, -949202525
  %1775 = add i32 %1774, %1642
  %1776 = add i32 %1775, %1771
  %1777 = add i32 %1776, %1768
  %1778 = lshr i32 %1757, 2
  %1779 = shl i32 %1757, 30
  %1780 = or i32 %1779, %1778
  %1781 = lshr i32 %1757, 13
  %1782 = shl i32 %1757, 19
  %1783 = or i32 %1782, %1781
  %1784 = xor i32 %1780, %1783
  %1785 = lshr i32 %1757, 22
  %1786 = shl i32 %1757, 10
  %1787 = or i32 %1786, %1785
  %1788 = xor i32 %1784, %1787
  %1789 = or i32 %1757, %1719
  %1790 = and i32 %1789, %1681
  %1791 = and i32 %1757, %1719
  %1792 = or i32 %1790, %1791
  %1793 = add i32 %1788, %1792
  %1794 = add i32 %1777, %1643
  store i32 %1794, i32* %151, align 16
  %1795 = add i32 %1793, %1777
  store i32 %1795, i32* %126, align 16
  %1796 = lshr i32 %1794, 6
  %1797 = shl i32 %1794, 26
  %1798 = or i32 %1797, %1796
  %1799 = lshr i32 %1794, 11
  %1800 = shl i32 %1794, 21
  %1801 = or i32 %1800, %1799
  %1802 = xor i32 %1798, %1801
  %1803 = lshr i32 %1794, 25
  %1804 = shl i32 %1794, 7
  %1805 = or i32 %1804, %1803
  %1806 = xor i32 %1802, %1805
  %1807 = xor i32 %1756, %1718
  %1808 = and i32 %1794, %1807
  %1809 = xor i32 %1808, %1718
  %1810 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 44
  %1811 = load i32, i32* %1810, align 16
  %1812 = add i32 %1811, -778901479
  %1813 = add i32 %1812, %1680
  %1814 = add i32 %1813, %1809
  %1815 = add i32 %1814, %1806
  %1816 = lshr i32 %1795, 2
  %1817 = shl i32 %1795, 30
  %1818 = or i32 %1817, %1816
  %1819 = lshr i32 %1795, 13
  %1820 = shl i32 %1795, 19
  %1821 = or i32 %1820, %1819
  %1822 = xor i32 %1818, %1821
  %1823 = lshr i32 %1795, 22
  %1824 = shl i32 %1795, 10
  %1825 = or i32 %1824, %1823
  %1826 = xor i32 %1822, %1825
  %1827 = or i32 %1795, %1757
  %1828 = and i32 %1827, %1719
  %1829 = and i32 %1795, %1757
  %1830 = or i32 %1828, %1829
  %1831 = add i32 %1826, %1830
  %1832 = add i32 %1815, %1681
  store i32 %1832, i32* %124, align 4
  %1833 = add i32 %1831, %1815
  store i32 %1833, i32* %173, align 4
  %1834 = lshr i32 %1832, 6
  %1835 = shl i32 %1832, 26
  %1836 = or i32 %1835, %1834
  %1837 = lshr i32 %1832, 11
  %1838 = shl i32 %1832, 21
  %1839 = or i32 %1838, %1837
  %1840 = xor i32 %1836, %1839
  %1841 = lshr i32 %1832, 25
  %1842 = shl i32 %1832, 7
  %1843 = or i32 %1842, %1841
  %1844 = xor i32 %1840, %1843
  %1845 = xor i32 %1794, %1756
  %1846 = and i32 %1832, %1845
  %1847 = xor i32 %1846, %1756
  %1848 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 45
  %1849 = load i32, i32* %1848, align 4
  %1850 = add i32 %1849, -694614492
  %1851 = add i32 %1850, %1718
  %1852 = add i32 %1851, %1847
  %1853 = add i32 %1852, %1844
  %1854 = lshr i32 %1833, 2
  %1855 = shl i32 %1833, 30
  %1856 = or i32 %1855, %1854
  %1857 = lshr i32 %1833, 13
  %1858 = shl i32 %1833, 19
  %1859 = or i32 %1858, %1857
  %1860 = xor i32 %1856, %1859
  %1861 = lshr i32 %1833, 22
  %1862 = shl i32 %1833, 10
  %1863 = or i32 %1862, %1861
  %1864 = xor i32 %1860, %1863
  %1865 = or i32 %1833, %1795
  %1866 = and i32 %1865, %1757
  %1867 = and i32 %1833, %1795
  %1868 = or i32 %1866, %1867
  %1869 = add i32 %1864, %1868
  %1870 = add i32 %1853, %1719
  store i32 %1870, i32* %141, align 8
  %1871 = add i32 %1869, %1853
  store i32 %1871, i32* %166, align 8
  %1872 = lshr i32 %1870, 6
  %1873 = shl i32 %1870, 26
  %1874 = or i32 %1873, %1872
  %1875 = lshr i32 %1870, 11
  %1876 = shl i32 %1870, 21
  %1877 = or i32 %1876, %1875
  %1878 = xor i32 %1874, %1877
  %1879 = lshr i32 %1870, 25
  %1880 = shl i32 %1870, 7
  %1881 = or i32 %1880, %1879
  %1882 = xor i32 %1878, %1881
  %1883 = xor i32 %1832, %1794
  %1884 = and i32 %1870, %1883
  %1885 = xor i32 %1884, %1794
  %1886 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 46
  %1887 = load i32, i32* %1886, align 8
  %1888 = add i32 %1887, -200395387
  %1889 = add i32 %1888, %1756
  %1890 = add i32 %1889, %1885
  %1891 = add i32 %1890, %1882
  %1892 = lshr i32 %1871, 2
  %1893 = shl i32 %1871, 30
  %1894 = or i32 %1893, %1892
  %1895 = lshr i32 %1871, 13
  %1896 = shl i32 %1871, 19
  %1897 = or i32 %1896, %1895
  %1898 = xor i32 %1894, %1897
  %1899 = lshr i32 %1871, 22
  %1900 = shl i32 %1871, 10
  %1901 = or i32 %1900, %1899
  %1902 = xor i32 %1898, %1901
  %1903 = or i32 %1871, %1833
  %1904 = and i32 %1903, %1795
  %1905 = and i32 %1871, %1833
  %1906 = or i32 %1904, %1905
  %1907 = add i32 %1902, %1906
  %1908 = add i32 %1891, %1757
  store i32 %1908, i32* %139, align 4
  %1909 = add i32 %1907, %1891
  store i32 %1909, i32* %164, align 4
  %1910 = lshr i32 %1908, 6
  %1911 = shl i32 %1908, 26
  %1912 = or i32 %1911, %1910
  %1913 = lshr i32 %1908, 11
  %1914 = shl i32 %1908, 21
  %1915 = or i32 %1914, %1913
  %1916 = xor i32 %1912, %1915
  %1917 = lshr i32 %1908, 25
  %1918 = shl i32 %1908, 7
  %1919 = or i32 %1918, %1917
  %1920 = xor i32 %1916, %1919
  %1921 = xor i32 %1870, %1832
  %1922 = and i32 %1908, %1921
  %1923 = xor i32 %1922, %1832
  %1924 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 47
  %1925 = load i32, i32* %1924, align 4
  %1926 = add i32 %1925, 275423344
  %1927 = add i32 %1926, %1794
  %1928 = add i32 %1927, %1923
  %1929 = add i32 %1928, %1920
  %1930 = lshr i32 %1909, 2
  %1931 = shl i32 %1909, 30
  %1932 = or i32 %1931, %1930
  %1933 = lshr i32 %1909, 13
  %1934 = shl i32 %1909, 19
  %1935 = or i32 %1934, %1933
  %1936 = xor i32 %1932, %1935
  %1937 = lshr i32 %1909, 22
  %1938 = shl i32 %1909, 10
  %1939 = or i32 %1938, %1937
  %1940 = xor i32 %1936, %1939
  %1941 = or i32 %1909, %1871
  %1942 = and i32 %1941, %1833
  %1943 = and i32 %1909, %1871
  %1944 = or i32 %1942, %1943
  %1945 = add i32 %1940, %1944
  %1946 = add i32 %1929, %1795
  store i32 %1946, i32* %126, align 16
  %1947 = add i32 %1945, %1929
  store i32 %1947, i32* %151, align 16
  %1948 = lshr i32 %1946, 6
  %1949 = shl i32 %1946, 26
  %1950 = or i32 %1949, %1948
  %1951 = lshr i32 %1946, 11
  %1952 = shl i32 %1946, 21
  %1953 = or i32 %1952, %1951
  %1954 = xor i32 %1950, %1953
  %1955 = lshr i32 %1946, 25
  %1956 = shl i32 %1946, 7
  %1957 = or i32 %1956, %1955
  %1958 = xor i32 %1954, %1957
  %1959 = xor i32 %1908, %1870
  %1960 = and i32 %1946, %1959
  %1961 = xor i32 %1960, %1870
  %1962 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 48
  %1963 = load i32, i32* %1962, align 16
  %1964 = add i32 %1963, 430227734
  %1965 = add i32 %1964, %1832
  %1966 = add i32 %1965, %1961
  %1967 = add i32 %1966, %1958
  %1968 = lshr i32 %1947, 2
  %1969 = shl i32 %1947, 30
  %1970 = or i32 %1969, %1968
  %1971 = lshr i32 %1947, 13
  %1972 = shl i32 %1947, 19
  %1973 = or i32 %1972, %1971
  %1974 = xor i32 %1970, %1973
  %1975 = lshr i32 %1947, 22
  %1976 = shl i32 %1947, 10
  %1977 = or i32 %1976, %1975
  %1978 = xor i32 %1974, %1977
  %1979 = or i32 %1947, %1909
  %1980 = and i32 %1979, %1871
  %1981 = and i32 %1947, %1909
  %1982 = or i32 %1980, %1981
  %1983 = add i32 %1978, %1982
  %1984 = add i32 %1967, %1833
  store i32 %1984, i32* %173, align 4
  %1985 = add i32 %1983, %1967
  store i32 %1985, i32* %124, align 4
  %1986 = lshr i32 %1984, 6
  %1987 = shl i32 %1984, 26
  %1988 = or i32 %1987, %1986
  %1989 = lshr i32 %1984, 11
  %1990 = shl i32 %1984, 21
  %1991 = or i32 %1990, %1989
  %1992 = xor i32 %1988, %1991
  %1993 = lshr i32 %1984, 25
  %1994 = shl i32 %1984, 7
  %1995 = or i32 %1994, %1993
  %1996 = xor i32 %1992, %1995
  %1997 = xor i32 %1946, %1908
  %1998 = and i32 %1984, %1997
  %1999 = xor i32 %1998, %1908
  %2000 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 49
  %2001 = load i32, i32* %2000, align 4
  %2002 = add i32 %2001, 506948616
  %2003 = add i32 %2002, %1870
  %2004 = add i32 %2003, %1999
  %2005 = add i32 %2004, %1996
  %2006 = lshr i32 %1985, 2
  %2007 = shl i32 %1985, 30
  %2008 = or i32 %2007, %2006
  %2009 = lshr i32 %1985, 13
  %2010 = shl i32 %1985, 19
  %2011 = or i32 %2010, %2009
  %2012 = xor i32 %2008, %2011
  %2013 = lshr i32 %1985, 22
  %2014 = shl i32 %1985, 10
  %2015 = or i32 %2014, %2013
  %2016 = xor i32 %2012, %2015
  %2017 = or i32 %1985, %1947
  %2018 = and i32 %2017, %1909
  %2019 = and i32 %1985, %1947
  %2020 = or i32 %2018, %2019
  %2021 = add i32 %2016, %2020
  %2022 = add i32 %2005, %1871
  store i32 %2022, i32* %166, align 8
  %2023 = add i32 %2021, %2005
  store i32 %2023, i32* %141, align 8
  %2024 = lshr i32 %2022, 6
  %2025 = shl i32 %2022, 26
  %2026 = or i32 %2025, %2024
  %2027 = lshr i32 %2022, 11
  %2028 = shl i32 %2022, 21
  %2029 = or i32 %2028, %2027
  %2030 = xor i32 %2026, %2029
  %2031 = lshr i32 %2022, 25
  %2032 = shl i32 %2022, 7
  %2033 = or i32 %2032, %2031
  %2034 = xor i32 %2030, %2033
  %2035 = xor i32 %1984, %1946
  %2036 = and i32 %2022, %2035
  %2037 = xor i32 %2036, %1946
  %2038 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 50
  %2039 = load i32, i32* %2038, align 8
  %2040 = add i32 %2039, 659060556
  %2041 = add i32 %2040, %1908
  %2042 = add i32 %2041, %2037
  %2043 = add i32 %2042, %2034
  %2044 = lshr i32 %2023, 2
  %2045 = shl i32 %2023, 30
  %2046 = or i32 %2045, %2044
  %2047 = lshr i32 %2023, 13
  %2048 = shl i32 %2023, 19
  %2049 = or i32 %2048, %2047
  %2050 = xor i32 %2046, %2049
  %2051 = lshr i32 %2023, 22
  %2052 = shl i32 %2023, 10
  %2053 = or i32 %2052, %2051
  %2054 = xor i32 %2050, %2053
  %2055 = or i32 %2023, %1985
  %2056 = and i32 %2055, %1947
  %2057 = and i32 %2023, %1985
  %2058 = or i32 %2056, %2057
  %2059 = add i32 %2054, %2058
  %2060 = add i32 %2043, %1909
  store i32 %2060, i32* %164, align 4
  %2061 = add i32 %2059, %2043
  store i32 %2061, i32* %139, align 4
  %2062 = lshr i32 %2060, 6
  %2063 = shl i32 %2060, 26
  %2064 = or i32 %2063, %2062
  %2065 = lshr i32 %2060, 11
  %2066 = shl i32 %2060, 21
  %2067 = or i32 %2066, %2065
  %2068 = xor i32 %2064, %2067
  %2069 = lshr i32 %2060, 25
  %2070 = shl i32 %2060, 7
  %2071 = or i32 %2070, %2069
  %2072 = xor i32 %2068, %2071
  %2073 = xor i32 %2022, %1984
  %2074 = and i32 %2060, %2073
  %2075 = xor i32 %2074, %1984
  %2076 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 51
  %2077 = load i32, i32* %2076, align 4
  %2078 = add i32 %2077, 883997877
  %2079 = add i32 %2078, %1946
  %2080 = add i32 %2079, %2075
  %2081 = add i32 %2080, %2072
  %2082 = lshr i32 %2061, 2
  %2083 = shl i32 %2061, 30
  %2084 = or i32 %2083, %2082
  %2085 = lshr i32 %2061, 13
  %2086 = shl i32 %2061, 19
  %2087 = or i32 %2086, %2085
  %2088 = xor i32 %2084, %2087
  %2089 = lshr i32 %2061, 22
  %2090 = shl i32 %2061, 10
  %2091 = or i32 %2090, %2089
  %2092 = xor i32 %2088, %2091
  %2093 = or i32 %2061, %2023
  %2094 = and i32 %2093, %1985
  %2095 = and i32 %2061, %2023
  %2096 = or i32 %2094, %2095
  %2097 = add i32 %2092, %2096
  %2098 = add i32 %2081, %1947
  store i32 %2098, i32* %151, align 16
  %2099 = add i32 %2097, %2081
  store i32 %2099, i32* %126, align 16
  %2100 = lshr i32 %2098, 6
  %2101 = shl i32 %2098, 26
  %2102 = or i32 %2101, %2100
  %2103 = lshr i32 %2098, 11
  %2104 = shl i32 %2098, 21
  %2105 = or i32 %2104, %2103
  %2106 = xor i32 %2102, %2105
  %2107 = lshr i32 %2098, 25
  %2108 = shl i32 %2098, 7
  %2109 = or i32 %2108, %2107
  %2110 = xor i32 %2106, %2109
  %2111 = xor i32 %2060, %2022
  %2112 = and i32 %2098, %2111
  %2113 = xor i32 %2112, %2022
  %2114 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 52
  %2115 = load i32, i32* %2114, align 16
  %2116 = add i32 %2115, 958139571
  %2117 = add i32 %2116, %1984
  %2118 = add i32 %2117, %2113
  %2119 = add i32 %2118, %2110
  %2120 = lshr i32 %2099, 2
  %2121 = shl i32 %2099, 30
  %2122 = or i32 %2121, %2120
  %2123 = lshr i32 %2099, 13
  %2124 = shl i32 %2099, 19
  %2125 = or i32 %2124, %2123
  %2126 = xor i32 %2122, %2125
  %2127 = lshr i32 %2099, 22
  %2128 = shl i32 %2099, 10
  %2129 = or i32 %2128, %2127
  %2130 = xor i32 %2126, %2129
  %2131 = or i32 %2099, %2061
  %2132 = and i32 %2131, %2023
  %2133 = and i32 %2099, %2061
  %2134 = or i32 %2132, %2133
  %2135 = add i32 %2130, %2134
  %2136 = add i32 %2119, %1985
  store i32 %2136, i32* %124, align 4
  %2137 = add i32 %2135, %2119
  store i32 %2137, i32* %173, align 4
  %2138 = lshr i32 %2136, 6
  %2139 = shl i32 %2136, 26
  %2140 = or i32 %2139, %2138
  %2141 = lshr i32 %2136, 11
  %2142 = shl i32 %2136, 21
  %2143 = or i32 %2142, %2141
  %2144 = xor i32 %2140, %2143
  %2145 = lshr i32 %2136, 25
  %2146 = shl i32 %2136, 7
  %2147 = or i32 %2146, %2145
  %2148 = xor i32 %2144, %2147
  %2149 = xor i32 %2098, %2060
  %2150 = and i32 %2136, %2149
  %2151 = xor i32 %2150, %2060
  %2152 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 53
  %2153 = load i32, i32* %2152, align 4
  %2154 = add i32 %2153, 1322822218
  %2155 = add i32 %2154, %2022
  %2156 = add i32 %2155, %2151
  %2157 = add i32 %2156, %2148
  %2158 = lshr i32 %2137, 2
  %2159 = shl i32 %2137, 30
  %2160 = or i32 %2159, %2158
  %2161 = lshr i32 %2137, 13
  %2162 = shl i32 %2137, 19
  %2163 = or i32 %2162, %2161
  %2164 = xor i32 %2160, %2163
  %2165 = lshr i32 %2137, 22
  %2166 = shl i32 %2137, 10
  %2167 = or i32 %2166, %2165
  %2168 = xor i32 %2164, %2167
  %2169 = or i32 %2137, %2099
  %2170 = and i32 %2169, %2061
  %2171 = and i32 %2137, %2099
  %2172 = or i32 %2170, %2171
  %2173 = add i32 %2168, %2172
  %2174 = add i32 %2157, %2023
  store i32 %2174, i32* %141, align 8
  %2175 = add i32 %2173, %2157
  store i32 %2175, i32* %166, align 8
  %2176 = lshr i32 %2174, 6
  %2177 = shl i32 %2174, 26
  %2178 = or i32 %2177, %2176
  %2179 = lshr i32 %2174, 11
  %2180 = shl i32 %2174, 21
  %2181 = or i32 %2180, %2179
  %2182 = xor i32 %2178, %2181
  %2183 = lshr i32 %2174, 25
  %2184 = shl i32 %2174, 7
  %2185 = or i32 %2184, %2183
  %2186 = xor i32 %2182, %2185
  %2187 = xor i32 %2136, %2098
  %2188 = and i32 %2174, %2187
  %2189 = xor i32 %2188, %2098
  %2190 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 54
  %2191 = load i32, i32* %2190, align 8
  %2192 = add i32 %2191, 1537002063
  %2193 = add i32 %2192, %2060
  %2194 = add i32 %2193, %2189
  %2195 = add i32 %2194, %2186
  %2196 = lshr i32 %2175, 2
  %2197 = shl i32 %2175, 30
  %2198 = or i32 %2197, %2196
  %2199 = lshr i32 %2175, 13
  %2200 = shl i32 %2175, 19
  %2201 = or i32 %2200, %2199
  %2202 = xor i32 %2198, %2201
  %2203 = lshr i32 %2175, 22
  %2204 = shl i32 %2175, 10
  %2205 = or i32 %2204, %2203
  %2206 = xor i32 %2202, %2205
  %2207 = or i32 %2175, %2137
  %2208 = and i32 %2207, %2099
  %2209 = and i32 %2175, %2137
  %2210 = or i32 %2208, %2209
  %2211 = add i32 %2206, %2210
  %2212 = add i32 %2195, %2061
  store i32 %2212, i32* %139, align 4
  %2213 = add i32 %2211, %2195
  store i32 %2213, i32* %164, align 4
  %2214 = lshr i32 %2212, 6
  %2215 = shl i32 %2212, 26
  %2216 = or i32 %2215, %2214
  %2217 = lshr i32 %2212, 11
  %2218 = shl i32 %2212, 21
  %2219 = or i32 %2218, %2217
  %2220 = xor i32 %2216, %2219
  %2221 = lshr i32 %2212, 25
  %2222 = shl i32 %2212, 7
  %2223 = or i32 %2222, %2221
  %2224 = xor i32 %2220, %2223
  %2225 = xor i32 %2174, %2136
  %2226 = and i32 %2212, %2225
  %2227 = xor i32 %2226, %2136
  %2228 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 55
  %2229 = load i32, i32* %2228, align 4
  %2230 = add i32 %2229, 1747873779
  %2231 = add i32 %2230, %2098
  %2232 = add i32 %2231, %2227
  %2233 = add i32 %2232, %2224
  %2234 = lshr i32 %2213, 2
  %2235 = shl i32 %2213, 30
  %2236 = or i32 %2235, %2234
  %2237 = lshr i32 %2213, 13
  %2238 = shl i32 %2213, 19
  %2239 = or i32 %2238, %2237
  %2240 = xor i32 %2236, %2239
  %2241 = lshr i32 %2213, 22
  %2242 = shl i32 %2213, 10
  %2243 = or i32 %2242, %2241
  %2244 = xor i32 %2240, %2243
  %2245 = or i32 %2213, %2175
  %2246 = and i32 %2245, %2137
  %2247 = and i32 %2213, %2175
  %2248 = or i32 %2246, %2247
  %2249 = add i32 %2244, %2248
  %2250 = add i32 %2233, %2099
  store i32 %2250, i32* %126, align 16
  %2251 = add i32 %2249, %2233
  store i32 %2251, i32* %151, align 16
  %2252 = lshr i32 %2250, 6
  %2253 = shl i32 %2250, 26
  %2254 = or i32 %2253, %2252
  %2255 = lshr i32 %2250, 11
  %2256 = shl i32 %2250, 21
  %2257 = or i32 %2256, %2255
  %2258 = xor i32 %2254, %2257
  %2259 = lshr i32 %2250, 25
  %2260 = shl i32 %2250, 7
  %2261 = or i32 %2260, %2259
  %2262 = xor i32 %2258, %2261
  %2263 = xor i32 %2212, %2174
  %2264 = and i32 %2250, %2263
  %2265 = xor i32 %2264, %2174
  %2266 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 56
  %2267 = load i32, i32* %2266, align 16
  %2268 = add i32 %2267, 1955562222
  %2269 = add i32 %2268, %2136
  %2270 = add i32 %2269, %2265
  %2271 = add i32 %2270, %2262
  %2272 = lshr i32 %2251, 2
  %2273 = shl i32 %2251, 30
  %2274 = or i32 %2273, %2272
  %2275 = lshr i32 %2251, 13
  %2276 = shl i32 %2251, 19
  %2277 = or i32 %2276, %2275
  %2278 = xor i32 %2274, %2277
  %2279 = lshr i32 %2251, 22
  %2280 = shl i32 %2251, 10
  %2281 = or i32 %2280, %2279
  %2282 = xor i32 %2278, %2281
  %2283 = or i32 %2251, %2213
  %2284 = and i32 %2283, %2175
  %2285 = and i32 %2251, %2213
  %2286 = or i32 %2284, %2285
  %2287 = add i32 %2282, %2286
  %2288 = add i32 %2271, %2137
  store i32 %2288, i32* %173, align 4
  %2289 = add i32 %2287, %2271
  store i32 %2289, i32* %124, align 4
  %2290 = lshr i32 %2288, 6
  %2291 = shl i32 %2288, 26
  %2292 = or i32 %2291, %2290
  %2293 = lshr i32 %2288, 11
  %2294 = shl i32 %2288, 21
  %2295 = or i32 %2294, %2293
  %2296 = xor i32 %2292, %2295
  %2297 = lshr i32 %2288, 25
  %2298 = shl i32 %2288, 7
  %2299 = or i32 %2298, %2297
  %2300 = xor i32 %2296, %2299
  %2301 = xor i32 %2250, %2212
  %2302 = and i32 %2288, %2301
  %2303 = xor i32 %2302, %2212
  %2304 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 57
  %2305 = load i32, i32* %2304, align 4
  %2306 = add i32 %2305, 2024104815
  %2307 = add i32 %2306, %2174
  %2308 = add i32 %2307, %2303
  %2309 = add i32 %2308, %2300
  %2310 = lshr i32 %2289, 2
  %2311 = shl i32 %2289, 30
  %2312 = or i32 %2311, %2310
  %2313 = lshr i32 %2289, 13
  %2314 = shl i32 %2289, 19
  %2315 = or i32 %2314, %2313
  %2316 = xor i32 %2312, %2315
  %2317 = lshr i32 %2289, 22
  %2318 = shl i32 %2289, 10
  %2319 = or i32 %2318, %2317
  %2320 = xor i32 %2316, %2319
  %2321 = or i32 %2289, %2251
  %2322 = and i32 %2321, %2213
  %2323 = and i32 %2289, %2251
  %2324 = or i32 %2322, %2323
  %2325 = add i32 %2320, %2324
  %2326 = add i32 %2309, %2175
  store i32 %2326, i32* %166, align 8
  %2327 = add i32 %2325, %2309
  store i32 %2327, i32* %141, align 8
  %2328 = lshr i32 %2326, 6
  %2329 = shl i32 %2326, 26
  %2330 = or i32 %2329, %2328
  %2331 = lshr i32 %2326, 11
  %2332 = shl i32 %2326, 21
  %2333 = or i32 %2332, %2331
  %2334 = xor i32 %2330, %2333
  %2335 = lshr i32 %2326, 25
  %2336 = shl i32 %2326, 7
  %2337 = or i32 %2336, %2335
  %2338 = xor i32 %2334, %2337
  %2339 = xor i32 %2288, %2250
  %2340 = and i32 %2326, %2339
  %2341 = xor i32 %2340, %2250
  %2342 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 58
  %2343 = load i32, i32* %2342, align 8
  %2344 = add i32 %2343, -2067236844
  %2345 = add i32 %2344, %2212
  %2346 = add i32 %2345, %2341
  %2347 = add i32 %2346, %2338
  %2348 = lshr i32 %2327, 2
  %2349 = shl i32 %2327, 30
  %2350 = or i32 %2349, %2348
  %2351 = lshr i32 %2327, 13
  %2352 = shl i32 %2327, 19
  %2353 = or i32 %2352, %2351
  %2354 = xor i32 %2350, %2353
  %2355 = lshr i32 %2327, 22
  %2356 = shl i32 %2327, 10
  %2357 = or i32 %2356, %2355
  %2358 = xor i32 %2354, %2357
  %2359 = or i32 %2327, %2289
  %2360 = and i32 %2359, %2251
  %2361 = and i32 %2327, %2289
  %2362 = or i32 %2360, %2361
  %2363 = add i32 %2358, %2362
  %2364 = add i32 %2347, %2213
  store i32 %2364, i32* %164, align 4
  %2365 = add i32 %2363, %2347
  store i32 %2365, i32* %139, align 4
  %2366 = lshr i32 %2364, 6
  %2367 = shl i32 %2364, 26
  %2368 = or i32 %2367, %2366
  %2369 = lshr i32 %2364, 11
  %2370 = shl i32 %2364, 21
  %2371 = or i32 %2370, %2369
  %2372 = xor i32 %2368, %2371
  %2373 = lshr i32 %2364, 25
  %2374 = shl i32 %2364, 7
  %2375 = or i32 %2374, %2373
  %2376 = xor i32 %2372, %2375
  %2377 = xor i32 %2326, %2288
  %2378 = and i32 %2364, %2377
  %2379 = xor i32 %2378, %2288
  %2380 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 59
  %2381 = load i32, i32* %2380, align 4
  %2382 = add i32 %2381, -1933114872
  %2383 = add i32 %2382, %2250
  %2384 = add i32 %2383, %2379
  %2385 = add i32 %2384, %2376
  %2386 = lshr i32 %2365, 2
  %2387 = shl i32 %2365, 30
  %2388 = or i32 %2387, %2386
  %2389 = lshr i32 %2365, 13
  %2390 = shl i32 %2365, 19
  %2391 = or i32 %2390, %2389
  %2392 = xor i32 %2388, %2391
  %2393 = lshr i32 %2365, 22
  %2394 = shl i32 %2365, 10
  %2395 = or i32 %2394, %2393
  %2396 = xor i32 %2392, %2395
  %2397 = or i32 %2365, %2327
  %2398 = and i32 %2397, %2289
  %2399 = and i32 %2365, %2327
  %2400 = or i32 %2398, %2399
  %2401 = add i32 %2396, %2400
  %2402 = add i32 %2385, %2251
  store i32 %2402, i32* %151, align 16
  %2403 = add i32 %2401, %2385
  store i32 %2403, i32* %126, align 16
  %2404 = lshr i32 %2402, 6
  %2405 = shl i32 %2402, 26
  %2406 = or i32 %2405, %2404
  %2407 = lshr i32 %2402, 11
  %2408 = shl i32 %2402, 21
  %2409 = or i32 %2408, %2407
  %2410 = xor i32 %2406, %2409
  %2411 = lshr i32 %2402, 25
  %2412 = shl i32 %2402, 7
  %2413 = or i32 %2412, %2411
  %2414 = xor i32 %2410, %2413
  %2415 = xor i32 %2364, %2326
  %2416 = and i32 %2402, %2415
  %2417 = xor i32 %2416, %2326
  %2418 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 60
  %2419 = load i32, i32* %2418, align 16
  %2420 = add i32 %2419, -1866530822
  %2421 = add i32 %2420, %2288
  %2422 = add i32 %2421, %2417
  %2423 = add i32 %2422, %2414
  %2424 = lshr i32 %2403, 2
  %2425 = shl i32 %2403, 30
  %2426 = or i32 %2425, %2424
  %2427 = lshr i32 %2403, 13
  %2428 = shl i32 %2403, 19
  %2429 = or i32 %2428, %2427
  %2430 = xor i32 %2426, %2429
  %2431 = lshr i32 %2403, 22
  %2432 = shl i32 %2403, 10
  %2433 = or i32 %2432, %2431
  %2434 = xor i32 %2430, %2433
  %2435 = or i32 %2403, %2365
  %2436 = and i32 %2435, %2327
  %2437 = and i32 %2403, %2365
  %2438 = or i32 %2436, %2437
  %2439 = add i32 %2434, %2438
  %2440 = add i32 %2423, %2289
  store i32 %2440, i32* %124, align 4
  %2441 = add i32 %2439, %2423
  store i32 %2441, i32* %173, align 4
  %2442 = lshr i32 %2440, 6
  %2443 = shl i32 %2440, 26
  %2444 = or i32 %2443, %2442
  %2445 = lshr i32 %2440, 11
  %2446 = shl i32 %2440, 21
  %2447 = or i32 %2446, %2445
  %2448 = xor i32 %2444, %2447
  %2449 = lshr i32 %2440, 25
  %2450 = shl i32 %2440, 7
  %2451 = or i32 %2450, %2449
  %2452 = xor i32 %2448, %2451
  %2453 = xor i32 %2402, %2364
  %2454 = and i32 %2440, %2453
  %2455 = xor i32 %2454, %2364
  %2456 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 61
  %2457 = load i32, i32* %2456, align 4
  %2458 = add i32 %2457, -1538233109
  %2459 = add i32 %2458, %2326
  %2460 = add i32 %2459, %2455
  %2461 = add i32 %2460, %2452
  %2462 = lshr i32 %2441, 2
  %2463 = shl i32 %2441, 30
  %2464 = or i32 %2463, %2462
  %2465 = lshr i32 %2441, 13
  %2466 = shl i32 %2441, 19
  %2467 = or i32 %2466, %2465
  %2468 = xor i32 %2464, %2467
  %2469 = lshr i32 %2441, 22
  %2470 = shl i32 %2441, 10
  %2471 = or i32 %2470, %2469
  %2472 = xor i32 %2468, %2471
  %2473 = or i32 %2441, %2403
  %2474 = and i32 %2473, %2365
  %2475 = and i32 %2441, %2403
  %2476 = or i32 %2474, %2475
  %2477 = add i32 %2472, %2476
  %2478 = add i32 %2461, %2327
  store i32 %2478, i32* %141, align 8
  %2479 = add i32 %2477, %2461
  store i32 %2479, i32* %166, align 8
  %2480 = lshr i32 %2478, 6
  %2481 = shl i32 %2478, 26
  %2482 = or i32 %2481, %2480
  %2483 = lshr i32 %2478, 11
  %2484 = shl i32 %2478, 21
  %2485 = or i32 %2484, %2483
  %2486 = xor i32 %2482, %2485
  %2487 = lshr i32 %2478, 25
  %2488 = shl i32 %2478, 7
  %2489 = or i32 %2488, %2487
  %2490 = xor i32 %2486, %2489
  %2491 = xor i32 %2440, %2402
  %2492 = and i32 %2478, %2491
  %2493 = xor i32 %2492, %2402
  %2494 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 62
  %2495 = load i32, i32* %2494, align 8
  %2496 = add i32 %2495, -1090935817
  %2497 = add i32 %2496, %2364
  %2498 = add i32 %2497, %2493
  %2499 = add i32 %2498, %2490
  %2500 = lshr i32 %2479, 2
  %2501 = shl i32 %2479, 30
  %2502 = or i32 %2501, %2500
  %2503 = lshr i32 %2479, 13
  %2504 = shl i32 %2479, 19
  %2505 = or i32 %2504, %2503
  %2506 = xor i32 %2502, %2505
  %2507 = lshr i32 %2479, 22
  %2508 = shl i32 %2479, 10
  %2509 = or i32 %2508, %2507
  %2510 = xor i32 %2506, %2509
  %2511 = or i32 %2479, %2441
  %2512 = and i32 %2511, %2403
  %2513 = and i32 %2479, %2441
  %2514 = or i32 %2512, %2513
  %2515 = add i32 %2510, %2514
  %2516 = add i32 %2499, %2365
  store i32 %2516, i32* %139, align 4
  %2517 = add i32 %2515, %2499
  store i32 %2517, i32* %164, align 4
  %2518 = lshr i32 %2516, 6
  %2519 = shl i32 %2516, 26
  %2520 = or i32 %2519, %2518
  %2521 = lshr i32 %2516, 11
  %2522 = shl i32 %2516, 21
  %2523 = or i32 %2522, %2521
  %2524 = xor i32 %2520, %2523
  %2525 = lshr i32 %2516, 25
  %2526 = shl i32 %2516, 7
  %2527 = or i32 %2526, %2525
  %2528 = xor i32 %2524, %2527
  %2529 = xor i32 %2478, %2440
  %2530 = and i32 %2516, %2529
  %2531 = xor i32 %2530, %2440
  %2532 = getelementptr inbounds [64 x i32], [64 x i32]* %6, i64 0, i64 63
  %2533 = load i32, i32* %2532, align 4
  %2534 = add i32 %2533, -965641998
  %2535 = add i32 %2534, %2402
  %2536 = add i32 %2535, %2531
  %2537 = add i32 %2536, %2528
  %2538 = lshr i32 %2517, 2
  %2539 = shl i32 %2517, 30
  %2540 = or i32 %2539, %2538
  %2541 = lshr i32 %2517, 13
  %2542 = shl i32 %2517, 19
  %2543 = or i32 %2542, %2541
  %2544 = xor i32 %2540, %2543
  %2545 = lshr i32 %2517, 22
  %2546 = shl i32 %2517, 10
  %2547 = or i32 %2546, %2545
  %2548 = xor i32 %2544, %2547
  %2549 = or i32 %2517, %2479
  %2550 = and i32 %2549, %2441
  %2551 = and i32 %2517, %2479
  %2552 = or i32 %2550, %2551
  %2553 = add i32 %2548, %2552
  %2554 = add i32 %2537, %2403
  store i32 %2554, i32* %126, align 16
  %2555 = add i32 %2553, %2537
  store i32 %2555, i32* %151, align 16
  %2556 = load i32, i32* %173, align 4
  %2557 = bitcast %0* %0 to <4 x i32>*
  %2558 = load <4 x i32>, <4 x i32>* %2557, align 4
  %2559 = insertelement <4 x i32> undef, i32 %2555, i32 0
  %2560 = insertelement <4 x i32> %2559, i32 %2517, i32 1
  %2561 = insertelement <4 x i32> %2560, i32 %2479, i32 2
  %2562 = insertelement <4 x i32> %2561, i32 %2556, i32 3
  %2563 = add <4 x i32> %2558, %2562
  %2564 = bitcast %0* %0 to <4 x i32>*
  store <4 x i32> %2563, <4 x i32>* %2564, align 4
  %2565 = getelementptr inbounds %0, %0* %0, i64 0, i32 0, i64 4
  %2566 = load i32, i32* %141, align 8
  %2567 = load i32, i32* %124, align 4
  %2568 = bitcast i32* %2565 to <4 x i32>*
  %2569 = load <4 x i32>, <4 x i32>* %2568, align 4
  %2570 = insertelement <4 x i32> undef, i32 %2554, i32 0
  %2571 = insertelement <4 x i32> %2570, i32 %2516, i32 1
  %2572 = insertelement <4 x i32> %2571, i32 %2566, i32 2
  %2573 = insertelement <4 x i32> %2572, i32 %2567, i32 3
  %2574 = add <4 x i32> %2569, %2573
  %2575 = bitcast i32* %2565 to <4 x i32>*
  store <4 x i32> %2574, <4 x i32>* %2575, align 4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %7) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #3
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @blk_SHA256_Final(i8* nocapture %0, %0* nocapture %1) local_unnamed_addr #1 {
  %3 = alloca [2 x i32], align 4
  %4 = bitcast [2 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #3
  %5 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %6, 29
  %8 = trunc i64 %7 to i32
  %9 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %8) #4
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  store i32 %9, i32* %10, align 4
  %11 = trunc i64 %6 to i32
  %12 = shl i32 %11, 3
  %13 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %12) #4
  %14 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  store i32 %13, i32* %14, align 4
  %15 = sub i64 55, %6
  %16 = and i64 %15, 63
  %17 = add nuw nsw i64 %16, 1
  %18 = and i32 %11, 63
  %19 = add i64 %17, %6
  store i64 %19, i64* %5, align 8
  %20 = icmp eq i32 %18, 0
  br i1 %20, label %37, label %21

21:                                               ; preds = %2
  %22 = sub nsw i32 64, %18
  %23 = zext i32 %22 to i64
  %24 = icmp ult i64 %17, %23
  %25 = trunc i64 %17 to i32
  %26 = select i1 %24, i32 %25, i32 %22
  %27 = zext i32 %18 to i64
  %28 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 %27
  %29 = zext i32 %26 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 16 getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @0, i64 0, i32 0), i64 %29, i1 false) #3
  %30 = add i32 %26, %11
  %31 = and i32 %30, 63
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %60

33:                                               ; preds = %21
  %34 = getelementptr inbounds i8, i8* getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @0, i64 0, i32 0), i64 %29
  %35 = sub nsw i64 %17, %29
  %36 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 0
  tail call fastcc void @1(%0* nonnull %1, i8* nonnull %36) #3
  br label %37

37:                                               ; preds = %33, %2
  %38 = phi i8* [ getelementptr inbounds (<{ i8, [63 x i8] }>, <{ i8, [63 x i8] }>* @0, i64 0, i32 0), %2 ], [ %34, %33 ]
  %39 = phi i64 [ %17, %2 ], [ %35, %33 ]
  %40 = icmp ugt i64 %39, 63
  br i1 %40, label %41, label %54

41:                                               ; preds = %37
  %42 = add nsw i64 %39, -64
  %43 = and i64 %42, -64
  %44 = add nsw i64 %43, 64
  br label %45

45:                                               ; preds = %45, %41
  %46 = phi i64 [ %49, %45 ], [ %39, %41 ]
  %47 = phi i8* [ %48, %45 ], [ %38, %41 ]
  tail call fastcc void @1(%0* %1, i8* %47) #3
  %48 = getelementptr inbounds i8, i8* %47, i64 64
  %49 = add i64 %46, -64
  %50 = icmp ugt i64 %49, 63
  br i1 %50, label %45, label %51

51:                                               ; preds = %45
  %52 = getelementptr i8, i8* %38, i64 %44
  %53 = sub nsw i64 %42, %43
  br label %54

54:                                               ; preds = %51, %37
  %55 = phi i8* [ %38, %37 ], [ %52, %51 ]
  %56 = phi i64 [ %39, %37 ], [ %53, %51 ]
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %60, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %59, i8* align 1 %55, i64 %56, i1 false) #3
  br label %60

60:                                               ; preds = %21, %54, %58
  %61 = load i64, i64* %5, align 8
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 63
  %64 = add i64 %61, 8
  store i64 %64, i64* %5, align 8
  %65 = icmp eq i32 %63, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %60
  %67 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 0
  br label %100

68:                                               ; preds = %60
  %69 = sub nsw i32 64, %63
  %70 = icmp ult i32 %69, 8
  %71 = select i1 %70, i32 %69, i32 8
  %72 = zext i32 %63 to i64
  %73 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 %72
  %74 = zext i32 %71 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %73, i8* nonnull align 4 %4, i64 %74, i1 false) #3
  %75 = add i32 %71, %62
  %76 = and i32 %75, 63
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %104

78:                                               ; preds = %68
  %79 = getelementptr inbounds i8, i8* %4, i64 %74
  %80 = sub nsw i64 8, %74
  %81 = getelementptr inbounds %0, %0* %1, i64 0, i32 3, i64 0
  tail call fastcc void @1(%0* nonnull %1, i8* nonnull %81) #3
  %82 = icmp ugt i64 %80, 63
  br i1 %82, label %83, label %96

83:                                               ; preds = %78
  %84 = add nsw i64 %80, -64
  %85 = and i64 %84, -64
  %86 = add nsw i64 %85, 64
  br label %87

87:                                               ; preds = %87, %83
  %88 = phi i64 [ %91, %87 ], [ %80, %83 ]
  %89 = phi i8* [ %90, %87 ], [ %79, %83 ]
  call fastcc void @1(%0* %1, i8* %89) #3
  %90 = getelementptr inbounds i8, i8* %89, i64 64
  %91 = add i64 %88, -64
  %92 = icmp ugt i64 %91, 63
  br i1 %92, label %87, label %93

93:                                               ; preds = %87
  %94 = getelementptr i8, i8* %79, i64 %86
  %95 = sub nsw i64 %84, %85
  br label %96

96:                                               ; preds = %93, %78
  %97 = phi i8* [ %79, %78 ], [ %94, %93 ]
  %98 = phi i64 [ %80, %78 ], [ %95, %93 ]
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %104, label %100

100:                                              ; preds = %66, %96
  %101 = phi i8* [ %67, %66 ], [ %81, %96 ]
  %102 = phi i64 [ 8, %66 ], [ %98, %96 ]
  %103 = phi i8* [ %4, %66 ], [ %97, %96 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %101, i8* align 1 %103, i64 %102, i1 false) #3
  br label %104

104:                                              ; preds = %68, %96, %100
  %105 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 0
  %106 = load i32, i32* %105, align 4
  %107 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %106) #4
  %108 = bitcast i8* %0 to i32*
  store i32 %107, i32* %108, align 4
  %109 = getelementptr inbounds i8, i8* %0, i64 4
  %110 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 1
  %111 = load i32, i32* %110, align 4
  %112 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %111) #4
  %113 = bitcast i8* %109 to i32*
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds i8, i8* %0, i64 8
  %115 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 2
  %116 = load i32, i32* %115, align 4
  %117 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %116) #4
  %118 = bitcast i8* %114 to i32*
  store i32 %117, i32* %118, align 4
  %119 = getelementptr inbounds i8, i8* %0, i64 12
  %120 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 3
  %121 = load i32, i32* %120, align 4
  %122 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %121) #4
  %123 = bitcast i8* %119 to i32*
  store i32 %122, i32* %123, align 4
  %124 = getelementptr inbounds i8, i8* %0, i64 16
  %125 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 4
  %126 = load i32, i32* %125, align 4
  %127 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %126) #4
  %128 = bitcast i8* %124 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds i8, i8* %0, i64 20
  %130 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 5
  %131 = load i32, i32* %130, align 4
  %132 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %131) #4
  %133 = bitcast i8* %129 to i32*
  store i32 %132, i32* %133, align 4
  %134 = getelementptr inbounds i8, i8* %0, i64 24
  %135 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 6
  %136 = load i32, i32* %135, align 4
  %137 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %136) #4
  %138 = bitcast i8* %134 to i32*
  store i32 %137, i32* %138, align 4
  %139 = getelementptr inbounds i8, i8* %0, i64 28
  %140 = getelementptr inbounds %0, %0* %1, i64 0, i32 0, i64 7
  %141 = load i32, i32* %140, align 4
  %142 = tail call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %141) #4
  %143 = bitcast i8* %139 to i32*
  store i32 %142, i32* %143, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #3
  ret void
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
