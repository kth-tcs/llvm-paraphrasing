; ModuleID = 'zend_language_parser-strip-O3-renamed.bc'
source_filename = "/home/travis/build/orestisfl/compilation-database/build/php-src/Zend/zend_language_parser.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { %45, %1*, %32*, i32, %7*, %39*, %39*, %39, %39*, i8, i8, i8, i8, i8, %29, %31*, i32, i8, %32*, i32, i32, %33, %35, %44*, %39, %42**, i64, i8, i8, i8, %43*, %44*, %45 }
%1 = type { i8, %32*, %1*, i32, i32, i32, i32, %2*, %2*, %2*, %39, %39, %39, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %6*, %13, %16* (%1*)*, %15* (%1*, %2*, i32)*, i32 (%1*, %1*)*, %6* (%1*, %32*)*, i32 (%2*, i8**, i64*, %21*)*, i32 (%2*, %1*, i8*, i64, %22*)*, i32, i32, %1**, %1**, %23**, %25**, %27 }
%2 = type { %3, %4, %5 }
%3 = type { i64 }
%4 = type { i32 }
%5 = type { i32 }
%6 = type { %7 }
%7 = type { i8, [3 x i8], i32, %32*, %1*, %6*, i32, i32, %8*, i32*, i32, %9*, i32, i32, %32**, i32, i32, %11*, %12*, %39*, %32*, i32, i32, %32*, i32, i32, %2*, i32, i8**, [6 x i8*] }
%8 = type { %32*, i64, i8, i8 }
%9 = type { i8*, %10, %10, %10, i32, i32, i8, i8, i8, i8 }
%10 = type { i32 }
%11 = type { i32, i32, i32 }
%12 = type { i32, i32, i32, i32 }
%13 = type { %14*, %6*, %6*, %6*, %6*, %6*, %6* }
%14 = type { void (%15*)*, i32 (%15*)*, %2* (%15*)*, void (%15*, %2*)*, void (%15*)*, void (%15*)*, void (%15*)* }
%15 = type { %16, %2, %14*, i64 }
%16 = type { %17, i32, %1*, %19*, %39*, [1 x %2] }
%17 = type { i32, %18 }
%18 = type { i32 }
%19 = type { i32, void (%16*)*, void (%16*)*, %16* (%2*)*, %2* (%2*, %2*, i32, i8**, %2*)*, void (%2*, %2*, %2*, i8**)*, %2* (%2*, %2*, i32, %2*)*, void (%2*, %2*, %2*)*, %2* (%2*, %2*, i32, i8**)*, %2* (%2*, %2*)*, void (%2*, %2*)*, i32 (%2*, %2*, i32, i8**)*, void (%2*, %2*, i8**)*, i32 (%2*, %2*, i32)*, void (%2*, %2*)*, %39* (%2*)*, %6* (%16**, %32*, %2*)*, i32 (%32*, %16*, %20*, %2*)*, %6* (%16*)*, %32* (%16*)*, i32 (%2*, %2*)*, i32 (%2*, %2*, i32)*, i32 (%2*, i64*)*, %39* (%2*, i32*)*, i32 (%2*, %1**, %6**, %16**)*, %39* (%2*, %2**, i32*)*, i32 (i8, %2*, %2*, %2*)*, i32 (%2*, %2*, %2*)* }
%20 = type { %9*, %20*, %2*, %6*, %2, %20*, %39*, i8**, %2* }
%21 = type opaque
%22 = type opaque
%23 = type { %24*, %32*, i32 }
%24 = type { %32*, %1*, %32* }
%25 = type { %24*, %26* }
%26 = type { %1* }
%27 = type { %28 }
%28 = type { %32*, i32, i32, %32* }
%29 = type { %30*, %30*, i64, i64, void (i8*)*, i8, %30* }
%30 = type { %30*, %30*, [1 x i8] }
%31 = type opaque
%32 = type { %17, i64, i64, [1 x i8] }
%33 = type { i32, i32, i32, i32, i32, i32, i32, i32, %34*, %39* }
%34 = type { i32, i32, i32, i32 }
%35 = type { %36, %37, %32*, i8, i8, %39*, %39*, %39*, %39 }
%36 = type { i64 }
%37 = type { i8, i8, %38 }
%38 = type { %2 }
%39 = type { %17, %40, i32, %41*, i32, i32, i32, i32, i64, void (%2*)* }
%40 = type { i32 }
%41 = type { %2, i64, %32* }
%42 = type opaque
%43 = type { i16, i16, i32, [1 x %43*] }
%44 = type { i8*, i8*, %44* }
%45 = type { i32, i32, i32, i8* }
%46 = type { %47*, %47*, i32, i8*, i8*, i8*, i8*, i8*, i32, %45, %51, i8*, i64, i8*, i64, i64 (i8**, i64*, i8*, i64)*, i64 (i8**, i64*, i8*, i64)*, %42*, i32, void (i32, i32, i32, i8*)*, i8* }
%47 = type { %48, i8*, %32*, i32, i8 }
%48 = type { %49 }
%49 = type { i8*, i32, %50, i64 (i8*, i8*, i64)*, i64 (i8*)*, void (i8*)* }
%50 = type { i64, i64, i8*, i8*, i8*, void (i8*)* }
%51 = type { i32, i32, i8**, i8**, i8 }
%52 = type { %43* }
%53 = type { %52 }
%54 = type { i8, i8, i16 }
%55 = type { i16, i16, i32, i32, [1 x %43*] }

@0 = internal unnamed_addr constant [945 x i16] [i16 -722, i16 89, i16 1216, i16 -722, i16 5565, i16 5565, i16 -54, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 585, i16 585, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 4893, i16 308, i16 5565, i16 26, i16 -722, i16 -722, i16 -722, i16 -722, i16 97, i16 -722, i16 -722, i16 -722, i16 -51, i16 -19, i16 5565, i16 4618, i16 -17, i16 85, i16 99, i16 101, i16 103, i16 5565, i16 5565, i16 145, i16 -722, i16 157, i16 5565, i16 175, i16 5565, i16 234, i16 29, i16 180, i16 182, i16 192, i16 200, i16 -722, i16 -722, i16 -722, i16 202, i16 208, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 321, i16 82, i16 -722, i16 333, i16 5565, i16 -722, i16 -722, i16 338, i16 388, i16 23, i16 274, i16 -23, i16 -722, i16 -722, i16 -722, i16 -722, i16 38, i16 -722, i16 -722, i16 -722, i16 179, i16 -722, i16 247, i16 -722, i16 -722, i16 -722, i16 399, i16 -722, i16 303, i16 -5, i16 -722, i16 389, i16 6625, i16 305, i16 20, i16 306, i16 310, i16 351, i16 -722, i16 -722, i16 -722, i16 354, i16 -722, i16 326, i16 399, i16 7331, i16 7331, i16 5565, i16 7331, i16 7331, i16 1527, i16 1201, i16 1527, i16 408, i16 408, i16 165, i16 408, i16 4893, i16 -722, i16 5565, i16 328, i16 389, i16 18, i16 18, i16 408, i16 408, i16 408, i16 408, i16 408, i16 408, i16 408, i16 408, i16 585, i16 343, i16 7237, i16 322, i16 -722, i16 493, i16 -722, i16 -722, i16 -722, i16 -722, i16 352, i16 306, i16 -722, i16 19, i16 -722, i16 491, i16 33, i16 -722, i16 399, i16 -722, i16 5565, i16 -722, i16 5565, i16 48, i16 -722, i16 7331, i16 416, i16 5565, i16 5565, i16 5565, i16 157, i16 5565, i16 7331, i16 353, i16 357, i16 365, i16 509, i16 49, i16 -722, i16 367, i16 -722, i16 6672, i16 -722, i16 -722, i16 333, i16 -12, i16 139, i16 377, i16 51, i16 -722, i16 -722, i16 53, i16 -722, i16 -722, i16 585, i16 5565, i16 5565, i16 373, i16 460, i16 464, i16 466, i16 4893, i16 4893, i16 73, i16 449, i16 -722, i16 5005, i16 585, i16 348, i16 -722, i16 333, i16 -30, i16 390, i16 274, i16 6719, i16 1379, i16 264, i16 393, i16 420, i16 264, i16 301, i16 5565, i16 -722, i16 477, i16 4781, i16 -722, i16 -722, i16 -722, i16 407, i16 4618, i16 409, i16 543, i16 423, i16 -722, i16 492, i16 3498, i16 5565, i16 5565, i16 5565, i16 5565, i16 5117, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 314, i16 5565, i16 -722, i16 3498, i16 5565, i16 -3, i16 5565, i16 -722, i16 5229, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 5565, i16 -722, i16 -722, i16 -722, i16 6766, i16 5565, i16 424, i16 6813, i16 14, i16 4893, i16 5341, i16 572, i16 4893, i16 306, i16 29, i16 -722, i16 -722, i16 5565, i16 -3, i16 29, i16 5565, i16 5565, i16 505, i16 -722, i16 -722, i16 434, i16 6860, i16 5565, i16 -722, i16 437, i16 6907, i16 436, i16 593, i16 7331, i16 7189, i16 16, i16 6954, i16 -722, i16 -722, i16 -722, i16 5565, i16 157, i16 -722, i16 -722, i16 1542, i16 -722, i16 28, i16 -722, i16 522, i16 -15, i16 333, i16 107, i16 451, i16 57, i16 -722, i16 162, i16 -722, i16 29, i16 -722, i16 32, i16 -722, i16 65, i16 7331, i16 71, i16 -722, i16 7001, i16 452, i16 479, i16 -722, i16 486, i16 461, i16 475, i16 456, i16 551, i16 -722, i16 -722, i16 -8, i16 6046, i16 478, i16 -722, i16 -722, i16 -722, i16 274, i16 -722, i16 480, i16 -722, i16 270, i16 487, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 6093, i16 -722, i16 5565, i16 -722, i16 75, i16 -722, i16 7331, i16 563, i16 5565, i16 -722, i16 5565, i16 -722, i16 -722, i16 -722, i16 490, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 5565, i16 -722, i16 -722, i16 495, i16 497, i16 306, i16 488, i16 1367, i16 1041, i16 1527, i16 5565, i16 7284, i16 1690, i16 1851, i16 2014, i16 2177, i16 2337, i16 2499, i16 2662, i16 2662, i16 2662, i16 2662, i16 2662, i16 801, i16 801, i16 801, i16 801, i16 574, i16 574, i16 565, i16 565, i16 565, i16 165, i16 165, i16 165, i16 -722, i16 408, i16 495, i16 497, i16 306, i16 496, i16 -722, i16 5565, i16 -722, i16 306, i16 6141, i16 585, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 1527, i16 -722, i16 1527, i16 -722, i16 504, i16 507, i16 585, i16 506, i16 7331, i16 5565, i16 -722, i16 479, i16 -722, i16 500, i16 -722, i16 -722, i16 6188, i16 7331, i16 -722, i16 513, i16 -722, i16 3803, i16 -722, i16 5565, i16 3966, i16 5565, i16 5565, i16 677, i16 -722, i16 25, i16 7331, i16 -722, i16 -722, i16 -9, i16 -722, i16 327, i16 230, i16 8, i16 -722, i16 -722, i16 333, i16 239, i16 -722, i16 -722, i16 585, i16 489, i16 5565, i16 -722, i16 -722, i16 -722, i16 144, i16 520, i16 516, i16 144, i16 -722, i16 661, i16 -722, i16 589, i16 -722, i16 -722, i16 -722, i16 519, i16 -722, i16 5565, i16 -722, i16 -722, i16 -722, i16 -722, i16 890, i16 524, i16 -722, i16 7331, i16 5453, i16 -722, i16 479, i16 7048, i16 7095, i16 1705, i16 528, i16 271, i16 6236, i16 -722, i16 -722, i16 1690, i16 5565, i16 -722, i16 -722, i16 6283, i16 -722, i16 -722, i16 18, i16 661, i16 15, i16 4893, i16 1527, i16 520, i16 -722, i16 -722, i16 271, i16 -722, i16 -722, i16 7142, i16 -722, i16 -722, i16 -722, i16 529, i16 7331, i16 585, i16 4893, i16 530, i16 83, i16 86, i16 4129, i16 531, i16 535, i16 -722, i16 -722, i16 148, i16 327, i16 333, i16 687, i16 -722, i16 -722, i16 21, i16 333, i16 -722, i16 -722, i16 -722, i16 -722, i16 144, i16 -722, i16 -722, i16 -722, i16 689, i16 540, i16 5565, i16 -722, i16 -722, i16 5999, i16 1053, i16 -722, i16 544, i16 -722, i16 520, i16 4618, i16 672, i16 547, i16 271, i16 263, i16 -722, i16 -722, i16 -722, i16 546, i16 700, i16 -722, i16 675, i16 -722, i16 -722, i16 -722, i16 1690, i16 -722, i16 557, i16 -722, i16 560, i16 3640, i16 562, i16 1868, i16 5565, i16 88, i16 561, i16 4893, i16 677, i16 4292, i16 -722, i16 -722, i16 -722, i16 -722, i16 448, i16 -722, i16 54, i16 569, i16 567, i16 -722, i16 687, i16 -722, i16 327, i16 577, i16 333, i16 732, i16 -722, i16 689, i16 584, i16 41, i16 144, i16 -722, i16 1527, i16 586, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 588, i16 -722, i16 631, i16 307, i16 -722, i16 594, i16 661, i16 595, i16 631, i16 -722, i16 597, i16 599, i16 91, i16 601, i16 605, i16 -722, i16 -722, i16 -722, i16 2031, i16 473, i16 606, i16 5565, i16 36, i16 250, i16 -722, i16 144, i16 -722, i16 610, i16 -722, i16 -722, i16 732, i16 333, i16 612, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 144, i16 -722, i16 -722, i16 -722, i16 683, i16 232, i16 717, i16 -722, i16 -722, i16 369, i16 -722, i16 614, i16 3640, i16 746, i16 620, i16 746, i16 -722, i16 -722, i16 694, i16 -722, i16 746, i16 -722, i16 4455, i16 -722, i16 4292, i16 2194, i16 622, i16 624, i16 -722, i16 5715, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 392, i16 2357, i16 -722, i16 618, i16 -722, i16 -722, i16 415, i16 45, i16 768, i16 62, i16 -722, i16 6355, i16 399, i16 -722, i16 -722, i16 -722, i16 307, i16 -722, i16 59, i16 -722, i16 769, i16 442, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 627, i16 -722, i16 -722, i16 -722, i16 3640, i16 144, i16 630, i16 -722, i16 -722, i16 -722, i16 -722, i16 5728, i16 -722, i16 5565, i16 -722, i16 683, i16 -722, i16 773, i16 67, i16 -722, i16 6355, i16 655, i16 -722, i16 638, i16 707, i16 -722, i16 76, i16 -722, i16 639, i16 5565, i16 -722, i16 643, i16 2520, i16 -722, i16 3640, i16 -722, i16 644, i16 703, i16 326, i16 -722, i16 -722, i16 656, i16 5866, i16 -722, i16 647, i16 651, i16 711, i16 697, i16 7331, i16 -722, i16 5565, i16 6355, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 59, i16 -722, i16 -722, i16 7331, i16 -722, i16 658, i16 -722, i16 6355, i16 -722, i16 -722, i16 -722, i16 -722, i16 6493, i16 144, i16 -722, i16 7331, i16 -722, i16 662, i16 2683, i16 -722, i16 2846, i16 3009, i16 -722, i16 3172, i16 -722, i16 -722, i16 -722, i16 6355, i16 689, i16 -722, i16 271, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 663, i16 -722, i16 -722, i16 -722, i16 746, i16 -722, i16 283, i16 -722, i16 -722, i16 -722, i16 3335, i16 -722, i16 -722], align 16
@1 = internal unnamed_addr constant [393 x i8] c`abcdefghijklmnopqrstuvwxyz{|}~\7F\80\81\82\83\84\85\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\92\93\94\95\96\97\98\99\9A\9B\9C", align 16
@2 = internal unnamed_addr constant [7399 x i16] [i16 2, i16 27, i16 2, i16 16, i16 17, i16 117, i16 84, i16 185, i16 2, i16 663, i16 16, i16 17, i16 2, i16 2, i16 189, i16 2, i16 130, i16 27, i16 16, i16 17, i16 632, i16 374, i16 8, i16 8, i16 8, i16 559, i16 240, i16 29, i16 4, i16 5, i16 108, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 8, i16 8, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 163, i16 28, i16 8, i16 41, i16 30, i16 8, i16 8, i16 272, i16 8, i16 68, i16 8, i16 783, i16 68, i16 40, i16 8, i16 30, i16 728, i16 83, i16 681, i16 8, i16 47, i16 48, i16 8, i16 83, i16 8, i16 52, i16 55, i16 54, i16 8, i16 83, i16 84, i16 27, i16 8, i16 8, i16 629, i16 68, i16 68, i16 68, i16 0, i16 102, i16 83, i16 206, i16 207, i16 792, i16 36, i16 74, i16 14, i16 76, i16 797, i16 14, i16 77, i16 14, i16 157, i16 83, i16 14, i16 157, i16 84, i16 545, i16 770, i16 84, i16 56, i16 114, i16 84, i16 76, i16 77, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 48, i16 777, i16 154, i16 130, i16 52, i16 30, i16 151, i16 159, i16 102, i16 313, i16 145, i16 677, i16 157, i16 796, i16 110, i16 82, i16 157, i16 145, i16 157, i16 68, i16 154, i16 84, i16 120, i16 160, i16 151, i16 145, i16 130, i16 130, i16 130, i16 160, i16 157, i16 161, i16 130, i16 160, i16 132, i16 160, i16 117, i16 105, i16 106, i16 120, i16 165, i16 125, i16 339, i16 83, i16 827, i16 701, i16 160, i16 151, i16 151, i16 608, i16 158, i16 158, i16 158, i16 357, i16 162, i16 162, i16 160, i16 160, i16 160, i16 160, i16 154, i16 160, i16 298, i16 160, i16 199, i16 908, i16 165, i16 165, i16 158, i16 167, i16 159, i16 199, i16 165, i16 159, i16 172, i16 173, i16 174, i16 212, i16 176, i16 199, i16 161, i16 130, i16 159, i16 160, i16 212, i16 159, i16 159, i16 102, i16 159, i16 189, i16 159, i16 191, i16 212, i16 161, i16 159, i16 399, i16 220, i16 397, i16 55, i16 159, i16 83, i16 158, i16 200, i16 201, i16 159, i16 83, i16 83, i16 158, i16 206, i16 207, i16 67, i16 158, i16 158, i16 211, i16 154, i16 215, i16 936, i16 165, i16 83, i16 158, i16 157, i16 269, i16 158, i16 83, i16 158, i16 234, i16 601, i16 158, i16 226, i16 72, i16 73, i16 229, i16 831, i16 909, i16 157, i16 834, i16 157, i16 269, i16 157, i16 154, i16 114, i16 115, i16 648, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 154, i16 270, i16 240, i16 152, i16 273, i16 154, i16 275, i16 29, i16 277, i16 278, i16 279, i16 280, i16 281, i16 282, i16 283, i16 284, i16 285, i16 286, i16 287, i16 288, i16 289, i16 926, i16 241, i16 154, i16 83, i16 294, i16 72, i16 73, i16 74, i16 298, i16 299, i16 269, i16 301, i16 710, i16 272, i16 712, i16 274, i16 306, i16 333, i16 102, i16 309, i16 310, i16 160, i16 29, i16 157, i16 68, i16 157, i16 316, i16 102, i16 110, i16 111, i16 110, i16 111, i16 83, i16 273, i16 84, i16 157, i16 927, i16 928, i16 929, i16 329, i16 83, i16 105, i16 106, i16 157, i16 303, i16 157, i16 937, i16 339, i16 307, i16 308, i16 941, i16 157, i16 344, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 306, i16 717, i16 564, i16 75, i16 154, i16 84, i16 722, i16 86, i16 154, i16 75, i16 83, i16 83, i16 84, i16 154, i16 569, i16 132, i16 133, i16 83, i16 84, i16 574, i16 130, i16 346, i16 480, i16 132, i16 133, i16 84, i16 588, i16 86, i16 57, i16 58, i16 83, i16 161, i16 388, i16 149, i16 150, i16 152, i16 83, i16 154, i16 394, i16 68, i16 396, i16 151, i16 84, i16 152, i16 86, i16 154, i16 34, i16 157, i16 154, i16 158, i16 160, i16 767, i16 84, i16 125, i16 86, i16 36, i16 514, i16 110, i16 111, i16 132, i16 133, i16 519, i16 159, i16 160, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 149, i16 150, i16 80, i16 81, i16 151, i16 633, i16 151, i16 68, i16 636, i16 152, i16 152, i16 154, i16 154, i16 157, i16 110, i16 164, i16 152, i16 157, i16 154, i16 148, i16 149, i16 150, i16 84, i16 165, i16 86, i16 67, i16 84, i16 652, i16 653, i16 165, i16 154, i16 130, i16 664, i16 658, i16 162, i16 157, i16 117, i16 149, i16 150, i16 120, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 148, i16 149, i16 150, i16 475, i16 157, i16 8, i16 151, i16 151, i16 84, i16 49, i16 86, i16 16, i16 521, i16 485, i16 94, i16 160, i16 159, i16 627, i16 696, i16 521, i16 159, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 521, i16 159, i16 16, i16 159, i16 540, i16 642, i16 707, i16 161, i16 158, i16 117, i16 84, i16 540, i16 120, i16 159, i16 149, i16 150, i16 83, i16 84, i16 517, i16 540, i16 83, i16 719, i16 89, i16 721, i16 83, i16 561, i16 83, i16 160, i16 733, i16 104, i16 105, i16 106, i16 561, i16 163, i16 735, i16 584, i16 117, i16 83, i16 587, i16 120, i16 561, i16 157, i16 578, i16 157, i16 543, i16 555, i16 149, i16 150, i16 558, i16 578, i16 30, i16 752, i16 83, i16 161, i16 104, i16 105, i16 106, i16 578, i16 557, i16 159, i16 559, i16 560, i16 763, i16 162, i16 613, i16 16, i16 84, i16 704, i16 569, i16 158, i16 768, i16 157, i16 159, i16 574, i16 148, i16 149, i16 150, i16 602, i16 8, i16 602, i16 161, i16 580, i16 83, i16 632, i16 128, i16 602, i16 611, i16 159, i16 159, i16 602, i16 602, i16 128, i16 602, i16 51, i16 52, i16 53, i16 158, i16 55, i16 597, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 641, i16 55, i16 606, i16 809, i16 67, i16 158, i16 83, i16 641, i16 850, i16 663, i16 820, i16 161, i16 160, i16 67, i16 618, i16 641, i16 157, i16 859, i16 83, i16 157, i16 159, i16 129, i16 162, i16 627, i16 157, i16 68, i16 157, i16 681, i16 682, i16 835, i16 162, i16 646, i16 75, i16 157, i16 162, i16 157, i16 842, i16 158, i16 642, i16 881, i16 83, i16 84, i16 157, i16 673, i16 87, i16 673, i16 652, i16 653, i16 160, i16 16, i16 89, i16 673, i16 658, i16 162, i16 158, i16 673, i16 673, i16 157, i16 673, i16 157, i16 159, i16 903, i16 159, i16 678, i16 705, i16 669, i16 159, i16 8, i16 698, i16 8, i16 700, i16 705, i16 160, i16 727, i16 30, i16 159, i16 158, i16 887, i16 159, i16 705, i16 8, i16 923, i16 892, i16 36, i16 824, i16 36, i16 740, i16 158, i16 894, i16 132, i16 158, i16 706, i16 898, i16 159, i16 900, i16 162, i16 902, i16 701, i16 157, i16 160, i16 704, i16 911, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 762, i16 152, i16 161, i16 154, i16 8, i16 719, i16 157, i16 721, i16 160, i16 68, i16 158, i16 161, i16 117, i16 155, i16 165, i16 777, i16 75, i16 755, i16 209, i16 160, i16 159, i16 158, i16 213, i16 158, i16 83, i16 84, i16 940, i16 158, i16 87, i16 159, i16 221, i16 84, i16 223, i16 224, i16 225, i16 161, i16 117, i16 161, i16 160, i16 120, i16 30, i16 157, i16 84, i16 161, i16 782, i16 159, i16 758, i16 159, i16 16, i16 16, i16 159, i16 789, i16 158, i16 16, i16 768, i16 84, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 160, i16 160, i16 802, i16 84, i16 828, i16 160, i16 160, i16 102, i16 159, i16 151, i16 131, i16 132, i16 159, i16 813, i16 799, i16 102, i16 801, i16 118, i16 161, i16 159, i16 844, i16 157, i16 908, i16 158, i16 55, i16 652, i16 850, i16 721, i16 191, i16 719, i16 344, i16 152, i16 578, i16 154, i16 175, i16 89, i16 157, i16 705, i16 801, i16 806, i16 740, i16 606, i16 828, i16 843, i16 165, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 881, i16 55, i16 346, i16 682, i16 311, i16 881, i16 854, i16 890, i16 330, i16 745, i16 316, i16 302, i16 896, i16 67, i16 871, i16 272, i16 873, i16 269, i16 307, i16 301, i16 580, i16 852, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 909, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 868, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 926, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 914, i16 889, i16 916, i16 917, i16 -1, i16 919, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 942, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 117, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 11, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 67, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 117, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 14, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 29, i16 15, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 67, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 117, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 10, i16 11, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 67, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 29, i16 15, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 67, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 67, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 74, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 67, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 67, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 101, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 67, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 99, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 97, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 161, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 9, i16 10, i16 11, i16 12, i16 13, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 69, i16 70, i16 -1, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 -1, i16 -1, i16 83, i16 84, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 -1, i16 125, i16 126, i16 127, i16 128, i16 129, i16 -1, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 152, i16 153, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 160, i16 -1, i16 -1, i16 -1, i16 -1, i16 165, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 76, i16 77, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 85, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 -1, i16 96, i16 -1, i16 98, i16 -1, i16 100, i16 -1, i16 -1, i16 103, i16 -1, i16 -1, i16 -1, i16 107, i16 108, i16 109, i16 110, i16 -1, i16 112, i16 113, i16 -1, i16 -1, i16 116, i16 -1, i16 -1, i16 119, i16 -1, i16 121, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 159, i16 160, i16 -1, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 -1, i16 -1, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 -1, i16 -1, i16 -1, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 36, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 155, i16 -1, i16 157, i16 158, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 88, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 30, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 36, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 36, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 -1, i16 122, i16 123, i16 12, i16 13, i16 -1, i16 15, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 155, i16 -1, i16 157, i16 -1, i16 -1, i16 48, i16 49, i16 -1, i16 163, i16 164, i16 165, i16 54, i16 -1, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 -1, i16 68, i16 69, i16 70, i16 -1, i16 -1, i16 -1, i16 -1, i16 75, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 81, i16 82, i16 83, i16 84, i16 -1, i16 -1, i16 87, i16 -1, i16 -1, i16 90, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 110, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 122, i16 123, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 131, i16 132, i16 -1, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 147, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 157, i16 -1, i16 9, i16 10, i16 11, i16 -1, i16 163, i16 164, i16 165, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 9, i16 10, i16 11, i16 12, i16 13, i16 -1, i16 -1, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 69, i16 70, i16 -1, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 -1, i16 -1, i16 83, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 -1, i16 125, i16 126, i16 127, i16 128, i16 129, i16 -1, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 3, i16 4, i16 5, i16 6, i16 7, i16 159, i16 9, i16 10, i16 11, i16 12, i16 13, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 69, i16 70, i16 -1, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 -1, i16 -1, i16 83, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 -1, i16 125, i16 126, i16 127, i16 128, i16 129, i16 -1, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 -1, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 154, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 162, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 9, i16 10, i16 11, i16 12, i16 13, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 69, i16 70, i16 -1, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 -1, i16 -1, i16 83, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 161, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 -1, i16 125, i16 126, i16 127, i16 128, i16 129, i16 -1, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 3, i16 4, i16 5, i16 6, i16 7, i16 -1, i16 9, i16 10, i16 11, i16 12, i16 13, i16 152, i16 153, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 69, i16 70, i16 -1, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 -1, i16 -1, i16 83, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 -1, i16 125, i16 126, i16 127, i16 128, i16 129, i16 -1, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 152, i16 153, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 159, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 159, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 14, i16 -1, i16 158, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 102, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 158, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 9, i16 10, i16 11, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 29, i16 -1, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 -1, i16 55, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 67], align 16
@3 = internal unnamed_addr constant [7399 x i16] [i16 99, i16 153, i16 87, i16 133, i16 133, i16 292, i16 230, i16 333, i16 88, i16 724, i16 134, i16 134, i16 91, i16 92, i16 336, i16 86, i16 295, i16 155, i16 135, i16 136, i16 697, i16 602, i16 -471, i16 -470, i16 330, i16 639, i16 478, i16 163, i16 118, i16 119, i16 276, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 129, i16 578, i16 311, i16 137, i16 138, i16 139, i16 140, i16 141, i16 142, i16 143, i16 144, i16 147, i16 313, i16 159, i16 727, i16 171, i16 647, i16 316, i16 330, i16 512, i16 344, i16 597, i16 346, i16 825, i16 -433, i16 170, i16 344, i16 807, i16 786, i16 387, i16 737, i16 854, i16 177, i16 177, i16 -165, i16 387, i16 890, i16 177, i16 190, i16 186, i16 580, i16 516, i16 35, i16 157, i16 606, i16 896, i16 696, i16 -431, i16 306, i16 273, i16 3, i16 337, i16 387, i16 359, i16 360, i16 831, i16 863, i16 216, i16 705, i16 218, i16 834, i16 -189, i16 219, i16 -190, i16 120, i16 387, i16 -192, i16 165, i16 35, i16 629, i16 818, i16 160, i16 198, i16 163, i16 35, i16 30, i16 31, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 179, i16 819, i16 228, i16 -433, i16 184, i16 164, i16 -394, i16 372, i16 337, i16 553, i16 133, i16 733, i16 229, i16 833, i16 50, i16 227, i16 167, i16 134, i16 172, i16 361, i16 338, i16 864, i16 293, i16 569, i16 -433, i16 297, i16 -431, i16 307, i16 274, i16 652, i16 -436, i16 598, i16 147, i16 -433, i16 296, i16 517, i16 777, i16 758, i16 759, i16 778, i16 82, i16 231, i16 336, i16 115, i16 860, i16 748, i16 658, i16 -431, i16 308, i16 677, i16 -471, i16 -470, i16 562, i16 586, i16 -471, i16 -470, i16 -431, i16 309, i16 275, i16 721, i16 567, i16 226, i16 539, i16 648, i16 133, i16 923, i16 82, i16 177, i16 579, i16 315, i16 312, i16 134, i16 82, i16 808, i16 319, i16 322, i16 323, i16 133, i16 325, i16 350, i16 779, i16 362, i16 849, i16 850, i16 134, i16 317, i16 331, i16 337, i16 345, i16 335, i16 347, i16 340, i16 367, i16 761, i16 573, i16 612, i16 99, i16 611, i16 269, i16 855, i16 115, i16 -165, i16 351, i16 354, i16 891, i16 115, i16 180, i16 581, i16 147, i16 147, i16 270, i16 607, i16 897, i16 366, i16 215, i16 371, i16 937, i16 314, i16 181, i16 706, i16 173, i16 153, i16 -189, i16 115, i16 -190, i16 395, i16 673, i16 -192, i16 386, i16 233, i16 234, i16 392, i16 867, i16 924, i16 174, i16 870, i16 175, i16 155, i16 176, i16 571, i16 714, i16 715, i16 713, i16 177, i16 482, i16 483, i16 484, i16 486, i16 487, i16 488, i16 489, i16 490, i16 491, i16 492, i16 493, i16 494, i16 495, i16 496, i16 497, i16 498, i16 499, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 506, i16 507, i16 508, i16 509, i16 339, i16 511, i16 479, i16 116, i16 177, i16 76, i16 520, i16 682, i16 522, i16 523, i16 524, i16 525, i16 526, i16 527, i16 528, i16 529, i16 530, i16 531, i16 532, i16 533, i16 534, i16 932, i16 481, i16 574, i16 115, i16 536, i16 235, i16 236, i16 237, i16 147, i16 542, i16 157, i16 147, i16 756, i16 513, i16 760, i16 518, i16 177, i16 99, i16 337, i16 550, i16 551, i16 185, i16 682, i16 199, i16 -432, i16 200, i16 170, i16 337, i16 50, i16 823, i16 187, i16 188, i16 115, i16 515, i16 208, i16 201, i16 933, i16 934, i16 935, i16 564, i16 115, i16 758, i16 759, i16 202, i16 546, i16 206, i16 938, i16 570, i16 518, i16 549, i16 943, i16 207, i16 575, i16 277, i16 278, i16 279, i16 280, i16 281, i16 282, i16 283, i16 284, i16 285, i16 286, i16 287, i16 288, i16 289, i16 547, i16 764, i16 650, i16 131, i16 657, i16 208, i16 769, i16 368, i16 189, i16 131, i16 115, i16 115, i16 35, i16 228, i16 656, i16 683, i16 684, i16 115, i16 35, i16 336, i16 -432, i16 198, i16 615, i16 683, i16 684, i16 208, i16 668, i16 209, i16 290, i16 291, i16 115, i16 810, i16 605, i16 211, i16 212, i16 116, i16 115, i16 76, i16 609, i16 -431, i16 610, i16 -432, i16 208, i16 116, i16 221, i16 76, i16 844, i16 -435, i16 228, i16 -219, i16 -432, i16 815, i16 208, i16 152, i16 368, i16 238, i16 619, i16 187, i16 188, i16 683, i16 684, i16 622, i16 939, i16 940, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 211, i16 212, i16 223, i16 225, i16 240, i16 698, i16 272, i16 241, i16 700, i16 116, i16 116, i16 76, i16 76, i16 229, i16 50, i16 385, i16 116, i16 -434, i16 76, i16 210, i16 211, i16 212, i16 208, i16 82, i16 224, i16 270, i16 845, i16 656, i16 718, i16 82, i16 215, i16 -431, i16 725, i16 723, i16 300, i16 -436, i16 777, i16 211, i16 212, i16 778, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 369, i16 211, i16 212, i16 614, i16 298, i16 301, i16 -431, i16 303, i16 208, i16 591, i16 368, i16 310, i16 133, i16 617, i16 318, i16 -431, i16 326, i16 695, i16 744, i16 134, i16 327, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 624, i16 328, i16 329, i16 332, i16 133, i16 703, i16 755, i16 826, i16 355, i16 777, i16 208, i16 134, i16 778, i16 343, i16 211, i16 212, i16 592, i16 593, i16 621, i16 626, i16 356, i16 656, i16 594, i16 723, i16 357, i16 133, i16 358, i16 374, i16 788, i16 757, i16 758, i16 759, i16 134, i16 384, i16 789, i16 662, i16 777, i16 387, i16 666, i16 778, i16 645, i16 394, i16 133, i16 396, i16 628, i16 634, i16 211, i16 212, i16 637, i16 134, i16 397, i16 802, i16 399, i16 848, i16 804, i16 758, i16 759, i16 350, i16 635, i16 398, i16 322, i16 640, i16 813, i16 537, i16 685, i16 543, i16 160, i16 750, i16 575, i16 554, i16 816, i16 557, i16 559, i16 575, i16 363, i16 211, i16 212, i16 99, i16 560, i16 87, i16 869, i16 351, i16 568, i16 685, i16 584, i16 88, i16 99, i16 572, i16 583, i16 91, i16 92, i16 587, i16 86, i16 266, i16 267, i16 268, i16 589, i16 269, i16 672, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 133, i16 269, i16 392, i16 843, i16 270, i16 590, i16 596, i16 134, i16 879, i16 666, i16 853, i16 600, i16 601, i16 270, i16 693, i16 702, i16 603, i16 892, i16 608, i16 613, i16 660, i16 663, i16 616, i16 147, i16 -457, i16 130, i16 -459, i16 685, i16 685, i16 871, i16 620, i16 708, i16 131, i16 -435, i16 630, i16 627, i16 873, i16 625, i16 147, i16 879, i16 115, i16 35, i16 632, i16 99, i16 37, i16 87, i16 575, i16 575, i16 665, i16 669, i16 670, i16 88, i16 575, i16 671, i16 675, i16 91, i16 92, i16 681, i16 86, i16 704, i16 701, i16 920, i16 710, i16 734, i16 133, i16 729, i16 712, i16 719, i16 99, i16 727, i16 99, i16 134, i16 728, i16 785, i16 735, i16 732, i16 739, i16 910, i16 736, i16 645, i16 740, i16 931, i16 913, i16 741, i16 859, i16 641, i16 685, i16 743, i16 914, i16 65, i16 745, i16 753, i16 916, i16 746, i16 917, i16 749, i16 919, i16 322, i16 762, i16 763, i16 147, i16 925, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 811, i16 116, i16 766, i16 76, i16 768, i16 575, i16 132, i16 575, i16 770, i16 642, i16 790, i16 787, i16 791, i16 794, i16 82, i16 666, i16 131, i16 99, i16 364, i16 796, i16 798, i16 799, i16 370, i16 800, i16 115, i16 35, i16 942, i16 801, i16 37, i16 805, i16 364, i16 820, i16 370, i16 364, i16 370, i16 814, i16 777, i16 817, i16 827, i16 778, i16 828, i16 830, i16 832, i16 847, i16 824, i16 840, i16 806, i16 841, i16 852, i16 868, i16 872, i16 99, i16 875, i16 889, i16 575, i16 895, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 894, i16 898, i16 99, i16 -271, i16 685, i16 900, i16 902, i16 -77, i16 906, i16 903, i16 643, i16 65, i16 907, i16 99, i16 836, i16 908, i16 753, i16 909, i16 893, i16 918, i16 874, i16 926, i16 922, i16 936, i16 191, i16 717, i16 880, i16 767, i16 342, i16 765, i16 576, i16 116, i16 659, i16 76, i16 324, i16 232, i16 132, i16 751, i16 838, i16 842, i16 793, i16 676, i16 861, i16 99, i16 82, i16 -472, i16 -472, i16 -472, i16 -472, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 880, i16 269, i16 577, i16 738, i16 552, i16 905, i16 888, i16 912, i16 565, i16 797, i16 556, i16 545, i16 915, i16 270, i16 99, i16 514, i16 99, i16 510, i16 548, i16 544, i16 661, i16 887, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 666, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 899, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 685, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 99, i16 911, i16 99, i16 99, i16 0, i16 99, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 99, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 0, i16 0, i16 54, i16 55, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 74, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 674, i16 244, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 270, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 0, i16 0, i16 54, i16 55, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 74, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 731, i16 294, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 245, i16 11, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 270, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 0, i16 0, i16 54, i16 55, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 74, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 243, i16 244, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 270, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 377, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 245, i16 11, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 270, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 566, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 270, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 680, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 270, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 747, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 270, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 803, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 270, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 839, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 846, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 901, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 -472, i16 -472, i16 -472, i16 -472, i16 -472, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 927, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 928, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 929, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 930, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 944, i16 0, i16 80, i16 81, i16 82, i16 401, i16 402, i16 403, i16 404, i16 405, i16 0, i16 406, i16 407, i16 408, i16 409, i16 410, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 411, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 412, i16 413, i16 0, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 0, i16 0, i16 423, i16 35, i16 0, i16 0, i16 0, i16 0, i16 0, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 0, i16 458, i16 459, i16 460, i16 461, i16 462, i16 0, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 473, i16 474, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 475, i16 0, i16 0, i16 0, i16 0, i16 82, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 30, i16 31, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 376, i16 61, i16 62, i16 63, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 633, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 636, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 707, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 752, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 835, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 29, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 34, i16 35, i16 36, i16 0, i16 37, i16 0, i16 0, i16 38, i16 39, i16 40, i16 41, i16 42, i16 0, i16 43, i16 0, i16 44, i16 0, i16 45, i16 0, i16 0, i16 46, i16 0, i16 0, i16 0, i16 47, i16 48, i16 49, i16 50, i16 0, i16 52, i16 53, i16 0, i16 0, i16 54, i16 0, i16 0, i16 56, i16 0, i16 57, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 78, i16 79, i16 0, i16 0, i16 80, i16 81, i16 82, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 0, i16 0, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 12, i16 13, i16 0, i16 0, i16 0, i16 0, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 145, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 388, i16 0, i16 77, i16 389, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 146, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 365, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 485, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 521, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 540, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 541, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 4, i16 5, i16 6, i16 7, i16 8, i16 0, i16 0, i16 58, i16 59, i16 9, i16 10, i16 0, i16 11, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 388, i16 0, i16 77, i16 0, i16 0, i16 12, i16 13, i16 0, i16 80, i16 81, i16 82, i16 14, i16 0, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 0, i16 26, i16 27, i16 28, i16 0, i16 0, i16 0, i16 0, i16 114, i16 0, i16 0, i16 0, i16 0, i16 0, i16 32, i16 33, i16 115, i16 35, i16 0, i16 0, i16 37, i16 0, i16 0, i16 38, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 50, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 58, i16 59, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 64, i16 65, i16 0, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 73, i16 0, i16 0, i16 0, i16 0, i16 116, i16 75, i16 76, i16 0, i16 0, i16 77, i16 0, i16 242, i16 243, i16 244, i16 0, i16 80, i16 81, i16 82, i16 401, i16 402, i16 403, i16 404, i16 405, i16 0, i16 406, i16 407, i16 408, i16 409, i16 410, i16 0, i16 0, i16 245, i16 807, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 411, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 412, i16 413, i16 0, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 0, i16 0, i16 876, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 0, i16 458, i16 459, i16 460, i16 461, i16 462, i16 0, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 401, i16 402, i16 403, i16 404, i16 405, i16 808, i16 406, i16 407, i16 408, i16 409, i16 410, i16 877, i16 474, i16 76, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 878, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 411, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 412, i16 413, i16 0, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 0, i16 0, i16 876, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 0, i16 458, i16 459, i16 460, i16 461, i16 462, i16 0, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 0, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 877, i16 474, i16 76, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 904, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 730, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 599, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 604, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 623, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 631, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 401, i16 402, i16 403, i16 404, i16 405, i16 0, i16 406, i16 407, i16 408, i16 409, i16 410, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 692, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 411, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 412, i16 413, i16 0, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 0, i16 0, i16 423, i16 0, i16 0, i16 0, i16 0, i16 0, i16 694, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 0, i16 458, i16 459, i16 460, i16 461, i16 462, i16 0, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 401, i16 402, i16 403, i16 404, i16 405, i16 0, i16 406, i16 407, i16 408, i16 409, i16 410, i16 473, i16 474, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 411, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 412, i16 413, i16 0, i16 414, i16 415, i16 416, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 0, i16 0, i16 921, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 0, i16 458, i16 459, i16 460, i16 461, i16 462, i16 0, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 473, i16 474, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 271, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 334, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 375, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 535, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 538, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 555, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 558, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 563, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 582, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 678, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 242, i16 243, i16 244, i16 0, i16 0, i16 299, i16 0, i16 679, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 561, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 699, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 618, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 242, i16 243, i16 244, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 245, i16 0, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 0, i16 269, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 270], align 16
@4 = internal unnamed_addr constant [945 x i16] [i16 80, i16 0, i16 2, i16 1, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 372, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 464, i16 0, i16 0, i16 393, i16 177, i16 178, i16 407, i16 408, i16 81, i16 446, i16 145, i16 406, i16 397, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 428, i16 428, i16 0, i16 378, i16 0, i16 428, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 173, i16 179, i16 181, i16 0, i16 0, i16 409, i16 410, i16 411, i16 416, i16 412, i16 413, i16 414, i16 0, i16 95, i16 415, i16 0, i16 0, i16 152, i16 125, i16 399, i16 0, i16 0, i16 83, i16 423, i16 79, i16 86, i16 87, i16 88, i16 0, i16 175, i16 89, i16 90, i16 212, i16 133, i16 0, i16 134, i16 355, i16 427, i16 381, i16 442, i16 0, i16 421, i16 369, i16 422, i16 0, i16 0, i16 430, i16 0, i16 443, i16 426, i16 437, i16 444, i16 359, i16 393, i16 81, i16 0, i16 381, i16 491, i16 492, i16 0, i16 494, i16 495, i16 371, i16 373, i16 375, i16 340, i16 341, i16 342, i16 343, i16 464, i16 393, i16 0, i16 433, i16 0, i16 320, i16 322, i16 360, i16 361, i16 362, i16 363, i16 364, i16 365, i16 366, i16 368, i16 0, i16 0, i16 469, i16 0, i16 467, i16 463, i16 465, i16 298, i16 394, i16 301, i16 395, i16 402, i16 451, i16 396, i16 306, i16 244, i16 0, i16 243, i16 381, i16 156, i16 428, i16 367, i16 0, i16 0, i16 292, i16 293, i16 0, i16 0, i16 294, i16 0, i16 0, i16 0, i16 429, i16 0, i16 0, i16 0, i16 0, i16 0, i16 123, i16 0, i16 125, i16 0, i16 102, i16 103, i16 0, i16 118, i16 0, i16 0, i16 0, i16 120, i16 115, i16 0, i16 240, i16 241, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 464, i16 464, i16 478, i16 0, i16 418, i16 0, i16 0, i16 0, i16 476, i16 0, i16 93, i16 0, i16 85, i16 0, i16 0, i16 400, i16 0, i16 401, i16 0, i16 0, i16 0, i16 448, i16 0, i16 0, i16 389, i16 171, i16 176, i16 0, i16 0, i16 0, i16 0, i16 0, i16 382, i16 379, i16 0, i16 428, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 146, i16 0, i16 428, i16 0, i16 0, i16 392, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 319, i16 321, i16 379, i16 0, i16 0, i16 0, i16 0, i16 431, i16 464, i16 0, i16 405, i16 464, i16 402, i16 0, i16 403, i16 300, i16 428, i16 0, i16 0, i16 0, i16 0, i16 0, i16 143, i16 379, i16 0, i16 0, i16 0, i16 144, i16 0, i16 0, i16 0, i16 295, i16 297, i16 0, i16 0, i16 0, i16 139, i16 140, i16 155, i16 0, i16 0, i16 101, i16 141, i16 0, i16 154, i16 118, i16 121, i16 0, i16 0, i16 0, i16 118, i16 0, i16 0, i16 97, i16 0, i16 99, i16 0, i16 142, i16 0, i16 163, i16 431, i16 498, i16 0, i16 496, i16 0, i16 0, i16 183, i16 379, i16 185, i16 0, i16 0, i16 0, i16 0, i16 417, i16 477, i16 0, i16 0, i16 431, i16 475, i16 420, i16 474, i16 84, i16 92, i16 0, i16 80, i16 354, i16 0, i16 132, i16 124, i16 126, i16 127, i16 128, i16 129, i16 130, i16 370, i16 419, i16 0, i16 82, i16 0, i16 233, i16 0, i16 235, i16 237, i16 0, i16 0, i16 213, i16 0, i16 125, i16 216, i16 379, i16 0, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 46, i16 47, i16 11, i16 12, i16 13, i16 16, i16 17, i16 18, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 14, i16 15, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 49, i16 50, i16 51, i16 52, i16 53, i16 41, i16 42, i16 43, i16 44, i16 45, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 61, i16 59, i16 60, i16 56, i16 57, i16 48, i16 54, i16 55, i16 66, i16 67, i16 68, i16 62, i16 63, i16 65, i16 64, i16 58, i16 69, i16 0, i16 70, i16 78, i16 424, i16 449, i16 0, i16 0, i16 325, i16 327, i16 326, i16 0, i16 0, i16 358, i16 323, i16 324, i16 328, i16 330, i16 329, i16 346, i16 347, i16 344, i16 345, i16 352, i16 348, i16 349, i16 350, i16 351, i16 338, i16 339, i16 332, i16 333, i16 331, i16 334, i16 336, i16 337, i16 353, i16 335, i16 425, i16 450, i16 0, i16 0, i16 460, i16 0, i16 462, i16 445, i16 0, i16 0, i16 304, i16 307, i16 308, i16 309, i16 311, i16 312, i16 313, i16 314, i16 315, i16 316, i16 317, i16 318, i16 310, i16 493, i16 374, i16 405, i16 432, i16 0, i16 0, i16 0, i16 468, i16 0, i16 466, i16 183, i16 455, i16 0, i16 454, i16 456, i16 0, i16 245, i16 242, i16 0, i16 398, i16 0, i16 291, i16 0, i16 0, i16 294, i16 0, i16 0, i16 150, i16 0, i16 379, i16 122, i16 157, i16 0, i16 119, i16 0, i16 118, i16 0, i16 98, i16 100, i16 0, i16 118, i16 114, i16 239, i16 0, i16 0, i16 0, i16 489, i16 490, i16 91, i16 0, i16 187, i16 0, i16 0, i16 379, i16 0, i16 404, i16 0, i16 485, i16 488, i16 486, i16 0, i16 480, i16 0, i16 482, i16 481, i16 484, i16 80, i16 0, i16 0, i16 447, i16 238, i16 0, i16 234, i16 183, i16 0, i16 0, i16 0, i16 0, i16 224, i16 0, i16 390, i16 439, i16 357, i16 0, i16 391, i16 438, i16 0, i16 441, i16 440, i16 305, i16 473, i16 431, i16 464, i16 303, i16 187, i16 452, i16 453, i16 224, i16 125, i16 210, i16 0, i16 125, i16 208, i16 135, i16 0, i16 296, i16 0, i16 464, i16 0, i16 0, i16 431, i16 0, i16 203, i16 203, i16 138, i16 290, i16 161, i16 0, i16 0, i16 108, i16 111, i16 116, i16 0, i16 0, i16 164, i16 147, i16 497, i16 184, i16 0, i16 379, i16 247, i16 252, i16 186, i16 0, i16 0, i16 487, i16 479, i16 0, i16 0, i16 96, i16 0, i16 236, i16 187, i16 0, i16 0, i16 0, i16 224, i16 0, i16 228, i16 229, i16 230, i16 0, i16 218, i16 220, i16 167, i16 225, i16 226, i16 458, i16 356, i16 461, i16 0, i16 379, i16 0, i16 214, i16 0, i16 0, i16 294, i16 431, i16 0, i16 464, i16 0, i16 0, i16 125, i16 197, i16 151, i16 203, i16 0, i16 203, i16 0, i16 0, i16 0, i16 153, i16 108, i16 117, i16 109, i16 0, i16 0, i16 108, i16 113, i16 188, i16 0, i16 273, i16 0, i16 247, i16 302, i16 0, i16 94, i16 131, i16 379, i16 211, i16 125, i16 217, i16 0, i16 227, i16 383, i16 224, i16 168, i16 169, i16 472, i16 0, i16 383, i16 136, i16 0, i16 0, i16 405, i16 0, i16 0, i16 125, i16 195, i16 148, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 199, i16 0, i16 125, i16 0, i16 110, i16 106, i16 108, i16 109, i16 0, i16 247, i16 280, i16 281, i16 282, i16 279, i16 278, i16 277, i16 0, i16 272, i16 180, i16 246, i16 0, i16 0, i16 274, i16 275, i16 253, i16 273, i16 483, i16 0, i16 215, i16 231, i16 0, i16 231, i16 221, i16 170, i16 0, i16 247, i16 231, i16 209, i16 0, i16 191, i16 0, i16 0, i16 0, i16 0, i16 201, i16 0, i16 206, i16 207, i16 125, i16 200, i16 159, i16 0, i16 0, i16 107, i16 0, i16 112, i16 104, i16 273, i16 0, i16 379, i16 0, i16 284, i16 0, i16 381, i16 276, i16 182, i16 247, i16 0, i16 380, i16 0, i16 380, i16 222, i16 273, i16 380, i16 125, i16 193, i16 137, i16 149, i16 0, i16 198, i16 202, i16 125, i16 205, i16 0, i16 0, i16 162, i16 105, i16 174, i16 254, i16 0, i16 250, i16 0, i16 285, i16 0, i16 248, i16 0, i16 0, i16 288, i16 0, i16 273, i16 232, i16 0, i16 0, i16 387, i16 0, i16 386, i16 0, i16 0, i16 299, i16 0, i16 0, i16 196, i16 204, i16 160, i16 0, i16 81, i16 58, i16 255, i16 266, i16 0, i16 0, i16 257, i16 0, i16 0, i16 0, i16 267, i16 379, i16 283, i16 0, i16 0, i16 249, i16 379, i16 172, i16 125, i16 388, i16 0, i16 384, i16 125, i16 223, i16 125, i16 0, i16 125, i16 0, i16 256, i16 258, i16 259, i16 260, i16 0, i16 0, i16 286, i16 379, i16 287, i16 0, i16 0, i16 385, i16 0, i16 0, i16 194, i16 0, i16 268, i16 262, i16 263, i16 265, i16 261, i16 289, i16 224, i16 380, i16 380, i16 380, i16 158, i16 264, i16 0, i16 166, i16 376, i16 377, i16 231, i16 380, i16 0, i16 269, i16 125, i16 380, i16 0, i16 251, i16 270], align 16
@5 = internal unnamed_addr constant [499 x i8] c"\00\02\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\02\00\01\03\01\03\02\01\01\01\01\01\04\03\00\06\00\05\03\04\03\04\03\01\01\06\07\06\07\00\01\03\01\03\01\03\01\01\02\01\03\01\02\03\01\02\00\01\01\01\01\01\04\03\01\01\05\07\09\05\03\03\03\03\03\03\01\02\05\07\09\00\06\01\06\03\03\02\00\09\01\03\00\04\01\03\01\0D\00\01\00\01\00\0A\00\09\01\02\01\01\00\07\00\08\00\02\00\02\00\02\01\02\04\03\01\04\01\04\01\04\03\04\04\05\00\05\04\01\01\01\04\05\06\01\03\06\07\03\06\01\00\01\03\04\06\00\01\01\02\01\01\01\00\02\02\03\01\03\01\02\03\01\01\03\01\01\03\02\00\03\04\03\0C\01\03\01\02\03\01\02\02\02\03\03\03\04\03\01\01\03\01\03\01\01\00\01\01\02\01\01\01\01\01\01\03\01\02\04\03\01\04\04\03\01\01\00\01\03\01\00\09\03\02\06\05\03\04\02\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\01\05\04\03\01\02\02\02\02\02\02\02\02\02\01\03\02\01\02\04\02\0D\0E\01\00\00\00\01\00\04\03\01\01\02\02\04\04\02\01\01\01\01\00\03\00\01\01\00\01\04\03\01\01\01\01\01\01\01\01\01\01\01\03\02\03\03\01\01\01\03\03\01\01\00\01\01\01\03\01\01\03\01\01\04\04\04\04\01\01\01\03\01\04\02\03\03\01\04\04\03\03\03\01\03\01\01\03\01\01\00\01\03\01\03\01\04\02\06\04\02\02\01\02\01\04\03\03\03\06\03\01\01\02\01\04\04\02\02\04\02\02\01\03\01", align 16
@compiler_globals = external dso_local local_unnamed_addr global %0, align 8
@6 = private unnamed_addr constant [60 x i8] c"__HALT_COMPILER() can only be used from the outermost scope\00", align 1
@7 = private unnamed_addr constant [10 x i8] c"{closure}\00", align 1
@zend_known_strings = external dso_local local_unnamed_addr global %32**, align 8
@zend_empty_string = external dso_local local_unnamed_addr global %32*, align 8
@8 = internal unnamed_addr constant [499 x i16] [i16 0, i16 166, i16 167, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 168, i16 169, i16 169, i16 169, i16 169, i16 169, i16 169, i16 169, i16 170, i16 170, i16 171, i16 171, i16 172, i16 172, i16 173, i16 173, i16 173, i16 174, i16 174, i16 174, i16 174, i16 174, i16 174, i16 174, i16 175, i16 174, i16 176, i16 174, i16 174, i16 174, i16 174, i16 174, i16 174, i16 177, i16 177, i16 178, i16 178, i16 179, i16 179, i16 180, i16 180, i16 181, i16 181, i16 182, i16 182, i16 183, i16 183, i16 184, i16 184, i16 185, i16 185, i16 186, i16 186, i16 187, i16 187, i16 188, i16 188, i16 189, i16 189, i16 189, i16 189, i16 189, i16 189, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 191, i16 190, i16 190, i16 190, i16 190, i16 190, i16 190, i16 192, i16 192, i16 193, i16 193, i16 194, i16 194, i16 195, i16 195, i16 196, i16 197, i16 198, i16 198, i16 199, i16 199, i16 201, i16 200, i16 202, i16 200, i16 203, i16 203, i16 204, i16 204, i16 206, i16 205, i16 208, i16 207, i16 209, i16 209, i16 210, i16 210, i16 211, i16 211, i16 212, i16 212, i16 212, i16 212, i16 213, i16 213, i16 214, i16 214, i16 215, i16 215, i16 216, i16 216, i16 216, i16 216, i16 217, i16 217, i16 217, i16 218, i16 218, i16 219, i16 219, i16 220, i16 220, i16 221, i16 221, i16 222, i16 222, i16 223, i16 223, i16 224, i16 224, i16 225, i16 225, i16 226, i16 226, i16 227, i16 227, i16 228, i16 228, i16 229, i16 229, i16 229, i16 230, i16 230, i16 231, i16 231, i16 232, i16 232, i16 233, i16 233, i16 234, i16 234, i16 235, i16 236, i16 236, i16 237, i16 237, i16 238, i16 238, i16 239, i16 239, i16 239, i16 239, i16 240, i16 240, i16 241, i16 241, i16 241, i16 242, i16 242, i16 243, i16 243, i16 244, i16 245, i16 245, i16 245, i16 245, i16 246, i16 246, i16 247, i16 248, i16 248, i16 249, i16 249, i16 250, i16 250, i16 251, i16 251, i16 252, i16 252, i16 252, i16 252, i16 252, i16 252, i16 253, i16 253, i16 254, i16 254, i16 255, i16 255, i16 256, i16 257, i16 258, i16 258, i16 259, i16 260, i16 260, i16 261, i16 261, i16 263, i16 262, i16 264, i16 264, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 265, i16 266, i16 267, i16 268, i16 269, i16 269, i16 270, i16 270, i16 271, i16 271, i16 272, i16 272, i16 273, i16 273, i16 273, i16 273, i16 274, i16 274, i16 275, i16 275, i16 276, i16 276, i16 277, i16 277, i16 277, i16 278, i16 278, i16 279, i16 279, i16 279, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 281, i16 281, i16 281, i16 282, i16 282, i16 283, i16 283, i16 284, i16 285, i16 285, i16 285, i16 286, i16 286, i16 286, i16 287, i16 287, i16 287, i16 287, i16 287, i16 287, i16 288, i16 288, i16 288, i16 289, i16 289, i16 289, i16 290, i16 290, i16 291, i16 291, i16 291, i16 291, i16 291, i16 291, i16 292, i16 292, i16 292, i16 293, i16 293, i16 293, i16 294, i16 295, i16 295, i16 296, i16 296, i16 297, i16 297, i16 297, i16 297, i16 297, i16 297, i16 298, i16 298, i16 298, i16 298, i16 299, i16 299, i16 299, i16 299, i16 299, i16 299, i16 299, i16 300, i16 300, i16 300, i16 300, i16 301, i16 301, i16 301, i16 301, i16 301, i16 301, i16 301, i16 302, i16 302, i16 303], align 16
@9 = internal unnamed_addr constant [138 x i16] [i16 -722, i16 -722, i16 -88, i16 -722, i16 -214, i16 -353, i16 22, i16 -26, i16 -722, i16 -722, i16 -722, i16 767, i16 -722, i16 -722, i16 -336, i16 171, i16 104, i16 635, i16 108, i16 -175, i16 484, i16 657, i16 -178, i16 -722, i16 13, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 252, i16 0, i16 -722, i16 -722, i16 6, i16 -722, i16 -722, i16 -722, i16 744, i16 10, i16 -722, i16 11, i16 -722, i16 -437, i16 -722, i16 -544, i16 130, i16 -722, i16 35, i16 -722, i16 -722, i16 -384, i16 31, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -612, i16 -722, i16 98, i16 -722, i16 12, i16 176, i16 -698, i16 -78, i16 -722, i16 233, i16 -722, i16 511, i16 -722, i16 548, i16 -661, i16 -722, i16 -654, i16 -722, i16 -722, i16 -21, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -721, i16 -722, i16 7, i16 -722, i16 -28, i16 533, i16 -722, i16 549, i16 -534, i16 -722, i16 -722, i16 -722, i16 -722, i16 -722, i16 -2, i16 -182, i16 -577, i16 -112, i16 119, i16 -722, i16 -29, i16 -722, i16 -10, i16 603, i16 -722, i16 -722, i16 564, i16 -13, i16 -722, i16 -6, i16 24, i16 74, i16 -722, i16 -722, i16 -722, i16 -722, i16 2, i16 55, i16 -722, i16 -722, i16 598, i16 566, i16 -114, i16 573, i16 -722, i16 -722, i16 372, i16 545, i16 -722, i16 -722, i16 -722, i16 295], align 16
@10 = internal unnamed_addr constant [138 x i16] [i16 -1, i16 1, i16 476, i16 477, i16 856, i16 2, i16 83, i16 84, i16 85, i16 373, i16 217, i16 653, i16 341, i16 192, i16 720, i16 654, i16 722, i16 193, i16 655, i16 194, i16 195, i16 182, i16 220, i16 378, i16 379, i16 646, i16 651, i16 812, i16 716, i16 348, i16 349, i16 380, i16 742, i16 795, i16 381, i16 393, i16 203, i16 89, i16 90, i16 382, i16 204, i16 383, i16 205, i16 585, i16 588, i16 664, i16 644, i16 837, i16 754, i16 709, i16 649, i16 711, i16 809, i16 638, i16 93, i16 94, i16 95, i16 96, i16 686, i16 687, i16 688, i16 689, i16 690, i16 691, i16 829, i16 304, i16 390, i16 391, i16 196, i16 197, i16 161, i16 162, i16 726, i16 780, i16 667, i16 851, i16 881, i16 882, i16 883, i16 884, i16 885, i16 886, i16 941, i16 781, i16 782, i16 783, i16 784, i16 821, i16 822, i16 857, i16 858, i16 183, i16 168, i16 169, i16 320, i16 321, i16 154, i16 302, i16 97, i16 98, i16 117, i16 400, i16 862, i16 239, i16 792, i16 865, i16 866, i16 100, i16 101, i16 156, i16 166, i16 222, i16 305, i16 102, i16 103, i16 104, i16 105, i16 178, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 158, i16 480, i16 519, i16 148, i16 149, i16 150, i16 151, i16 213, i16 214, i16 595, i16 113, i16 352, i16 353], align 16
@11 = private unnamed_addr constant [13 x i8] c"syntax error\00", align 1
@12 = private unnamed_addr constant [18 x i8] c"Error: discarding\00", align 1
@13 = private unnamed_addr constant [15 x i8] c"Error: popping\00", align 1
@14 = internal unnamed_addr constant [945 x i16] [i16 0, i16 167, i16 171, i16 0, i16 3, i16 4, i16 5, i16 6, i16 7, i16 12, i16 13, i16 15, i16 48, i16 49, i16 54, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 68, i16 69, i16 70, i16 75, i16 76, i16 77, i16 81, i16 82, i16 83, i16 84, i16 85, i16 87, i16 90, i16 91, i16 92, i16 93, i16 94, i16 96, i16 98, i16 100, i16 103, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 116, i16 117, i16 119, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 131, i16 132, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 147, i16 152, i16 153, i16 154, i16 157, i16 159, i16 160, i16 163, i16 164, i16 165, i16 172, i16 173, i16 174, i16 190, i16 197, i16 200, i16 203, i16 204, i16 205, i16 207, i16 220, i16 221, i16 222, i16 223, i16 264, i16 265, i16 266, i16 273, i16 274, i16 279, i16 280, i16 281, i16 282, i16 284, i16 285, i16 286, i16 287, i16 288, i16 289, i16 290, i16 301, i16 75, i16 83, i16 152, i16 266, i16 282, i16 282, i16 157, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 68, i16 75, i16 157, i16 279, i16 281, i16 288, i16 288, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 36, i16 131, i16 282, i16 294, i16 295, i16 296, i16 297, i16 125, i16 173, i16 262, i16 274, i16 275, i16 289, i16 291, i16 282, i16 84, i16 236, i16 237, i16 266, i16 30, i16 157, i16 276, i16 157, i16 258, i16 259, i16 282, i16 190, i16 157, i16 157, i16 157, i16 157, i16 157, i16 282, i16 283, i16 283, i16 83, i16 83, i16 187, i16 257, i16 283, i16 160, i16 282, i16 110, i16 111, i16 154, i16 172, i16 177, i16 179, i16 183, i16 185, i16 186, i16 234, i16 235, i16 289, i16 157, i16 157, i16 157, i16 157, i16 202, i16 206, i16 208, i16 157, i16 157, i16 84, i16 86, i16 148, i16 149, i16 150, i16 298, i16 299, i16 154, i16 172, i16 176, i16 172, i16 282, i16 188, i16 86, i16 277, i16 298, i16 86, i16 298, i16 160, i16 289, i16 154, i16 157, i16 231, i16 125, i16 204, i16 72, i16 73, i16 72, i16 73, i16 74, i16 36, i16 269, i16 151, i16 68, i16 9, i16 10, i16 11, i16 29, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 55, i16 67, i16 159, i16 151, i16 68, i16 130, i16 160, i16 231, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 57, i16 58, i16 269, i16 282, i16 14, i16 294, i16 282, i16 288, i16 157, i16 14, i16 162, i16 8, i16 263, i16 151, i16 231, i16 278, i16 68, i16 130, i16 151, i16 160, i16 16, i16 8, i16 159, i16 269, i16 283, i16 282, i16 8, i16 159, i16 94, i16 282, i16 260, i16 261, i16 282, i16 282, i16 187, i16 282, i16 159, i16 159, i16 159, i16 16, i16 8, i16 159, i16 159, i16 188, i16 159, i16 172, i16 185, i16 102, i16 154, i16 154, i16 172, i16 178, i16 183, i16 159, i16 8, i16 159, i16 8, i16 159, i16 195, i16 196, i16 288, i16 282, i16 302, i16 303, i16 282, i16 158, i16 83, i16 83, i16 83, i16 294, i16 294, i16 68, i16 130, i16 148, i16 299, i16 88, i16 282, i16 288, i16 86, i16 148, i16 299, i16 172, i16 159, i16 175, i16 160, i16 158, i16 124, i16 161, i16 189, i16 190, i16 197, i16 200, i16 205, i16 207, i16 163, i16 164, i16 282, i16 83, i16 155, i16 158, i16 232, i16 233, i16 282, i16 201, i16 157, i16 190, i16 157, i16 30, i16 159, i16 83, i16 267, i16 3, i16 4, i16 5, i16 6, i16 7, i16 9, i16 10, i16 11, i16 12, i16 13, i16 55, i16 69, i16 70, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 83, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 125, i16 126, i16 127, i16 128, i16 129, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 152, i16 153, i16 160, i16 168, i16 169, i16 170, i16 289, i16 292, i16 283, i16 282, i16 282, i16 282, i16 30, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 275, i16 282, i16 170, i16 289, i16 292, i16 283, i16 83, i16 160, i16 289, i16 293, i16 282, i16 36, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 158, i16 282, i16 162, i16 158, i16 294, i16 36, i16 131, i16 282, i16 16, i16 295, i16 278, i16 289, i16 283, i16 293, i16 289, i16 282, i16 282, i16 237, i16 267, i16 158, i16 158, i16 259, i16 157, i16 158, i16 159, i16 8, i16 102, i16 158, i16 158, i16 282, i16 257, i16 161, i16 154, i16 83, i16 160, i16 172, i16 154, i16 159, i16 159, i16 154, i16 172, i16 186, i16 235, i16 8, i16 158, i16 8, i16 158, i16 158, i16 159, i16 128, i16 209, i16 267, i16 128, i16 210, i16 158, i16 158, i16 49, i16 83, i16 84, i16 89, i16 300, i16 83, i16 68, i16 161, i16 161, i16 161, i16 160, i16 171, i16 157, i16 161, i16 282, i16 8, i16 158, i16 83, i16 282, i16 282, i16 188, i16 267, i16 157, i16 282, i16 231, i16 162, i16 282, i16 30, i16 231, i16 162, i16 282, i16 231, i16 161, i16 288, i16 158, i16 288, i16 157, i16 282, i16 209, i16 162, i16 161, i16 157, i16 30, i16 190, i16 282, i16 30, i16 190, i16 219, i16 260, i16 282, i16 36, i16 68, i16 131, i16 212, i16 288, i16 191, i16 30, i16 160, i16 216, i16 267, i16 192, i16 160, i16 177, i16 181, i16 184, i16 185, i16 154, i16 160, i16 196, i16 159, i16 303, i16 173, i16 129, i16 211, i16 160, i16 173, i16 240, i16 267, i16 16, i16 89, i16 162, i16 282, i16 171, i16 161, i16 158, i16 233, i16 209, i16 158, i16 158, i16 74, i16 157, i16 29, i16 132, i16 133, i16 173, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 161, i16 282, i16 161, i16 294, i16 211, i16 224, i16 188, i16 158, i16 188, i16 159, i16 288, i16 294, i16 157, i16 14, i16 158, i16 30, i16 190, i16 215, i16 159, i16 217, i16 159, i16 217, i16 114, i16 115, i16 194, i16 181, i16 185, i16 8, i16 180, i16 160, i16 182, i16 185, i16 240, i16 267, i16 238, i16 8, i16 160, i16 282, i16 162, i16 161, i16 159, i16 211, i16 190, i16 30, i16 159, i16 224, i16 229, i16 158, i16 8, i16 36, i16 198, i16 158, i16 267, i16 158, i16 159, i16 95, i16 260, i16 162, i16 294, i16 212, i16 30, i16 190, i16 214, i16 188, i16 217, i16 104, i16 105, i16 106, i16 217, i16 161, i16 157, i16 160, i16 180, i16 184, i16 161, i16 182, i16 8, i16 180, i16 160, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 117, i16 120, i16 161, i16 239, i16 249, i16 250, i16 251, i16 252, i16 173, i16 238, i16 161, i16 267, i16 188, i16 158, i16 117, i16 270, i16 226, i16 155, i16 199, i16 160, i16 270, i16 159, i16 158, i16 158, i16 158, i16 188, i16 101, i16 104, i16 159, i16 282, i16 30, i16 159, i16 218, i16 161, i16 173, i16 193, i16 188, i16 161, i16 180, i16 185, i16 161, i16 238, i16 240, i16 84, i16 253, i16 254, i16 111, i16 266, i16 252, i16 161, i16 160, i16 30, i16 230, i16 157, i16 230, i16 84, i16 238, i16 230, i16 30, i16 190, i16 213, i16 214, i16 99, i16 159, i16 159, i16 218, i16 188, i16 34, i16 84, i16 161, i16 161, i16 161, i16 159, i16 160, i16 241, i16 16, i16 267, i16 8, i16 159, i16 170, i16 255, i16 256, i16 269, i16 238, i16 228, i16 268, i16 36, i16 84, i16 271, i16 272, i16 268, i16 16, i16 161, i16 268, i16 188, i16 159, i16 188, i16 173, i16 158, i16 83, i16 152, i16 161, i16 170, i16 173, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 282, i16 254, i16 16, i16 8, i16 159, i16 170, i16 161, i16 160, i16 84, i16 8, i16 158, i16 160, i16 282, i16 160, i16 97, i16 160, i16 151, i16 161, i16 243, i16 159, i16 159, i16 102, i16 118, i16 267, i16 282, i16 256, i16 267, i16 188, i16 272, i16 188, i16 188, i16 159, i16 188, i16 170, i16 83, i16 168, i16 252, i16 240, i16 267, i16 157, i16 161, i16 161, i16 161, i16 161, i16 170, i16 224, i16 268, i16 268, i16 268, i16 158, i16 230, i16 268, i16 159, i16 160, i16 248, i16 188, i16 268, i16 161], align 16
@15 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@16 = private unnamed_addr constant [30 x i8] c"Cleanup: discarding lookahead\00", align 1
@17 = private unnamed_addr constant [17 x i8] c"Cleanup: popping\00", align 1
@18 = internal unnamed_addr constant [305 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @34, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @35, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @36, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @37, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @38, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @39, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @40, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @41, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @42, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @43, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @44, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @45, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @46, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @47, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @48, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @49, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @50, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @52, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @53, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @54, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @55, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @56, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @57, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @58, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @59, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @60, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @61, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @63, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @65, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @69, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @72, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @73, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @74, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @75, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @76, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @77, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @78, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @79, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @80, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @81, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @82, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @83, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @84, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @85, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @86, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @87, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @88, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @89, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @90, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @91, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @92, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @93, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @94, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @95, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @96, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @97, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @98, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @99, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @100, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @101, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @102, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @103, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @104, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @105, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @106, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @107, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @108, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @109, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @110, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @111, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @112, i32 0, i32 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @113, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @114, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @115, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @116, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @117, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @118, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @119, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @120, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @121, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @122, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @123, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @124, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @125, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @126, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @127, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @128, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @129, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @130, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @131, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @132, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @133, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @134, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @135, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @136, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @137, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @138, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @139, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @140, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @141, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @142, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @143, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @144, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @145, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @146, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @147, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @148, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @149, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @150, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @151, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @152, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @153, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @154, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @155, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @156, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @157, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @158, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @159, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @160, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @161, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @162, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @163, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @164, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @165, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @166, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @167, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @168, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @169, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @170, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @171, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @172, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @173, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @174, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @175, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @176, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @177, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @178, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @179, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @180, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @181, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @182, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @183, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @184, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @185, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @186, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @187, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @188, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @189, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @190, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @191, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @192, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @193, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @194, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @195, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @196, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @197, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @198, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @199, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @200, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @201, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @202, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @203, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @204, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @205, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @206, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @207, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @208, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @209, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @210, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @211, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @212, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @213, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @214, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @215, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @216, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @217, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @218, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @219, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @220, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @221, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @222, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @223, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @224, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @225, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @226, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @227, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @228, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @229, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @230, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @231, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @232, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @233, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @234, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @235, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @236, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @237, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @238, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @239, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @240, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @241, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @242, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @243, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @244, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @245, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @246, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @247, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @248, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @249, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @250, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @251, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @252, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @253, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @254, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @255, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @256, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @257, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @258, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @259, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @260, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @261, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @262, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @263, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @264, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @265, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @266, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @267, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @268, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @269, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @270, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @271, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @272, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @273, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @274, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @275, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @276, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @277, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @278, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @279, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @280, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @281, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @282, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @283, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @284, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @285, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @286, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @287, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @288, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @289, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @290, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @291, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @292, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @293, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @294, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @295, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @296, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @297, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @298, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @299, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @300, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @301, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @302, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @303, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @304, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @305, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @306, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @307, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @308, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @309, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @310, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @311, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @312, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @313, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @314, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @315, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @316, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @317, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @318, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @319, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @320, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @321, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @322, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @323, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @324, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @325, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @326, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @327, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @328, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @329, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @330, i32 0, i32 0), i8* null], align 16
@19 = private unnamed_addr constant [28 x i8] c"syntax error, unexpected %s\00", align 1
@20 = private unnamed_addr constant [42 x i8] c"syntax error, unexpected %s, expecting %s\00", align 1
@21 = private unnamed_addr constant [48 x i8] c"syntax error, unexpected %s, expecting %s or %s\00", align 1
@22 = private unnamed_addr constant [54 x i8] c"syntax error, unexpected %s, expecting %s or %s or %s\00", align 1
@23 = private unnamed_addr constant [60 x i8] c"syntax error, unexpected %s, expecting %s or %s or %s or %s\00", align 1
@language_scanner_globals = external dso_local local_unnamed_addr global %46, align 8
@24 = private unnamed_addr constant [14 x i8] c"\22end of file\22\00", align 1
@25 = private unnamed_addr constant [12 x i8] c"end of file\00", align 1
@26 = private unnamed_addr constant [12 x i8] c"'%.*s' %.*s\00", align 1
@27 = private unnamed_addr constant [7 x i8] c"'%.*s'\00", align 1
@28 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@29 = private unnamed_addr constant [11 x i8] c"$undefined\00", align 1
@30 = private unnamed_addr constant [22 x i8] c"\22include (T_INCLUDE)\22\00", align 1
@31 = private unnamed_addr constant [32 x i8] c"\22include_once (T_INCLUDE_ONCE)\22\00", align 1
@32 = private unnamed_addr constant [16 x i8] c"\22eval (T_EVAL)\22\00", align 1
@33 = private unnamed_addr constant [22 x i8] c"\22require (T_REQUIRE)\22\00", align 1
@34 = private unnamed_addr constant [32 x i8] c"\22require_once (T_REQUIRE_ONCE)\22\00", align 1
@35 = private unnamed_addr constant [4 x i8] c"','\00", align 1
@36 = private unnamed_addr constant [20 x i8] c"\22or (T_LOGICAL_OR)\22\00", align 1
@37 = private unnamed_addr constant [22 x i8] c"\22xor (T_LOGICAL_XOR)\22\00", align 1
@38 = private unnamed_addr constant [22 x i8] c"\22and (T_LOGICAL_AND)\22\00", align 1
@39 = private unnamed_addr constant [18 x i8] c"\22print (T_PRINT)\22\00", align 1
@40 = private unnamed_addr constant [18 x i8] c"\22yield (T_YIELD)\22\00", align 1
@41 = private unnamed_addr constant [22 x i8] c"\22=> (T_DOUBLE_ARROW)\22\00", align 1
@42 = private unnamed_addr constant [28 x i8] c"\22yield from (T_YIELD_FROM)\22\00", align 1
@43 = private unnamed_addr constant [4 x i8] c"'='\00", align 1
@44 = private unnamed_addr constant [20 x i8] c"\22+= (T_PLUS_EQUAL)\22\00", align 1
@45 = private unnamed_addr constant [21 x i8] c"\22-= (T_MINUS_EQUAL)\22\00", align 1
@46 = private unnamed_addr constant [19 x i8] c"\22*= (T_MUL_EQUAL)\22\00", align 1
@47 = private unnamed_addr constant [19 x i8] c"\22/= (T_DIV_EQUAL)\22\00", align 1
@48 = private unnamed_addr constant [22 x i8] c"\22.= (T_CONCAT_EQUAL)\22\00", align 1
@49 = private unnamed_addr constant [19 x i8] c"\22%= (T_MOD_EQUAL)\22\00", align 1
@50 = private unnamed_addr constant [19 x i8] c"\22&= (T_AND_EQUAL)\22\00", align 1
@51 = private unnamed_addr constant [18 x i8] c"\22|= (T_OR_EQUAL)\22\00", align 1
@52 = private unnamed_addr constant [19 x i8] c"\22^= (T_XOR_EQUAL)\22\00", align 1
@53 = private unnamed_addr constant [19 x i8] c"\22<<= (T_SL_EQUAL)\22\00", align 1
@54 = private unnamed_addr constant [19 x i8] c"\22>>= (T_SR_EQUAL)\22\00", align 1
@55 = private unnamed_addr constant [20 x i8] c"\22**= (T_POW_EQUAL)\22\00", align 1
@56 = private unnamed_addr constant [4 x i8] c"'?'\00", align 1
@57 = private unnamed_addr constant [4 x i8] c"':'\00", align 1
@58 = private unnamed_addr constant [18 x i8] c"\22?? (T_COALESCE)\22\00", align 1
@59 = private unnamed_addr constant [20 x i8] c"\22|| (T_BOOLEAN_OR)\22\00", align 1
@60 = private unnamed_addr constant [21 x i8] c"\22&& (T_BOOLEAN_AND)\22\00", align 1
@61 = private unnamed_addr constant [4 x i8] c"'|'\00", align 1
@62 = private unnamed_addr constant [4 x i8] c"'^'\00", align 1
@63 = private unnamed_addr constant [4 x i8] c"'&'\00", align 1
@64 = private unnamed_addr constant [18 x i8] c"\22== (T_IS_EQUAL)\22\00", align 1
@65 = private unnamed_addr constant [22 x i8] c"\22!= (T_IS_NOT_EQUAL)\22\00", align 1
@66 = private unnamed_addr constant [23 x i8] c"\22=== (T_IS_IDENTICAL)\22\00", align 1
@67 = private unnamed_addr constant [27 x i8] c"\22!== (T_IS_NOT_IDENTICAL)\22\00", align 1
@68 = private unnamed_addr constant [20 x i8] c"\22<=> (T_SPACESHIP)\22\00", align 1
@69 = private unnamed_addr constant [4 x i8] c"'<'\00", align 1
@70 = private unnamed_addr constant [29 x i8] c"\22<= (T_IS_SMALLER_OR_EQUAL)\22\00", align 1
@71 = private unnamed_addr constant [4 x i8] c"'>'\00", align 1
@72 = private unnamed_addr constant [29 x i8] c"\22>= (T_IS_GREATER_OR_EQUAL)\22\00", align 1
@73 = private unnamed_addr constant [12 x i8] c"\22<< (T_SL)\22\00", align 1
@74 = private unnamed_addr constant [12 x i8] c"\22>> (T_SR)\22\00", align 1
@75 = private unnamed_addr constant [4 x i8] c"'+'\00", align 1
@76 = private unnamed_addr constant [4 x i8] c"'-'\00", align 1
@77 = private unnamed_addr constant [4 x i8] c"'.'\00", align 1
@78 = private unnamed_addr constant [4 x i8] c"'*'\00", align 1
@79 = private unnamed_addr constant [4 x i8] c"'/'\00", align 1
@80 = private unnamed_addr constant [4 x i8] c"'%'\00", align 1
@81 = private unnamed_addr constant [4 x i8] c"'!'\00", align 1
@82 = private unnamed_addr constant [28 x i8] c"\22instanceof (T_INSTANCEOF)\22\00", align 1
@83 = private unnamed_addr constant [4 x i8] c"'~'\00", align 1
@84 = private unnamed_addr constant [13 x i8] c"\22++ (T_INC)\22\00", align 1
@85 = private unnamed_addr constant [13 x i8] c"\22-- (T_DEC)\22\00", align 1
@86 = private unnamed_addr constant [21 x i8] c"\22(int) (T_INT_CAST)\22\00", align 1
@87 = private unnamed_addr constant [27 x i8] c"\22(double) (T_DOUBLE_CAST)\22\00", align 1
@88 = private unnamed_addr constant [27 x i8] c"\22(string) (T_STRING_CAST)\22\00", align 1
@89 = private unnamed_addr constant [25 x i8] c"\22(array) (T_ARRAY_CAST)\22\00", align 1
@90 = private unnamed_addr constant [27 x i8] c"\22(object) (T_OBJECT_CAST)\22\00", align 1
@91 = private unnamed_addr constant [23 x i8] c"\22(bool) (T_BOOL_CAST)\22\00", align 1
@92 = private unnamed_addr constant [25 x i8] c"\22(unset) (T_UNSET_CAST)\22\00", align 1
@93 = private unnamed_addr constant [4 x i8] c"'@'\00", align 1
@94 = private unnamed_addr constant [13 x i8] c"\22** (T_POW)\22\00", align 1
@95 = private unnamed_addr constant [4 x i8] c"'['\00", align 1
@96 = private unnamed_addr constant [14 x i8] c"\22new (T_NEW)\22\00", align 1
@97 = private unnamed_addr constant [18 x i8] c"\22clone (T_CLONE)\22\00", align 1
@98 = private unnamed_addr constant [9 x i8] c"T_NOELSE\00", align 1
@99 = private unnamed_addr constant [20 x i8] c"\22elseif (T_ELSEIF)\22\00", align 1
@100 = private unnamed_addr constant [16 x i8] c"\22else (T_ELSE)\22\00", align 1
@101 = private unnamed_addr constant [18 x i8] c"\22endif (T_ENDIF)\22\00", align 1
@102 = private unnamed_addr constant [20 x i8] c"\22static (T_STATIC)\22\00", align 1
@103 = private unnamed_addr constant [24 x i8] c"\22abstract (T_ABSTRACT)\22\00", align 1
@104 = private unnamed_addr constant [18 x i8] c"\22final (T_FINAL)\22\00", align 1
@105 = private unnamed_addr constant [22 x i8] c"\22private (T_PRIVATE)\22\00", align 1
@106 = private unnamed_addr constant [26 x i8] c"\22protected (T_PROTECTED)\22\00", align 1
@107 = private unnamed_addr constant [20 x i8] c"\22public (T_PUBLIC)\22\00", align 1
@108 = private unnamed_addr constant [29 x i8] c"\22integer number (T_LNUMBER)\22\00", align 1
@109 = private unnamed_addr constant [36 x i8] c"\22floating-point number (T_DNUMBER)\22\00", align 1
@110 = private unnamed_addr constant [24 x i8] c"\22identifier (T_STRING)\22\00", align 1
@111 = private unnamed_addr constant [24 x i8] c"\22variable (T_VARIABLE)\22\00", align 1
@112 = private unnamed_addr constant [14 x i8] c"T_INLINE_HTML\00", align 1
@113 = private unnamed_addr constant [59 x i8] c"\22quoted-string and whitespace (T_ENCAPSED_AND_WHITESPACE)\22\00", align 1
@114 = private unnamed_addr constant [45 x i8] c"\22quoted-string (T_CONSTANT_ENCAPSED_STRING)\22\00", align 1
@115 = private unnamed_addr constant [35 x i8] c"\22variable name (T_STRING_VARNAME)\22\00", align 1
@116 = private unnamed_addr constant [24 x i8] c"\22number (T_NUM_STRING)\22\00", align 1
@117 = private unnamed_addr constant [16 x i8] c"\22exit (T_EXIT)\22\00", align 1
@118 = private unnamed_addr constant [12 x i8] c"\22if (T_IF)\22\00", align 1
@119 = private unnamed_addr constant [16 x i8] c"\22echo (T_ECHO)\22\00", align 1
@120 = private unnamed_addr constant [12 x i8] c"\22do (T_DO)\22\00", align 1
@121 = private unnamed_addr constant [18 x i8] c"\22while (T_WHILE)\22\00", align 1
@122 = private unnamed_addr constant [24 x i8] c"\22endwhile (T_ENDWHILE)\22\00", align 1
@123 = private unnamed_addr constant [14 x i8] c"\22for (T_FOR)\22\00", align 1
@124 = private unnamed_addr constant [20 x i8] c"\22endfor (T_ENDFOR)\22\00", align 1
@125 = private unnamed_addr constant [22 x i8] c"\22foreach (T_FOREACH)\22\00", align 1
@126 = private unnamed_addr constant [28 x i8] c"\22endforeach (T_ENDFOREACH)\22\00", align 1
@127 = private unnamed_addr constant [22 x i8] c"\22declare (T_DECLARE)\22\00", align 1
@128 = private unnamed_addr constant [28 x i8] c"\22enddeclare (T_ENDDECLARE)\22\00", align 1
@129 = private unnamed_addr constant [12 x i8] c"\22as (T_AS)\22\00", align 1
@130 = private unnamed_addr constant [20 x i8] c"\22switch (T_SWITCH)\22\00", align 1
@131 = private unnamed_addr constant [26 x i8] c"\22endswitch (T_ENDSWITCH)\22\00", align 1
@132 = private unnamed_addr constant [16 x i8] c"\22case (T_CASE)\22\00", align 1
@133 = private unnamed_addr constant [22 x i8] c"\22default (T_DEFAULT)\22\00", align 1
@134 = private unnamed_addr constant [18 x i8] c"\22break (T_BREAK)\22\00", align 1
@135 = private unnamed_addr constant [24 x i8] c"\22continue (T_CONTINUE)\22\00", align 1
@136 = private unnamed_addr constant [16 x i8] c"\22goto (T_GOTO)\22\00", align 1
@137 = private unnamed_addr constant [24 x i8] c"\22function (T_FUNCTION)\22\00", align 1
@138 = private unnamed_addr constant [18 x i8] c"\22const (T_CONST)\22\00", align 1
@139 = private unnamed_addr constant [20 x i8] c"\22return (T_RETURN)\22\00", align 1
@140 = private unnamed_addr constant [14 x i8] c"\22try (T_TRY)\22\00", align 1
@141 = private unnamed_addr constant [18 x i8] c"\22catch (T_CATCH)\22\00", align 1
@142 = private unnamed_addr constant [22 x i8] c"\22finally (T_FINALLY)\22\00", align 1
@143 = private unnamed_addr constant [18 x i8] c"\22throw (T_THROW)\22\00", align 1
@144 = private unnamed_addr constant [14 x i8] c"\22use (T_USE)\22\00", align 1
@145 = private unnamed_addr constant [26 x i8] c"\22insteadof (T_INSTEADOF)\22\00", align 1
@146 = private unnamed_addr constant [20 x i8] c"\22global (T_GLOBAL)\22\00", align 1
@147 = private unnamed_addr constant [14 x i8] c"\22var (T_VAR)\22\00", align 1
@148 = private unnamed_addr constant [18 x i8] c"\22unset (T_UNSET)\22\00", align 1
@149 = private unnamed_addr constant [18 x i8] c"\22isset (T_ISSET)\22\00", align 1
@150 = private unnamed_addr constant [18 x i8] c"\22empty (T_EMPTY)\22\00", align 1
@151 = private unnamed_addr constant [36 x i8] c"\22__halt_compiler (T_HALT_COMPILER)\22\00", align 1
@152 = private unnamed_addr constant [18 x i8] c"\22class (T_CLASS)\22\00", align 1
@153 = private unnamed_addr constant [18 x i8] c"\22trait (T_TRAIT)\22\00", align 1
@154 = private unnamed_addr constant [26 x i8] c"\22interface (T_INTERFACE)\22\00", align 1
@155 = private unnamed_addr constant [22 x i8] c"\22extends (T_EXTENDS)\22\00", align 1
@156 = private unnamed_addr constant [28 x i8] c"\22implements (T_IMPLEMENTS)\22\00", align 1
@157 = private unnamed_addr constant [25 x i8] c"\22-> (T_OBJECT_OPERATOR)\22\00", align 1
@158 = private unnamed_addr constant [16 x i8] c"\22list (T_LIST)\22\00", align 1
@159 = private unnamed_addr constant [18 x i8] c"\22array (T_ARRAY)\22\00", align 1
@160 = private unnamed_addr constant [24 x i8] c"\22callable (T_CALLABLE)\22\00", align 1
@161 = private unnamed_addr constant [20 x i8] c"\22__LINE__ (T_LINE)\22\00", align 1
@162 = private unnamed_addr constant [20 x i8] c"\22__FILE__ (T_FILE)\22\00", align 1
@163 = private unnamed_addr constant [18 x i8] c"\22__DIR__ (T_DIR)\22\00", align 1
@164 = private unnamed_addr constant [24 x i8] c"\22__CLASS__ (T_CLASS_C)\22\00", align 1
@165 = private unnamed_addr constant [24 x i8] c"\22__TRAIT__ (T_TRAIT_C)\22\00", align 1
@166 = private unnamed_addr constant [26 x i8] c"\22__METHOD__ (T_METHOD_C)\22\00", align 1
@167 = private unnamed_addr constant [26 x i8] c"\22__FUNCTION__ (T_FUNC_C)\22\00", align 1
@168 = private unnamed_addr constant [22 x i8] c"\22comment (T_COMMENT)\22\00", align 1
@169 = private unnamed_addr constant [30 x i8] c"\22doc comment (T_DOC_COMMENT)\22\00", align 1
@170 = private unnamed_addr constant [24 x i8] c"\22open tag (T_OPEN_TAG)\22\00", align 1
@171 = private unnamed_addr constant [44 x i8] c"\22open tag with echo (T_OPEN_TAG_WITH_ECHO)\22\00", align 1
@172 = private unnamed_addr constant [26 x i8] c"\22close tag (T_CLOSE_TAG)\22\00", align 1
@173 = private unnamed_addr constant [28 x i8] c"\22whitespace (T_WHITESPACE)\22\00", align 1
@174 = private unnamed_addr constant [34 x i8] c"\22heredoc start (T_START_HEREDOC)\22\00", align 1
@175 = private unnamed_addr constant [30 x i8] c"\22heredoc end (T_END_HEREDOC)\22\00", align 1
@176 = private unnamed_addr constant [34 x i8] c"\22${ (T_DOLLAR_OPEN_CURLY_BRACES)\22\00", align 1
@177 = private unnamed_addr constant [20 x i8] c"\22{$ (T_CURLY_OPEN)\22\00", align 1
@178 = private unnamed_addr constant [30 x i8] c"\22:: (T_PAAMAYIM_NEKUDOTAYIM)\22\00", align 1
@179 = private unnamed_addr constant [26 x i8] c"\22namespace (T_NAMESPACE)\22\00", align 1
@180 = private unnamed_addr constant [25 x i8] c"\22__NAMESPACE__ (T_NS_C)\22\00", align 1
@181 = private unnamed_addr constant [22 x i8] c"\22\\\\ (T_NS_SEPARATOR)\22\00", align 1
@182 = private unnamed_addr constant [19 x i8] c"\22... (T_ELLIPSIS)\22\00", align 1
@183 = private unnamed_addr constant [8 x i8] c"T_ERROR\00", align 1
@184 = private unnamed_addr constant [4 x i8] c"'('\00", align 1
@185 = private unnamed_addr constant [4 x i8] c"')'\00", align 1
@186 = private unnamed_addr constant [4 x i8] c"';'\00", align 1
@187 = private unnamed_addr constant [4 x i8] c"'{'\00", align 1
@188 = private unnamed_addr constant [4 x i8] c"'}'\00", align 1
@189 = private unnamed_addr constant [4 x i8] c"']'\00", align 1
@190 = private unnamed_addr constant [4 x i8] c"'`'\00", align 1
@191 = private unnamed_addr constant [4 x i8] c"'\22'\00", align 1
@192 = private unnamed_addr constant [4 x i8] c"'$'\00", align 1
@193 = private unnamed_addr constant [8 x i8] c"$accept\00", align 1
@194 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@195 = private unnamed_addr constant [23 x i8] c"reserved_non_modifiers\00", align 1
@196 = private unnamed_addr constant [14 x i8] c"semi_reserved\00", align 1
@197 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@198 = private unnamed_addr constant [19 x i8] c"top_statement_list\00", align 1
@199 = private unnamed_addr constant [15 x i8] c"namespace_name\00", align 1
@200 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@201 = private unnamed_addr constant [14 x i8] c"top_statement\00", align 1
@202 = private unnamed_addr constant [4 x i8] c"$@1\00", align 1
@203 = private unnamed_addr constant [4 x i8] c"$@2\00", align 1
@204 = private unnamed_addr constant [9 x i8] c"use_type\00", align 1
@205 = private unnamed_addr constant [22 x i8] c"group_use_declaration\00", align 1
@206 = private unnamed_addr constant [28 x i8] c"mixed_group_use_declaration\00", align 1
@207 = private unnamed_addr constant [15 x i8] c"possible_comma\00", align 1
@208 = private unnamed_addr constant [24 x i8] c"inline_use_declarations\00", align 1
@209 = private unnamed_addr constant [28 x i8] c"unprefixed_use_declarations\00", align 1
@210 = private unnamed_addr constant [17 x i8] c"use_declarations\00", align 1
@211 = private unnamed_addr constant [23 x i8] c"inline_use_declaration\00", align 1
@212 = private unnamed_addr constant [27 x i8] c"unprefixed_use_declaration\00", align 1
@213 = private unnamed_addr constant [16 x i8] c"use_declaration\00", align 1
@214 = private unnamed_addr constant [11 x i8] c"const_list\00", align 1
@215 = private unnamed_addr constant [21 x i8] c"inner_statement_list\00", align 1
@216 = private unnamed_addr constant [16 x i8] c"inner_statement\00", align 1
@217 = private unnamed_addr constant [10 x i8] c"statement\00", align 1
@218 = private unnamed_addr constant [4 x i8] c"$@3\00", align 1
@219 = private unnamed_addr constant [11 x i8] c"catch_list\00", align 1
@220 = private unnamed_addr constant [16 x i8] c"catch_name_list\00", align 1
@221 = private unnamed_addr constant [18 x i8] c"finally_statement\00", align 1
@222 = private unnamed_addr constant [16 x i8] c"unset_variables\00", align 1
@223 = private unnamed_addr constant [15 x i8] c"unset_variable\00", align 1
@224 = private unnamed_addr constant [31 x i8] c"function_declaration_statement\00", align 1
@225 = private unnamed_addr constant [13 x i8] c"is_reference\00", align 1
@226 = private unnamed_addr constant [12 x i8] c"is_variadic\00", align 1
@227 = private unnamed_addr constant [28 x i8] c"class_declaration_statement\00", align 1
@228 = private unnamed_addr constant [3 x i8] c"@4\00", align 1
@229 = private unnamed_addr constant [3 x i8] c"@5\00", align 1
@230 = private unnamed_addr constant [16 x i8] c"class_modifiers\00", align 1
@231 = private unnamed_addr constant [15 x i8] c"class_modifier\00", align 1
@232 = private unnamed_addr constant [28 x i8] c"trait_declaration_statement\00", align 1
@233 = private unnamed_addr constant [3 x i8] c"@6\00", align 1
@234 = private unnamed_addr constant [32 x i8] c"interface_declaration_statement\00", align 1
@235 = private unnamed_addr constant [3 x i8] c"@7\00", align 1
@236 = private unnamed_addr constant [13 x i8] c"extends_from\00", align 1
@237 = private unnamed_addr constant [23 x i8] c"interface_extends_list\00", align 1
@238 = private unnamed_addr constant [16 x i8] c"implements_list\00", align 1
@239 = private unnamed_addr constant [17 x i8] c"foreach_variable\00", align 1
@240 = private unnamed_addr constant [14 x i8] c"for_statement\00", align 1
@241 = private unnamed_addr constant [18 x i8] c"foreach_statement\00", align 1
@242 = private unnamed_addr constant [18 x i8] c"declare_statement\00", align 1
@243 = private unnamed_addr constant [17 x i8] c"switch_case_list\00", align 1
@244 = private unnamed_addr constant [10 x i8] c"case_list\00", align 1
@245 = private unnamed_addr constant [15 x i8] c"case_separator\00", align 1
@246 = private unnamed_addr constant [16 x i8] c"while_statement\00", align 1
@247 = private unnamed_addr constant [21 x i8] c"if_stmt_without_else\00", align 1
@248 = private unnamed_addr constant [8 x i8] c"if_stmt\00", align 1
@249 = private unnamed_addr constant [25 x i8] c"alt_if_stmt_without_else\00", align 1
@250 = private unnamed_addr constant [12 x i8] c"alt_if_stmt\00", align 1
@251 = private unnamed_addr constant [15 x i8] c"parameter_list\00", align 1
@252 = private unnamed_addr constant [25 x i8] c"non_empty_parameter_list\00", align 1
@253 = private unnamed_addr constant [10 x i8] c"parameter\00", align 1
@254 = private unnamed_addr constant [14 x i8] c"optional_type\00", align 1
@255 = private unnamed_addr constant [10 x i8] c"type_expr\00", align 1
@256 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@257 = private unnamed_addr constant [12 x i8] c"return_type\00", align 1
@258 = private unnamed_addr constant [14 x i8] c"argument_list\00", align 1
@259 = private unnamed_addr constant [24 x i8] c"non_empty_argument_list\00", align 1
@260 = private unnamed_addr constant [9 x i8] c"argument\00", align 1
@261 = private unnamed_addr constant [16 x i8] c"global_var_list\00", align 1
@262 = private unnamed_addr constant [11 x i8] c"global_var\00", align 1
@263 = private unnamed_addr constant [16 x i8] c"static_var_list\00", align 1
@264 = private unnamed_addr constant [11 x i8] c"static_var\00", align 1
@265 = private unnamed_addr constant [21 x i8] c"class_statement_list\00", align 1
@266 = private unnamed_addr constant [16 x i8] c"class_statement\00", align 1
@267 = private unnamed_addr constant [10 x i8] c"name_list\00", align 1
@268 = private unnamed_addr constant [18 x i8] c"trait_adaptations\00", align 1
@269 = private unnamed_addr constant [22 x i8] c"trait_adaptation_list\00", align 1
@270 = private unnamed_addr constant [17 x i8] c"trait_adaptation\00", align 1
@271 = private unnamed_addr constant [17 x i8] c"trait_precedence\00", align 1
@272 = private unnamed_addr constant [12 x i8] c"trait_alias\00", align 1
@273 = private unnamed_addr constant [23 x i8] c"trait_method_reference\00", align 1
@274 = private unnamed_addr constant [32 x i8] c"absolute_trait_method_reference\00", align 1
@275 = private unnamed_addr constant [12 x i8] c"method_body\00", align 1
@276 = private unnamed_addr constant [19 x i8] c"variable_modifiers\00", align 1
@277 = private unnamed_addr constant [17 x i8] c"method_modifiers\00", align 1
@278 = private unnamed_addr constant [27 x i8] c"non_empty_member_modifiers\00", align 1
@279 = private unnamed_addr constant [16 x i8] c"member_modifier\00", align 1
@280 = private unnamed_addr constant [14 x i8] c"property_list\00", align 1
@281 = private unnamed_addr constant [9 x i8] c"property\00", align 1
@282 = private unnamed_addr constant [17 x i8] c"class_const_list\00", align 1
@283 = private unnamed_addr constant [17 x i8] c"class_const_decl\00", align 1
@284 = private unnamed_addr constant [11 x i8] c"const_decl\00", align 1
@285 = private unnamed_addr constant [15 x i8] c"echo_expr_list\00", align 1
@286 = private unnamed_addr constant [10 x i8] c"echo_expr\00", align 1
@287 = private unnamed_addr constant [10 x i8] c"for_exprs\00", align 1
@288 = private unnamed_addr constant [20 x i8] c"non_empty_for_exprs\00", align 1
@289 = private unnamed_addr constant [16 x i8] c"anonymous_class\00", align 1
@290 = private unnamed_addr constant [3 x i8] c"@8\00", align 1
@291 = private unnamed_addr constant [9 x i8] c"new_expr\00", align 1
@292 = private unnamed_addr constant [22 x i8] c"expr_without_variable\00", align 1
@293 = private unnamed_addr constant [9 x i8] c"function\00", align 1
@294 = private unnamed_addr constant [19 x i8] c"backup_doc_comment\00", align 1
@295 = private unnamed_addr constant [16 x i8] c"backup_fn_flags\00", align 1
@296 = private unnamed_addr constant [12 x i8] c"returns_ref\00", align 1
@297 = private unnamed_addr constant [13 x i8] c"lexical_vars\00", align 1
@298 = private unnamed_addr constant [17 x i8] c"lexical_var_list\00", align 1
@299 = private unnamed_addr constant [12 x i8] c"lexical_var\00", align 1
@300 = private unnamed_addr constant [14 x i8] c"function_call\00", align 1
@301 = private unnamed_addr constant [11 x i8] c"class_name\00", align 1
@302 = private unnamed_addr constant [21 x i8] c"class_name_reference\00", align 1
@303 = private unnamed_addr constant [10 x i8] c"exit_expr\00", align 1
@304 = private unnamed_addr constant [15 x i8] c"backticks_expr\00", align 1
@305 = private unnamed_addr constant [15 x i8] c"ctor_arguments\00", align 1
@306 = private unnamed_addr constant [22 x i8] c"dereferencable_scalar\00", align 1
@307 = private unnamed_addr constant [7 x i8] c"scalar\00", align 1
@308 = private unnamed_addr constant [9 x i8] c"constant\00", align 1
@309 = private unnamed_addr constant [5 x i8] c"expr\00", align 1
@310 = private unnamed_addr constant [14 x i8] c"optional_expr\00", align 1
@311 = private unnamed_addr constant [20 x i8] c"variable_class_name\00", align 1
@312 = private unnamed_addr constant [15 x i8] c"dereferencable\00", align 1
@313 = private unnamed_addr constant [14 x i8] c"callable_expr\00", align 1
@314 = private unnamed_addr constant [18 x i8] c"callable_variable\00", align 1
@315 = private unnamed_addr constant [9 x i8] c"variable\00", align 1
@316 = private unnamed_addr constant [16 x i8] c"simple_variable\00", align 1
@317 = private unnamed_addr constant [14 x i8] c"static_member\00", align 1
@318 = private unnamed_addr constant [13 x i8] c"new_variable\00", align 1
@319 = private unnamed_addr constant [12 x i8] c"member_name\00", align 1
@320 = private unnamed_addr constant [14 x i8] c"property_name\00", align 1
@321 = private unnamed_addr constant [16 x i8] c"array_pair_list\00", align 1
@322 = private unnamed_addr constant [20 x i8] c"possible_array_pair\00", align 1
@323 = private unnamed_addr constant [26 x i8] c"non_empty_array_pair_list\00", align 1
@324 = private unnamed_addr constant [11 x i8] c"array_pair\00", align 1
@325 = private unnamed_addr constant [12 x i8] c"encaps_list\00", align 1
@326 = private unnamed_addr constant [11 x i8] c"encaps_var\00", align 1
@327 = private unnamed_addr constant [18 x i8] c"encaps_var_offset\00", align 1
@328 = private unnamed_addr constant [27 x i8] c"internal_functions_in_yacc\00", align 1
@329 = private unnamed_addr constant [16 x i8] c"isset_variables\00", align 1
@330 = private unnamed_addr constant [15 x i8] c"isset_variable\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @zendparse() local_unnamed_addr #0 {
  %1 = alloca %2, align 8
  %2 = alloca %2, align 8
  %3 = alloca %2, align 8
  %4 = alloca %2, align 8
  %5 = alloca %2, align 8
  %6 = alloca %2, align 8
  %7 = alloca %2, align 8
  %8 = alloca %52, align 8
  %9 = alloca [200 x i16], align 16
  %10 = alloca [200 x %52], align 16
  %11 = alloca [128 x i8], align 16
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca %2, align 8
  %15 = alloca %2, align 8
  %16 = alloca %2, align 8
  %17 = bitcast %52* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  %18 = bitcast %52* %8 to i64*
  store i64 0, i64* %18, align 8
  %19 = bitcast [200 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %19) #8
  %20 = bitcast [200 x %52]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %20) #8
  %21 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %21) #8
  %22 = bitcast i8** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #8
  store i8* %21, i8** %12, align 8
  %23 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #8
  store i64 128, i64* %13, align 8
  %24 = getelementptr inbounds [200 x i16], [200 x i16]* %9, i64 0, i64 0
  %25 = getelementptr inbounds [200 x %52], [200 x %52]* %10, i64 0, i64 0
  %26 = bitcast %2* %14 to i8*
  %27 = bitcast %2* %7 to i8*
  %28 = getelementptr inbounds %2, %2* %7, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %2, %2* %7, i64 0, i32 1, i32 0
  %30 = bitcast %2* %15 to i8*
  %31 = bitcast %2* %16 to i8*
  %32 = getelementptr inbounds %2, %2* %16, i64 0, i32 0, i32 0
  %33 = getelementptr inbounds %2, %2* %16, i64 0, i32 1, i32 0
  %34 = bitcast %2* %2 to i8*
  %35 = bitcast %2* %2 to %32**
  %36 = getelementptr inbounds %2, %2* %2, i64 0, i32 1, i32 0
  %37 = bitcast %2* %1 to i8*
  %38 = bitcast %2* %1 to %32**
  %39 = getelementptr inbounds %2, %2* %1, i64 0, i32 1, i32 0
  %40 = bitcast %2* %6 to i8*
  %41 = bitcast %2* %6 to %32**
  %42 = getelementptr inbounds %2, %2* %6, i64 0, i32 1, i32 0
  %43 = bitcast %2* %5 to i8*
  %44 = bitcast %2* %5 to %32**
  %45 = getelementptr inbounds %2, %2* %5, i64 0, i32 1, i32 0
  %46 = bitcast %2* %4 to i8*
  %47 = bitcast %2* %4 to %32**
  %48 = getelementptr inbounds %2, %2* %4, i64 0, i32 1, i32 0
  %49 = bitcast %2* %3 to i8*
  %50 = bitcast %2* %3 to %32**
  %51 = getelementptr inbounds %2, %2* %3, i64 0, i32 1, i32 0
  br label %59

52:                                               ; preds = %2645, %2649, %2722, %155
  %53 = phi %52* [ %2724, %2722 ], [ %2627, %2645 ], [ %2627, %2649 ], [ %159, %155 ]
  %54 = phi i16* [ %2695, %2722 ], [ %2626, %2645 ], [ %2626, %2649 ], [ %112, %155 ]
  %55 = phi i32 [ 3, %2722 ], [ %65, %2645 ], [ %65, %2649 ], [ %158, %155 ]
  %56 = phi i32 [ %2723, %2722 ], [ %2648, %2645 ], [ %2652, %2649 ], [ %149, %155 ]
  %57 = phi i32 [ %2691, %2722 ], [ %170, %2645 ], [ %170, %2649 ], [ -2, %155 ]
  %58 = getelementptr inbounds i16, i16* %54, i64 1
  br label %59

59:                                               ; preds = %52, %0
  %60 = phi %52* [ %25, %0 ], [ %109, %52 ]
  %61 = phi %52* [ %25, %0 ], [ %53, %52 ]
  %62 = phi i64 [ 200, %0 ], [ %111, %52 ]
  %63 = phi i16* [ %24, %0 ], [ %58, %52 ]
  %64 = phi i16* [ %24, %0 ], [ %113, %52 ]
  %65 = phi i32 [ 0, %0 ], [ %55, %52 ]
  %66 = phi i32 [ 0, %0 ], [ %56, %52 ]
  %67 = phi i32 [ -2, %0 ], [ %57, %52 ]
  %68 = trunc i32 %66 to i16
  store i16 %68, i16* %63, align 2
  %69 = getelementptr inbounds i16, i16* %64, i64 -1
  %70 = getelementptr inbounds i16, i16* %69, i64 %62
  %71 = icmp ugt i16* %70, %63
  br i1 %71, label %108, label %72

72:                                               ; preds = %59
  %73 = ptrtoint i16* %63 to i64
  %74 = ptrtoint i16* %64 to i64
  %75 = sub i64 %73, %74
  %76 = ashr exact i64 %75, 1
  %77 = add nsw i64 %76, 1
  %78 = icmp ugt i64 %62, 9999
  br i1 %78, label %2727, label %79

79:                                               ; preds = %72
  %80 = shl i64 %62, 1
  %81 = icmp ult i64 %80, 10000
  %82 = select i1 %81, i64 %80, i64 10000
  %83 = mul nuw nsw i64 %82, 10
  %84 = add nuw nsw i64 %83, 7
  %85 = call noalias i8* @malloc(i64 %84) #8
  %86 = icmp eq i8* %85, null
  br i1 %86, label %2727, label %87

87:                                               ; preds = %79
  %88 = bitcast i8* %85 to %53*
  %89 = bitcast i8* %85 to i16*
  %90 = bitcast i16* %64 to i8*
  %91 = shl i64 %77, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %85, i8* align 2 %90, i64 %91, i1 false)
  %92 = shl nuw nsw i64 %82, 1
  %93 = add nuw nsw i64 %92, 7
  %94 = lshr i64 %93, 3
  %95 = getelementptr inbounds %53, %53* %88, i64 %94, i32 0
  %96 = bitcast %52* %95 to i8*
  %97 = bitcast %52* %60 to i8*
  %98 = shl i64 %77, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 %98, i1 false)
  %99 = icmp eq i16* %64, %24
  br i1 %99, label %101, label %100

100:                                              ; preds = %87
  call void @free(i8* %90) #8
  br label %101

101:                                              ; preds = %100, %87
  %102 = getelementptr inbounds i16, i16* %89, i64 %76
  %103 = getelementptr inbounds %52, %52* %95, i64 %76
  %104 = getelementptr inbounds i8, i8* %85, i64 -2
  %105 = bitcast i8* %104 to i16*
  %106 = getelementptr inbounds i16, i16* %105, i64 %82
  %107 = icmp ugt i16* %106, %102
  br i1 %107, label %108, label %2732

108:                                              ; preds = %101, %59
  %109 = phi %52* [ %95, %101 ], [ %60, %59 ]
  %110 = phi %52* [ %103, %101 ], [ %61, %59 ]
  %111 = phi i64 [ %82, %101 ], [ %62, %59 ]
  %112 = phi i16* [ %102, %101 ], [ %63, %59 ]
  %113 = phi i16* [ %89, %101 ], [ %64, %59 ]
  %114 = icmp eq i32 %66, 3
  br i1 %114, label %2734, label %115

115:                                              ; preds = %108
  %116 = sext i32 %66 to i64
  %117 = getelementptr inbounds [945 x i16], [945 x i16]* @0, i64 0, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = icmp eq i16 %118, -722
  br i1 %120, label %162, label %121

121:                                              ; preds = %115
  %122 = icmp eq i32 %67, -2
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = call i32 @zendlex(%52* nonnull %8) #8
  br label %125

125:                                              ; preds = %123, %121
  %126 = phi i32 [ %124, %123 ], [ %67, %121 ]
  %127 = icmp slt i32 %126, 1
  br i1 %127, label %135, label %128

128:                                              ; preds = %125
  %129 = icmp ult i32 %126, 393
  br i1 %129, label %130, label %135

130:                                              ; preds = %128
  %131 = sext i32 %126 to i64
  %132 = getelementptr inbounds [393 x i8], [393 x i8]* @1, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  br label %135

135:                                              ; preds = %130, %128, %125
  %136 = phi i32 [ 0, %125 ], [ %134, %130 ], [ 2, %128 ]
  %137 = phi i32 [ 0, %125 ], [ %126, %130 ], [ %126, %128 ]
  %138 = add nsw i32 %136, %119
  %139 = icmp ugt i32 %138, 7398
  br i1 %139, label %162, label %140

140:                                              ; preds = %135
  %141 = sext i32 %138 to i64
  %142 = getelementptr inbounds [7399 x i16], [7399 x i16]* @2, i64 0, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = icmp eq i32 %136, %144
  br i1 %145, label %146, label %162

146:                                              ; preds = %140
  %147 = getelementptr inbounds [7399 x i16], [7399 x i16]* @3, i64 0, i64 %141
  %148 = load i16, i16* %147, align 2
  %149 = sext i16 %148 to i32
  %150 = icmp slt i16 %148, 1
  br i1 %150, label %151, label %155

151:                                              ; preds = %146
  %152 = icmp eq i16 %148, -472
  br i1 %152, label %2655, label %153

153:                                              ; preds = %151
  %154 = sub nsw i32 0, %149
  br label %168

155:                                              ; preds = %146
  %156 = icmp eq i32 %65, 0
  %157 = add nsw i32 %65, -1
  %158 = select i1 %156, i32 0, i32 %157
  %159 = getelementptr inbounds %52, %52* %110, i64 1
  %160 = bitcast %52* %159 to i64*
  %161 = load i64, i64* %18, align 8
  store i64 %161, i64* %160, align 8
  br label %52

162:                                              ; preds = %140, %135, %115
  %163 = phi i32 [ %67, %115 ], [ %137, %135 ], [ %137, %140 ]
  %164 = getelementptr inbounds [945 x i16], [945 x i16]* @4, i64 0, i64 %116
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = icmp eq i16 %165, 0
  br i1 %167, label %2653, label %168

168:                                              ; preds = %162, %153
  %169 = phi i32 [ %166, %162 ], [ %154, %153 ]
  %170 = phi i32 [ %163, %162 ], [ %137, %153 ]
  %171 = sext i32 %169 to i64
  %172 = getelementptr inbounds [499 x i8], [499 x i8]* @5, i64 0, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i64
  %175 = sub nsw i64 1, %174
  %176 = getelementptr inbounds %52, %52* %110, i64 %175
  %177 = bitcast %52* %176 to i64*
  %178 = load i64, i64* %177, align 8
  switch i32 %169, label %2622 [
    i32 2, label %179
    i32 77, label %182
    i32 78, label %185
    i32 79, label %188
    i32 80, label %195
    i32 81, label %198
    i32 82, label %201
    i32 83, label %208
    i32 84, label %213
    i32 85, label %218
    i32 86, label %223
    i32 87, label %226
    i32 88, label %229
    i32 89, label %232
    i32 90, label %235
    i32 91, label %238
    i32 92, label %243
    i32 93, label %269
    i32 94, label %291
    i32 95, label %298
    i32 96, label %320
    i32 97, label %325
    i32 98, label %329
    i32 99, label %338
    i32 100, label %343
    i32 101, label %352
    i32 102, label %356
    i32 103, label %357
    i32 104, label %358
    i32 105, label %365
    i32 106, label %372
    i32 107, label %379
    i32 110, label %386
    i32 111, label %393
    i32 112, label %398
    i32 113, label %405
    i32 114, label %410
    i32 115, label %417
    i32 116, label %422
    i32 117, label %427
    i32 118, label %436
    i32 119, label %441
    i32 120, label %448
    i32 121, label %451
    i32 122, label %454
    i32 123, label %461
    i32 124, label %466
    i32 125, label %473
    i32 126, label %476
    i32 127, label %479
    i32 128, label %482
    i32 129, label %485
    i32 130, label %488
    i32 131, label %491
    i32 132, label %492
    i32 133, label %496
    i32 134, label %499
    i32 135, label %502
    i32 136, label %509
    i32 137, label %516
    i32 138, label %527
    i32 139, label %534
    i32 140, label %539
    i32 141, label %544
    i32 142, label %549
    i32 143, label %553
    i32 144, label %557
    i32 145, label %561
    i32 146, label %566
    i32 147, label %570
    i32 148, label %574
    i32 149, label %583
    i32 150, label %594
    i32 151, label %597
    i32 152, label %604
    i32 153, label %605
    i32 154, label %614
    i32 155, label %619
    i32 156, label %624
    i32 157, label %629
    i32 158, label %632
    i32 159, label %644
    i32 160, label %649
    i32 161, label %656
    i32 162, label %657
    i32 163, label %661
    i32 164, label %666
    i32 165, label %673
    i32 166, label %678
    i32 167, label %710
    i32 168, label %711
    i32 169, label %712
    i32 170, label %713
    i32 171, label %714
    i32 172, label %717
    i32 173, label %742
    i32 174, label %745
    i32 175, label %766
    i32 176, label %769
    i32 177, label %779
    i32 178, label %780
    i32 179, label %781
    i32 180, label %784
    i32 181, label %801
    i32 182, label %804
    i32 183, label %823
    i32 184, label %824
    i32 185, label %827
    i32 186, label %828
    i32 187, label %831
    i32 188, label %832
    i32 189, label %835
    i32 190, label %838
    i32 191, label %843
    i32 192, label %848
    i32 193, label %853
    i32 194, label %856
    i32 195, label %860
    i32 196, label %863
    i32 197, label %867
    i32 198, label %870
    i32 199, label %874
    i32 200, label %878
    i32 201, label %882
    i32 202, label %886
    i32 203, label %890
    i32 204, label %893
    i32 205, label %903
    i32 208, label %911
    i32 209, label %914
    i32 210, label %918
    i32 211, label %926
    i32 212, label %936
    i32 213, label %939
    i32 214, label %947
    i32 215, label %955
    i32 216, label %965
    i32 217, label %969
    i32 218, label %977
    i32 219, label %980
    i32 220, label %983
    i32 221, label %988
    i32 222, label %995
    i32 223, label %1010
    i32 224, label %1027
    i32 225, label %1028
    i32 226, label %1031
    i32 227, label %1034
    i32 228, label %1041
    i32 229, label %1044
    i32 230, label %1047
    i32 231, label %1050
    i32 232, label %1051
    i32 233, label %1054
    i32 234, label %1057
    i32 235, label %1061
    i32 236, label %1066
    i32 237, label %1073
    i32 238, label %1076
    i32 239, label %1081
    i32 240, label %1088
    i32 241, label %1093
    i32 242, label %1099
    i32 243, label %1106
    i32 244, label %1111
    i32 245, label %1116
    i32 246, label %1123
    i32 247, label %1130
    i32 248, label %1133
    i32 249, label %1142
    i32 250, label %1151
    i32 251, label %1158
    i32 252, label %1194
    i32 253, label %1199
    i32 254, label %1206
    i32 255, label %1207
    i32 256, label %1208
    i32 257, label %1212
    i32 258, label %1217
    i32 259, label %1224
    i32 260, label %1228
    i32 261, label %1232
    i32 262, label %1239
    i32 263, label %1246
    i32 264, label %1252
    i32 265, label %1263
    i32 266, label %1271
    i32 267, label %1276
    i32 268, label %1279
    i32 269, label %1286
    i32 270, label %1287
    i32 271, label %1291
    i32 272, label %1294
    i32 273, label %1295
    i32 274, label %1296
    i32 275, label %1303
    i32 276, label %1306
    i32 277, label %1316
    i32 278, label %1317
    i32 279, label %1318
    i32 280, label %1319
    i32 281, label %1320
    i32 282, label %1321
    i32 283, label %1322
    i32 284, label %1329
    i32 285, label %1334
    i32 286, label %1353
    i32 287, label %1374
    i32 288, label %1381
    i32 289, label %1386
    i32 290, label %1407
    i32 291, label %1428
    i32 292, label %1435
    i32 293, label %1440
    i32 294, label %1445
    i32 295, label %1446
    i32 296, label %1449
    i32 297, label %1456
    i32 298, label %1461
    i32 299, label %1464
    i32 300, label %1483
    i32 301, label %1490
    i32 302, label %1493
    i32 303, label %1502
    i32 304, label %1511
    i32 305, label %1518
    i32 306, label %1525
    i32 307, label %1530
    i32 308, label %1537
    i32 309, label %1544
    i32 310, label %1551
    i32 311, label %1558
    i32 312, label %1565
    i32 313, label %1572
    i32 314, label %1579
    i32 315, label %1586
    i32 316, label %1593
    i32 317, label %1600
    i32 318, label %1607
    i32 319, label %1614
    i32 320, label %1619
    i32 321, label %1624
    i32 322, label %1629
    i32 323, label %1634
    i32 324, label %1641
    i32 325, label %1648
    i32 326, label %1655
    i32 327, label %1662
    i32 328, label %1669
    i32 329, label %1676
    i32 330, label %1683
    i32 331, label %1690
    i32 332, label %1697
    i32 333, label %1704
    i32 334, label %1711
    i32 335, label %1718
    i32 336, label %1725
    i32 337, label %1732
    i32 338, label %1739
    i32 339, label %1746
    i32 340, label %1753
    i32 341, label %1758
    i32 342, label %1763
    i32 343, label %1768
    i32 344, label %1773
    i32 345, label %1780
    i32 346, label %1787
    i32 347, label %1794
    i32 348, label %1801
    i32 349, label %1808
    i32 350, label %1815
    i32 351, label %1822
    i32 352, label %1829
    i32 353, label %1836
    i32 354, label %1843
    i32 355, label %1847
    i32 356, label %1850
    i32 357, label %1859
    i32 358, label %1866
    i32 359, label %1873
    i32 360, label %1876
    i32 361, label %1881
    i32 362, label %1886
    i32 363, label %1891
    i32 364, label %1896
    i32 365, label %1901
    i32 366, label %1906
    i32 367, label %1911
    i32 368, label %1916
    i32 369, label %1921
    i32 370, label %1924
    i32 371, label %1929
    i32 372, label %1934
    i32 373, label %1939
    i32 374, label %1946
    i32 375, label %1955
    i32 376, label %1962
    i32 377, label %2000
    i32 378, label %2039
    i32 379, label %2042
    i32 380, label %2044
    i32 381, label %2047
    i32 382, label %2048
    i32 383, label %2049
    i32 384, label %2050
    i32 385, label %2054
    i32 386, label %2061
    i32 387, label %2066
    i32 388, label %2069
    i32 389, label %2074
    i32 390, label %2081
    i32 391, label %2090
    i32 392, label %2099
    i32 393, label %2106
    i32 394, label %2113
    i32 395, label %2116
    i32 396, label %2119
    i32 397, label %2122
    i32 398, label %2123
    i32 399, label %2127
    i32 400, label %2138
    i32 401, label %2141
    i32 402, label %2144
    i32 403, label %2147
    i32 404, label %2150
    i32 405, label %2155
    i32 406, label %2160
    i32 407, label %2163
    i32 408, label %2166
    i32 409, label %2169
    i32 410, label %2172
    i32 411, label %2175
    i32 412, label %2178
    i32 413, label %2181
    i32 414, label %2184
    i32 415, label %2187
    i32 416, label %2190
    i32 417, label %2193
    i32 418, label %2197
    i32 419, label %2208
    i32 420, label %2212
    i32 421, label %2216
    i32 422, label %2219
    i32 423, label %2222
    i32 424, label %2227
    i32 425, label %2234
    i32 426, label %2241
    i32 427, label %2244
    i32 428, label %2247
    i32 429, label %2248
    i32 430, label %2251
    i32 431, label %2254
    i32 432, label %2257
    i32 433, label %2261
    i32 434, label %2264
    i32 435, label %2267
    i32 436, label %2271
    i32 437, label %2274
    i32 438, label %2279
    i32 439, label %2286
    i32 440, label %2293
    i32 441, label %2300
    i32 442, label %2309
    i32 443, label %2312
    i32 444, label %2315
    i32 445, label %2318
    i32 446, label %2325
    i32 447, label %2328
    i32 448, label %2332
    i32 449, label %2337
    i32 450, label %2344
    i32 451, label %2351
    i32 452, label %2356
    i32 453, label %2363
    i32 454, label %2370
    i32 455, label %2377
    i32 456, label %2384
    i32 457, label %2391
    i32 458, label %2394
    i32 459, label %2398
    i32 460, label %2403
    i32 461, label %2406
    i32 462, label %2410
    i32 463, label %2415
    i32 464, label %2432
    i32 465, label %2433
    i32 466, label %2436
    i32 467, label %2443
    i32 468, label %2448
    i32 469, label %2455
    i32 470, label %2460
    i32 471, label %2467
    i32 472, label %2472
    i32 473, label %2481
    i32 474, label %2488
    i32 475, label %2495
    i32 476, label %2502
    i32 477, label %2507
    i32 478, label %2514
    i32 479, label %2519
    i32 480, label %2527
    i32 481, label %2535
    i32 482, label %2540
    i32 483, label %2545
    i32 484, label %2553
    i32 485, label %2557
    i32 486, label %2560
    i32 487, label %2563
    i32 488, label %2568
    i32 489, label %2573
    i32 490, label %2577
    i32 491, label %2582
    i32 492, label %2587
    i32 493, label %2592
    i32 494, label %2597
    i32 495, label %2602
    i32 496, label %2607
    i32 497, label %2610
    i32 498, label %2617
  ]

179:                                              ; preds = %168
  %180 = bitcast %52* %110 to i64*
  %181 = load i64, i64* %180, align 8
  store i64 %181, i64* bitcast (%43** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 30) to i64*), align 8
  br label %2622

182:                                              ; preds = %168
  %183 = bitcast %52* %110 to i64*
  %184 = load i64, i64* %183, align 8
  br label %2622

185:                                              ; preds = %168
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #8
  call void @zend_lex_tstring(%2* nonnull %14) #8
  %186 = call %43* @zend_ast_create_zval_ex(%2* nonnull %14, i16 zeroext 0) #8
  %187 = ptrtoint %43* %186 to i64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #8
  br label %2622

188:                                              ; preds = %168
  %189 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %190 = load %43*, %43** %189, align 8
  %191 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %192 = load %43*, %43** %191, align 8
  %193 = call %43* @zend_ast_list_add(%43* %190, %43* %192) #8
  %194 = ptrtoint %43* %193 to i64
  br label %2622

195:                                              ; preds = %168
  %196 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 132) #8
  %197 = ptrtoint %43* %196 to i64
  br label %2622

198:                                              ; preds = %168
  %199 = bitcast %52* %110 to i64*
  %200 = load i64, i64* %199, align 8
  br label %2622

201:                                              ; preds = %168
  %202 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %203 = load %43*, %43** %202, align 8
  %204 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %205 = load %43*, %43** %204, align 8
  %206 = call %43* @zend_ast_append_str(%43* %203, %43* %205) #8
  %207 = ptrtoint %43* %206 to i64
  br label %2622

208:                                              ; preds = %168
  %209 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %210 = load %43*, %43** %209, align 8
  %211 = ptrtoint %43* %210 to i64
  %212 = getelementptr inbounds %43, %43* %210, i64 0, i32 1
  store i16 1, i16* %212, align 2
  br label %2622

213:                                              ; preds = %168
  %214 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %215 = load %43*, %43** %214, align 8
  %216 = ptrtoint %43* %215 to i64
  %217 = getelementptr inbounds %43, %43* %215, i64 0, i32 1
  store i16 2, i16* %217, align 2
  br label %2622

218:                                              ; preds = %168
  %219 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %220 = load %43*, %43** %219, align 8
  %221 = ptrtoint %43* %220 to i64
  %222 = getelementptr inbounds %43, %43* %220, i64 0, i32 1
  store i16 0, i16* %222, align 2
  br label %2622

223:                                              ; preds = %168
  %224 = bitcast %52* %110 to i64*
  %225 = load i64, i64* %224, align 8
  br label %2622

226:                                              ; preds = %168
  %227 = bitcast %52* %110 to i64*
  %228 = load i64, i64* %227, align 8
  br label %2622

229:                                              ; preds = %168
  %230 = bitcast %52* %110 to i64*
  %231 = load i64, i64* %230, align 8
  br label %2622

232:                                              ; preds = %168
  %233 = bitcast %52* %110 to i64*
  %234 = load i64, i64* %233, align 8
  br label %2622

235:                                              ; preds = %168
  %236 = bitcast %52* %110 to i64*
  %237 = load i64, i64* %236, align 8
  br label %2622

238:                                              ; preds = %168
  %239 = call i64 @zend_get_scanned_file_offset() #8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #8
  store i64 %239, i64* %28, align 8
  store i32 4, i32* %29, align 8
  %240 = call %43* @zend_ast_create_zval_ex(%2* nonnull %7, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #8
  %241 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 281, %43* %240) #8
  %242 = ptrtoint %43* %241 to i64
  call void @zend_stop_lexing() #8
  br label %2622

243:                                              ; preds = %168
  %244 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %245 = load %43*, %43** %244, align 8
  %246 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 540, %43* %245, i8* null) #8
  %247 = ptrtoint %43* %246 to i64
  %248 = load %32*, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  %249 = icmp eq %32* %248, null
  br i1 %249, label %2622, label %250

250:                                              ; preds = %243
  %251 = getelementptr inbounds %32, %32* %248, i64 0, i32 0, i32 1
  %252 = bitcast %18* %251 to %54*
  %253 = getelementptr inbounds %54, %54* %252, i64 0, i32 1
  %254 = load i8, i8* %253, align 1
  %255 = and i8 %254, 2
  %256 = icmp eq i8 %255, 0
  br i1 %256, label %257, label %268

257:                                              ; preds = %250
  %258 = getelementptr inbounds %32, %32* %248, i64 0, i32 0, i32 0
  %259 = load i32, i32* %258, align 8
  %260 = add i32 %259, -1
  store i32 %260, i32* %258, align 8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %268

262:                                              ; preds = %257
  %263 = and i8 %254, 1
  %264 = icmp eq i8 %263, 0
  %265 = bitcast %32* %248 to i8*
  br i1 %264, label %267, label %266

266:                                              ; preds = %262
  call void @free(i8* %265) #8
  br label %268

267:                                              ; preds = %262
  call void @_efree(i8* %265) #8
  br label %268

268:                                              ; preds = %250, %257, %266, %267
  store %32* null, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  br label %2622

269:                                              ; preds = %168
  %270 = load %32*, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  %271 = icmp eq %32* %270, null
  br i1 %271, label %2622, label %272

272:                                              ; preds = %269
  %273 = getelementptr inbounds %32, %32* %270, i64 0, i32 0, i32 1
  %274 = bitcast %18* %273 to %54*
  %275 = getelementptr inbounds %54, %54* %274, i64 0, i32 1
  %276 = load i8, i8* %275, align 1
  %277 = and i8 %276, 2
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %279, label %290

279:                                              ; preds = %272
  %280 = getelementptr inbounds %32, %32* %270, i64 0, i32 0, i32 0
  %281 = load i32, i32* %280, align 8
  %282 = add i32 %281, -1
  store i32 %282, i32* %280, align 8
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %284, label %290

284:                                              ; preds = %279
  %285 = and i8 %276, 1
  %286 = icmp eq i8 %285, 0
  %287 = bitcast %32* %270 to i8*
  br i1 %286, label %289, label %288

288:                                              ; preds = %284
  call void @free(i8* %287) #8
  br label %290

289:                                              ; preds = %284
  call void @_efree(i8* %287) #8
  br label %290

290:                                              ; preds = %272, %279, %288, %289
  store %32* null, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  br label %2622

291:                                              ; preds = %168
  %292 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %293 = load %43*, %43** %292, align 8
  %294 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %295 = load %43*, %43** %294, align 8
  %296 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 540, %43* %293, %43* %295) #8
  %297 = ptrtoint %43* %296 to i64
  br label %2622

298:                                              ; preds = %168
  %299 = load %32*, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  %300 = icmp eq %32* %299, null
  br i1 %300, label %2622, label %301

301:                                              ; preds = %298
  %302 = getelementptr inbounds %32, %32* %299, i64 0, i32 0, i32 1
  %303 = bitcast %18* %302 to %54*
  %304 = getelementptr inbounds %54, %54* %303, i64 0, i32 1
  %305 = load i8, i8* %304, align 1
  %306 = and i8 %305, 2
  %307 = icmp eq i8 %306, 0
  br i1 %307, label %308, label %319

308:                                              ; preds = %301
  %309 = getelementptr inbounds %32, %32* %299, i64 0, i32 0, i32 0
  %310 = load i32, i32* %309, align 8
  %311 = add i32 %310, -1
  store i32 %311, i32* %309, align 8
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %319

313:                                              ; preds = %308
  %314 = and i8 %305, 1
  %315 = icmp eq i8 %314, 0
  %316 = bitcast %32* %299 to i8*
  br i1 %315, label %318, label %317

317:                                              ; preds = %313
  call void @free(i8* %316) #8
  br label %319

318:                                              ; preds = %313
  call void @_efree(i8* %316) #8
  br label %319

319:                                              ; preds = %301, %308, %317, %318
  store %32* null, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  br label %2622

320:                                              ; preds = %168
  %321 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %322 = load %43*, %43** %321, align 8
  %323 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 540, i8* null, %43* %322) #8
  %324 = ptrtoint %43* %323 to i64
  br label %2622

325:                                              ; preds = %168
  %326 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %327 = bitcast %43** %326 to i64*
  %328 = load i64, i64* %327, align 8
  br label %2622

329:                                              ; preds = %168
  %330 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %331 = load %43*, %43** %330, align 8
  %332 = ptrtoint %43* %331 to i64
  %333 = getelementptr inbounds %52, %52* %110, i64 -2
  %334 = bitcast %52* %333 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = trunc i64 %335 to i16
  %337 = getelementptr inbounds %43, %43* %331, i64 0, i32 1
  store i16 %336, i16* %337, align 2
  br label %2622

338:                                              ; preds = %168
  %339 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %340 = load %43*, %43** %339, align 8
  %341 = ptrtoint %43* %340 to i64
  %342 = getelementptr inbounds %43, %43* %340, i64 0, i32 1
  store i16 1, i16* %342, align 2
  br label %2622

343:                                              ; preds = %168
  %344 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %345 = load %43*, %43** %344, align 8
  %346 = ptrtoint %43* %345 to i64
  %347 = getelementptr inbounds %52, %52* %110, i64 -2
  %348 = bitcast %52* %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = trunc i64 %349 to i16
  %351 = getelementptr inbounds %43, %43* %345, i64 0, i32 1
  store i16 %350, i16* %351, align 2
  br label %2622

352:                                              ; preds = %168
  %353 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %354 = bitcast %43** %353 to i64*
  %355 = load i64, i64* %354, align 8
  br label %2622

356:                                              ; preds = %168
  br label %2622

357:                                              ; preds = %168
  br label %2622

358:                                              ; preds = %168
  %359 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %360 = load %43*, %43** %359, align 8
  %361 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %362 = load %43*, %43** %361, align 8
  %363 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 543, %43* %360, %43* %362) #8
  %364 = ptrtoint %43* %363 to i64
  br label %2622

365:                                              ; preds = %168
  %366 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %367 = load %43*, %43** %366, align 8
  %368 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %369 = load %43*, %43** %368, align 8
  %370 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 543, %43* %367, %43* %369) #8
  %371 = ptrtoint %43* %370 to i64
  br label %2622

372:                                              ; preds = %168
  %373 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %374 = load %43*, %43** %373, align 8
  %375 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %376 = load %43*, %43** %375, align 8
  %377 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 543, %43* %374, %43* %376) #8
  %378 = ptrtoint %43* %377 to i64
  br label %2622

379:                                              ; preds = %168
  %380 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %381 = load %43*, %43** %380, align 8
  %382 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %383 = load %43*, %43** %382, align 8
  %384 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 543, %43* %381, %43* %383) #8
  %385 = ptrtoint %43* %384 to i64
  br label %2622

386:                                              ; preds = %168
  %387 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %388 = load %43*, %43** %387, align 8
  %389 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %390 = load %43*, %43** %389, align 8
  %391 = call %43* @zend_ast_list_add(%43* %388, %43* %390) #8
  %392 = ptrtoint %43* %391 to i64
  br label %2622

393:                                              ; preds = %168
  %394 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %395 = load %43*, %43** %394, align 8
  %396 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 143, %43* %395) #8
  %397 = ptrtoint %43* %396 to i64
  br label %2622

398:                                              ; preds = %168
  %399 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %400 = load %43*, %43** %399, align 8
  %401 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %402 = load %43*, %43** %401, align 8
  %403 = call %43* @zend_ast_list_add(%43* %400, %43* %402) #8
  %404 = ptrtoint %43* %403 to i64
  br label %2622

405:                                              ; preds = %168
  %406 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %407 = load %43*, %43** %406, align 8
  %408 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 143, %43* %407) #8
  %409 = ptrtoint %43* %408 to i64
  br label %2622

410:                                              ; preds = %168
  %411 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %412 = load %43*, %43** %411, align 8
  %413 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %414 = load %43*, %43** %413, align 8
  %415 = call %43* @zend_ast_list_add(%43* %412, %43* %414) #8
  %416 = ptrtoint %43* %415 to i64
  br label %2622

417:                                              ; preds = %168
  %418 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %419 = load %43*, %43** %418, align 8
  %420 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 143, %43* %419) #8
  %421 = ptrtoint %43* %420 to i64
  br label %2622

422:                                              ; preds = %168
  %423 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %424 = load %43*, %43** %423, align 8
  %425 = ptrtoint %43* %424 to i64
  %426 = getelementptr inbounds %43, %43* %424, i64 0, i32 1
  store i16 1, i16* %426, align 2
  br label %2622

427:                                              ; preds = %168
  %428 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %429 = load %43*, %43** %428, align 8
  %430 = ptrtoint %43* %429 to i64
  %431 = getelementptr inbounds %52, %52* %110, i64 -1
  %432 = bitcast %52* %431 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = trunc i64 %433 to i16
  %435 = getelementptr inbounds %43, %43* %429, i64 0, i32 1
  store i16 %434, i16* %435, align 2
  br label %2622

436:                                              ; preds = %168
  %437 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %438 = load %43*, %43** %437, align 8
  %439 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 541, %43* %438, i8* null) #8
  %440 = ptrtoint %43* %439 to i64
  br label %2622

441:                                              ; preds = %168
  %442 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %443 = load %43*, %43** %442, align 8
  %444 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %445 = load %43*, %43** %444, align 8
  %446 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 541, %43* %443, %43* %445) #8
  %447 = ptrtoint %43* %446 to i64
  br label %2622

448:                                              ; preds = %168
  %449 = bitcast %52* %110 to i64*
  %450 = load i64, i64* %449, align 8
  br label %2622

451:                                              ; preds = %168
  %452 = bitcast %52* %110 to i64*
  %453 = load i64, i64* %452, align 8
  br label %2622

454:                                              ; preds = %168
  %455 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %456 = load %43*, %43** %455, align 8
  %457 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %458 = load %43*, %43** %457, align 8
  %459 = call %43* @zend_ast_list_add(%43* %456, %43* %458) #8
  %460 = ptrtoint %43* %459 to i64
  br label %2622

461:                                              ; preds = %168
  %462 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %463 = load %43*, %43** %462, align 8
  %464 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 139, %43* %463) #8
  %465 = ptrtoint %43* %464 to i64
  br label %2622

466:                                              ; preds = %168
  %467 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %468 = load %43*, %43** %467, align 8
  %469 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %470 = load %43*, %43** %469, align 8
  %471 = call %43* @zend_ast_list_add(%43* %468, %43* %470) #8
  %472 = ptrtoint %43* %471 to i64
  br label %2622

473:                                              ; preds = %168
  %474 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 132) #8
  %475 = ptrtoint %43* %474 to i64
  br label %2622

476:                                              ; preds = %168
  %477 = bitcast %52* %110 to i64*
  %478 = load i64, i64* %477, align 8
  br label %2622

479:                                              ; preds = %168
  %480 = bitcast %52* %110 to i64*
  %481 = load i64, i64* %480, align 8
  br label %2622

482:                                              ; preds = %168
  %483 = bitcast %52* %110 to i64*
  %484 = load i64, i64* %483, align 8
  br label %2622

485:                                              ; preds = %168
  %486 = bitcast %52* %110 to i64*
  %487 = load i64, i64* %486, align 8
  br label %2622

488:                                              ; preds = %168
  %489 = bitcast %52* %110 to i64*
  %490 = load i64, i64* %489, align 8
  br label %2622

491:                                              ; preds = %168
  call void (i32, i8*, ...) @zend_error_noreturn(i32 64, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @6, i64 0, i64 0)) #9
  unreachable

492:                                              ; preds = %168
  %493 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %494 = bitcast %43** %493 to i64*
  %495 = load i64, i64* %494, align 8
  br label %2622

496:                                              ; preds = %168
  %497 = bitcast %52* %110 to i64*
  %498 = load i64, i64* %497, align 8
  br label %2622

499:                                              ; preds = %168
  %500 = bitcast %52* %110 to i64*
  %501 = load i64, i64* %500, align 8
  br label %2622

502:                                              ; preds = %168
  %503 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %504 = load %43*, %43** %503, align 8
  %505 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %506 = load %43*, %43** %505, align 8
  %507 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 531, %43* %504, %43* %506) #8
  %508 = ptrtoint %43* %507 to i64
  br label %2622

509:                                              ; preds = %168
  %510 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %511 = load %43*, %43** %510, align 8
  %512 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %513 = load %43*, %43** %512, align 8
  %514 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 532, %43* %511, %43* %513) #8
  %515 = ptrtoint %43* %514 to i64
  br label %2622

516:                                              ; preds = %168
  %517 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %518 = load %43*, %43** %517, align 8
  %519 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %520 = load %43*, %43** %519, align 8
  %521 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %522 = load %43*, %43** %521, align 8
  %523 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %524 = load %43*, %43** %523, align 8
  %525 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 1024, %43* %518, %43* %520, %43* %522, %43* %524) #8
  %526 = ptrtoint %43* %525 to i64
  br label %2622

527:                                              ; preds = %168
  %528 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %529 = load %43*, %43** %528, align 8
  %530 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %531 = load %43*, %43** %530, align 8
  %532 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 534, %43* %529, %43* %531) #8
  %533 = ptrtoint %43* %532 to i64
  br label %2622

534:                                              ; preds = %168
  %535 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %536 = load %43*, %43** %535, align 8
  %537 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 285, %43* %536) #8
  %538 = ptrtoint %43* %537 to i64
  br label %2622

539:                                              ; preds = %168
  %540 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %541 = load %43*, %43** %540, align 8
  %542 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 286, %43* %541) #8
  %543 = ptrtoint %43* %542 to i64
  br label %2622

544:                                              ; preds = %168
  %545 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %546 = load %43*, %43** %545, align 8
  %547 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 278, %43* %546) #8
  %548 = ptrtoint %43* %547 to i64
  br label %2622

549:                                              ; preds = %168
  %550 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %551 = bitcast %43** %550 to i64*
  %552 = load i64, i64* %551, align 8
  br label %2622

553:                                              ; preds = %168
  %554 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %555 = bitcast %43** %554 to i64*
  %556 = load i64, i64* %555, align 8
  br label %2622

557:                                              ; preds = %168
  %558 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %559 = bitcast %43** %558 to i64*
  %560 = load i64, i64* %559, align 8
  br label %2622

561:                                              ; preds = %168
  %562 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %563 = load %43*, %43** %562, align 8
  %564 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 282, %43* %563) #8
  %565 = ptrtoint %43* %564 to i64
  br label %2622

566:                                              ; preds = %168
  %567 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %568 = bitcast %43** %567 to i64*
  %569 = load i64, i64* %568, align 8
  br label %2622

570:                                              ; preds = %168
  %571 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %572 = bitcast %43** %571 to i64*
  %573 = load i64, i64* %572, align 8
  br label %2622

574:                                              ; preds = %168
  %575 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %576 = load %43*, %43** %575, align 8
  %577 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %578 = load %43*, %43** %577, align 8
  %579 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %580 = load %43*, %43** %579, align 8
  %581 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 1025, %43* %576, %43* %578, i8* null, %43* %580) #8
  %582 = ptrtoint %43* %581 to i64
  br label %2622

583:                                              ; preds = %168
  %584 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %585 = load %43*, %43** %584, align 8
  %586 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %587 = load %43*, %43** %586, align 8
  %588 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %589 = load %43*, %43** %588, align 8
  %590 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %591 = load %43*, %43** %590, align 8
  %592 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 1025, %43* %585, %43* %587, %43* %589, %43* %591) #8
  %593 = ptrtoint %43* %592 to i64
  br label %2622

594:                                              ; preds = %168
  %595 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %596 = load %43*, %43** %595, align 8
  call void @zend_handle_encoding_declaration(%43* %596) #8
  br label %2622

597:                                              ; preds = %168
  %598 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %599 = load %43*, %43** %598, align 8
  %600 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %601 = load %43*, %43** %600, align 8
  %602 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 536, %43* %599, %43* %601) #8
  %603 = ptrtoint %43* %602 to i64
  br label %2622

604:                                              ; preds = %168
  br label %2622

605:                                              ; preds = %168
  %606 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %607 = load %43*, %43** %606, align 8
  %608 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %609 = load %43*, %43** %608, align 8
  %610 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %611 = load %43*, %43** %610, align 8
  %612 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 771, %43* %607, %43* %609, %43* %611) #8
  %613 = ptrtoint %43* %612 to i64
  br label %2622

614:                                              ; preds = %168
  %615 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %616 = load %43*, %43** %615, align 8
  %617 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 283, %43* %616) #8
  %618 = ptrtoint %43* %617 to i64
  br label %2622

619:                                              ; preds = %168
  %620 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %621 = load %43*, %43** %620, align 8
  %622 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 284, %43* %621) #8
  %623 = ptrtoint %43* %622 to i64
  br label %2622

624:                                              ; preds = %168
  %625 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %626 = load %43*, %43** %625, align 8
  %627 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 279, %43* %626) #8
  %628 = ptrtoint %43* %627 to i64
  br label %2622

629:                                              ; preds = %168
  %630 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 135) #8
  %631 = ptrtoint %43* %630 to i64
  br label %2622

632:                                              ; preds = %168
  %633 = getelementptr inbounds %52, %52* %110, i64 -8, i32 0
  %634 = load %43*, %43** %633, align 8
  %635 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %636 = load %43*, %43** %635, align 8
  %637 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %638 = load %43*, %43** %637, align 8
  %639 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %640 = load %43*, %43** %639, align 8
  %641 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 772, %43* %636, %43* %638, %43* %640) #8
  %642 = call %43* @zend_ast_list_add(%43* %634, %43* %641) #8
  %643 = ptrtoint %43* %642 to i64
  br label %2622

644:                                              ; preds = %168
  %645 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %646 = load %43*, %43** %645, align 8
  %647 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 141, %43* %646) #8
  %648 = ptrtoint %43* %647 to i64
  br label %2622

649:                                              ; preds = %168
  %650 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %651 = load %43*, %43** %650, align 8
  %652 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %653 = load %43*, %43** %652, align 8
  %654 = call %43* @zend_ast_list_add(%43* %651, %43* %653) #8
  %655 = ptrtoint %43* %654 to i64
  br label %2622

656:                                              ; preds = %168
  br label %2622

657:                                              ; preds = %168
  %658 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %659 = bitcast %43** %658 to i64*
  %660 = load i64, i64* %659, align 8
  br label %2622

661:                                              ; preds = %168
  %662 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %663 = load %43*, %43** %662, align 8
  %664 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 132, %43* %663) #8
  %665 = ptrtoint %43* %664 to i64
  br label %2622

666:                                              ; preds = %168
  %667 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %668 = load %43*, %43** %667, align 8
  %669 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %670 = load %43*, %43** %669, align 8
  %671 = call %43* @zend_ast_list_add(%43* %668, %43* %670) #8
  %672 = ptrtoint %43* %671 to i64
  br label %2622

673:                                              ; preds = %168
  %674 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %675 = load %43*, %43** %674, align 8
  %676 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 277, %43* %675) #8
  %677 = ptrtoint %43* %676 to i64
  br label %2622

678:                                              ; preds = %168
  %679 = getelementptr inbounds %52, %52* %110, i64 -11
  %680 = bitcast %52* %679 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = bitcast %52* %110 to i64*
  %683 = load i64, i64* %682, align 8
  %684 = or i64 %683, %681
  %685 = trunc i64 %684 to i32
  %686 = getelementptr inbounds %52, %52* %110, i64 -12
  %687 = bitcast %52* %686 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = trunc i64 %688 to i32
  %690 = getelementptr inbounds %52, %52* %110, i64 -9
  %691 = bitcast %52* %690 to %32**
  %692 = load %32*, %32** %691, align 8
  %693 = getelementptr inbounds %52, %52* %110, i64 -10, i32 0
  %694 = load %43*, %43** %693, align 8
  %695 = getelementptr inbounds %43, %43* %694, i64 0, i32 3
  %696 = bitcast [1 x %43*]* %695 to %32**
  %697 = load %32*, %32** %696, align 8
  %698 = getelementptr inbounds %52, %52* %110, i64 -7, i32 0
  %699 = load %43*, %43** %698, align 8
  %700 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %701 = load %43*, %43** %700, align 8
  %702 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %703 = load %43*, %43** %702, align 8
  %704 = call %43* @zend_ast_create_decl(i16 zeroext 66, i32 %685, i32 %689, %32* %692, %32* %697, %43* %699, %43* null, %43* %701, %43* %703) #8
  %705 = ptrtoint %43* %704 to i64
  %706 = getelementptr inbounds %52, %52* %110, i64 -4
  %707 = bitcast %52* %706 to i64*
  %708 = load i64, i64* %707, align 8
  %709 = trunc i64 %708 to i32
  store i32 %709, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

710:                                              ; preds = %168
  br label %2622

711:                                              ; preds = %168
  br label %2622

712:                                              ; preds = %168
  br label %2622

713:                                              ; preds = %168
  br label %2622

714:                                              ; preds = %168
  %715 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %716 = sext i32 %715 to i64
  br label %2622

717:                                              ; preds = %168
  %718 = getelementptr inbounds %52, %52* %110, i64 -9
  %719 = bitcast %52* %718 to i64*
  %720 = load i64, i64* %719, align 8
  %721 = trunc i64 %720 to i32
  %722 = getelementptr inbounds %52, %52* %110, i64 -7
  %723 = bitcast %52* %722 to i64*
  %724 = load i64, i64* %723, align 8
  %725 = trunc i64 %724 to i32
  %726 = getelementptr inbounds %52, %52* %110, i64 -3
  %727 = bitcast %52* %726 to %32**
  %728 = load %32*, %32** %727, align 8
  %729 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %730 = load %43*, %43** %729, align 8
  %731 = getelementptr inbounds %43, %43* %730, i64 0, i32 3
  %732 = bitcast [1 x %43*]* %731 to %32**
  %733 = load %32*, %32** %732, align 8
  %734 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %735 = load %43*, %43** %734, align 8
  %736 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %737 = load %43*, %43** %736, align 8
  %738 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %739 = load %43*, %43** %738, align 8
  %740 = call %43* @zend_ast_create_decl(i16 zeroext 69, i32 %721, i32 %725, %32* %728, %32* %733, %43* %735, %43* %737, %43* %739, %43* null) #8
  %741 = ptrtoint %43* %740 to i64
  br label %2622

742:                                              ; preds = %168
  %743 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %744 = sext i32 %743 to i64
  br label %2622

745:                                              ; preds = %168
  %746 = getelementptr inbounds %52, %52* %110, i64 -7
  %747 = bitcast %52* %746 to i64*
  %748 = load i64, i64* %747, align 8
  %749 = trunc i64 %748 to i32
  %750 = getelementptr inbounds %52, %52* %110, i64 -3
  %751 = bitcast %52* %750 to %32**
  %752 = load %32*, %32** %751, align 8
  %753 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %754 = load %43*, %43** %753, align 8
  %755 = getelementptr inbounds %43, %43* %754, i64 0, i32 3
  %756 = bitcast [1 x %43*]* %755 to %32**
  %757 = load %32*, %32** %756, align 8
  %758 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %759 = load %43*, %43** %758, align 8
  %760 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %761 = load %43*, %43** %760, align 8
  %762 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %763 = load %43*, %43** %762, align 8
  %764 = call %43* @zend_ast_create_decl(i16 zeroext 69, i32 0, i32 %749, %32* %752, %32* %757, %43* %759, %43* %761, %43* %763, %43* null) #8
  %765 = ptrtoint %43* %764 to i64
  br label %2622

766:                                              ; preds = %168
  %767 = bitcast %52* %110 to i64*
  %768 = load i64, i64* %767, align 8
  br label %2622

769:                                              ; preds = %168
  %770 = getelementptr inbounds %52, %52* %110, i64 -1
  %771 = bitcast %52* %770 to i64*
  %772 = load i64, i64* %771, align 8
  %773 = trunc i64 %772 to i32
  %774 = bitcast %52* %110 to i64*
  %775 = load i64, i64* %774, align 8
  %776 = trunc i64 %775 to i32
  %777 = call i32 @zend_add_class_modifier(i32 %773, i32 %776) #8
  %778 = zext i32 %777 to i64
  br label %2622

779:                                              ; preds = %168
  br label %2622

780:                                              ; preds = %168
  br label %2622

781:                                              ; preds = %168
  %782 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %783 = sext i32 %782 to i64
  br label %2622

784:                                              ; preds = %168
  %785 = getelementptr inbounds %52, %52* %110, i64 -5
  %786 = bitcast %52* %785 to i64*
  %787 = load i64, i64* %786, align 8
  %788 = trunc i64 %787 to i32
  %789 = getelementptr inbounds %52, %52* %110, i64 -3
  %790 = bitcast %52* %789 to %32**
  %791 = load %32*, %32** %790, align 8
  %792 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %793 = load %43*, %43** %792, align 8
  %794 = getelementptr inbounds %43, %43* %793, i64 0, i32 3
  %795 = bitcast [1 x %43*]* %794 to %32**
  %796 = load %32*, %32** %795, align 8
  %797 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %798 = load %43*, %43** %797, align 8
  %799 = call %43* @zend_ast_create_decl(i16 zeroext 69, i32 128, i32 %788, %32* %791, %32* %796, %43* null, %43* null, %43* %798, %43* null) #8
  %800 = ptrtoint %43* %799 to i64
  br label %2622

801:                                              ; preds = %168
  %802 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %803 = sext i32 %802 to i64
  br label %2622

804:                                              ; preds = %168
  %805 = getelementptr inbounds %52, %52* %110, i64 -6
  %806 = bitcast %52* %805 to i64*
  %807 = load i64, i64* %806, align 8
  %808 = trunc i64 %807 to i32
  %809 = getelementptr inbounds %52, %52* %110, i64 -3
  %810 = bitcast %52* %809 to %32**
  %811 = load %32*, %32** %810, align 8
  %812 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %813 = load %43*, %43** %812, align 8
  %814 = getelementptr inbounds %43, %43* %813, i64 0, i32 3
  %815 = bitcast [1 x %43*]* %814 to %32**
  %816 = load %32*, %32** %815, align 8
  %817 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %818 = load %43*, %43** %817, align 8
  %819 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %820 = load %43*, %43** %819, align 8
  %821 = call %43* @zend_ast_create_decl(i16 zeroext 69, i32 64, i32 %808, %32* %811, %32* %816, %43* null, %43* %818, %43* %820, %43* null) #8
  %822 = ptrtoint %43* %821 to i64
  br label %2622

823:                                              ; preds = %168
  br label %2622

824:                                              ; preds = %168
  %825 = bitcast %52* %110 to i64*
  %826 = load i64, i64* %825, align 8
  br label %2622

827:                                              ; preds = %168
  br label %2622

828:                                              ; preds = %168
  %829 = bitcast %52* %110 to i64*
  %830 = load i64, i64* %829, align 8
  br label %2622

831:                                              ; preds = %168
  br label %2622

832:                                              ; preds = %168
  %833 = bitcast %52* %110 to i64*
  %834 = load i64, i64* %833, align 8
  br label %2622

835:                                              ; preds = %168
  %836 = bitcast %52* %110 to i64*
  %837 = load i64, i64* %836, align 8
  br label %2622

838:                                              ; preds = %168
  %839 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %840 = load %43*, %43** %839, align 8
  %841 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 280, %43* %840) #8
  %842 = ptrtoint %43* %841 to i64
  br label %2622

843:                                              ; preds = %168
  %844 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %845 = load %43*, %43** %844, align 8
  %846 = ptrtoint %43* %845 to i64
  %847 = getelementptr inbounds %43, %43* %845, i64 0, i32 1
  store i16 1, i16* %847, align 2
  br label %2622

848:                                              ; preds = %168
  %849 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %850 = load %43*, %43** %849, align 8
  %851 = ptrtoint %43* %850 to i64
  %852 = getelementptr inbounds %43, %43* %850, i64 0, i32 1
  store i16 3, i16* %852, align 2
  br label %2622

853:                                              ; preds = %168
  %854 = bitcast %52* %110 to i64*
  %855 = load i64, i64* %854, align 8
  br label %2622

856:                                              ; preds = %168
  %857 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %858 = bitcast %43** %857 to i64*
  %859 = load i64, i64* %858, align 8
  br label %2622

860:                                              ; preds = %168
  %861 = bitcast %52* %110 to i64*
  %862 = load i64, i64* %861, align 8
  br label %2622

863:                                              ; preds = %168
  %864 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %865 = bitcast %43** %864 to i64*
  %866 = load i64, i64* %865, align 8
  br label %2622

867:                                              ; preds = %168
  %868 = bitcast %52* %110 to i64*
  %869 = load i64, i64* %868, align 8
  br label %2622

870:                                              ; preds = %168
  %871 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %872 = bitcast %43** %871 to i64*
  %873 = load i64, i64* %872, align 8
  br label %2622

874:                                              ; preds = %168
  %875 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %876 = bitcast %43** %875 to i64*
  %877 = load i64, i64* %876, align 8
  br label %2622

878:                                              ; preds = %168
  %879 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %880 = bitcast %43** %879 to i64*
  %881 = load i64, i64* %880, align 8
  br label %2622

882:                                              ; preds = %168
  %883 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %884 = bitcast %43** %883 to i64*
  %885 = load i64, i64* %884, align 8
  br label %2622

886:                                              ; preds = %168
  %887 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %888 = bitcast %43** %887 to i64*
  %889 = load i64, i64* %888, align 8
  br label %2622

890:                                              ; preds = %168
  %891 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 134) #8
  %892 = ptrtoint %43* %891 to i64
  br label %2622

893:                                              ; preds = %168
  %894 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %895 = load %43*, %43** %894, align 8
  %896 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %897 = load %43*, %43** %896, align 8
  %898 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %899 = load %43*, %43** %898, align 8
  %900 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 535, %43* %897, %43* %899) #8
  %901 = call %43* @zend_ast_list_add(%43* %895, %43* %900) #8
  %902 = ptrtoint %43* %901 to i64
  br label %2622

903:                                              ; preds = %168
  %904 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %905 = load %43*, %43** %904, align 8
  %906 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %907 = load %43*, %43** %906, align 8
  %908 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 535, i8* null, %43* %907) #8
  %909 = call %43* @zend_ast_list_add(%43* %905, %43* %908) #8
  %910 = ptrtoint %43* %909 to i64
  br label %2622

911:                                              ; preds = %168
  %912 = bitcast %52* %110 to i64*
  %913 = load i64, i64* %912, align 8
  br label %2622

914:                                              ; preds = %168
  %915 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %916 = bitcast %43** %915 to i64*
  %917 = load i64, i64* %916, align 8
  br label %2622

918:                                              ; preds = %168
  %919 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %920 = load %43*, %43** %919, align 8
  %921 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %922 = load %43*, %43** %921, align 8
  %923 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, %43* %920, %43* %922) #8
  %924 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 133, %43* %923) #8
  %925 = ptrtoint %43* %924 to i64
  br label %2622

926:                                              ; preds = %168
  %927 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %928 = load %43*, %43** %927, align 8
  %929 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %930 = load %43*, %43** %929, align 8
  %931 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %932 = load %43*, %43** %931, align 8
  %933 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, %43* %930, %43* %932) #8
  %934 = call %43* @zend_ast_list_add(%43* %928, %43* %933) #8
  %935 = ptrtoint %43* %934 to i64
  br label %2622

936:                                              ; preds = %168
  %937 = bitcast %52* %110 to i64*
  %938 = load i64, i64* %937, align 8
  br label %2622

939:                                              ; preds = %168
  %940 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %941 = load %43*, %43** %940, align 8
  %942 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %943 = load %43*, %43** %942, align 8
  %944 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, i8* null, %43* %943) #8
  %945 = call %43* @zend_ast_list_add(%43* %941, %43* %944) #8
  %946 = ptrtoint %43* %945 to i64
  br label %2622

947:                                              ; preds = %168
  %948 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %949 = load %43*, %43** %948, align 8
  %950 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %951 = load %43*, %43** %950, align 8
  %952 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, %43* %949, %43* %951) #8
  %953 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 133, %43* %952) #8
  %954 = ptrtoint %43* %953 to i64
  br label %2622

955:                                              ; preds = %168
  %956 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %957 = load %43*, %43** %956, align 8
  %958 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %959 = load %43*, %43** %958, align 8
  %960 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %961 = load %43*, %43** %960, align 8
  %962 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, %43* %959, %43* %961) #8
  %963 = call %43* @zend_ast_list_add(%43* %957, %43* %962) #8
  %964 = ptrtoint %43* %963 to i64
  br label %2622

965:                                              ; preds = %168
  %966 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %967 = bitcast %43** %966 to i64*
  %968 = load i64, i64* %967, align 8
  br label %2622

969:                                              ; preds = %168
  %970 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %971 = load %43*, %43** %970, align 8
  %972 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %973 = load %43*, %43** %972, align 8
  %974 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 533, i8* null, %43* %973) #8
  %975 = call %43* @zend_ast_list_add(%43* %971, %43* %974) #8
  %976 = ptrtoint %43* %975 to i64
  br label %2622

977:                                              ; preds = %168
  %978 = bitcast %52* %110 to i64*
  %979 = load i64, i64* %978, align 8
  br label %2622

980:                                              ; preds = %168
  %981 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 136) #8
  %982 = ptrtoint %43* %981 to i64
  br label %2622

983:                                              ; preds = %168
  %984 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %985 = load %43*, %43** %984, align 8
  %986 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 136, %43* %985) #8
  %987 = ptrtoint %43* %986 to i64
  br label %2622

988:                                              ; preds = %168
  %989 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %990 = load %43*, %43** %989, align 8
  %991 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %992 = load %43*, %43** %991, align 8
  %993 = call %43* @zend_ast_list_add(%43* %990, %43* %992) #8
  %994 = ptrtoint %43* %993 to i64
  br label %2622

995:                                              ; preds = %168
  %996 = getelementptr inbounds %52, %52* %110, i64 -2
  %997 = bitcast %52* %996 to i64*
  %998 = load i64, i64* %997, align 8
  %999 = getelementptr inbounds %52, %52* %110, i64 -1
  %1000 = bitcast %52* %999 to i64*
  %1001 = load i64, i64* %1000, align 8
  %1002 = or i64 %1001, %998
  %1003 = trunc i64 %1002 to i16
  %1004 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1005 = load %43*, %43** %1004, align 8
  %1006 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1007 = load %43*, %43** %1006, align 8
  %1008 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 773, i16 zeroext %1003, %43* %1005, %43* %1007, i8* null) #8
  %1009 = ptrtoint %43* %1008 to i64
  br label %2622

1010:                                             ; preds = %168
  %1011 = getelementptr inbounds %52, %52* %110, i64 -4
  %1012 = bitcast %52* %1011 to i64*
  %1013 = load i64, i64* %1012, align 8
  %1014 = getelementptr inbounds %52, %52* %110, i64 -3
  %1015 = bitcast %52* %1014 to i64*
  %1016 = load i64, i64* %1015, align 8
  %1017 = or i64 %1016, %1013
  %1018 = trunc i64 %1017 to i16
  %1019 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %1020 = load %43*, %43** %1019, align 8
  %1021 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1022 = load %43*, %43** %1021, align 8
  %1023 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1024 = load %43*, %43** %1023, align 8
  %1025 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 773, i16 zeroext %1018, %43* %1020, %43* %1022, %43* %1024) #8
  %1026 = ptrtoint %43* %1025 to i64
  br label %2622

1027:                                             ; preds = %168
  br label %2622

1028:                                             ; preds = %168
  %1029 = bitcast %52* %110 to i64*
  %1030 = load i64, i64* %1029, align 8
  br label %2622

1031:                                             ; preds = %168
  %1032 = bitcast %52* %110 to i64*
  %1033 = load i64, i64* %1032, align 8
  br label %2622

1034:                                             ; preds = %168
  %1035 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1036 = load %43*, %43** %1035, align 8
  %1037 = ptrtoint %43* %1036 to i64
  %1038 = getelementptr inbounds %43, %43* %1036, i64 0, i32 1
  %1039 = load i16, i16* %1038, align 2
  %1040 = or i16 %1039, 256
  store i16 %1040, i16* %1038, align 2
  br label %2622

1041:                                             ; preds = %168
  %1042 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 1, i16 zeroext 7) #8
  %1043 = ptrtoint %43* %1042 to i64
  br label %2622

1044:                                             ; preds = %168
  %1045 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 1, i16 zeroext 14) #8
  %1046 = ptrtoint %43* %1045 to i64
  br label %2622

1047:                                             ; preds = %168
  %1048 = bitcast %52* %110 to i64*
  %1049 = load i64, i64* %1048, align 8
  br label %2622

1050:                                             ; preds = %168
  br label %2622

1051:                                             ; preds = %168
  %1052 = bitcast %52* %110 to i64*
  %1053 = load i64, i64* %1052, align 8
  br label %2622

1054:                                             ; preds = %168
  %1055 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 128) #8
  %1056 = ptrtoint %43* %1055 to i64
  br label %2622

1057:                                             ; preds = %168
  %1058 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1059 = bitcast %43** %1058 to i64*
  %1060 = load i64, i64* %1059, align 8
  br label %2622

1061:                                             ; preds = %168
  %1062 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1063 = load %43*, %43** %1062, align 8
  %1064 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 128, %43* %1063) #8
  %1065 = ptrtoint %43* %1064 to i64
  br label %2622

1066:                                             ; preds = %168
  %1067 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1068 = load %43*, %43** %1067, align 8
  %1069 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1070 = load %43*, %43** %1069, align 8
  %1071 = call %43* @zend_ast_list_add(%43* %1068, %43* %1070) #8
  %1072 = ptrtoint %43* %1071 to i64
  br label %2622

1073:                                             ; preds = %168
  %1074 = bitcast %52* %110 to i64*
  %1075 = load i64, i64* %1074, align 8
  br label %2622

1076:                                             ; preds = %168
  %1077 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1078 = load %43*, %43** %1077, align 8
  %1079 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 258, %43* %1078) #8
  %1080 = ptrtoint %43* %1079 to i64
  br label %2622

1081:                                             ; preds = %168
  %1082 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1083 = load %43*, %43** %1082, align 8
  %1084 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1085 = load %43*, %43** %1084, align 8
  %1086 = call %43* @zend_ast_list_add(%43* %1083, %43* %1085) #8
  %1087 = ptrtoint %43* %1086 to i64
  br label %2622

1088:                                             ; preds = %168
  %1089 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1090 = load %43*, %43** %1089, align 8
  %1091 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 132, %43* %1090) #8
  %1092 = ptrtoint %43* %1091 to i64
  br label %2622

1093:                                             ; preds = %168
  %1094 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1095 = load %43*, %43** %1094, align 8
  %1096 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %1095) #8
  %1097 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 276, %43* %1096) #8
  %1098 = ptrtoint %43* %1097 to i64
  br label %2622

1099:                                             ; preds = %168
  %1100 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1101 = load %43*, %43** %1100, align 8
  %1102 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1103 = load %43*, %43** %1102, align 8
  %1104 = call %43* @zend_ast_list_add(%43* %1101, %43* %1103) #8
  %1105 = ptrtoint %43* %1104 to i64
  br label %2622

1106:                                             ; preds = %168
  %1107 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1108 = load %43*, %43** %1107, align 8
  %1109 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 132, %43* %1108) #8
  %1110 = ptrtoint %43* %1109 to i64
  br label %2622

1111:                                             ; preds = %168
  %1112 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1113 = load %43*, %43** %1112, align 8
  %1114 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 530, %43* %1113, i8* null) #8
  %1115 = ptrtoint %43* %1114 to i64
  br label %2622

1116:                                             ; preds = %168
  %1117 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1118 = load %43*, %43** %1117, align 8
  %1119 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1120 = load %43*, %43** %1119, align 8
  %1121 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 530, %43* %1118, %43* %1120) #8
  %1122 = ptrtoint %43* %1121 to i64
  br label %2622

1123:                                             ; preds = %168
  %1124 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1125 = load %43*, %43** %1124, align 8
  %1126 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1127 = load %43*, %43** %1126, align 8
  %1128 = call %43* @zend_ast_list_add(%43* %1125, %43* %1127) #8
  %1129 = ptrtoint %43* %1128 to i64
  br label %2622

1130:                                             ; preds = %168
  %1131 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 132) #8
  %1132 = ptrtoint %43* %1131 to i64
  br label %2622

1133:                                             ; preds = %168
  %1134 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1135 = load %43*, %43** %1134, align 8
  %1136 = ptrtoint %43* %1135 to i64
  %1137 = getelementptr inbounds %52, %52* %110, i64 -2
  %1138 = bitcast %52* %1137 to i64*
  %1139 = load i64, i64* %1138, align 8
  %1140 = trunc i64 %1139 to i16
  %1141 = getelementptr inbounds %43, %43* %1135, i64 0, i32 1
  store i16 %1140, i16* %1141, align 2
  br label %2622

1142:                                             ; preds = %168
  %1143 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1144 = load %43*, %43** %1143, align 8
  %1145 = ptrtoint %43* %1144 to i64
  %1146 = getelementptr inbounds %52, %52* %110, i64 -3
  %1147 = bitcast %52* %1146 to i64*
  %1148 = load i64, i64* %1147, align 8
  %1149 = trunc i64 %1148 to i16
  %1150 = getelementptr inbounds %43, %43* %1144, i64 0, i32 1
  store i16 %1149, i16* %1150, align 2
  br label %2622

1151:                                             ; preds = %168
  %1152 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1153 = load %43*, %43** %1152, align 8
  %1154 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1155 = load %43*, %43** %1154, align 8
  %1156 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 537, %43* %1153, %43* %1155) #8
  %1157 = ptrtoint %43* %1156 to i64
  br label %2622

1158:                                             ; preds = %168
  %1159 = getelementptr inbounds %52, %52* %110, i64 -9
  %1160 = bitcast %52* %1159 to i64*
  %1161 = load i64, i64* %1160, align 8
  %1162 = getelementptr inbounds %52, %52* %110, i64 -11
  %1163 = bitcast %52* %1162 to i64*
  %1164 = load i64, i64* %1163, align 8
  %1165 = or i64 %1164, %1161
  %1166 = bitcast %52* %110 to i64*
  %1167 = load i64, i64* %1166, align 8
  %1168 = or i64 %1165, %1167
  %1169 = trunc i64 %1168 to i32
  %1170 = getelementptr inbounds %52, %52* %110, i64 -10
  %1171 = bitcast %52* %1170 to i64*
  %1172 = load i64, i64* %1171, align 8
  %1173 = trunc i64 %1172 to i32
  %1174 = getelementptr inbounds %52, %52* %110, i64 -7
  %1175 = bitcast %52* %1174 to %32**
  %1176 = load %32*, %32** %1175, align 8
  %1177 = getelementptr inbounds %52, %52* %110, i64 -8, i32 0
  %1178 = load %43*, %43** %1177, align 8
  %1179 = getelementptr inbounds %43, %43* %1178, i64 0, i32 3
  %1180 = bitcast [1 x %43*]* %1179 to %32**
  %1181 = load %32*, %32** %1180, align 8
  %1182 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %1183 = load %43*, %43** %1182, align 8
  %1184 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1185 = load %43*, %43** %1184, align 8
  %1186 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1187 = load %43*, %43** %1186, align 8
  %1188 = call %43* @zend_ast_create_decl(i16 zeroext 68, i32 %1169, i32 %1173, %32* %1176, %32* %1181, %43* %1183, %43* null, %43* %1185, %43* %1187) #8
  %1189 = ptrtoint %43* %1188 to i64
  %1190 = getelementptr inbounds %52, %52* %110, i64 -2
  %1191 = bitcast %52* %1190 to i64*
  %1192 = load i64, i64* %1191, align 8
  %1193 = trunc i64 %1192 to i32
  store i32 %1193, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

1194:                                             ; preds = %168
  %1195 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1196 = load %43*, %43** %1195, align 8
  %1197 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 141, %43* %1196) #8
  %1198 = ptrtoint %43* %1197 to i64
  br label %2622

1199:                                             ; preds = %168
  %1200 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1201 = load %43*, %43** %1200, align 8
  %1202 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1203 = load %43*, %43** %1202, align 8
  %1204 = call %43* @zend_ast_list_add(%43* %1201, %43* %1203) #8
  %1205 = ptrtoint %43* %1204 to i64
  br label %2622

1206:                                             ; preds = %168
  br label %2622

1207:                                             ; preds = %168
  br label %2622

1208:                                             ; preds = %168
  %1209 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1210 = bitcast %43** %1209 to i64*
  %1211 = load i64, i64* %1210, align 8
  br label %2622

1212:                                             ; preds = %168
  %1213 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1214 = load %43*, %43** %1213, align 8
  %1215 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 142, %43* %1214) #8
  %1216 = ptrtoint %43* %1215 to i64
  br label %2622

1217:                                             ; preds = %168
  %1218 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1219 = load %43*, %43** %1218, align 8
  %1220 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1221 = load %43*, %43** %1220, align 8
  %1222 = call %43* @zend_ast_list_add(%43* %1219, %43* %1221) #8
  %1223 = ptrtoint %43* %1222 to i64
  br label %2622

1224:                                             ; preds = %168
  %1225 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1226 = bitcast %43** %1225 to i64*
  %1227 = load i64, i64* %1226, align 8
  br label %2622

1228:                                             ; preds = %168
  %1229 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1230 = bitcast %43** %1229 to i64*
  %1231 = load i64, i64* %1230, align 8
  br label %2622

1232:                                             ; preds = %168
  %1233 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1234 = load %43*, %43** %1233, align 8
  %1235 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1236 = load %43*, %43** %1235, align 8
  %1237 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 538, %43* %1234, %43* %1236) #8
  %1238 = ptrtoint %43* %1237 to i64
  br label %2622

1239:                                             ; preds = %168
  %1240 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1241 = load %43*, %43** %1240, align 8
  %1242 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1243 = load %43*, %43** %1242, align 8
  %1244 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 542, i16 zeroext 0, %43* %1241, %43* %1243) #8
  %1245 = ptrtoint %43* %1244 to i64
  br label %2622

1246:                                             ; preds = %168
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #8
  call void @zend_lex_tstring(%2* nonnull %15) #8
  %1247 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1248 = load %43*, %43** %1247, align 8
  %1249 = call %43* @zend_ast_create_zval_ex(%2* nonnull %15, i16 zeroext 0) #8
  %1250 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 542, i16 zeroext 0, %43* %1248, %43* %1249) #8
  %1251 = ptrtoint %43* %1250 to i64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #8
  br label %2622

1252:                                             ; preds = %168
  %1253 = getelementptr inbounds %52, %52* %110, i64 -1
  %1254 = bitcast %52* %1253 to i64*
  %1255 = load i64, i64* %1254, align 8
  %1256 = trunc i64 %1255 to i16
  %1257 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1258 = load %43*, %43** %1257, align 8
  %1259 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1260 = load %43*, %43** %1259, align 8
  %1261 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 542, i16 zeroext %1256, %43* %1258, %43* %1260) #8
  %1262 = ptrtoint %43* %1261 to i64
  br label %2622

1263:                                             ; preds = %168
  %1264 = bitcast %52* %110 to i64*
  %1265 = load i64, i64* %1264, align 8
  %1266 = trunc i64 %1265 to i16
  %1267 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1268 = load %43*, %43** %1267, align 8
  %1269 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 542, i16 zeroext %1266, %43* %1268, i8* null) #8
  %1270 = ptrtoint %43* %1269 to i64
  br label %2622

1271:                                             ; preds = %168
  %1272 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1273 = load %43*, %43** %1272, align 8
  %1274 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 539, i8* null, %43* %1273) #8
  %1275 = ptrtoint %43* %1274 to i64
  br label %2622

1276:                                             ; preds = %168
  %1277 = bitcast %52* %110 to i64*
  %1278 = load i64, i64* %1277, align 8
  br label %2622

1279:                                             ; preds = %168
  %1280 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1281 = load %43*, %43** %1280, align 8
  %1282 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1283 = load %43*, %43** %1282, align 8
  %1284 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 539, %43* %1281, %43* %1283) #8
  %1285 = ptrtoint %43* %1284 to i64
  br label %2622

1286:                                             ; preds = %168
  br label %2622

1287:                                             ; preds = %168
  %1288 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1289 = bitcast %43** %1288 to i64*
  %1290 = load i64, i64* %1289, align 8
  br label %2622

1291:                                             ; preds = %168
  %1292 = bitcast %52* %110 to i64*
  %1293 = load i64, i64* %1292, align 8
  br label %2622

1294:                                             ; preds = %168
  br label %2622

1295:                                             ; preds = %168
  br label %2622

1296:                                             ; preds = %168
  %1297 = bitcast %52* %110 to i64*
  %1298 = load i64, i64* %1297, align 8
  %1299 = and i64 %1298, 1792
  %1300 = icmp eq i64 %1299, 0
  %1301 = or i64 %1298, 256
  %1302 = select i1 %1300, i64 %1301, i64 %1298
  br label %2622

1303:                                             ; preds = %168
  %1304 = bitcast %52* %110 to i64*
  %1305 = load i64, i64* %1304, align 8
  br label %2622

1306:                                             ; preds = %168
  %1307 = getelementptr inbounds %52, %52* %110, i64 -1
  %1308 = bitcast %52* %1307 to i64*
  %1309 = load i64, i64* %1308, align 8
  %1310 = trunc i64 %1309 to i32
  %1311 = bitcast %52* %110 to i64*
  %1312 = load i64, i64* %1311, align 8
  %1313 = trunc i64 %1312 to i32
  %1314 = call i32 @zend_add_member_modifier(i32 %1310, i32 %1313) #8
  %1315 = zext i32 %1314 to i64
  br label %2622

1316:                                             ; preds = %168
  br label %2622

1317:                                             ; preds = %168
  br label %2622

1318:                                             ; preds = %168
  br label %2622

1319:                                             ; preds = %168
  br label %2622

1320:                                             ; preds = %168
  br label %2622

1321:                                             ; preds = %168
  br label %2622

1322:                                             ; preds = %168
  %1323 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1324 = load %43*, %43** %1323, align 8
  %1325 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1326 = load %43*, %43** %1325, align 8
  %1327 = call %43* @zend_ast_list_add(%43* %1324, %43* %1326) #8
  %1328 = ptrtoint %43* %1327 to i64
  br label %2622

1329:                                             ; preds = %168
  %1330 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1331 = load %43*, %43** %1330, align 8
  %1332 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 138, %43* %1331) #8
  %1333 = ptrtoint %43* %1332 to i64
  br label %2622

1334:                                             ; preds = %168
  %1335 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1336 = load %43*, %43** %1335, align 8
  %1337 = bitcast %52* %110 to %32**
  %1338 = load %32*, %32** %1337, align 8
  %1339 = icmp eq %32* %1338, null
  br i1 %1339, label %1349, label %1340

1340:                                             ; preds = %1334
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #8
  store %32* %1338, %32** %41, align 8
  %1341 = getelementptr inbounds %32, %32* %1338, i64 0, i32 0, i32 1
  %1342 = bitcast %18* %1341 to %54*
  %1343 = getelementptr inbounds %54, %54* %1342, i64 0, i32 1
  %1344 = load i8, i8* %1343, align 1
  %1345 = and i8 %1344, 2
  %1346 = icmp eq i8 %1345, 0
  %1347 = select i1 %1346, i32 5126, i32 6
  store i32 %1347, i32* %42, align 8
  %1348 = call %43* @zend_ast_create_zval_ex(%2* nonnull %6, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #8
  br label %1349

1349:                                             ; preds = %1334, %1340
  %1350 = phi %43* [ %1348, %1340 ], [ null, %1334 ]
  %1351 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 774, %43* %1336, i8* null, %43* %1350) #8
  %1352 = ptrtoint %43* %1351 to i64
  br label %2622

1353:                                             ; preds = %168
  %1354 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1355 = load %43*, %43** %1354, align 8
  %1356 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1357 = load %43*, %43** %1356, align 8
  %1358 = bitcast %52* %110 to %32**
  %1359 = load %32*, %32** %1358, align 8
  %1360 = icmp eq %32* %1359, null
  br i1 %1360, label %1370, label %1361

1361:                                             ; preds = %1353
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #8
  store %32* %1359, %32** %44, align 8
  %1362 = getelementptr inbounds %32, %32* %1359, i64 0, i32 0, i32 1
  %1363 = bitcast %18* %1362 to %54*
  %1364 = getelementptr inbounds %54, %54* %1363, i64 0, i32 1
  %1365 = load i8, i8* %1364, align 1
  %1366 = and i8 %1365, 2
  %1367 = icmp eq i8 %1366, 0
  %1368 = select i1 %1367, i32 5126, i32 6
  store i32 %1368, i32* %45, align 8
  %1369 = call %43* @zend_ast_create_zval_ex(%2* nonnull %5, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #8
  br label %1370

1370:                                             ; preds = %1353, %1361
  %1371 = phi %43* [ %1369, %1361 ], [ null, %1353 ]
  %1372 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 774, %43* %1355, %43* %1357, %43* %1371) #8
  %1373 = ptrtoint %43* %1372 to i64
  br label %2622

1374:                                             ; preds = %168
  %1375 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1376 = load %43*, %43** %1375, align 8
  %1377 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1378 = load %43*, %43** %1377, align 8
  %1379 = call %43* @zend_ast_list_add(%43* %1376, %43* %1378) #8
  %1380 = ptrtoint %43* %1379 to i64
  br label %2622

1381:                                             ; preds = %168
  %1382 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1383 = load %43*, %43** %1382, align 8
  %1384 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 140, %43* %1383) #8
  %1385 = ptrtoint %43* %1384 to i64
  br label %2622

1386:                                             ; preds = %168
  %1387 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1388 = load %43*, %43** %1387, align 8
  %1389 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1390 = load %43*, %43** %1389, align 8
  %1391 = bitcast %52* %110 to %32**
  %1392 = load %32*, %32** %1391, align 8
  %1393 = icmp eq %32* %1392, null
  br i1 %1393, label %1403, label %1394

1394:                                             ; preds = %1386
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #8
  store %32* %1392, %32** %47, align 8
  %1395 = getelementptr inbounds %32, %32* %1392, i64 0, i32 0, i32 1
  %1396 = bitcast %18* %1395 to %54*
  %1397 = getelementptr inbounds %54, %54* %1396, i64 0, i32 1
  %1398 = load i8, i8* %1397, align 1
  %1399 = and i8 %1398, 2
  %1400 = icmp eq i8 %1399, 0
  %1401 = select i1 %1400, i32 5126, i32 6
  store i32 %1401, i32* %48, align 8
  %1402 = call %43* @zend_ast_create_zval_ex(%2* nonnull %4, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #8
  br label %1403

1403:                                             ; preds = %1386, %1394
  %1404 = phi %43* [ %1402, %1394 ], [ null, %1386 ]
  %1405 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 775, %43* %1388, %43* %1390, %43* %1404) #8
  %1406 = ptrtoint %43* %1405 to i64
  br label %2622

1407:                                             ; preds = %168
  %1408 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1409 = load %43*, %43** %1408, align 8
  %1410 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1411 = load %43*, %43** %1410, align 8
  %1412 = bitcast %52* %110 to %32**
  %1413 = load %32*, %32** %1412, align 8
  %1414 = icmp eq %32* %1413, null
  br i1 %1414, label %1424, label %1415

1415:                                             ; preds = %1407
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #8
  store %32* %1413, %32** %50, align 8
  %1416 = getelementptr inbounds %32, %32* %1413, i64 0, i32 0, i32 1
  %1417 = bitcast %18* %1416 to %54*
  %1418 = getelementptr inbounds %54, %54* %1417, i64 0, i32 1
  %1419 = load i8, i8* %1418, align 1
  %1420 = and i8 %1419, 2
  %1421 = icmp eq i8 %1420, 0
  %1422 = select i1 %1421, i32 5126, i32 6
  store i32 %1422, i32* %51, align 8
  %1423 = call %43* @zend_ast_create_zval_ex(%2* nonnull %3, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #8
  br label %1424

1424:                                             ; preds = %1407, %1415
  %1425 = phi %43* [ %1423, %1415 ], [ null, %1407 ]
  %1426 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 775, %43* %1409, %43* %1411, %43* %1425) #8
  %1427 = ptrtoint %43* %1426 to i64
  br label %2622

1428:                                             ; preds = %168
  %1429 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1430 = load %43*, %43** %1429, align 8
  %1431 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1432 = load %43*, %43** %1431, align 8
  %1433 = call %43* @zend_ast_list_add(%43* %1430, %43* %1432) #8
  %1434 = ptrtoint %43* %1433 to i64
  br label %2622

1435:                                             ; preds = %168
  %1436 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1437 = load %43*, %43** %1436, align 8
  %1438 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 132, %43* %1437) #8
  %1439 = ptrtoint %43* %1438 to i64
  br label %2622

1440:                                             ; preds = %168
  %1441 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1442 = load %43*, %43** %1441, align 8
  %1443 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 282, %43* %1442) #8
  %1444 = ptrtoint %43* %1443 to i64
  br label %2622

1445:                                             ; preds = %168
  br label %2622

1446:                                             ; preds = %168
  %1447 = bitcast %52* %110 to i64*
  %1448 = load i64, i64* %1447, align 8
  br label %2622

1449:                                             ; preds = %168
  %1450 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1451 = load %43*, %43** %1450, align 8
  %1452 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1453 = load %43*, %43** %1452, align 8
  %1454 = call %43* @zend_ast_list_add(%43* %1451, %43* %1453) #8
  %1455 = ptrtoint %43* %1454 to i64
  br label %2622

1456:                                             ; preds = %168
  %1457 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1458 = load %43*, %43** %1457, align 8
  %1459 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 131, %43* %1458) #8
  %1460 = ptrtoint %43* %1459 to i64
  br label %2622

1461:                                             ; preds = %168
  %1462 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %1463 = sext i32 %1462 to i64
  br label %2622

1464:                                             ; preds = %168
  %1465 = getelementptr inbounds %52, %52* %110, i64 -7
  %1466 = bitcast %52* %1465 to i64*
  %1467 = load i64, i64* %1466, align 8
  %1468 = trunc i64 %1467 to i32
  %1469 = getelementptr inbounds %52, %52* %110, i64 -3
  %1470 = bitcast %52* %1469 to %32**
  %1471 = load %32*, %32** %1470, align 8
  %1472 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %1473 = load %43*, %43** %1472, align 8
  %1474 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %1475 = load %43*, %43** %1474, align 8
  %1476 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1477 = load %43*, %43** %1476, align 8
  %1478 = call %43* @zend_ast_create_decl(i16 zeroext 69, i32 256, i32 %1468, %32* %1471, %32* null, %43* %1473, %43* %1475, %43* %1477, %43* null) #8
  %1479 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %1480 = load %43*, %43** %1479, align 8
  %1481 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 526, %43* %1478, %43* %1480) #8
  %1482 = ptrtoint %43* %1481 to i64
  br label %2622

1483:                                             ; preds = %168
  %1484 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1485 = load %43*, %43** %1484, align 8
  %1486 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1487 = load %43*, %43** %1486, align 8
  %1488 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 526, %43* %1485, %43* %1487) #8
  %1489 = ptrtoint %43* %1488 to i64
  br label %2622

1490:                                             ; preds = %168
  %1491 = bitcast %52* %110 to i64*
  %1492 = load i64, i64* %1491, align 8
  br label %2622

1493:                                             ; preds = %168
  %1494 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1495 = load %43*, %43** %1494, align 8
  %1496 = getelementptr inbounds %43, %43* %1495, i64 0, i32 1
  store i16 1, i16* %1496, align 2
  %1497 = load %43*, %43** %1494, align 8
  %1498 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1499 = load %43*, %43** %1498, align 8
  %1500 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 517, %43* %1497, %43* %1499) #8
  %1501 = ptrtoint %43* %1500 to i64
  br label %2622

1502:                                             ; preds = %168
  %1503 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1504 = load %43*, %43** %1503, align 8
  %1505 = getelementptr inbounds %43, %43* %1504, i64 0, i32 1
  store i16 3, i16* %1505, align 2
  %1506 = load %43*, %43** %1503, align 8
  %1507 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1508 = load %43*, %43** %1507, align 8
  %1509 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 517, %43* %1506, %43* %1508) #8
  %1510 = ptrtoint %43* %1509 to i64
  br label %2622

1511:                                             ; preds = %168
  %1512 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1513 = load %43*, %43** %1512, align 8
  %1514 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1515 = load %43*, %43** %1514, align 8
  %1516 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 517, %43* %1513, %43* %1515) #8
  %1517 = ptrtoint %43* %1516 to i64
  br label %2622

1518:                                             ; preds = %168
  %1519 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1520 = load %43*, %43** %1519, align 8
  %1521 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1522 = load %43*, %43** %1521, align 8
  %1523 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 518, %43* %1520, %43* %1522) #8
  %1524 = ptrtoint %43* %1523 to i64
  br label %2622

1525:                                             ; preds = %168
  %1526 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1527 = load %43*, %43** %1526, align 8
  %1528 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 266, %43* %1527) #8
  %1529 = ptrtoint %43* %1528 to i64
  br label %2622

1530:                                             ; preds = %168
  %1531 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1532 = load %43*, %43** %1531, align 8
  %1533 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1534 = load %43*, %43** %1533, align 8
  %1535 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 23, %43* %1532, %43* %1534) #8
  %1536 = ptrtoint %43* %1535 to i64
  br label %2622

1537:                                             ; preds = %168
  %1538 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1539 = load %43*, %43** %1538, align 8
  %1540 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1541 = load %43*, %43** %1540, align 8
  %1542 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 24, %43* %1539, %43* %1541) #8
  %1543 = ptrtoint %43* %1542 to i64
  br label %2622

1544:                                             ; preds = %168
  %1545 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1546 = load %43*, %43** %1545, align 8
  %1547 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1548 = load %43*, %43** %1547, align 8
  %1549 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 25, %43* %1546, %43* %1548) #8
  %1550 = ptrtoint %43* %1549 to i64
  br label %2622

1551:                                             ; preds = %168
  %1552 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1553 = load %43*, %43** %1552, align 8
  %1554 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1555 = load %43*, %43** %1554, align 8
  %1556 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 167, %43* %1553, %43* %1555) #8
  %1557 = ptrtoint %43* %1556 to i64
  br label %2622

1558:                                             ; preds = %168
  %1559 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1560 = load %43*, %43** %1559, align 8
  %1561 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1562 = load %43*, %43** %1561, align 8
  %1563 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 26, %43* %1560, %43* %1562) #8
  %1564 = ptrtoint %43* %1563 to i64
  br label %2622

1565:                                             ; preds = %168
  %1566 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1567 = load %43*, %43** %1566, align 8
  %1568 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1569 = load %43*, %43** %1568, align 8
  %1570 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 30, %43* %1567, %43* %1569) #8
  %1571 = ptrtoint %43* %1570 to i64
  br label %2622

1572:                                             ; preds = %168
  %1573 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1574 = load %43*, %43** %1573, align 8
  %1575 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1576 = load %43*, %43** %1575, align 8
  %1577 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 27, %43* %1574, %43* %1576) #8
  %1578 = ptrtoint %43* %1577 to i64
  br label %2622

1579:                                             ; preds = %168
  %1580 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1581 = load %43*, %43** %1580, align 8
  %1582 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1583 = load %43*, %43** %1582, align 8
  %1584 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 32, %43* %1581, %43* %1583) #8
  %1585 = ptrtoint %43* %1584 to i64
  br label %2622

1586:                                             ; preds = %168
  %1587 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1588 = load %43*, %43** %1587, align 8
  %1589 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1590 = load %43*, %43** %1589, align 8
  %1591 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 31, %43* %1588, %43* %1590) #8
  %1592 = ptrtoint %43* %1591 to i64
  br label %2622

1593:                                             ; preds = %168
  %1594 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1595 = load %43*, %43** %1594, align 8
  %1596 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1597 = load %43*, %43** %1596, align 8
  %1598 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 33, %43* %1595, %43* %1597) #8
  %1599 = ptrtoint %43* %1598 to i64
  br label %2622

1600:                                             ; preds = %168
  %1601 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1602 = load %43*, %43** %1601, align 8
  %1603 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1604 = load %43*, %43** %1603, align 8
  %1605 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 28, %43* %1602, %43* %1604) #8
  %1606 = ptrtoint %43* %1605 to i64
  br label %2622

1607:                                             ; preds = %168
  %1608 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1609 = load %43*, %43** %1608, align 8
  %1610 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1611 = load %43*, %43** %1610, align 8
  %1612 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 519, i16 zeroext 29, %43* %1609, %43* %1611) #8
  %1613 = ptrtoint %43* %1612 to i64
  br label %2622

1614:                                             ; preds = %168
  %1615 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1616 = load %43*, %43** %1615, align 8
  %1617 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 273, %43* %1616) #8
  %1618 = ptrtoint %43* %1617 to i64
  br label %2622

1619:                                             ; preds = %168
  %1620 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1621 = load %43*, %43** %1620, align 8
  %1622 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 271, %43* %1621) #8
  %1623 = ptrtoint %43* %1622 to i64
  br label %2622

1624:                                             ; preds = %168
  %1625 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1626 = load %43*, %43** %1625, align 8
  %1627 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 274, %43* %1626) #8
  %1628 = ptrtoint %43* %1627 to i64
  br label %2622

1629:                                             ; preds = %168
  %1630 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1631 = load %43*, %43** %1630, align 8
  %1632 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 272, %43* %1631) #8
  %1633 = ptrtoint %43* %1632 to i64
  br label %2622

1634:                                             ; preds = %168
  %1635 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1636 = load %43*, %43** %1635, align 8
  %1637 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1638 = load %43*, %43** %1637, align 8
  %1639 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 524, %43* %1636, %43* %1638) #8
  %1640 = ptrtoint %43* %1639 to i64
  br label %2622

1641:                                             ; preds = %168
  %1642 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1643 = load %43*, %43** %1642, align 8
  %1644 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1645 = load %43*, %43** %1644, align 8
  %1646 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 523, %43* %1643, %43* %1645) #8
  %1647 = ptrtoint %43* %1646 to i64
  br label %2622

1648:                                             ; preds = %168
  %1649 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1650 = load %43*, %43** %1649, align 8
  %1651 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1652 = load %43*, %43** %1651, align 8
  %1653 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 524, %43* %1650, %43* %1652) #8
  %1654 = ptrtoint %43* %1653 to i64
  br label %2622

1655:                                             ; preds = %168
  %1656 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1657 = load %43*, %43** %1656, align 8
  %1658 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1659 = load %43*, %43** %1658, align 8
  %1660 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 523, %43* %1657, %43* %1659) #8
  %1661 = ptrtoint %43* %1660 to i64
  br label %2622

1662:                                             ; preds = %168
  %1663 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1664 = load %43*, %43** %1663, align 8
  %1665 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1666 = load %43*, %43** %1665, align 8
  %1667 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 14, %43* %1664, %43* %1666) #8
  %1668 = ptrtoint %43* %1667 to i64
  br label %2622

1669:                                             ; preds = %168
  %1670 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1671 = load %43*, %43** %1670, align 8
  %1672 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1673 = load %43*, %43** %1672, align 8
  %1674 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 9, %43* %1671, %43* %1673) #8
  %1675 = ptrtoint %43* %1674 to i64
  br label %2622

1676:                                             ; preds = %168
  %1677 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1678 = load %43*, %43** %1677, align 8
  %1679 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1680 = load %43*, %43** %1679, align 8
  %1681 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 10, %43* %1678, %43* %1680) #8
  %1682 = ptrtoint %43* %1681 to i64
  br label %2622

1683:                                             ; preds = %168
  %1684 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1685 = load %43*, %43** %1684, align 8
  %1686 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1687 = load %43*, %43** %1686, align 8
  %1688 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 11, %43* %1685, %43* %1687) #8
  %1689 = ptrtoint %43* %1688 to i64
  br label %2622

1690:                                             ; preds = %168
  %1691 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1692 = load %43*, %43** %1691, align 8
  %1693 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1694 = load %43*, %43** %1693, align 8
  %1695 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 8, %43* %1692, %43* %1694) #8
  %1696 = ptrtoint %43* %1695 to i64
  br label %2622

1697:                                             ; preds = %168
  %1698 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1699 = load %43*, %43** %1698, align 8
  %1700 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1701 = load %43*, %43** %1700, align 8
  %1702 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 1, %43* %1699, %43* %1701) #8
  %1703 = ptrtoint %43* %1702 to i64
  br label %2622

1704:                                             ; preds = %168
  %1705 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1706 = load %43*, %43** %1705, align 8
  %1707 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1708 = load %43*, %43** %1707, align 8
  %1709 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 2, %43* %1706, %43* %1708) #8
  %1710 = ptrtoint %43* %1709 to i64
  br label %2622

1711:                                             ; preds = %168
  %1712 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1713 = load %43*, %43** %1712, align 8
  %1714 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1715 = load %43*, %43** %1714, align 8
  %1716 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 3, %43* %1713, %43* %1715) #8
  %1717 = ptrtoint %43* %1716 to i64
  br label %2622

1718:                                             ; preds = %168
  %1719 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1720 = load %43*, %43** %1719, align 8
  %1721 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1722 = load %43*, %43** %1721, align 8
  %1723 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 166, %43* %1720, %43* %1722) #8
  %1724 = ptrtoint %43* %1723 to i64
  br label %2622

1725:                                             ; preds = %168
  %1726 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1727 = load %43*, %43** %1726, align 8
  %1728 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1729 = load %43*, %43** %1728, align 8
  %1730 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 4, %43* %1727, %43* %1729) #8
  %1731 = ptrtoint %43* %1730 to i64
  br label %2622

1732:                                             ; preds = %168
  %1733 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1734 = load %43*, %43** %1733, align 8
  %1735 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1736 = load %43*, %43** %1735, align 8
  %1737 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 5, %43* %1734, %43* %1736) #8
  %1738 = ptrtoint %43* %1737 to i64
  br label %2622

1739:                                             ; preds = %168
  %1740 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1741 = load %43*, %43** %1740, align 8
  %1742 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1743 = load %43*, %43** %1742, align 8
  %1744 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 6, %43* %1741, %43* %1743) #8
  %1745 = ptrtoint %43* %1744 to i64
  br label %2622

1746:                                             ; preds = %168
  %1747 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1748 = load %43*, %43** %1747, align 8
  %1749 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1750 = load %43*, %43** %1749, align 8
  %1751 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 7, %43* %1748, %43* %1750) #8
  %1752 = ptrtoint %43* %1751 to i64
  br label %2622

1753:                                             ; preds = %168
  %1754 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1755 = load %43*, %43** %1754, align 8
  %1756 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 259, %43* %1755) #8
  %1757 = ptrtoint %43* %1756 to i64
  br label %2622

1758:                                             ; preds = %168
  %1759 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1760 = load %43*, %43** %1759, align 8
  %1761 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 260, %43* %1760) #8
  %1762 = ptrtoint %43* %1761 to i64
  br label %2622

1763:                                             ; preds = %168
  %1764 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1765 = load %43*, %43** %1764, align 8
  %1766 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 270, i16 zeroext 13, %43* %1765) #8
  %1767 = ptrtoint %43* %1766 to i64
  br label %2622

1768:                                             ; preds = %168
  %1769 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1770 = load %43*, %43** %1769, align 8
  %1771 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 270, i16 zeroext 12, %43* %1770) #8
  %1772 = ptrtoint %43* %1771 to i64
  br label %2622

1773:                                             ; preds = %168
  %1774 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1775 = load %43*, %43** %1774, align 8
  %1776 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1777 = load %43*, %43** %1776, align 8
  %1778 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 15, %43* %1775, %43* %1777) #8
  %1779 = ptrtoint %43* %1778 to i64
  br label %2622

1780:                                             ; preds = %168
  %1781 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1782 = load %43*, %43** %1781, align 8
  %1783 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1784 = load %43*, %43** %1783, align 8
  %1785 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 16, %43* %1782, %43* %1784) #8
  %1786 = ptrtoint %43* %1785 to i64
  br label %2622

1787:                                             ; preds = %168
  %1788 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1789 = load %43*, %43** %1788, align 8
  %1790 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1791 = load %43*, %43** %1790, align 8
  %1792 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 17, %43* %1789, %43* %1791) #8
  %1793 = ptrtoint %43* %1792 to i64
  br label %2622

1794:                                             ; preds = %168
  %1795 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1796 = load %43*, %43** %1795, align 8
  %1797 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1798 = load %43*, %43** %1797, align 8
  %1799 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 18, %43* %1796, %43* %1798) #8
  %1800 = ptrtoint %43* %1799 to i64
  br label %2622

1801:                                             ; preds = %168
  %1802 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1803 = load %43*, %43** %1802, align 8
  %1804 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1805 = load %43*, %43** %1804, align 8
  %1806 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 19, %43* %1803, %43* %1805) #8
  %1807 = ptrtoint %43* %1806 to i64
  br label %2622

1808:                                             ; preds = %168
  %1809 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1810 = load %43*, %43** %1809, align 8
  %1811 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1812 = load %43*, %43** %1811, align 8
  %1813 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 20, %43* %1810, %43* %1812) #8
  %1814 = ptrtoint %43* %1813 to i64
  br label %2622

1815:                                             ; preds = %168
  %1816 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1817 = load %43*, %43** %1816, align 8
  %1818 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1819 = load %43*, %43** %1818, align 8
  %1820 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 521, %43* %1817, %43* %1819) #8
  %1821 = ptrtoint %43* %1820 to i64
  br label %2622

1822:                                             ; preds = %168
  %1823 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1824 = load %43*, %43** %1823, align 8
  %1825 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1826 = load %43*, %43** %1825, align 8
  %1827 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 522, %43* %1824, %43* %1826) #8
  %1828 = ptrtoint %43* %1827 to i64
  br label %2622

1829:                                             ; preds = %168
  %1830 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1831 = load %43*, %43** %1830, align 8
  %1832 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1833 = load %43*, %43** %1832, align 8
  %1834 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 520, i16 zeroext 170, %43* %1831, %43* %1833) #8
  %1835 = ptrtoint %43* %1834 to i64
  br label %2622

1836:                                             ; preds = %168
  %1837 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1838 = load %43*, %43** %1837, align 8
  %1839 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1840 = load %43*, %43** %1839, align 8
  %1841 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 527, %43* %1838, %43* %1840) #8
  %1842 = ptrtoint %43* %1841 to i64
  br label %2622

1843:                                             ; preds = %168
  %1844 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1845 = bitcast %43** %1844 to i64*
  %1846 = load i64, i64* %1845, align 8
  br label %2622

1847:                                             ; preds = %168
  %1848 = bitcast %52* %110 to i64*
  %1849 = load i64, i64* %1848, align 8
  br label %2622

1850:                                             ; preds = %168
  %1851 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %1852 = load %43*, %43** %1851, align 8
  %1853 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1854 = load %43*, %43** %1853, align 8
  %1855 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1856 = load %43*, %43** %1855, align 8
  %1857 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 770, %43* %1852, %43* %1854, %43* %1856) #8
  %1858 = ptrtoint %43* %1857 to i64
  br label %2622

1859:                                             ; preds = %168
  %1860 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %1861 = load %43*, %43** %1860, align 8
  %1862 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1863 = load %43*, %43** %1862, align 8
  %1864 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 770, %43* %1861, i8* null, %43* %1863) #8
  %1865 = ptrtoint %43* %1864 to i64
  br label %2622

1866:                                             ; preds = %168
  %1867 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1868 = load %43*, %43** %1867, align 8
  %1869 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1870 = load %43*, %43** %1869, align 8
  %1871 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 529, %43* %1868, %43* %1870) #8
  %1872 = ptrtoint %43* %1871 to i64
  br label %2622

1873:                                             ; preds = %168
  %1874 = bitcast %52* %110 to i64*
  %1875 = load i64, i64* %1874, align 8
  br label %2622

1876:                                             ; preds = %168
  %1877 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1878 = load %43*, %43** %1877, align 8
  %1879 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 4, %43* %1878) #8
  %1880 = ptrtoint %43* %1879 to i64
  br label %2622

1881:                                             ; preds = %168
  %1882 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1883 = load %43*, %43** %1882, align 8
  %1884 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 5, %43* %1883) #8
  %1885 = ptrtoint %43* %1884 to i64
  br label %2622

1886:                                             ; preds = %168
  %1887 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1888 = load %43*, %43** %1887, align 8
  %1889 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 6, %43* %1888) #8
  %1890 = ptrtoint %43* %1889 to i64
  br label %2622

1891:                                             ; preds = %168
  %1892 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1893 = load %43*, %43** %1892, align 8
  %1894 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 7, %43* %1893) #8
  %1895 = ptrtoint %43* %1894 to i64
  br label %2622

1896:                                             ; preds = %168
  %1897 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1898 = load %43*, %43** %1897, align 8
  %1899 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 8, %43* %1898) #8
  %1900 = ptrtoint %43* %1899 to i64
  br label %2622

1901:                                             ; preds = %168
  %1902 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1903 = load %43*, %43** %1902, align 8
  %1904 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 13, %43* %1903) #8
  %1905 = ptrtoint %43* %1904 to i64
  br label %2622

1906:                                             ; preds = %168
  %1907 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1908 = load %43*, %43** %1907, align 8
  %1909 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 261, i16 zeroext 1, %43* %1908) #8
  %1910 = ptrtoint %43* %1909 to i64
  br label %2622

1911:                                             ; preds = %168
  %1912 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1913 = load %43*, %43** %1912, align 8
  %1914 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 267, %43* %1913) #8
  %1915 = ptrtoint %43* %1914 to i64
  br label %2622

1916:                                             ; preds = %168
  %1917 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1918 = load %43*, %43** %1917, align 8
  %1919 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 264, %43* %1918) #8
  %1920 = ptrtoint %43* %1919 to i64
  br label %2622

1921:                                             ; preds = %168
  %1922 = bitcast %52* %110 to i64*
  %1923 = load i64, i64* %1922, align 8
  br label %2622

1924:                                             ; preds = %168
  %1925 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %1926 = load %43*, %43** %1925, align 8
  %1927 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 265, %43* %1926) #8
  %1928 = ptrtoint %43* %1927 to i64
  br label %2622

1929:                                             ; preds = %168
  %1930 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1931 = load %43*, %43** %1930, align 8
  %1932 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 268, %43* %1931) #8
  %1933 = ptrtoint %43* %1932 to i64
  br label %2622

1934:                                             ; preds = %168
  %1935 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 528, i8* null, i8* null) #8
  %1936 = ptrtoint %43* %1935 to i64
  %1937 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  %1938 = or i32 %1937, 8388608
  store i32 %1938, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

1939:                                             ; preds = %168
  %1940 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1941 = load %43*, %43** %1940, align 8
  %1942 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 528, %43* %1941, i8* null) #8
  %1943 = ptrtoint %43* %1942 to i64
  %1944 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  %1945 = or i32 %1944, 8388608
  store i32 %1945, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

1946:                                             ; preds = %168
  %1947 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1948 = load %43*, %43** %1947, align 8
  %1949 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1950 = load %43*, %43** %1949, align 8
  %1951 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 528, %43* %1948, %43* %1950) #8
  %1952 = ptrtoint %43* %1951 to i64
  %1953 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  %1954 = or i32 %1953, 8388608
  store i32 %1954, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

1955:                                             ; preds = %168
  %1956 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %1957 = load %43*, %43** %1956, align 8
  %1958 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 275, %43* %1957) #8
  %1959 = ptrtoint %43* %1958 to i64
  %1960 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  %1961 = or i32 %1960, 8388608
  store i32 %1961, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

1962:                                             ; preds = %168
  %1963 = getelementptr inbounds %52, %52* %110, i64 -11
  %1964 = bitcast %52* %1963 to i64*
  %1965 = load i64, i64* %1964, align 8
  %1966 = bitcast %52* %110 to i64*
  %1967 = load i64, i64* %1966, align 8
  %1968 = or i64 %1967, %1965
  %1969 = trunc i64 %1968 to i32
  %1970 = getelementptr inbounds %52, %52* %110, i64 -12
  %1971 = bitcast %52* %1970 to i64*
  %1972 = load i64, i64* %1971, align 8
  %1973 = trunc i64 %1972 to i32
  %1974 = getelementptr inbounds %52, %52* %110, i64 -10
  %1975 = bitcast %52* %1974 to %32**
  %1976 = load %32*, %32** %1975, align 8
  %1977 = call noalias i8* @_emalloc(i64 40) #10
  %1978 = bitcast i8* %1977 to %32*
  %1979 = bitcast i8* %1977 to i32*
  store i32 1, i32* %1979, align 8
  %1980 = getelementptr inbounds i8, i8* %1977, i64 4
  %1981 = bitcast i8* %1980 to i32*
  store i32 6, i32* %1981, align 4
  %1982 = getelementptr inbounds i8, i8* %1977, i64 8
  %1983 = bitcast i8* %1982 to <2 x i64>*
  store <2 x i64> <i64 0, i64 9>, <2 x i64>* %1983, align 8
  %1984 = getelementptr inbounds i8, i8* %1977, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1984, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0), i64 9, i1 false) #8
  %1985 = getelementptr inbounds i8, i8* %1977, i64 33
  store i8 0, i8* %1985, align 1
  %1986 = getelementptr inbounds %52, %52* %110, i64 -8, i32 0
  %1987 = load %43*, %43** %1986, align 8
  %1988 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %1989 = load %43*, %43** %1988, align 8
  %1990 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %1991 = load %43*, %43** %1990, align 8
  %1992 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %1993 = load %43*, %43** %1992, align 8
  %1994 = call %43* @zend_ast_create_decl(i16 zeroext 67, i32 %1969, i32 %1973, %32* %1976, %32* %1978, %43* %1987, %43* %1989, %43* %1991, %43* %1993) #8
  %1995 = ptrtoint %43* %1994 to i64
  %1996 = getelementptr inbounds %52, %52* %110, i64 -4
  %1997 = bitcast %52* %1996 to i64*
  %1998 = load i64, i64* %1997, align 8
  %1999 = trunc i64 %1998 to i32
  store i32 %1999, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

2000:                                             ; preds = %168
  %2001 = getelementptr inbounds %52, %52* %110, i64 -11
  %2002 = bitcast %52* %2001 to i64*
  %2003 = load i64, i64* %2002, align 8
  %2004 = bitcast %52* %110 to i64*
  %2005 = load i64, i64* %2004, align 8
  %2006 = or i64 %2005, %2003
  %2007 = trunc i64 %2006 to i32
  %2008 = or i32 %2007, 1
  %2009 = getelementptr inbounds %52, %52* %110, i64 -12
  %2010 = bitcast %52* %2009 to i64*
  %2011 = load i64, i64* %2010, align 8
  %2012 = trunc i64 %2011 to i32
  %2013 = getelementptr inbounds %52, %52* %110, i64 -10
  %2014 = bitcast %52* %2013 to %32**
  %2015 = load %32*, %32** %2014, align 8
  %2016 = call noalias i8* @_emalloc(i64 40) #10
  %2017 = bitcast i8* %2016 to %32*
  %2018 = bitcast i8* %2016 to i32*
  store i32 1, i32* %2018, align 8
  %2019 = getelementptr inbounds i8, i8* %2016, i64 4
  %2020 = bitcast i8* %2019 to i32*
  store i32 6, i32* %2020, align 4
  %2021 = getelementptr inbounds i8, i8* %2016, i64 8
  %2022 = bitcast i8* %2021 to <2 x i64>*
  store <2 x i64> <i64 0, i64 9>, <2 x i64>* %2022, align 8
  %2023 = getelementptr inbounds i8, i8* %2016, i64 24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2023, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @7, i64 0, i64 0), i64 9, i1 false) #8
  %2024 = getelementptr inbounds i8, i8* %2016, i64 33
  store i8 0, i8* %2024, align 1
  %2025 = getelementptr inbounds %52, %52* %110, i64 -8, i32 0
  %2026 = load %43*, %43** %2025, align 8
  %2027 = getelementptr inbounds %52, %52* %110, i64 -6, i32 0
  %2028 = load %43*, %43** %2027, align 8
  %2029 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2030 = load %43*, %43** %2029, align 8
  %2031 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %2032 = load %43*, %43** %2031, align 8
  %2033 = call %43* @zend_ast_create_decl(i16 zeroext 67, i32 %2008, i32 %2012, %32* %2015, %32* %2017, %43* %2026, %43* %2028, %43* %2030, %43* %2032) #8
  %2034 = ptrtoint %43* %2033 to i64
  %2035 = getelementptr inbounds %52, %52* %110, i64 -4
  %2036 = bitcast %52* %2035 to i64*
  %2037 = load i64, i64* %2036, align 8
  %2038 = trunc i64 %2037 to i32
  store i32 %2038, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

2039:                                             ; preds = %168
  %2040 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 3), align 8
  %2041 = sext i32 %2040 to i64
  br label %2622

2042:                                             ; preds = %168
  %2043 = load i64, i64* bitcast (%32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18) to i64*), align 8
  store %32* null, %32** getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 18), align 8
  br label %2622

2044:                                             ; preds = %168
  %2045 = load i32, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  %2046 = zext i32 %2045 to i64
  store i32 0, i32* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 19), align 8
  br label %2622

2047:                                             ; preds = %168
  br label %2622

2048:                                             ; preds = %168
  br label %2622

2049:                                             ; preds = %168
  br label %2622

2050:                                             ; preds = %168
  %2051 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2052 = bitcast %43** %2051 to i64*
  %2053 = load i64, i64* %2052, align 8
  br label %2622

2054:                                             ; preds = %168
  %2055 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2056 = load %43*, %43** %2055, align 8
  %2057 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2058 = load %43*, %43** %2057, align 8
  %2059 = call %43* @zend_ast_list_add(%43* %2056, %43* %2058) #8
  %2060 = ptrtoint %43* %2059 to i64
  br label %2622

2061:                                             ; preds = %168
  %2062 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2063 = load %43*, %43** %2062, align 8
  %2064 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 137, %43* %2063) #8
  %2065 = ptrtoint %43* %2064 to i64
  br label %2622

2066:                                             ; preds = %168
  %2067 = bitcast %52* %110 to i64*
  %2068 = load i64, i64* %2067, align 8
  br label %2622

2069:                                             ; preds = %168
  %2070 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2071 = load %43*, %43** %2070, align 8
  %2072 = ptrtoint %43* %2071 to i64
  %2073 = getelementptr inbounds %43, %43* %2071, i64 0, i32 1
  store i16 1, i16* %2073, align 2
  br label %2622

2074:                                             ; preds = %168
  %2075 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2076 = load %43*, %43** %2075, align 8
  %2077 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2078 = load %43*, %43** %2077, align 8
  %2079 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 515, %43* %2076, %43* %2078) #8
  %2080 = ptrtoint %43* %2079 to i64
  br label %2622

2081:                                             ; preds = %168
  %2082 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2083 = load %43*, %43** %2082, align 8
  %2084 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2085 = load %43*, %43** %2084, align 8
  %2086 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2087 = load %43*, %43** %2086, align 8
  %2088 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 769, %43* %2083, %43* %2085, %43* %2087) #8
  %2089 = ptrtoint %43* %2088 to i64
  br label %2622

2090:                                             ; preds = %168
  %2091 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2092 = load %43*, %43** %2091, align 8
  %2093 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2094 = load %43*, %43** %2093, align 8
  %2095 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2096 = load %43*, %43** %2095, align 8
  %2097 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 769, %43* %2092, %43* %2094, %43* %2096) #8
  %2098 = ptrtoint %43* %2097 to i64
  br label %2622

2099:                                             ; preds = %168
  %2100 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2101 = load %43*, %43** %2100, align 8
  %2102 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2103 = load %43*, %43** %2102, align 8
  %2104 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 515, %43* %2101, %43* %2103) #8
  %2105 = ptrtoint %43* %2104 to i64
  br label %2622

2106:                                             ; preds = %168
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #8
  %2107 = load %32**, %32*** @zend_known_strings, align 8
  %2108 = getelementptr inbounds %32*, %32** %2107, i64 17
  %2109 = bitcast %32** %2108 to i64*
  %2110 = load i64, i64* %2109, align 8
  store i64 %2110, i64* %32, align 8
  store i32 6, i32* %33, align 8
  %2111 = call %43* @zend_ast_create_zval_ex(%2* nonnull %16, i16 zeroext 1) #8
  %2112 = ptrtoint %43* %2111 to i64
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #8
  br label %2622

2113:                                             ; preds = %168
  %2114 = bitcast %52* %110 to i64*
  %2115 = load i64, i64* %2114, align 8
  br label %2622

2116:                                             ; preds = %168
  %2117 = bitcast %52* %110 to i64*
  %2118 = load i64, i64* %2117, align 8
  br label %2622

2119:                                             ; preds = %168
  %2120 = bitcast %52* %110 to i64*
  %2121 = load i64, i64* %2120, align 8
  br label %2622

2122:                                             ; preds = %168
  br label %2622

2123:                                             ; preds = %168
  %2124 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2125 = bitcast %43** %2124 to i64*
  %2126 = load i64, i64* %2125, align 8
  br label %2622

2127:                                             ; preds = %168
  %2128 = load %32*, %32** @zend_empty_string, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #8
  store %32* %2128, %32** %35, align 8
  %2129 = getelementptr inbounds %32, %32* %2128, i64 0, i32 0, i32 1
  %2130 = bitcast %18* %2129 to %54*
  %2131 = getelementptr inbounds %54, %54* %2130, i64 0, i32 1
  %2132 = load i8, i8* %2131, align 1
  %2133 = and i8 %2132, 2
  %2134 = icmp eq i8 %2133, 0
  %2135 = select i1 %2134, i32 5126, i32 6
  store i32 %2135, i32* %36, align 8
  %2136 = call %43* @zend_ast_create_zval_ex(%2* nonnull %2, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #8
  %2137 = ptrtoint %43* %2136 to i64
  br label %2622

2138:                                             ; preds = %168
  %2139 = bitcast %52* %110 to i64*
  %2140 = load i64, i64* %2139, align 8
  br label %2622

2141:                                             ; preds = %168
  %2142 = bitcast %52* %110 to i64*
  %2143 = load i64, i64* %2142, align 8
  br label %2622

2144:                                             ; preds = %168
  %2145 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 0, i16 zeroext 128) #8
  %2146 = ptrtoint %43* %2145 to i64
  br label %2622

2147:                                             ; preds = %168
  %2148 = bitcast %52* %110 to i64*
  %2149 = load i64, i64* %2148, align 8
  br label %2622

2150:                                             ; preds = %168
  %2151 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2152 = load %43*, %43** %2151, align 8
  %2153 = ptrtoint %43* %2152 to i64
  %2154 = getelementptr inbounds %43, %43* %2152, i64 0, i32 1
  store i16 2, i16* %2154, align 2
  br label %2622

2155:                                             ; preds = %168
  %2156 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2157 = load %43*, %43** %2156, align 8
  %2158 = ptrtoint %43* %2157 to i64
  %2159 = getelementptr inbounds %43, %43* %2157, i64 0, i32 1
  store i16 3, i16* %2159, align 2
  br label %2622

2160:                                             ; preds = %168
  %2161 = bitcast %52* %110 to i64*
  %2162 = load i64, i64* %2161, align 8
  br label %2622

2163:                                             ; preds = %168
  %2164 = bitcast %52* %110 to i64*
  %2165 = load i64, i64* %2164, align 8
  br label %2622

2166:                                             ; preds = %168
  %2167 = bitcast %52* %110 to i64*
  %2168 = load i64, i64* %2167, align 8
  br label %2622

2169:                                             ; preds = %168
  %2170 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 370) #8
  %2171 = ptrtoint %43* %2170 to i64
  br label %2622

2172:                                             ; preds = %168
  %2173 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 371) #8
  %2174 = ptrtoint %43* %2173 to i64
  br label %2622

2175:                                             ; preds = %168
  %2176 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 372) #8
  %2177 = ptrtoint %43* %2176 to i64
  br label %2622

2178:                                             ; preds = %168
  %2179 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 374) #8
  %2180 = ptrtoint %43* %2179 to i64
  br label %2622

2181:                                             ; preds = %168
  %2182 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 375) #8
  %2183 = ptrtoint %43* %2182 to i64
  br label %2622

2184:                                             ; preds = %168
  %2185 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 376) #8
  %2186 = ptrtoint %43* %2185 to i64
  br label %2622

2187:                                             ; preds = %168
  %2188 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 389) #8
  %2189 = ptrtoint %43* %2188 to i64
  br label %2622

2190:                                             ; preds = %168
  %2191 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 0, i16 zeroext 373) #8
  %2192 = ptrtoint %43* %2191 to i64
  br label %2622

2193:                                             ; preds = %168
  %2194 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2195 = bitcast %43** %2194 to i64*
  %2196 = load i64, i64* %2195, align 8
  br label %2622

2197:                                             ; preds = %168
  %2198 = load %32*, %32** @zend_empty_string, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #8
  store %32* %2198, %32** %38, align 8
  %2199 = getelementptr inbounds %32, %32* %2198, i64 0, i32 0, i32 1
  %2200 = bitcast %18* %2199 to %54*
  %2201 = getelementptr inbounds %54, %54* %2200, i64 0, i32 1
  %2202 = load i8, i8* %2201, align 1
  %2203 = and i8 %2202, 2
  %2204 = icmp eq i8 %2203, 0
  %2205 = select i1 %2204, i32 5126, i32 6
  store i32 %2205, i32* %39, align 8
  %2206 = call %43* @zend_ast_create_zval_ex(%2* nonnull %1, i16 zeroext 0) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #8
  %2207 = ptrtoint %43* %2206 to i64
  br label %2622

2208:                                             ; preds = %168
  %2209 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2210 = bitcast %43** %2209 to i64*
  %2211 = load i64, i64* %2210, align 8
  br label %2622

2212:                                             ; preds = %168
  %2213 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2214 = bitcast %43** %2213 to i64*
  %2215 = load i64, i64* %2214, align 8
  br label %2622

2216:                                             ; preds = %168
  %2217 = bitcast %52* %110 to i64*
  %2218 = load i64, i64* %2217, align 8
  br label %2622

2219:                                             ; preds = %168
  %2220 = bitcast %52* %110 to i64*
  %2221 = load i64, i64* %2220, align 8
  br label %2622

2222:                                             ; preds = %168
  %2223 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2224 = load %43*, %43** %2223, align 8
  %2225 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 257, %43* %2224) #8
  %2226 = ptrtoint %43* %2225 to i64
  br label %2622

2227:                                             ; preds = %168
  %2228 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2229 = load %43*, %43** %2228, align 8
  %2230 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2231 = load %43*, %43** %2230, align 8
  %2232 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 516, %43* %2229, %43* %2231) #8
  %2233 = ptrtoint %43* %2232 to i64
  br label %2622

2234:                                             ; preds = %168
  %2235 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2236 = load %43*, %43** %2235, align 8
  %2237 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2238 = load %43*, %43** %2237, align 8
  %2239 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 516, %43* %2236, %43* %2238) #8
  %2240 = ptrtoint %43* %2239 to i64
  br label %2622

2241:                                             ; preds = %168
  %2242 = bitcast %52* %110 to i64*
  %2243 = load i64, i64* %2242, align 8
  br label %2622

2244:                                             ; preds = %168
  %2245 = bitcast %52* %110 to i64*
  %2246 = load i64, i64* %2245, align 8
  br label %2622

2247:                                             ; preds = %168
  br label %2622

2248:                                             ; preds = %168
  %2249 = bitcast %52* %110 to i64*
  %2250 = load i64, i64* %2249, align 8
  br label %2622

2251:                                             ; preds = %168
  %2252 = bitcast %52* %110 to i64*
  %2253 = load i64, i64* %2252, align 8
  br label %2622

2254:                                             ; preds = %168
  %2255 = bitcast %52* %110 to i64*
  %2256 = load i64, i64* %2255, align 8
  br label %2622

2257:                                             ; preds = %168
  %2258 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2259 = bitcast %43** %2258 to i64*
  %2260 = load i64, i64* %2259, align 8
  br label %2622

2261:                                             ; preds = %168
  %2262 = bitcast %52* %110 to i64*
  %2263 = load i64, i64* %2262, align 8
  br label %2622

2264:                                             ; preds = %168
  %2265 = bitcast %52* %110 to i64*
  %2266 = load i64, i64* %2265, align 8
  br label %2622

2267:                                             ; preds = %168
  %2268 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2269 = bitcast %43** %2268 to i64*
  %2270 = load i64, i64* %2269, align 8
  br label %2622

2271:                                             ; preds = %168
  %2272 = bitcast %52* %110 to i64*
  %2273 = load i64, i64* %2272, align 8
  br label %2622

2274:                                             ; preds = %168
  %2275 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2276 = load %43*, %43** %2275, align 8
  %2277 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2276) #8
  %2278 = ptrtoint %43* %2277 to i64
  br label %2622

2279:                                             ; preds = %168
  %2280 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2281 = load %43*, %43** %2280, align 8
  %2282 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2283 = load %43*, %43** %2282, align 8
  %2284 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2281, %43* %2283) #8
  %2285 = ptrtoint %43* %2284 to i64
  br label %2622

2286:                                             ; preds = %168
  %2287 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2288 = load %43*, %43** %2287, align 8
  %2289 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2290 = load %43*, %43** %2289, align 8
  %2291 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2288, %43* %2290) #8
  %2292 = ptrtoint %43* %2291 to i64
  br label %2622

2293:                                             ; preds = %168
  %2294 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2295 = load %43*, %43** %2294, align 8
  %2296 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2297 = load %43*, %43** %2296, align 8
  %2298 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2295, %43* %2297) #8
  %2299 = ptrtoint %43* %2298 to i64
  br label %2622

2300:                                             ; preds = %168
  %2301 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2302 = load %43*, %43** %2301, align 8
  %2303 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2304 = load %43*, %43** %2303, align 8
  %2305 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2306 = load %43*, %43** %2305, align 8
  %2307 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 768, %43* %2302, %43* %2304, %43* %2306) #8
  %2308 = ptrtoint %43* %2307 to i64
  br label %2622

2309:                                             ; preds = %168
  %2310 = bitcast %52* %110 to i64*
  %2311 = load i64, i64* %2310, align 8
  br label %2622

2312:                                             ; preds = %168
  %2313 = bitcast %52* %110 to i64*
  %2314 = load i64, i64* %2313, align 8
  br label %2622

2315:                                             ; preds = %168
  %2316 = bitcast %52* %110 to i64*
  %2317 = load i64, i64* %2316, align 8
  br label %2622

2318:                                             ; preds = %168
  %2319 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2320 = load %43*, %43** %2319, align 8
  %2321 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2322 = load %43*, %43** %2321, align 8
  %2323 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 513, %43* %2320, %43* %2322) #8
  %2324 = ptrtoint %43* %2323 to i64
  br label %2622

2325:                                             ; preds = %168
  %2326 = bitcast %52* %110 to i64*
  %2327 = load i64, i64* %2326, align 8
  br label %2622

2328:                                             ; preds = %168
  %2329 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2330 = bitcast %43** %2329 to i64*
  %2331 = load i64, i64* %2330, align 8
  br label %2622

2332:                                             ; preds = %168
  %2333 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2334 = load %43*, %43** %2333, align 8
  %2335 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2334) #8
  %2336 = ptrtoint %43* %2335 to i64
  br label %2622

2337:                                             ; preds = %168
  %2338 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2339 = load %43*, %43** %2338, align 8
  %2340 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2341 = load %43*, %43** %2340, align 8
  %2342 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 514, %43* %2339, %43* %2341) #8
  %2343 = ptrtoint %43* %2342 to i64
  br label %2622

2344:                                             ; preds = %168
  %2345 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2346 = load %43*, %43** %2345, align 8
  %2347 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2348 = load %43*, %43** %2347, align 8
  %2349 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 514, %43* %2346, %43* %2348) #8
  %2350 = ptrtoint %43* %2349 to i64
  br label %2622

2351:                                             ; preds = %168
  %2352 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2353 = load %43*, %43** %2352, align 8
  %2354 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2353) #8
  %2355 = ptrtoint %43* %2354 to i64
  br label %2622

2356:                                             ; preds = %168
  %2357 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2358 = load %43*, %43** %2357, align 8
  %2359 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2360 = load %43*, %43** %2359, align 8
  %2361 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2358, %43* %2360) #8
  %2362 = ptrtoint %43* %2361 to i64
  br label %2622

2363:                                             ; preds = %168
  %2364 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2365 = load %43*, %43** %2364, align 8
  %2366 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2367 = load %43*, %43** %2366, align 8
  %2368 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2365, %43* %2367) #8
  %2369 = ptrtoint %43* %2368 to i64
  br label %2622

2370:                                             ; preds = %168
  %2371 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2372 = load %43*, %43** %2371, align 8
  %2373 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2374 = load %43*, %43** %2373, align 8
  %2375 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 513, %43* %2372, %43* %2374) #8
  %2376 = ptrtoint %43* %2375 to i64
  br label %2622

2377:                                             ; preds = %168
  %2378 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2379 = load %43*, %43** %2378, align 8
  %2380 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2381 = load %43*, %43** %2380, align 8
  %2382 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 514, %43* %2379, %43* %2381) #8
  %2383 = ptrtoint %43* %2382 to i64
  br label %2622

2384:                                             ; preds = %168
  %2385 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2386 = load %43*, %43** %2385, align 8
  %2387 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2388 = load %43*, %43** %2387, align 8
  %2389 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 514, %43* %2386, %43* %2388) #8
  %2390 = ptrtoint %43* %2389 to i64
  br label %2622

2391:                                             ; preds = %168
  %2392 = bitcast %52* %110 to i64*
  %2393 = load i64, i64* %2392, align 8
  br label %2622

2394:                                             ; preds = %168
  %2395 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2396 = bitcast %43** %2395 to i64*
  %2397 = load i64, i64* %2396, align 8
  br label %2622

2398:                                             ; preds = %168
  %2399 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2400 = load %43*, %43** %2399, align 8
  %2401 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2400) #8
  %2402 = ptrtoint %43* %2401 to i64
  br label %2622

2403:                                             ; preds = %168
  %2404 = bitcast %52* %110 to i64*
  %2405 = load i64, i64* %2404, align 8
  br label %2622

2406:                                             ; preds = %168
  %2407 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2408 = bitcast %43** %2407 to i64*
  %2409 = load i64, i64* %2408, align 8
  br label %2622

2410:                                             ; preds = %168
  %2411 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2412 = load %43*, %43** %2411, align 8
  %2413 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2412) #8
  %2414 = ptrtoint %43* %2413 to i64
  br label %2622

2415:                                             ; preds = %168
  %2416 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2417 = load %43*, %43** %2416, align 8
  %2418 = getelementptr inbounds %43, %43* %2417, i64 0, i32 3
  %2419 = bitcast [1 x %43*]* %2418 to i32*
  %2420 = load i32, i32* %2419, align 8
  %2421 = icmp eq i32 %2420, 0
  br i1 %2421, label %2430, label %2422

2422:                                             ; preds = %2415
  %2423 = bitcast %43* %2417 to %55*
  %2424 = add i32 %2420, -1
  %2425 = zext i32 %2424 to i64
  %2426 = getelementptr inbounds %55, %55* %2423, i64 0, i32 4, i64 %2425
  %2427 = load %43*, %43** %2426, align 8
  %2428 = icmp eq %43* %2427, null
  br i1 %2428, label %2429, label %2430

2429:                                             ; preds = %2422
  store i32 %2424, i32* %2419, align 8
  br label %2430

2430:                                             ; preds = %2415, %2422, %2429
  %2431 = ptrtoint %43* %2417 to i64
  br label %2622

2432:                                             ; preds = %168
  br label %2622

2433:                                             ; preds = %168
  %2434 = bitcast %52* %110 to i64*
  %2435 = load i64, i64* %2434, align 8
  br label %2622

2436:                                             ; preds = %168
  %2437 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2438 = load %43*, %43** %2437, align 8
  %2439 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2440 = load %43*, %43** %2439, align 8
  %2441 = call %43* @zend_ast_list_add(%43* %2438, %43* %2440) #8
  %2442 = ptrtoint %43* %2441 to i64
  br label %2622

2443:                                             ; preds = %168
  %2444 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2445 = load %43*, %43** %2444, align 8
  %2446 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 129, %43* %2445) #8
  %2447 = ptrtoint %43* %2446 to i64
  br label %2622

2448:                                             ; preds = %168
  %2449 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2450 = load %43*, %43** %2449, align 8
  %2451 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2452 = load %43*, %43** %2451, align 8
  %2453 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 525, %43* %2450, %43* %2452) #8
  %2454 = ptrtoint %43* %2453 to i64
  br label %2622

2455:                                             ; preds = %168
  %2456 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2457 = load %43*, %43** %2456, align 8
  %2458 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 525, %43* %2457, i8* null) #8
  %2459 = ptrtoint %43* %2458 to i64
  br label %2622

2460:                                             ; preds = %168
  %2461 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2462 = load %43*, %43** %2461, align 8
  %2463 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2464 = load %43*, %43** %2463, align 8
  %2465 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 525, i16 zeroext 1, %43* %2462, %43* %2464) #8
  %2466 = ptrtoint %43* %2465 to i64
  br label %2622

2467:                                             ; preds = %168
  %2468 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2469 = load %43*, %43** %2468, align 8
  %2470 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 525, i16 zeroext 1, %43* %2469, i8* null) #8
  %2471 = ptrtoint %43* %2470 to i64
  br label %2622

2472:                                             ; preds = %168
  %2473 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2474 = load %43*, %43** %2473, align 8
  %2475 = getelementptr inbounds %43, %43* %2474, i64 0, i32 1
  store i16 1, i16* %2475, align 2
  %2476 = load %43*, %43** %2473, align 8
  %2477 = getelementptr inbounds %52, %52* %110, i64 -5, i32 0
  %2478 = load %43*, %43** %2477, align 8
  %2479 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 525, %43* %2476, %43* %2478) #8
  %2480 = ptrtoint %43* %2479 to i64
  br label %2622

2481:                                             ; preds = %168
  %2482 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2483 = load %43*, %43** %2482, align 8
  %2484 = getelementptr inbounds %43, %43* %2483, i64 0, i32 1
  store i16 1, i16* %2484, align 2
  %2485 = load %43*, %43** %2482, align 8
  %2486 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 525, %43* %2485, i8* null) #8
  %2487 = ptrtoint %43* %2486 to i64
  br label %2622

2488:                                             ; preds = %168
  %2489 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2490 = load %43*, %43** %2489, align 8
  %2491 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2492 = load %43*, %43** %2491, align 8
  %2493 = call %43* @zend_ast_list_add(%43* %2490, %43* %2492) #8
  %2494 = ptrtoint %43* %2493 to i64
  br label %2622

2495:                                             ; preds = %168
  %2496 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2497 = load %43*, %43** %2496, align 8
  %2498 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2499 = load %43*, %43** %2498, align 8
  %2500 = call %43* @zend_ast_list_add(%43* %2497, %43* %2499) #8
  %2501 = ptrtoint %43* %2500 to i64
  br label %2622

2502:                                             ; preds = %168
  %2503 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2504 = load %43*, %43** %2503, align 8
  %2505 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 1, i16 zeroext 130, %43* %2504) #8
  %2506 = ptrtoint %43* %2505 to i64
  br label %2622

2507:                                             ; preds = %168
  %2508 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2509 = load %43*, %43** %2508, align 8
  %2510 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2511 = load %43*, %43** %2510, align 8
  %2512 = call %43* (i32, i16, ...) @zend_ast_create_list(i32 2, i16 zeroext 130, %43* %2509, %43* %2511) #8
  %2513 = ptrtoint %43* %2512 to i64
  br label %2622

2514:                                             ; preds = %168
  %2515 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2516 = load %43*, %43** %2515, align 8
  %2517 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2516) #8
  %2518 = ptrtoint %43* %2517 to i64
  br label %2622

2519:                                             ; preds = %168
  %2520 = getelementptr inbounds %52, %52* %110, i64 -3, i32 0
  %2521 = load %43*, %43** %2520, align 8
  %2522 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2521) #8
  %2523 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2524 = load %43*, %43** %2523, align 8
  %2525 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2522, %43* %2524) #8
  %2526 = ptrtoint %43* %2525 to i64
  br label %2622

2527:                                             ; preds = %168
  %2528 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2529 = load %43*, %43** %2528, align 8
  %2530 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2529) #8
  %2531 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2532 = load %43*, %43** %2531, align 8
  %2533 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 513, %43* %2530, %43* %2532) #8
  %2534 = ptrtoint %43* %2533 to i64
  br label %2622

2535:                                             ; preds = %168
  %2536 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2537 = load %43*, %43** %2536, align 8
  %2538 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2537) #8
  %2539 = ptrtoint %43* %2538 to i64
  br label %2622

2540:                                             ; preds = %168
  %2541 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2542 = load %43*, %43** %2541, align 8
  %2543 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2542) #8
  %2544 = ptrtoint %43* %2543 to i64
  br label %2622

2545:                                             ; preds = %168
  %2546 = getelementptr inbounds %52, %52* %110, i64 -4, i32 0
  %2547 = load %43*, %43** %2546, align 8
  %2548 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2547) #8
  %2549 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2550 = load %43*, %43** %2549, align 8
  %2551 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 512, %43* %2548, %43* %2550) #8
  %2552 = ptrtoint %43* %2551 to i64
  br label %2622

2553:                                             ; preds = %168
  %2554 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2555 = bitcast %43** %2554 to i64*
  %2556 = load i64, i64* %2555, align 8
  br label %2622

2557:                                             ; preds = %168
  %2558 = bitcast %52* %110 to i64*
  %2559 = load i64, i64* %2558, align 8
  br label %2622

2560:                                             ; preds = %168
  %2561 = bitcast %52* %110 to i64*
  %2562 = load i64, i64* %2561, align 8
  br label %2622

2563:                                             ; preds = %168
  %2564 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2565 = load %43*, %43** %2564, align 8
  %2566 = call %43* @zend_negate_num_string(%43* %2565) #8
  %2567 = ptrtoint %43* %2566 to i64
  br label %2622

2568:                                             ; preds = %168
  %2569 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2570 = load %43*, %43** %2569, align 8
  %2571 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 256, %43* %2570) #8
  %2572 = ptrtoint %43* %2571 to i64
  br label %2622

2573:                                             ; preds = %168
  %2574 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2575 = bitcast %43** %2574 to i64*
  %2576 = load i64, i64* %2575, align 8
  br label %2622

2577:                                             ; preds = %168
  %2578 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2579 = load %43*, %43** %2578, align 8
  %2580 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 262, %43* %2579) #8
  %2581 = ptrtoint %43* %2580 to i64
  br label %2622

2582:                                             ; preds = %168
  %2583 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2584 = load %43*, %43** %2583, align 8
  %2585 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 269, i16 zeroext 2, %43* %2584) #8
  %2586 = ptrtoint %43* %2585 to i64
  br label %2622

2587:                                             ; preds = %168
  %2588 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2589 = load %43*, %43** %2588, align 8
  %2590 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 269, i16 zeroext 4, %43* %2589) #8
  %2591 = ptrtoint %43* %2590 to i64
  br label %2622

2592:                                             ; preds = %168
  %2593 = getelementptr inbounds %52, %52* %110, i64 -1, i32 0
  %2594 = load %43*, %43** %2593, align 8
  %2595 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 269, i16 zeroext 1, %43* %2594) #8
  %2596 = ptrtoint %43* %2595 to i64
  br label %2622

2597:                                             ; preds = %168
  %2598 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2599 = load %43*, %43** %2598, align 8
  %2600 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 269, i16 zeroext 8, %43* %2599) #8
  %2601 = ptrtoint %43* %2600 to i64
  br label %2622

2602:                                             ; preds = %168
  %2603 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2604 = load %43*, %43** %2603, align 8
  %2605 = call %43* (i16, i16, ...) @zend_ast_create_ex(i16 zeroext 269, i16 zeroext 16, %43* %2604) #8
  %2606 = ptrtoint %43* %2605 to i64
  br label %2622

2607:                                             ; preds = %168
  %2608 = bitcast %52* %110 to i64*
  %2609 = load i64, i64* %2608, align 8
  br label %2622

2610:                                             ; preds = %168
  %2611 = getelementptr inbounds %52, %52* %110, i64 -2, i32 0
  %2612 = load %43*, %43** %2611, align 8
  %2613 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2614 = load %43*, %43** %2613, align 8
  %2615 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 523, %43* %2612, %43* %2614) #8
  %2616 = ptrtoint %43* %2615 to i64
  br label %2622

2617:                                             ; preds = %168
  %2618 = getelementptr inbounds %52, %52* %110, i64 0, i32 0
  %2619 = load %43*, %43** %2618, align 8
  %2620 = call %43* (i16, ...) @zend_ast_create(i16 zeroext 263, %43* %2619) #8
  %2621 = ptrtoint %43* %2620 to i64
  br label %2622

2622:                                             ; preds = %1296, %243, %269, %298, %168, %319, %290, %268, %2617, %2610, %2607, %2602, %2597, %2592, %2587, %2582, %2577, %2573, %2568, %2563, %2560, %2557, %2553, %2545, %2540, %2535, %2527, %2519, %2514, %2507, %2502, %2495, %2488, %2481, %2472, %2467, %2460, %2455, %2448, %2443, %2436, %2433, %2432, %2430, %2410, %2406, %2403, %2398, %2394, %2391, %2384, %2377, %2370, %2363, %2356, %2351, %2344, %2337, %2332, %2328, %2325, %2318, %2315, %2312, %2309, %2300, %2293, %2286, %2279, %2274, %2271, %2267, %2264, %2261, %2257, %2254, %2251, %2248, %2247, %2244, %2241, %2234, %2227, %2222, %2219, %2216, %2212, %2208, %2197, %2193, %2190, %2187, %2184, %2181, %2178, %2175, %2172, %2169, %2166, %2163, %2160, %2155, %2150, %2147, %2144, %2141, %2138, %2127, %2123, %2122, %2119, %2116, %2113, %2106, %2099, %2090, %2081, %2074, %2069, %2066, %2061, %2054, %2050, %2049, %2048, %2047, %2044, %2042, %2039, %2000, %1962, %1955, %1946, %1939, %1934, %1929, %1924, %1921, %1916, %1911, %1906, %1901, %1896, %1891, %1886, %1881, %1876, %1873, %1866, %1859, %1850, %1847, %1843, %1836, %1829, %1822, %1815, %1808, %1801, %1794, %1787, %1780, %1773, %1768, %1763, %1758, %1753, %1746, %1739, %1732, %1725, %1718, %1711, %1704, %1697, %1690, %1683, %1676, %1669, %1662, %1655, %1648, %1641, %1634, %1629, %1624, %1619, %1614, %1607, %1600, %1593, %1586, %1579, %1572, %1565, %1558, %1551, %1544, %1537, %1530, %1525, %1518, %1511, %1502, %1493, %1490, %1483, %1464, %1461, %1456, %1449, %1446, %1445, %1440, %1435, %1428, %1424, %1403, %1381, %1374, %1370, %1349, %1329, %1322, %1321, %1320, %1319, %1318, %1317, %1316, %1306, %1303, %1295, %1294, %1291, %1287, %1286, %1279, %1276, %1271, %1263, %1252, %1246, %1239, %1232, %1228, %1224, %1217, %1212, %1208, %1207, %1206, %1199, %1194, %1158, %1151, %1142, %1133, %1130, %1123, %1116, %1111, %1106, %1099, %1093, %1088, %1081, %1076, %1073, %1066, %1061, %1057, %1054, %1051, %1050, %1047, %1044, %1041, %1034, %1031, %1028, %1027, %1010, %995, %988, %983, %980, %977, %969, %965, %955, %947, %939, %936, %926, %918, %914, %911, %903, %893, %890, %886, %882, %878, %874, %870, %867, %863, %860, %856, %853, %848, %843, %838, %835, %832, %831, %828, %827, %824, %823, %804, %801, %784, %781, %780, %779, %769, %766, %745, %742, %717, %714, %713, %712, %711, %710, %678, %673, %666, %661, %657, %656, %649, %644, %632, %629, %624, %619, %614, %605, %604, %597, %594, %583, %574, %570, %566, %561, %557, %553, %549, %544, %539, %534, %527, %516, %509, %502, %499, %496, %492, %488, %485, %482, %479, %476, %473, %466, %461, %454, %451, %448, %441, %436, %427, %422, %417, %410, %405, %398, %393, %386, %379, %372, %365, %358, %357, %356, %352, %343, %338, %329, %325, %320, %291, %238, %235, %232, %229, %226, %223, %218, %213, %208, %201, %198, %195, %188, %185, %182, %179
  %2623 = phi i64 [ %178, %168 ], [ %2621, %2617 ], [ %2616, %2610 ], [ %2609, %2607 ], [ %2606, %2602 ], [ %2601, %2597 ], [ %2596, %2592 ], [ %2591, %2587 ], [ %2586, %2582 ], [ %2581, %2577 ], [ %2576, %2573 ], [ %2572, %2568 ], [ %2567, %2563 ], [ %2562, %2560 ], [ %2559, %2557 ], [ %2556, %2553 ], [ %2552, %2545 ], [ %2544, %2540 ], [ %2539, %2535 ], [ %2534, %2527 ], [ %2526, %2519 ], [ %2518, %2514 ], [ %2513, %2507 ], [ %2506, %2502 ], [ %2501, %2495 ], [ %2494, %2488 ], [ %2487, %2481 ], [ %2480, %2472 ], [ %2471, %2467 ], [ %2466, %2460 ], [ %2459, %2455 ], [ %2454, %2448 ], [ %2447, %2443 ], [ %2442, %2436 ], [ %2435, %2433 ], [ 0, %2432 ], [ %2431, %2430 ], [ %2414, %2410 ], [ %2409, %2406 ], [ %2405, %2403 ], [ %2402, %2398 ], [ %2397, %2394 ], [ %2393, %2391 ], [ %2390, %2384 ], [ %2383, %2377 ], [ %2376, %2370 ], [ %2369, %2363 ], [ %2362, %2356 ], [ %2355, %2351 ], [ %2350, %2344 ], [ %2343, %2337 ], [ %2336, %2332 ], [ %2331, %2328 ], [ %2327, %2325 ], [ %2324, %2318 ], [ %2317, %2315 ], [ %2314, %2312 ], [ %2311, %2309 ], [ %2308, %2300 ], [ %2299, %2293 ], [ %2292, %2286 ], [ %2285, %2279 ], [ %2278, %2274 ], [ %2273, %2271 ], [ %2270, %2267 ], [ %2266, %2264 ], [ %2263, %2261 ], [ %2260, %2257 ], [ %2256, %2254 ], [ %2253, %2251 ], [ %2250, %2248 ], [ 0, %2247 ], [ %2246, %2244 ], [ %2243, %2241 ], [ %2240, %2234 ], [ %2233, %2227 ], [ %2226, %2222 ], [ %2221, %2219 ], [ %2218, %2216 ], [ %2215, %2212 ], [ %2211, %2208 ], [ %2207, %2197 ], [ %2196, %2193 ], [ %2192, %2190 ], [ %2189, %2187 ], [ %2186, %2184 ], [ %2183, %2181 ], [ %2180, %2178 ], [ %2177, %2175 ], [ %2174, %2172 ], [ %2171, %2169 ], [ %2168, %2166 ], [ %2165, %2163 ], [ %2162, %2160 ], [ %2158, %2155 ], [ %2153, %2150 ], [ %2149, %2147 ], [ %2146, %2144 ], [ %2143, %2141 ], [ %2140, %2138 ], [ %2137, %2127 ], [ %2126, %2123 ], [ 0, %2122 ], [ %2121, %2119 ], [ %2118, %2116 ], [ %2115, %2113 ], [ %2112, %2106 ], [ %2105, %2099 ], [ %2098, %2090 ], [ %2089, %2081 ], [ %2080, %2074 ], [ %2072, %2069 ], [ %2068, %2066 ], [ %2065, %2061 ], [ %2060, %2054 ], [ %2053, %2050 ], [ 0, %2049 ], [ 67108864, %2048 ], [ 0, %2047 ], [ %2046, %2044 ], [ %2043, %2042 ], [ %2041, %2039 ], [ %2034, %2000 ], [ %1995, %1962 ], [ %1959, %1955 ], [ %1952, %1946 ], [ %1943, %1939 ], [ %1936, %1934 ], [ %1933, %1929 ], [ %1928, %1924 ], [ %1923, %1921 ], [ %1920, %1916 ], [ %1915, %1911 ], [ %1910, %1906 ], [ %1905, %1901 ], [ %1900, %1896 ], [ %1895, %1891 ], [ %1890, %1886 ], [ %1885, %1881 ], [ %1880, %1876 ], [ %1875, %1873 ], [ %1872, %1866 ], [ %1865, %1859 ], [ %1858, %1850 ], [ %1849, %1847 ], [ %1846, %1843 ], [ %1842, %1836 ], [ %1835, %1829 ], [ %1828, %1822 ], [ %1821, %1815 ], [ %1814, %1808 ], [ %1807, %1801 ], [ %1800, %1794 ], [ %1793, %1787 ], [ %1786, %1780 ], [ %1779, %1773 ], [ %1772, %1768 ], [ %1767, %1763 ], [ %1762, %1758 ], [ %1757, %1753 ], [ %1752, %1746 ], [ %1745, %1739 ], [ %1738, %1732 ], [ %1731, %1725 ], [ %1724, %1718 ], [ %1717, %1711 ], [ %1710, %1704 ], [ %1703, %1697 ], [ %1696, %1690 ], [ %1689, %1683 ], [ %1682, %1676 ], [ %1675, %1669 ], [ %1668, %1662 ], [ %1661, %1655 ], [ %1654, %1648 ], [ %1647, %1641 ], [ %1640, %1634 ], [ %1633, %1629 ], [ %1628, %1624 ], [ %1623, %1619 ], [ %1618, %1614 ], [ %1613, %1607 ], [ %1606, %1600 ], [ %1599, %1593 ], [ %1592, %1586 ], [ %1585, %1579 ], [ %1578, %1572 ], [ %1571, %1565 ], [ %1564, %1558 ], [ %1557, %1551 ], [ %1550, %1544 ], [ %1543, %1537 ], [ %1536, %1530 ], [ %1529, %1525 ], [ %1524, %1518 ], [ %1517, %1511 ], [ %1510, %1502 ], [ %1501, %1493 ], [ %1492, %1490 ], [ %1489, %1483 ], [ %1482, %1464 ], [ %1463, %1461 ], [ %1460, %1456 ], [ %1455, %1449 ], [ %1448, %1446 ], [ 0, %1445 ], [ %1444, %1440 ], [ %1439, %1435 ], [ %1434, %1428 ], [ %1427, %1424 ], [ %1406, %1403 ], [ %1385, %1381 ], [ %1380, %1374 ], [ %1373, %1370 ], [ %1352, %1349 ], [ %1333, %1329 ], [ %1328, %1322 ], [ 4, %1321 ], [ 2, %1320 ], [ 1, %1319 ], [ 1024, %1318 ], [ 512, %1317 ], [ 256, %1316 ], [ %1315, %1306 ], [ %1305, %1303 ], [ 256, %1295 ], [ 256, %1294 ], [ %1293, %1291 ], [ %1290, %1287 ], [ 0, %1286 ], [ %1285, %1279 ], [ %1278, %1276 ], [ %1275, %1271 ], [ %1270, %1263 ], [ %1262, %1252 ], [ %1251, %1246 ], [ %1245, %1239 ], [ %1238, %1232 ], [ %1231, %1228 ], [ %1227, %1224 ], [ %1223, %1217 ], [ %1216, %1212 ], [ %1211, %1208 ], [ 0, %1207 ], [ 0, %1206 ], [ %1205, %1199 ], [ %1198, %1194 ], [ %1189, %1158 ], [ %1157, %1151 ], [ %1145, %1142 ], [ %1136, %1133 ], [ %1132, %1130 ], [ %1129, %1123 ], [ %1122, %1116 ], [ %1115, %1111 ], [ %1110, %1106 ], [ %1105, %1099 ], [ %1098, %1093 ], [ %1092, %1088 ], [ %1087, %1081 ], [ %1080, %1076 ], [ %1075, %1073 ], [ %1072, %1066 ], [ %1065, %1061 ], [ %1060, %1057 ], [ %1056, %1054 ], [ %1053, %1051 ], [ 0, %1050 ], [ %1049, %1047 ], [ %1046, %1044 ], [ %1043, %1041 ], [ %1037, %1034 ], [ %1033, %1031 ], [ %1030, %1028 ], [ 0, %1027 ], [ %1026, %1010 ], [ %1009, %995 ], [ %994, %988 ], [ %987, %983 ], [ %982, %980 ], [ %979, %977 ], [ %976, %969 ], [ %968, %965 ], [ %964, %955 ], [ %954, %947 ], [ %946, %939 ], [ %938, %936 ], [ %935, %926 ], [ %925, %918 ], [ %917, %914 ], [ %913, %911 ], [ %910, %903 ], [ %902, %893 ], [ %892, %890 ], [ %889, %886 ], [ %885, %882 ], [ %881, %878 ], [ %877, %874 ], [ %873, %870 ], [ %869, %867 ], [ %866, %863 ], [ %862, %860 ], [ %859, %856 ], [ %855, %853 ], [ %851, %848 ], [ %846, %843 ], [ %842, %838 ], [ %837, %835 ], [ %834, %832 ], [ 0, %831 ], [ %830, %828 ], [ 0, %827 ], [ %826, %824 ], [ 0, %823 ], [ %822, %804 ], [ %803, %801 ], [ %800, %784 ], [ %783, %781 ], [ 4, %780 ], [ 32, %779 ], [ %778, %769 ], [ %768, %766 ], [ %765, %745 ], [ %744, %742 ], [ %741, %717 ], [ %716, %714 ], [ 2, %713 ], [ 0, %712 ], [ 1, %711 ], [ 0, %710 ], [ %705, %678 ], [ %677, %673 ], [ %672, %666 ], [ %665, %661 ], [ %660, %657 ], [ 0, %656 ], [ %655, %649 ], [ %648, %644 ], [ %643, %632 ], [ %631, %629 ], [ %628, %624 ], [ %623, %619 ], [ %618, %614 ], [ %613, %605 ], [ 0, %604 ], [ %603, %597 ], [ %178, %594 ], [ %593, %583 ], [ %582, %574 ], [ %573, %570 ], [ %569, %566 ], [ %565, %561 ], [ %560, %557 ], [ %556, %553 ], [ %552, %549 ], [ %548, %544 ], [ %543, %539 ], [ %538, %534 ], [ %533, %527 ], [ %526, %516 ], [ %515, %509 ], [ %508, %502 ], [ %501, %499 ], [ %498, %496 ], [ %495, %492 ], [ %490, %488 ], [ %487, %485 ], [ %484, %482 ], [ %481, %479 ], [ %478, %476 ], [ %475, %473 ], [ %472, %466 ], [ %465, %461 ], [ %460, %454 ], [ %453, %451 ], [ %450, %448 ], [ %447, %441 ], [ %440, %436 ], [ %430, %427 ], [ %425, %422 ], [ %421, %417 ], [ %416, %410 ], [ %409, %405 ], [ %404, %398 ], [ %397, %393 ], [ %392, %386 ], [ %385, %379 ], [ %378, %372 ], [ %371, %365 ], [ %364, %358 ], [ 4, %357 ], [ 2, %356 ], [ %355, %352 ], [ %346, %343 ], [ %341, %338 ], [ %332, %329 ], [ %328, %325 ], [ %324, %320 ], [ %178, %319 ], [ %178, %298 ], [ %297, %291 ], [ %178, %290 ], [ %178, %269 ], [ %247, %268 ], [ %247, %243 ], [ %242, %238 ], [ %237, %235 ], [ %234, %232 ], [ %231, %229 ], [ %228, %226 ], [ %225, %223 ], [ %221, %218 ], [ %216, %213 ], [ %211, %208 ], [ %207, %201 ], [ %200, %198 ], [ %197, %195 ], [ %194, %188 ], [ %187, %185 ], [ %184, %182 ], [ %178, %179 ], [ %1302, %1296 ]
  %2624 = sub nsw i64 0, %174
  %2625 = getelementptr inbounds %52, %52* %110, i64 1
  %2626 = getelementptr inbounds i16, i16* %112, i64 %2624
  %2627 = getelementptr inbounds %52, %52* %2625, i64 %2624
  %2628 = bitcast %52* %2627 to i64*
  store i64 %2623, i64* %2628, align 8
  %2629 = getelementptr inbounds [499 x i16], [499 x i16]* @8, i64 0, i64 %171
  %2630 = load i16, i16* %2629, align 2
  %2631 = zext i16 %2630 to i64
  %2632 = add nsw i64 %2631, -166
  %2633 = getelementptr inbounds [138 x i16], [138 x i16]* @9, i64 0, i64 %2632
  %2634 = load i16, i16* %2633, align 2
  %2635 = sext i16 %2634 to i32
  %2636 = load i16, i16* %2626, align 2
  %2637 = sext i16 %2636 to i32
  %2638 = add nsw i32 %2637, %2635
  %2639 = icmp ult i32 %2638, 7399
  br i1 %2639, label %2640, label %2649

2640:                                             ; preds = %2622
  %2641 = sext i32 %2638 to i64
  %2642 = getelementptr inbounds [7399 x i16], [7399 x i16]* @2, i64 0, i64 %2641
  %2643 = load i16, i16* %2642, align 2
  %2644 = icmp eq i16 %2643, %2636
  br i1 %2644, label %2645, label %2649

2645:                                             ; preds = %2640
  %2646 = getelementptr inbounds [7399 x i16], [7399 x i16]* @3, i64 0, i64 %2641
  %2647 = load i16, i16* %2646, align 2
  %2648 = sext i16 %2647 to i32
  br label %52

2649:                                             ; preds = %2640, %2622
  %2650 = getelementptr inbounds [138 x i16], [138 x i16]* @10, i64 0, i64 %2632
  %2651 = load i16, i16* %2650, align 2
  %2652 = sext i16 %2651 to i32
  br label %52

2653:                                             ; preds = %162
  %2654 = icmp eq i32 %163, -2
  br i1 %2654, label %2663, label %2655

2655:                                             ; preds = %151, %2653
  %2656 = phi i32 [ %163, %2653 ], [ %137, %151 ]
  %2657 = icmp ult i32 %2656, 393
  br i1 %2657, label %2658, label %2663

2658:                                             ; preds = %2655
  %2659 = sext i32 %2656 to i64
  %2660 = getelementptr inbounds [393 x i8], [393 x i8]* @1, i64 0, i64 %2659
  %2661 = load i8, i8* %2660, align 1
  %2662 = zext i8 %2661 to i32
  br label %2663

2663:                                             ; preds = %2658, %2655, %2653
  %2664 = phi i32 [ -2, %2653 ], [ %2656, %2658 ], [ %2656, %2655 ]
  %2665 = phi i32 [ -2, %2653 ], [ %2662, %2658 ], [ 2, %2655 ]
  switch i32 %65, label %2690 [
    i32 0, label %2666
    i32 3, label %2685
  ]

2666:                                             ; preds = %2663
  %2667 = call fastcc i32 @331(i64* nonnull %13, i8** nonnull %12, i16* %112, i32 %2665)
  switch i32 %2667, label %2681 [
    i32 0, label %2668
    i32 1, label %2670
  ]

2668:                                             ; preds = %2666
  %2669 = load i8*, i8** %12, align 8
  call void @zenderror(i8* %2669) #8
  br label %2690

2670:                                             ; preds = %2666
  %2671 = load i8*, i8** %12, align 8
  %2672 = icmp eq i8* %2671, %21
  br i1 %2672, label %2674, label %2673

2673:                                             ; preds = %2670
  call void @free(i8* %2671) #8
  br label %2674

2674:                                             ; preds = %2670, %2673
  %2675 = load i64, i64* %13, align 8
  %2676 = call noalias i8* @malloc(i64 %2675) #8
  store i8* %2676, i8** %12, align 8
  %2677 = icmp eq i8* %2676, null
  br i1 %2677, label %2678, label %2679

2678:                                             ; preds = %2674
  store i8* %21, i8** %12, align 8
  store i64 128, i64* %13, align 8
  call void @zenderror(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @11, i64 0, i64 0)) #8
  br label %2727

2679:                                             ; preds = %2674
  %2680 = call fastcc i32 @331(i64* nonnull %13, i8** nonnull %12, i16* %112, i32 %2665)
  br label %2681

2681:                                             ; preds = %2666, %2679
  %2682 = phi i8* [ %2676, %2679 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @11, i64 0, i64 0), %2666 ]
  %2683 = phi i32 [ %2680, %2679 ], [ %2667, %2666 ]
  call void @zenderror(i8* nonnull %2682) #8
  %2684 = icmp eq i32 %2683, 2
  br i1 %2684, label %2727, label %2690

2685:                                             ; preds = %2663
  %2686 = icmp slt i32 %2664, 1
  br i1 %2686, label %2687, label %2689

2687:                                             ; preds = %2685
  %2688 = icmp eq i32 %2664, 0
  br i1 %2688, label %2743, label %2690

2689:                                             ; preds = %2685
  call fastcc void @332(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @12, i64 0, i64 0), i32 %2665, %52* nonnull %8)
  br label %2690

2690:                                             ; preds = %2663, %2681, %2668, %2687, %2689
  %2691 = phi i32 [ %2664, %2687 ], [ -2, %2689 ], [ %2664, %2668 ], [ %2664, %2681 ], [ %2664, %2663 ]
  br label %2692

2692:                                             ; preds = %2711, %2690
  %2693 = phi i16 [ %118, %2690 ], [ %2721, %2711 ]
  %2694 = phi %52* [ %110, %2690 ], [ %2715, %2711 ]
  %2695 = phi i16* [ %112, %2690 ], [ %2716, %2711 ]
  %2696 = phi i32 [ %66, %2690 ], [ %2718, %2711 ]
  %2697 = sext i32 %2696 to i64
  %2698 = icmp sgt i16 %2693, -2
  br i1 %2698, label %2699, label %2709

2699:                                             ; preds = %2692
  %2700 = sext i16 %2693 to i64
  %2701 = add nsw i64 %2700, 1
  %2702 = getelementptr inbounds [7399 x i16], [7399 x i16]* @2, i64 0, i64 %2701
  %2703 = load i16, i16* %2702, align 2
  %2704 = icmp eq i16 %2703, 1
  br i1 %2704, label %2705, label %2709

2705:                                             ; preds = %2699
  %2706 = getelementptr inbounds [7399 x i16], [7399 x i16]* @3, i64 0, i64 %2701
  %2707 = load i16, i16* %2706, align 2
  %2708 = icmp sgt i16 %2707, 0
  br i1 %2708, label %2722, label %2709

2709:                                             ; preds = %2692, %2699, %2705
  %2710 = icmp eq i16* %2695, %113
  br i1 %2710, label %2734, label %2711

2711:                                             ; preds = %2709
  %2712 = getelementptr inbounds [945 x i16], [945 x i16]* @14, i64 0, i64 %2697
  %2713 = load i16, i16* %2712, align 2
  %2714 = zext i16 %2713 to i32
  call fastcc void @332(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @13, i64 0, i64 0), i32 %2714, %52* %2694)
  %2715 = getelementptr inbounds %52, %52* %2694, i64 -1
  %2716 = getelementptr inbounds i16, i16* %2695, i64 -1
  %2717 = load i16, i16* %2716, align 2
  %2718 = sext i16 %2717 to i32
  %2719 = sext i16 %2717 to i64
  %2720 = getelementptr inbounds [945 x i16], [945 x i16]* @0, i64 0, i64 %2719
  %2721 = load i16, i16* %2720, align 2
  br label %2692

2722:                                             ; preds = %2705
  %2723 = sext i16 %2707 to i32
  %2724 = getelementptr inbounds %52, %52* %2694, i64 1
  %2725 = bitcast %52* %2724 to i64*
  %2726 = load i64, i64* %18, align 8
  store i64 %2726, i64* %2725, align 8
  br label %52

2727:                                             ; preds = %79, %72, %2681, %2678
  %2728 = phi %52* [ %110, %2678 ], [ %61, %79 ], [ %61, %72 ], [ %110, %2681 ]
  %2729 = phi i16* [ %112, %2678 ], [ %63, %79 ], [ %63, %72 ], [ %112, %2681 ]
  %2730 = phi i16* [ %113, %2678 ], [ %64, %79 ], [ %64, %72 ], [ %113, %2681 ]
  %2731 = phi i32 [ %2664, %2678 ], [ %67, %79 ], [ %67, %72 ], [ %2664, %2681 ]
  call void @zenderror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @15, i64 0, i64 0)) #8
  br label %2734

2732:                                             ; preds = %101
  %2733 = bitcast i8* %85 to i16*
  br label %2734

2734:                                             ; preds = %108, %2709, %2732, %2727
  %2735 = phi %52* [ %2728, %2727 ], [ %103, %2732 ], [ %2694, %2709 ], [ %110, %108 ]
  %2736 = phi i32 [ 2, %2727 ], [ 1, %2732 ], [ 1, %2709 ], [ 0, %108 ]
  %2737 = phi i16* [ %2729, %2727 ], [ %102, %2732 ], [ %113, %2709 ], [ %112, %108 ]
  %2738 = phi i16* [ %2730, %2727 ], [ %2733, %2732 ], [ %113, %2709 ], [ %113, %108 ]
  %2739 = phi i32 [ %2731, %2727 ], [ %67, %2732 ], [ %2691, %2709 ], [ %67, %108 ]
  %2740 = icmp eq i32 %2739, -2
  br i1 %2740, label %2759, label %2741

2741:                                             ; preds = %2734
  %2742 = icmp ult i32 %2739, 393
  br i1 %2742, label %2743, label %2753

2743:                                             ; preds = %2687, %2741
  %2744 = phi %52* [ %2735, %2741 ], [ %110, %2687 ]
  %2745 = phi i32 [ %2736, %2741 ], [ 1, %2687 ]
  %2746 = phi i16* [ %2737, %2741 ], [ %112, %2687 ]
  %2747 = phi i16* [ %2738, %2741 ], [ %113, %2687 ]
  %2748 = phi i32 [ %2739, %2741 ], [ 0, %2687 ]
  %2749 = sext i32 %2748 to i64
  %2750 = getelementptr inbounds [393 x i8], [393 x i8]* @1, i64 0, i64 %2749
  %2751 = load i8, i8* %2750, align 1
  %2752 = zext i8 %2751 to i32
  br label %2753

2753:                                             ; preds = %2741, %2743
  %2754 = phi %52* [ %2744, %2743 ], [ %2735, %2741 ]
  %2755 = phi i32 [ %2745, %2743 ], [ %2736, %2741 ]
  %2756 = phi i16* [ %2746, %2743 ], [ %2737, %2741 ]
  %2757 = phi i16* [ %2747, %2743 ], [ %2738, %2741 ]
  %2758 = phi i32 [ %2752, %2743 ], [ 2, %2741 ]
  call fastcc void @332(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @16, i64 0, i64 0), i32 %2758, %52* nonnull %8)
  br label %2759

2759:                                             ; preds = %2734, %2753
  %2760 = phi i16* [ %2738, %2734 ], [ %2757, %2753 ]
  %2761 = phi i16* [ %2737, %2734 ], [ %2756, %2753 ]
  %2762 = phi i32 [ %2736, %2734 ], [ %2755, %2753 ]
  %2763 = phi %52* [ %2735, %2734 ], [ %2754, %2753 ]
  %2764 = icmp eq i16* %2761, %2760
  br i1 %2764, label %2776, label %2765

2765:                                             ; preds = %2759, %2765
  %2766 = phi i16* [ %2774, %2765 ], [ %2761, %2759 ]
  %2767 = phi %52* [ %2773, %2765 ], [ %2763, %2759 ]
  %2768 = load i16, i16* %2766, align 2
  %2769 = sext i16 %2768 to i64
  %2770 = getelementptr inbounds [945 x i16], [945 x i16]* @14, i64 0, i64 %2769
  %2771 = load i16, i16* %2770, align 2
  %2772 = zext i16 %2771 to i32
  call fastcc void @332(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @17, i64 0, i64 0), i32 %2772, %52* %2767)
  %2773 = getelementptr inbounds %52, %52* %2767, i64 -1
  %2774 = getelementptr inbounds i16, i16* %2766, i64 -1
  %2775 = icmp eq i16* %2774, %2760
  br i1 %2775, label %2776, label %2765

2776:                                             ; preds = %2765, %2759
  %2777 = icmp eq i16* %2760, %24
  br i1 %2777, label %2780, label %2778

2778:                                             ; preds = %2776
  %2779 = bitcast i16* %2760 to i8*
  call void @free(i8* %2779) #8
  br label %2780

2780:                                             ; preds = %2776, %2778
  %2781 = load i8*, i8** %12, align 8
  %2782 = icmp eq i8* %2781, %21
  br i1 %2782, label %2784, label %2783

2783:                                             ; preds = %2780
  call void @free(i8* %2781) #8
  br label %2784

2784:                                             ; preds = %2783, %2780
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %20) #8
  call void @llvm.lifetime.end.p0i8(i64 400, i8* nonnull %19) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  ret i32 %2762
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare dso_local void @free(i8* nocapture) local_unnamed_addr #2

declare dso_local i32 @zendlex(%52*) local_unnamed_addr #3

declare dso_local void @zend_lex_tstring(%2*) local_unnamed_addr #3

declare dso_local %43* @zend_ast_list_add(%43*, %43*) local_unnamed_addr #3

declare dso_local %43* @zend_ast_create_list(i32, i16 zeroext, ...) local_unnamed_addr #3

declare dso_local %43* @zend_ast_append_str(%43*, %43*) local_unnamed_addr #3

declare dso_local %43* @zend_ast_create(i16 zeroext, ...) local_unnamed_addr #3

declare dso_local i64 @zend_get_scanned_file_offset() local_unnamed_addr #3

declare dso_local void @zend_stop_lexing() local_unnamed_addr #3

; Function Attrs: noreturn
declare dso_local void @zend_error_noreturn(i32, i8*, ...) local_unnamed_addr #4

declare dso_local void @zend_handle_encoding_declaration(%43*) local_unnamed_addr #3

declare dso_local %43* @zend_ast_create_decl(i16 zeroext, i32, i32, %32*, %32*, %43*, %43*, %43*, %43*) local_unnamed_addr #3

declare dso_local i32 @zend_add_class_modifier(i32, i32) local_unnamed_addr #3

declare dso_local %43* @zend_ast_create_ex(i16 zeroext, i16 zeroext, ...) local_unnamed_addr #3

declare dso_local i32 @zend_add_member_modifier(i32, i32) local_unnamed_addr #3

declare dso_local %43* @zend_ast_create_zval_ex(%2*, i16 zeroext) local_unnamed_addr #3

declare dso_local %43* @zend_negate_num_string(%43*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define internal fastcc i32 @331(i64* nocapture %0, i8** nocapture readonly %1, i16* nocapture readonly %2, i32 %3) unnamed_addr #0 {
  %5 = alloca [5 x i8*], align 16
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [305 x i8*], [305 x i8*]* @18, i64 0, i64 %6
  %8 = load i8*, i8** %7, align 8
  %9 = tail call fastcc i64 @333(i8* null, i8* %8)
  %10 = bitcast [5 x i8*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #8
  %11 = icmp eq i32 %3, -2
  br i1 %11, label %70, label %12

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = load i16, i16* %2, align 2
  %15 = sext i16 %14 to i64
  %16 = getelementptr inbounds [945 x i16], [945 x i16]* @0, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = bitcast [5 x i8*]* %5 to i64*
  store i64 %13, i64* %19, align 16
  %20 = icmp eq i16 %17, -722
  br i1 %20, label %72, label %21

21:                                               ; preds = %12
  %22 = icmp slt i16 %17, 0
  %23 = sub nsw i32 0, %18
  %24 = select i1 %22, i32 %23, i32 0
  %25 = sub nsw i32 7398, %18
  %26 = add nsw i32 %25, 1
  %27 = icmp slt i32 %26, 166
  %28 = select i1 %27, i32 %26, i32 166
  %29 = icmp slt i32 %24, %28
  br i1 %29, label %30, label %72

30:                                               ; preds = %21
  %31 = sext i32 %24 to i64
  %32 = sext i16 %17 to i64
  %33 = sext i32 %28 to i64
  br label %34

34:                                               ; preds = %30, %64
  %35 = phi i64 [ %31, %30 ], [ %67, %64 ]
  %36 = phi i64 [ %9, %30 ], [ %66, %64 ]
  %37 = phi i32 [ 1, %30 ], [ %65, %64 ]
  %38 = add nsw i64 %35, %32
  %39 = getelementptr inbounds [7399 x i16], [7399 x i16]* @2, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = trunc i64 %35 to i32
  %43 = icmp eq i32 %42, %41
  %44 = icmp ne i64 %35, 1
  %45 = and i1 %44, %43
  br i1 %45, label %46, label %64

46:                                               ; preds = %34
  %47 = getelementptr inbounds [7399 x i16], [7399 x i16]* @3, i64 0, i64 %38
  %48 = load i16, i16* %47, align 2
  %49 = icmp eq i16 %48, -472
  br i1 %49, label %64, label %50

50:                                               ; preds = %46
  %51 = icmp eq i32 %37, 5
  br i1 %51, label %72, label %52

52:                                               ; preds = %50
  %53 = getelementptr inbounds [305 x i8*], [305 x i8*]* @18, i64 0, i64 %35
  %54 = bitcast i8** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = add nsw i32 %37, 1
  %57 = sext i32 %37 to i64
  %58 = getelementptr inbounds [5 x i8*], [5 x i8*]* %5, i64 0, i64 %57
  %59 = bitcast i8** %58 to i64*
  store i64 %55, i64* %59, align 8
  %60 = inttoptr i64 %55 to i8*
  %61 = tail call fastcc i64 @333(i8* null, i8* %60)
  %62 = add i64 %61, %36
  %63 = icmp ugt i64 %36, %62
  br i1 %63, label %122, label %64

64:                                               ; preds = %52, %34, %46
  %65 = phi i32 [ %37, %46 ], [ %56, %52 ], [ %37, %34 ]
  %66 = phi i64 [ %36, %46 ], [ %62, %52 ], [ %36, %34 ]
  %67 = add nsw i64 %35, 1
  %68 = icmp slt i64 %67, %33
  br i1 %68, label %34, label %69

69:                                               ; preds = %64
  switch i32 %65, label %78 [
    i32 0, label %70
    i32 1, label %72
    i32 2, label %74
    i32 3, label %75
    i32 4, label %76
    i32 5, label %77
  ]

70:                                               ; preds = %4, %69
  %71 = phi i64 [ %66, %69 ], [ %9, %4 ]
  br label %78

72:                                               ; preds = %50, %21, %12, %69
  %73 = phi i64 [ %66, %69 ], [ %9, %12 ], [ %9, %21 ], [ %9, %50 ]
  br label %78

74:                                               ; preds = %69
  br label %78

75:                                               ; preds = %69
  br label %78

76:                                               ; preds = %69
  br label %78

77:                                               ; preds = %69
  br label %78

78:                                               ; preds = %69, %77, %76, %75, %74, %72, %70
  %79 = phi i64 [ %66, %69 ], [ %66, %77 ], [ %66, %76 ], [ %66, %75 ], [ %66, %74 ], [ %73, %72 ], [ %71, %70 ]
  %80 = phi i32 [ %65, %69 ], [ %65, %77 ], [ %65, %76 ], [ %65, %75 ], [ %65, %74 ], [ 1, %72 ], [ 0, %70 ]
  %81 = phi i8* [ null, %69 ], [ getelementptr inbounds ([60 x i8], [60 x i8]* @23, i64 0, i64 0), %77 ], [ getelementptr inbounds ([54 x i8], [54 x i8]* @22, i64 0, i64 0), %76 ], [ getelementptr inbounds ([48 x i8], [48 x i8]* @21, i64 0, i64 0), %75 ], [ getelementptr inbounds ([42 x i8], [42 x i8]* @20, i64 0, i64 0), %74 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @19, i64 0, i64 0), %72 ], [ getelementptr inbounds ([13 x i8], [13 x i8]* @11, i64 0, i64 0), %70 ]
  %82 = tail call i64 @strlen(i8* %81) #11
  %83 = add i64 %82, %79
  %84 = icmp ugt i64 %79, %83
  %85 = select i1 %84, i64 %79, i64 %83
  br i1 %84, label %122, label %86

86:                                               ; preds = %78
  %87 = load i64, i64* %0, align 8
  %88 = icmp ult i64 %87, %85
  br i1 %88, label %89, label %93

89:                                               ; preds = %86
  %90 = shl i64 %85, 1
  %91 = icmp ugt i64 %85, %90
  %92 = select i1 %91, i64 -1, i64 %90
  store i64 %92, i64* %0, align 8
  br label %122

93:                                               ; preds = %86
  %94 = load i8*, i8** %1, align 8
  br label %95

95:                                               ; preds = %111, %93
  %96 = phi i8* [ %118, %111 ], [ %81, %93 ]
  %97 = phi i8* [ %117, %111 ], [ %94, %93 ]
  %98 = phi i32 [ %112, %111 ], [ 0, %93 ]
  %99 = icmp slt i32 %98, %80
  br label %100

100:                                              ; preds = %95, %119
  %101 = phi i8* [ %120, %119 ], [ %96, %95 ]
  %102 = phi i8* [ %121, %119 ], [ %97, %95 ]
  %103 = load i8, i8* %101, align 1
  store i8 %103, i8* %102, align 1
  switch i8 %103, label %104 [
    i8 0, label %122
    i8 37, label %106
  ]

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %101, i64 1
  br label %119

106:                                              ; preds = %100
  %107 = getelementptr inbounds i8, i8* %101, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, 115
  %110 = and i1 %99, %109
  br i1 %110, label %111, label %119

111:                                              ; preds = %106
  %112 = add nuw nsw i32 %98, 1
  %113 = zext i32 %98 to i64
  %114 = getelementptr inbounds [5 x i8*], [5 x i8*]* %5, i64 0, i64 %113
  %115 = load i8*, i8** %114, align 8
  %116 = tail call fastcc i64 @333(i8* %102, i8* %115)
  %117 = getelementptr inbounds i8, i8* %102, i64 %116
  %118 = getelementptr inbounds i8, i8* %101, i64 2
  br label %95

119:                                              ; preds = %104, %106
  %120 = phi i8* [ %105, %104 ], [ %107, %106 ]
  %121 = getelementptr inbounds i8, i8* %102, i64 1
  br label %100

122:                                              ; preds = %52, %100, %78, %89
  %123 = phi i32 [ 2, %78 ], [ 1, %89 ], [ 0, %100 ], [ 2, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #8
  ret i32 %123
}

declare dso_local void @zenderror(i8*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define internal fastcc void @332(i8* readnone %0, i32 %1, %52* readonly %2) unnamed_addr #0 {
  switch i32 %1, label %386 [
    i32 81, label %4
    i32 82, label %7
    i32 83, label %10
    i32 84, label %13
    i32 85, label %16
    i32 86, label %19
    i32 87, label %22
    i32 88, label %25
    i32 89, label %28
    i32 170, label %31
    i32 171, label %34
    i32 172, label %37
    i32 173, label %40
    i32 174, label %43
    i32 178, label %46
    i32 179, label %49
    i32 181, label %52
    i32 182, label %55
    i32 183, label %58
    i32 184, label %61
    i32 185, label %64
    i32 186, label %67
    i32 187, label %70
    i32 188, label %73
    i32 189, label %76
    i32 190, label %79
    i32 192, label %82
    i32 193, label %85
    i32 194, label %88
    i32 195, label %91
    i32 196, label %94
    i32 197, label %97
    i32 200, label %100
    i32 205, label %103
    i32 207, label %106
    i32 209, label %109
    i32 210, label %112
    i32 211, label %115
    i32 212, label %118
    i32 213, label %121
    i32 214, label %124
    i32 215, label %127
    i32 216, label %130
    i32 217, label %133
    i32 219, label %136
    i32 220, label %139
    i32 221, label %142
    i32 222, label %145
    i32 223, label %148
    i32 224, label %151
    i32 225, label %154
    i32 226, label %157
    i32 227, label %160
    i32 228, label %163
    i32 229, label %166
    i32 230, label %169
    i32 231, label %172
    i32 232, label %175
    i32 233, label %178
    i32 234, label %181
    i32 235, label %184
    i32 236, label %187
    i32 237, label %190
    i32 238, label %193
    i32 239, label %196
    i32 240, label %199
    i32 241, label %202
    i32 242, label %205
    i32 243, label %208
    i32 244, label %211
    i32 245, label %214
    i32 246, label %217
    i32 247, label %220
    i32 248, label %223
    i32 253, label %226
    i32 254, label %229
    i32 255, label %232
    i32 256, label %235
    i32 257, label %238
    i32 258, label %241
    i32 259, label %244
    i32 260, label %247
    i32 261, label %250
    i32 262, label %253
    i32 264, label %256
    i32 265, label %259
    i32 267, label %262
    i32 270, label %284
    i32 271, label %287
    i32 272, label %290
    i32 273, label %293
    i32 274, label %296
    i32 275, label %299
    i32 276, label %302
    i32 277, label %305
    i32 278, label %308
    i32 279, label %311
    i32 280, label %314
    i32 281, label %317
    i32 282, label %320
    i32 283, label %323
    i32 284, label %326
    i32 285, label %329
    i32 286, label %332
    i32 287, label %335
    i32 288, label %338
    i32 289, label %341
    i32 290, label %344
    i32 291, label %347
    i32 292, label %350
    i32 293, label %353
    i32 294, label %356
    i32 295, label %359
    i32 296, label %362
    i32 297, label %365
    i32 298, label %368
    i32 299, label %371
    i32 300, label %374
    i32 301, label %377
    i32 302, label %380
    i32 303, label %383
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %6 = load %43*, %43** %5, align 8
  tail call void @zend_ast_destroy(%43* %6) #8
  br label %386

7:                                                ; preds = %3
  %8 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %9 = load %43*, %43** %8, align 8
  tail call void @zend_ast_destroy(%43* %9) #8
  br label %386

10:                                               ; preds = %3
  %11 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %12 = load %43*, %43** %11, align 8
  tail call void @zend_ast_destroy(%43* %12) #8
  br label %386

13:                                               ; preds = %3
  %14 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %15 = load %43*, %43** %14, align 8
  tail call void @zend_ast_destroy(%43* %15) #8
  br label %386

16:                                               ; preds = %3
  %17 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %18 = load %43*, %43** %17, align 8
  tail call void @zend_ast_destroy(%43* %18) #8
  br label %386

19:                                               ; preds = %3
  %20 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %21 = load %43*, %43** %20, align 8
  tail call void @zend_ast_destroy(%43* %21) #8
  br label %386

22:                                               ; preds = %3
  %23 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %24 = load %43*, %43** %23, align 8
  tail call void @zend_ast_destroy(%43* %24) #8
  br label %386

25:                                               ; preds = %3
  %26 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %27 = load %43*, %43** %26, align 8
  tail call void @zend_ast_destroy(%43* %27) #8
  br label %386

28:                                               ; preds = %3
  %29 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %30 = load %43*, %43** %29, align 8
  tail call void @zend_ast_destroy(%43* %30) #8
  br label %386

31:                                               ; preds = %3
  %32 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %33 = load %43*, %43** %32, align 8
  tail call void @zend_ast_destroy(%43* %33) #8
  br label %386

34:                                               ; preds = %3
  %35 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %36 = load %43*, %43** %35, align 8
  tail call void @zend_ast_destroy(%43* %36) #8
  br label %386

37:                                               ; preds = %3
  %38 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %39 = load %43*, %43** %38, align 8
  tail call void @zend_ast_destroy(%43* %39) #8
  br label %386

40:                                               ; preds = %3
  %41 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %42 = load %43*, %43** %41, align 8
  tail call void @zend_ast_destroy(%43* %42) #8
  br label %386

43:                                               ; preds = %3
  %44 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %45 = load %43*, %43** %44, align 8
  tail call void @zend_ast_destroy(%43* %45) #8
  br label %386

46:                                               ; preds = %3
  %47 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %48 = load %43*, %43** %47, align 8
  tail call void @zend_ast_destroy(%43* %48) #8
  br label %386

49:                                               ; preds = %3
  %50 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %51 = load %43*, %43** %50, align 8
  tail call void @zend_ast_destroy(%43* %51) #8
  br label %386

52:                                               ; preds = %3
  %53 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %54 = load %43*, %43** %53, align 8
  tail call void @zend_ast_destroy(%43* %54) #8
  br label %386

55:                                               ; preds = %3
  %56 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %57 = load %43*, %43** %56, align 8
  tail call void @zend_ast_destroy(%43* %57) #8
  br label %386

58:                                               ; preds = %3
  %59 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %60 = load %43*, %43** %59, align 8
  tail call void @zend_ast_destroy(%43* %60) #8
  br label %386

61:                                               ; preds = %3
  %62 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %63 = load %43*, %43** %62, align 8
  tail call void @zend_ast_destroy(%43* %63) #8
  br label %386

64:                                               ; preds = %3
  %65 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %66 = load %43*, %43** %65, align 8
  tail call void @zend_ast_destroy(%43* %66) #8
  br label %386

67:                                               ; preds = %3
  %68 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %69 = load %43*, %43** %68, align 8
  tail call void @zend_ast_destroy(%43* %69) #8
  br label %386

70:                                               ; preds = %3
  %71 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %72 = load %43*, %43** %71, align 8
  tail call void @zend_ast_destroy(%43* %72) #8
  br label %386

73:                                               ; preds = %3
  %74 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %75 = load %43*, %43** %74, align 8
  tail call void @zend_ast_destroy(%43* %75) #8
  br label %386

76:                                               ; preds = %3
  %77 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %78 = load %43*, %43** %77, align 8
  tail call void @zend_ast_destroy(%43* %78) #8
  br label %386

79:                                               ; preds = %3
  %80 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %81 = load %43*, %43** %80, align 8
  tail call void @zend_ast_destroy(%43* %81) #8
  br label %386

82:                                               ; preds = %3
  %83 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %84 = load %43*, %43** %83, align 8
  tail call void @zend_ast_destroy(%43* %84) #8
  br label %386

85:                                               ; preds = %3
  %86 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %87 = load %43*, %43** %86, align 8
  tail call void @zend_ast_destroy(%43* %87) #8
  br label %386

88:                                               ; preds = %3
  %89 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %90 = load %43*, %43** %89, align 8
  tail call void @zend_ast_destroy(%43* %90) #8
  br label %386

91:                                               ; preds = %3
  %92 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %93 = load %43*, %43** %92, align 8
  tail call void @zend_ast_destroy(%43* %93) #8
  br label %386

94:                                               ; preds = %3
  %95 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %96 = load %43*, %43** %95, align 8
  tail call void @zend_ast_destroy(%43* %96) #8
  br label %386

97:                                               ; preds = %3
  %98 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %99 = load %43*, %43** %98, align 8
  tail call void @zend_ast_destroy(%43* %99) #8
  br label %386

100:                                              ; preds = %3
  %101 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %102 = load %43*, %43** %101, align 8
  tail call void @zend_ast_destroy(%43* %102) #8
  br label %386

103:                                              ; preds = %3
  %104 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %105 = load %43*, %43** %104, align 8
  tail call void @zend_ast_destroy(%43* %105) #8
  br label %386

106:                                              ; preds = %3
  %107 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %108 = load %43*, %43** %107, align 8
  tail call void @zend_ast_destroy(%43* %108) #8
  br label %386

109:                                              ; preds = %3
  %110 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %111 = load %43*, %43** %110, align 8
  tail call void @zend_ast_destroy(%43* %111) #8
  br label %386

112:                                              ; preds = %3
  %113 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %114 = load %43*, %43** %113, align 8
  tail call void @zend_ast_destroy(%43* %114) #8
  br label %386

115:                                              ; preds = %3
  %116 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %117 = load %43*, %43** %116, align 8
  tail call void @zend_ast_destroy(%43* %117) #8
  br label %386

118:                                              ; preds = %3
  %119 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %120 = load %43*, %43** %119, align 8
  tail call void @zend_ast_destroy(%43* %120) #8
  br label %386

121:                                              ; preds = %3
  %122 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %123 = load %43*, %43** %122, align 8
  tail call void @zend_ast_destroy(%43* %123) #8
  br label %386

124:                                              ; preds = %3
  %125 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %126 = load %43*, %43** %125, align 8
  tail call void @zend_ast_destroy(%43* %126) #8
  br label %386

127:                                              ; preds = %3
  %128 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %129 = load %43*, %43** %128, align 8
  tail call void @zend_ast_destroy(%43* %129) #8
  br label %386

130:                                              ; preds = %3
  %131 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %132 = load %43*, %43** %131, align 8
  tail call void @zend_ast_destroy(%43* %132) #8
  br label %386

133:                                              ; preds = %3
  %134 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %135 = load %43*, %43** %134, align 8
  tail call void @zend_ast_destroy(%43* %135) #8
  br label %386

136:                                              ; preds = %3
  %137 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %138 = load %43*, %43** %137, align 8
  tail call void @zend_ast_destroy(%43* %138) #8
  br label %386

139:                                              ; preds = %3
  %140 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %141 = load %43*, %43** %140, align 8
  tail call void @zend_ast_destroy(%43* %141) #8
  br label %386

142:                                              ; preds = %3
  %143 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %144 = load %43*, %43** %143, align 8
  tail call void @zend_ast_destroy(%43* %144) #8
  br label %386

145:                                              ; preds = %3
  %146 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %147 = load %43*, %43** %146, align 8
  tail call void @zend_ast_destroy(%43* %147) #8
  br label %386

148:                                              ; preds = %3
  %149 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %150 = load %43*, %43** %149, align 8
  tail call void @zend_ast_destroy(%43* %150) #8
  br label %386

151:                                              ; preds = %3
  %152 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %153 = load %43*, %43** %152, align 8
  tail call void @zend_ast_destroy(%43* %153) #8
  br label %386

154:                                              ; preds = %3
  %155 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %156 = load %43*, %43** %155, align 8
  tail call void @zend_ast_destroy(%43* %156) #8
  br label %386

157:                                              ; preds = %3
  %158 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %159 = load %43*, %43** %158, align 8
  tail call void @zend_ast_destroy(%43* %159) #8
  br label %386

160:                                              ; preds = %3
  %161 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %162 = load %43*, %43** %161, align 8
  tail call void @zend_ast_destroy(%43* %162) #8
  br label %386

163:                                              ; preds = %3
  %164 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %165 = load %43*, %43** %164, align 8
  tail call void @zend_ast_destroy(%43* %165) #8
  br label %386

166:                                              ; preds = %3
  %167 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %168 = load %43*, %43** %167, align 8
  tail call void @zend_ast_destroy(%43* %168) #8
  br label %386

169:                                              ; preds = %3
  %170 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %171 = load %43*, %43** %170, align 8
  tail call void @zend_ast_destroy(%43* %171) #8
  br label %386

172:                                              ; preds = %3
  %173 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %174 = load %43*, %43** %173, align 8
  tail call void @zend_ast_destroy(%43* %174) #8
  br label %386

175:                                              ; preds = %3
  %176 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %177 = load %43*, %43** %176, align 8
  tail call void @zend_ast_destroy(%43* %177) #8
  br label %386

178:                                              ; preds = %3
  %179 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %180 = load %43*, %43** %179, align 8
  tail call void @zend_ast_destroy(%43* %180) #8
  br label %386

181:                                              ; preds = %3
  %182 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %183 = load %43*, %43** %182, align 8
  tail call void @zend_ast_destroy(%43* %183) #8
  br label %386

184:                                              ; preds = %3
  %185 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %186 = load %43*, %43** %185, align 8
  tail call void @zend_ast_destroy(%43* %186) #8
  br label %386

187:                                              ; preds = %3
  %188 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %189 = load %43*, %43** %188, align 8
  tail call void @zend_ast_destroy(%43* %189) #8
  br label %386

190:                                              ; preds = %3
  %191 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %192 = load %43*, %43** %191, align 8
  tail call void @zend_ast_destroy(%43* %192) #8
  br label %386

193:                                              ; preds = %3
  %194 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %195 = load %43*, %43** %194, align 8
  tail call void @zend_ast_destroy(%43* %195) #8
  br label %386

196:                                              ; preds = %3
  %197 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %198 = load %43*, %43** %197, align 8
  tail call void @zend_ast_destroy(%43* %198) #8
  br label %386

199:                                              ; preds = %3
  %200 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %201 = load %43*, %43** %200, align 8
  tail call void @zend_ast_destroy(%43* %201) #8
  br label %386

202:                                              ; preds = %3
  %203 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %204 = load %43*, %43** %203, align 8
  tail call void @zend_ast_destroy(%43* %204) #8
  br label %386

205:                                              ; preds = %3
  %206 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %207 = load %43*, %43** %206, align 8
  tail call void @zend_ast_destroy(%43* %207) #8
  br label %386

208:                                              ; preds = %3
  %209 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %210 = load %43*, %43** %209, align 8
  tail call void @zend_ast_destroy(%43* %210) #8
  br label %386

211:                                              ; preds = %3
  %212 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %213 = load %43*, %43** %212, align 8
  tail call void @zend_ast_destroy(%43* %213) #8
  br label %386

214:                                              ; preds = %3
  %215 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %216 = load %43*, %43** %215, align 8
  tail call void @zend_ast_destroy(%43* %216) #8
  br label %386

217:                                              ; preds = %3
  %218 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %219 = load %43*, %43** %218, align 8
  tail call void @zend_ast_destroy(%43* %219) #8
  br label %386

220:                                              ; preds = %3
  %221 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %222 = load %43*, %43** %221, align 8
  tail call void @zend_ast_destroy(%43* %222) #8
  br label %386

223:                                              ; preds = %3
  %224 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %225 = load %43*, %43** %224, align 8
  tail call void @zend_ast_destroy(%43* %225) #8
  br label %386

226:                                              ; preds = %3
  %227 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %228 = load %43*, %43** %227, align 8
  tail call void @zend_ast_destroy(%43* %228) #8
  br label %386

229:                                              ; preds = %3
  %230 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %231 = load %43*, %43** %230, align 8
  tail call void @zend_ast_destroy(%43* %231) #8
  br label %386

232:                                              ; preds = %3
  %233 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %234 = load %43*, %43** %233, align 8
  tail call void @zend_ast_destroy(%43* %234) #8
  br label %386

235:                                              ; preds = %3
  %236 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %237 = load %43*, %43** %236, align 8
  tail call void @zend_ast_destroy(%43* %237) #8
  br label %386

238:                                              ; preds = %3
  %239 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %240 = load %43*, %43** %239, align 8
  tail call void @zend_ast_destroy(%43* %240) #8
  br label %386

241:                                              ; preds = %3
  %242 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %243 = load %43*, %43** %242, align 8
  tail call void @zend_ast_destroy(%43* %243) #8
  br label %386

244:                                              ; preds = %3
  %245 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %246 = load %43*, %43** %245, align 8
  tail call void @zend_ast_destroy(%43* %246) #8
  br label %386

247:                                              ; preds = %3
  %248 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %249 = load %43*, %43** %248, align 8
  tail call void @zend_ast_destroy(%43* %249) #8
  br label %386

250:                                              ; preds = %3
  %251 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %252 = load %43*, %43** %251, align 8
  tail call void @zend_ast_destroy(%43* %252) #8
  br label %386

253:                                              ; preds = %3
  %254 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %255 = load %43*, %43** %254, align 8
  tail call void @zend_ast_destroy(%43* %255) #8
  br label %386

256:                                              ; preds = %3
  %257 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %258 = load %43*, %43** %257, align 8
  tail call void @zend_ast_destroy(%43* %258) #8
  br label %386

259:                                              ; preds = %3
  %260 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %261 = load %43*, %43** %260, align 8
  tail call void @zend_ast_destroy(%43* %261) #8
  br label %386

262:                                              ; preds = %3
  %263 = bitcast %52* %2 to %32**
  %264 = load %32*, %32** %263, align 8
  %265 = icmp eq %32* %264, null
  br i1 %265, label %386, label %266

266:                                              ; preds = %262
  %267 = getelementptr inbounds %32, %32* %264, i64 0, i32 0, i32 1
  %268 = bitcast %18* %267 to %54*
  %269 = getelementptr inbounds %54, %54* %268, i64 0, i32 1
  %270 = load i8, i8* %269, align 1
  %271 = and i8 %270, 2
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %273, label %386

273:                                              ; preds = %266
  %274 = getelementptr inbounds %32, %32* %264, i64 0, i32 0, i32 0
  %275 = load i32, i32* %274, align 8
  %276 = add i32 %275, -1
  store i32 %276, i32* %274, align 8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %386

278:                                              ; preds = %273
  %279 = and i8 %270, 1
  %280 = icmp eq i8 %279, 0
  %281 = bitcast %32* %264 to i8*
  br i1 %280, label %283, label %282

282:                                              ; preds = %278
  tail call void @free(i8* %281) #8
  br label %386

283:                                              ; preds = %278
  tail call void @_efree(i8* %281) #8
  br label %386

284:                                              ; preds = %3
  %285 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %286 = load %43*, %43** %285, align 8
  tail call void @zend_ast_destroy(%43* %286) #8
  br label %386

287:                                              ; preds = %3
  %288 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %289 = load %43*, %43** %288, align 8
  tail call void @zend_ast_destroy(%43* %289) #8
  br label %386

290:                                              ; preds = %3
  %291 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %292 = load %43*, %43** %291, align 8
  tail call void @zend_ast_destroy(%43* %292) #8
  br label %386

293:                                              ; preds = %3
  %294 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %295 = load %43*, %43** %294, align 8
  tail call void @zend_ast_destroy(%43* %295) #8
  br label %386

296:                                              ; preds = %3
  %297 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %298 = load %43*, %43** %297, align 8
  tail call void @zend_ast_destroy(%43* %298) #8
  br label %386

299:                                              ; preds = %3
  %300 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %301 = load %43*, %43** %300, align 8
  tail call void @zend_ast_destroy(%43* %301) #8
  br label %386

302:                                              ; preds = %3
  %303 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %304 = load %43*, %43** %303, align 8
  tail call void @zend_ast_destroy(%43* %304) #8
  br label %386

305:                                              ; preds = %3
  %306 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %307 = load %43*, %43** %306, align 8
  tail call void @zend_ast_destroy(%43* %307) #8
  br label %386

308:                                              ; preds = %3
  %309 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %310 = load %43*, %43** %309, align 8
  tail call void @zend_ast_destroy(%43* %310) #8
  br label %386

311:                                              ; preds = %3
  %312 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %313 = load %43*, %43** %312, align 8
  tail call void @zend_ast_destroy(%43* %313) #8
  br label %386

314:                                              ; preds = %3
  %315 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %316 = load %43*, %43** %315, align 8
  tail call void @zend_ast_destroy(%43* %316) #8
  br label %386

317:                                              ; preds = %3
  %318 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %319 = load %43*, %43** %318, align 8
  tail call void @zend_ast_destroy(%43* %319) #8
  br label %386

320:                                              ; preds = %3
  %321 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %322 = load %43*, %43** %321, align 8
  tail call void @zend_ast_destroy(%43* %322) #8
  br label %386

323:                                              ; preds = %3
  %324 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %325 = load %43*, %43** %324, align 8
  tail call void @zend_ast_destroy(%43* %325) #8
  br label %386

326:                                              ; preds = %3
  %327 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %328 = load %43*, %43** %327, align 8
  tail call void @zend_ast_destroy(%43* %328) #8
  br label %386

329:                                              ; preds = %3
  %330 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %331 = load %43*, %43** %330, align 8
  tail call void @zend_ast_destroy(%43* %331) #8
  br label %386

332:                                              ; preds = %3
  %333 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %334 = load %43*, %43** %333, align 8
  tail call void @zend_ast_destroy(%43* %334) #8
  br label %386

335:                                              ; preds = %3
  %336 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %337 = load %43*, %43** %336, align 8
  tail call void @zend_ast_destroy(%43* %337) #8
  br label %386

338:                                              ; preds = %3
  %339 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %340 = load %43*, %43** %339, align 8
  tail call void @zend_ast_destroy(%43* %340) #8
  br label %386

341:                                              ; preds = %3
  %342 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %343 = load %43*, %43** %342, align 8
  tail call void @zend_ast_destroy(%43* %343) #8
  br label %386

344:                                              ; preds = %3
  %345 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %346 = load %43*, %43** %345, align 8
  tail call void @zend_ast_destroy(%43* %346) #8
  br label %386

347:                                              ; preds = %3
  %348 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %349 = load %43*, %43** %348, align 8
  tail call void @zend_ast_destroy(%43* %349) #8
  br label %386

350:                                              ; preds = %3
  %351 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %352 = load %43*, %43** %351, align 8
  tail call void @zend_ast_destroy(%43* %352) #8
  br label %386

353:                                              ; preds = %3
  %354 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %355 = load %43*, %43** %354, align 8
  tail call void @zend_ast_destroy(%43* %355) #8
  br label %386

356:                                              ; preds = %3
  %357 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %358 = load %43*, %43** %357, align 8
  tail call void @zend_ast_destroy(%43* %358) #8
  br label %386

359:                                              ; preds = %3
  %360 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %361 = load %43*, %43** %360, align 8
  tail call void @zend_ast_destroy(%43* %361) #8
  br label %386

362:                                              ; preds = %3
  %363 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %364 = load %43*, %43** %363, align 8
  tail call void @zend_ast_destroy(%43* %364) #8
  br label %386

365:                                              ; preds = %3
  %366 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %367 = load %43*, %43** %366, align 8
  tail call void @zend_ast_destroy(%43* %367) #8
  br label %386

368:                                              ; preds = %3
  %369 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %370 = load %43*, %43** %369, align 8
  tail call void @zend_ast_destroy(%43* %370) #8
  br label %386

371:                                              ; preds = %3
  %372 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %373 = load %43*, %43** %372, align 8
  tail call void @zend_ast_destroy(%43* %373) #8
  br label %386

374:                                              ; preds = %3
  %375 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %376 = load %43*, %43** %375, align 8
  tail call void @zend_ast_destroy(%43* %376) #8
  br label %386

377:                                              ; preds = %3
  %378 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %379 = load %43*, %43** %378, align 8
  tail call void @zend_ast_destroy(%43* %379) #8
  br label %386

380:                                              ; preds = %3
  %381 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %382 = load %43*, %43** %381, align 8
  tail call void @zend_ast_destroy(%43* %382) #8
  br label %386

383:                                              ; preds = %3
  %384 = getelementptr inbounds %52, %52* %2, i64 0, i32 0
  %385 = load %43*, %43** %384, align 8
  tail call void @zend_ast_destroy(%43* %385) #8
  br label %386

386:                                              ; preds = %283, %282, %273, %266, %262, %3, %383, %380, %377, %374, %371, %368, %365, %362, %359, %356, %353, %350, %347, %344, %341, %338, %335, %332, %329, %326, %323, %320, %317, %314, %311, %308, %305, %302, %299, %296, %293, %290, %287, %284, %259, %256, %253, %250, %247, %244, %241, %238, %235, %232, %229, %226, %223, %220, %217, %214, %211, %208, %205, %202, %199, %196, %193, %190, %187, %184, %181, %178, %175, %172, %169, %166, %163, %160, %157, %154, %151, %148, %145, %142, %139, %136, %133, %130, %127, %124, %121, %118, %115, %112, %109, %106, %103, %100, %97, %94, %91, %88, %85, %82, %79, %76, %73, %70, %67, %64, %61, %58, %55, %52, %49, %46, %43, %40, %37, %34, %31, %28, %25, %22, %19, %16, %13, %10, %7, %4
  ret void
}

declare dso_local void @_efree(i8*) local_unnamed_addr #3

; Function Attrs: allocsize(0)
declare dso_local noalias i8* @_emalloc(i64) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define internal fastcc i64 @333(i8* %0, i8* %1) unnamed_addr #0 {
  %3 = alloca [120 x i8], align 16
  %4 = icmp ne i8* %0, null
  %5 = load i8, i8* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 9), align 8
  %6 = icmp ult i8 %5, 2
  %7 = and i1 %4, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i8 2, i8* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 9), align 8
  br label %12

9:                                                ; preds = %2
  %10 = and i8 %5, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %83

12:                                               ; preds = %8, %9
  %13 = phi i8 [ 2, %8 ], [ %5, %9 ]
  %14 = getelementptr inbounds [120 x i8], [120 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %14) #8
  %15 = add i8 %13, 1
  store i8 %15, i8* getelementptr inbounds (%0, %0* @compiler_globals, i64 0, i32 9), align 8
  %16 = load i8*, i8** getelementptr inbounds (%46, %46* @language_scanner_globals, i64 0, i32 4), align 8
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  %19 = load i32, i32* getelementptr inbounds (%46, %46* @language_scanner_globals, i64 0, i32 2), align 8
  %20 = icmp eq i32 %19, 1
  %21 = and i1 %18, %20
  br i1 %21, label %22, label %27

22:                                               ; preds = %12
  %23 = tail call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @24, i64 0, i64 0)) #11
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %22
  br i1 %4, label %26, label %81

26:                                               ; preds = %25
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %0, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @25, i64 0, i64 0), i64 12, i1 false)
  br label %81

27:                                               ; preds = %22, %12
  %28 = zext i32 %19 to i64
  %29 = tail call i8* @memchr(i8* %16, i32 10, i64 %28) #11
  %30 = tail call i64 @strlen(i8* %1) #11
  %31 = and i64 %30, 4294967295
  %32 = tail call i8* @memchr(i8* %1, i32 40, i64 %31) #11
  %33 = icmp eq i8* %32, null
  %34 = icmp eq i64 %31, 0
  %35 = or i1 %33, %34
  br i1 %35, label %51, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds i8, i8* %1, i64 %31
  br label %38

38:                                               ; preds = %42, %36
  %39 = phi i8* [ %37, %36 ], [ %40, %42 ]
  %40 = getelementptr inbounds i8, i8* %39, i64 -1
  %41 = icmp ult i8* %40, %1
  br i1 %41, label %51, label %42

42:                                               ; preds = %38
  %43 = load i8, i8* %40, align 1
  %44 = icmp eq i8 %43, 41
  br i1 %44, label %45, label %38

45:                                               ; preds = %42
  %46 = ptrtoint i8* %40 to i64
  %47 = ptrtoint i8* %32 to i64
  %48 = sub i64 %46, %47
  %49 = trunc i64 %48 to i32
  %50 = add i32 %49, 1
  br label %51

51:                                               ; preds = %38, %27, %45
  %52 = phi i8* [ %32, %45 ], [ null, %27 ], [ null, %38 ]
  %53 = phi i32 [ %50, %45 ], [ 0, %27 ], [ 0, %38 ]
  %54 = icmp eq i8* %29, null
  br i1 %54, label %55, label %58

55:                                               ; preds = %51
  %56 = icmp ult i32 %19, 30
  %57 = select i1 %56, i32 %19, i32 30
  br label %65

58:                                               ; preds = %51
  %59 = ptrtoint i8* %29 to i64
  %60 = ptrtoint i8* %16 to i64
  %61 = sub i64 %59, %60
  %62 = icmp slt i64 %61, 30
  %63 = select i1 %62, i64 %61, i64 30
  %64 = trunc i64 %63 to i32
  br label %65

65:                                               ; preds = %58, %55
  %66 = phi i32 [ %57, %55 ], [ %64, %58 ]
  br i1 %4, label %67, label %75

67:                                               ; preds = %65
  %68 = icmp eq i32 %53, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %67
  %70 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %14, i64 120, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @26, i64 0, i64 0), i32 %66, i8* %16, i32 %53, i8* %52) #8
  br label %73

71:                                               ; preds = %67
  %72 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %14, i64 120, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @27, i64 0, i64 0), i32 %66, i8* %16) #8
  br label %73

73:                                               ; preds = %71, %69
  %74 = call i8* @stpcpy(i8* nonnull %0, i8* nonnull %14) #8
  br label %75

75:                                               ; preds = %73, %65
  %76 = icmp eq i32 %53, 0
  %77 = add i32 %53, 3
  %78 = select i1 %76, i32 2, i32 %77
  %79 = add i32 %78, %66
  %80 = zext i32 %79 to i64
  br label %81

81:                                               ; preds = %25, %26, %75
  %82 = phi i64 [ %80, %75 ], [ 11, %26 ], [ 11, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %14) #8
  br label %113

83:                                               ; preds = %9
  br i1 %4, label %90, label %84

84:                                               ; preds = %83
  %85 = tail call i64 @strlen(i8* %1) #11
  %86 = load i8, i8* %1, align 1
  %87 = icmp eq i8 %86, 34
  %88 = select i1 %87, i64 2, i64 0
  %89 = sub i64 %85, %88
  br label %113

90:                                               ; preds = %83
  %91 = load i8, i8* %1, align 1
  %92 = icmp eq i8 %91, 34
  br i1 %92, label %93, label %110

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %1, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, 34
  br i1 %96, label %107, label %97

97:                                               ; preds = %93, %97
  %98 = phi i8* [ %106, %97 ], [ %0, %93 ]
  %99 = phi i8 [ %104, %97 ], [ %95, %93 ]
  %100 = phi i8* [ %103, %97 ], [ %94, %93 ]
  %101 = phi i64 [ %102, %97 ], [ 0, %93 ]
  store i8 %99, i8* %98, align 1
  %102 = add i64 %101, 1
  %103 = getelementptr inbounds i8, i8* %100, i64 1
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, 34
  %106 = getelementptr inbounds i8, i8* %0, i64 %102
  br i1 %105, label %107, label %97

107:                                              ; preds = %97, %93
  %108 = phi i64 [ 0, %93 ], [ %102, %97 ]
  %109 = phi i8* [ %0, %93 ], [ %106, %97 ]
  store i8 0, i8* %109, align 1
  br label %113

110:                                              ; preds = %90
  %111 = tail call i8* @stpcpy(i8* nonnull %0, i8* nonnull %1) #8
  %112 = tail call i64 @strlen(i8* nonnull %1) #11
  br label %113

113:                                              ; preds = %110, %107, %84, %81
  %114 = phi i64 [ %82, %81 ], [ %108, %107 ], [ %112, %110 ], [ %89, %84 ]
  ret i64 %114
}

; Function Attrs: argmemonly nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare dso_local i8* @memchr(i8*, i32, i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #2

declare dso_local void @zend_ast_destroy(%43*) local_unnamed_addr #3

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind allocsize(0) }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
