; ModuleID = 'unit_test-strip-renamed.bc'
source_filename = "daemon/unit_test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %1*, %0*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%1 = type { %1*, %0*, i32 }
%2 = type { i64, i64 }
%3 = type { [100 x i8], [1024 x i8], i32, i64, i64, i32, i64, i64, %2*, x86_fp80*, i64*, x86_fp80* }
%4 = type { %5, i8*, i32, i8*, [37 x i8], i32, i8*, i8*, i8*, i32, i32*, i32, i64, i32, i8*, i8*, i8*, i8*, %6*, i8, i8*, i8*, i8, i64, i8, i32, i8, i8*, %7, [2 x i32], %10*, i32, i64, i64, i8, i64, i8*, i8*, i8*, i64, %0*, i32, i32, %11*, %11*, %34, %34, %14, i32, i32, i32, %16*, %16*, %17*, %32, %31*, %32, i32, %34, %34, %34, %34, %36, %36, %4* }
%5 = type { [2 x %5*], i8 }
%6 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%7 = type { %8 }
%8 = type { i32, i32, i32, i32, i32, i16, i16, %9 }
%9 = type { %9*, %9* }
%10 = type { i64, i64, i8*, i8, i8, i64, i64 }
%11 = type { %5, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i8*, i8*, i8*, i32, x86_fp80, x86_fp80, i8*, i8*, i8*, i32, i32, i32, i32, i32, %12*, %12*, %12*, i32, i32, i32, float, i32, i32, i8*, i8*, i32, i32, x86_fp80, x86_fp80, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, %13*, %13*, %13*, %13*, %17*, %11*, %11*, %11* }
%12 = type { i8*, i8*, i32*, x86_fp80*, i64*, i64*, x86_fp80, i32, %10*, i8*, %11* }
%13 = type { %5, i8*, i32, i32, i32, i8*, i64 }
%14 = type { i32, i32, i32, i32, %15*, %32 }
%15 = type { i32, i32, i32, i64, i64, i64, i8*, i32, i8*, i32, i8*, i8*, i8*, i64, i32, i64, i8*, i8*, i8*, x86_fp80, x86_fp80, i8*, i8*, i32, i32, i32, i32, i64, i32, i32, i64, %15*, %15*, %15* }
%16 = type { i8*, i32, i8*, i8*, i8*, i32, i8*, i8*, i8*, i8*, i8*, i32, x86_fp80, x86_fp80, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i8*, i8*, %12*, %12*, %12*, %16*, [8 x i8] }
%17 = type { %5, %5, [201 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i64, i64, i32, i32*, i32, i64, i32, i8*, [4097 x i8], %32, i64, i64, i64, i64, i8*, i8*, [5 x i64], i64, i32, i32, i64, %18, %18, i64, i64, %19*, %4*, %17*, x86_fp80, x86_fp80, %34, %20*, %11*, i64, [27 x i8], %34, %21* }
%18 = type { i64, i64 }
%19 = type { %5, i8*, i32, i64, %34 }
%20 = type { i8*, i32, i8*, i8*, i32, i8*, i32, %13*, %13*, %13*, %13*, %13*, %17*, %20* }
%21 = type { %5, i8*, i8*, i32, i32, i64, i64, i32, i32, i32, i8*, i64, %22*, [8 x i64], i64, i8, %18, x86_fp80, x86_fp80, x86_fp80, i64, i64, x86_fp80, x86_fp80, %21*, %17*, i64, i32, i64, [33 x i8], %30*, [0 x i32], [8 x i8] }
%22 = type { %23, %25, %26 }
%23 = type { %24 }
%24 = type { i64, i64 }
%25 = type { void (%21*)*, void (%21*, i64, i32)*, void (%21*)* }
%26 = type { void (%21*, %27*, i64, i64)*, i32 (%27*, i64*)*, i32 (%27*)*, void (%27*)*, i64 (%21*)*, i64 (%21*)* }
%27 = type { %21*, i64, i64, %28 }
%28 = type { %29 }
%29 = type { i64, i64, i8 }
%30 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i8*, i32, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %21*, %30* }
%31 = type { i8*, i8*, i32, i32, %31* }
%32 = type { %33 }
%33 = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%34 = type { %35, %32 }
%35 = type { %5*, i32 (i8*, i8*)* }
%36 = type { %37*, i32 }
%37 = type opaque
%38 = type { i8*, i8*, i8* }
%39 = type { %18, %18, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53 }
%40 = type { i64 }
%41 = type { i64 }
%42 = type { i64 }
%43 = type { i64 }
%44 = type { i64 }
%45 = type { i64 }
%46 = type { i64 }
%47 = type { i64 }
%48 = type { i64 }
%49 = type { i64 }
%50 = type { i64 }
%51 = type { i64 }
%52 = type { i64 }
%53 = type { i64 }
%54 = type { x86_fp80, i8*, [8 x i8] }

@stderr = external dso_local global %0*, align 8
@0 = private unnamed_addr constant [41 x i8] c"Exists flags missing for number %0.7Lf!\0A\00", align 1
@1 = private unnamed_addr constant [180 x i8] c"%0.7Lf original\0A%0.7Lf packed and unpacked, (stored as 0x%08X, diff %0.7Lf, %0.7Lf%%)\0A%s printed after unpacked (%zu bytes)\0A%0.7Lf re-parsed from printed (diff %0.7Lf, %0.7Lf%%)\0A\0A\00", align 1
@2 = private unnamed_addr constant [72 x i8] c"ERROR: printed number %s is reported to have length %zu but it has %zu\0A\00", align 1
@3 = private unnamed_addr constant [60 x i8] c"WARNING: packing number %0.7Lf has accuracy loss %0.7Lf %%\0A\00", align 1
@4 = private unnamed_addr constant [96 x i8] c"WARNING: re-parsing the packed, unpacked and printed number %0.7Lf has accuracy loss %0.7Lf %%\0A\00", align 1
@5 = private unnamed_addr constant [44 x i8] c"\0A\0ABenchmarking %d numbers, please wait...\0A\0A\00", align 1
@6 = private unnamed_addr constant [40 x i8] c"SYSTEM  LONG DOUBLE    SIZE: %zu bytes\0A\00", align 1
@7 = private unnamed_addr constant [40 x i8] c"NETDATA FLOATING POINT SIZE: %zu bytes\0A\00", align 1
@8 = private unnamed_addr constant [49 x i8] c"\0ANETDATA NEEDS %0.2Lf TIMES MORE MEMORY. Sorry!\0A\00", align 1
@9 = private unnamed_addr constant [78 x i8] c"\0ANETDATA INTERNAL FLOATING POINT ARITHMETICS NEEDS %0.2Lf TIMES LESS MEMORY.\0A\00", align 1
@10 = private unnamed_addr constant [25 x i8] c"\0ANETDATA FLOATING POINT\0A\00", align 1
@11 = private unnamed_addr constant [27 x i8] c"MIN POSITIVE VALUE %0.7Lf\0A\00", align 1
@12 = private unnamed_addr constant [27 x i8] c"MAX POSITIVE VALUE %0.7Lf\0A\00", align 1
@13 = private unnamed_addr constant [27 x i8] c"MIN NEGATIVE VALUE %0.7Lf\0A\00", align 1
@14 = private unnamed_addr constant [27 x i8] c"MAX NEGATIVE VALUE %0.7Lf\0A\00", align 1
@15 = private unnamed_addr constant [44 x i8] c"Maximum accuracy loss accepted: %0.7Lf%%\0A\0A\0A\00", align 1
@16 = private unnamed_addr constant [32 x i8] c"INTERNAL LONG DOUBLE PRINTING: \00", align 1
@17 = private unnamed_addr constant [42 x i8] c"user %0.5Lf, system %0.5Lf, total %0.5Lf\0A\00", align 1
@18 = private unnamed_addr constant [32 x i8] c"SYSTEM   LONG DOUBLE PRINTING: \00", align 1
@19 = private unnamed_addr constant [7 x i8] c"%0.7Lf\00", align 1
@20 = private unnamed_addr constant [34 x i8] c"NETDATA CODE IS SLOWER %0.2Lf %%\0A\00", align 1
@21 = private unnamed_addr constant [41 x i8] c"NETDATA CODE IS  F A S T E R  %0.2Lf %%\0A\00", align 1
@22 = private unnamed_addr constant [52 x i8] c"\0AINTERNAL LONG DOUBLE PRINTING WITH PACK / UNPACK: \00", align 1
@23 = private unnamed_addr constant [57 x i8] c"WITH PACKING UNPACKING NETDATA CODE IS SLOWER %0.2Lf %%\0A\00", align 1
@24 = private unnamed_addr constant [74 x i8] c"EVEN WITH PACKING AND UNPACKING, NETDATA CODE IS  F A S T E R  %0.2Lf %%\0A\00", align 1
@25 = private unnamed_addr constant [10 x i8] c"1.2345678\00", align 1
@26 = private unnamed_addr constant [6 x i8] c"-35.6\00", align 1
@27 = private unnamed_addr constant [8 x i8] c"0.00123\00", align 1
@28 = private unnamed_addr constant [17 x i8] c"23842384234234.2\00", align 1
@29 = private unnamed_addr constant [3 x i8] c".1\00", align 1
@30 = private unnamed_addr constant [8 x i8] c"1.2e-10\00", align 1
@31 = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@32 = private unnamed_addr constant [7 x i8] c"1wrong\00", align 1
@33 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@35 = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i32 0, i32 0), i8* null], align 16
@36 = private unnamed_addr constant [6 x i8] c"world\00", align 1
@37 = private unnamed_addr constant [61 x i8] c"Value '%s' is parsed as %Lf, but system believes it is %Lf.\0A\00", align 1
@38 = private unnamed_addr constant [72 x i8] c"Value '%s' is parsed as %Lf, but system believes it is %Lf, delta %Lf.\0A\00", align 1
@39 = private unnamed_addr constant [57 x i8] c"Value '%s' is parsed correctly, but endptr is not right\0A\00", align 1
@40 = private unnamed_addr constant [85 x i8] c"str2ld() parsed value '%s' exactly the same way with strtold(), returned %Lf vs %Lf\0A\00", align 1
@41 = private unnamed_addr constant [48 x i8] c"string1: %s\0Astring2: %s\0Astring3: %s\0Astring4: %s\00", align 1
@42 = private unnamed_addr constant [30 x i8] c"\0Abuffer_sprintf() is faulty.\0A\00", align 1
@43 = private unnamed_addr constant [28 x i8] c"\0Astring  : %s (length %zu)\0A\00", align 1
@44 = private unnamed_addr constant [28 x i8] c"\0Abuffer  : %s (length %zu)\0A\00", align 1
@45 = private unnamed_addr constant [28 x i8] c"\0Aexpected: %s (length %zu)\0A\00", align 1
@46 = private unnamed_addr constant [37 x i8] c"buffer_sprintf() works as expected.\0A\00", align 1
@test1_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test1_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003A000000000000000, x86_fp80 0xK4003F000000000000000, x86_fp80 0xK4004A000000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004F000000000000000, x86_fp80 0xK40058C00000000000000, x86_fp80 0xK4005A000000000000000, x86_fp80 0xK4005B400000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test1 = dso_local global %3 { [100 x i8] c"test1\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values stored at exactly second boundariesi32 1, i64 1, i64 1, i32 0, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test1_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test1_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test2_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test2_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003A000000000000000, x86_fp80 0xK4003F000000000000000, x86_fp80 0xK4004A000000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004F000000000000000, x86_fp80 0xK40058C00000000000000, x86_fp80 0xK4005A000000000000000, x86_fp80 0xK4005B400000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test2 = dso_local global %3 { [100 x i8] c"test2\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values stored in the middle of second boundaries\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 0, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test2_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test2_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test3_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test3_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000], align 16
@test3 = dso_local global %3 { [100 x i8] c"test3\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values stored at exactly second boundariesi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test3_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test3_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test4_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test4_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000], align 16
@test4 = dso_local global %3 { [100 x i8] c"test4\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values stored in the middle of second boundariesi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test4_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test4_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test5_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }], align 16
@test5_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000], align 16
@test5 = dso_local global %3 { [100 x i8] c"test5\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test 32-bit incremental values overflowi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test5_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test5_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test5b_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }], align 16
@test5b_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888], align 16
@test5b = dso_local global %3 { [100 x i8] c"test5b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test 64-bit incremental values overflowi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test5b_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test5b_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test6_feed = dso_local global [16 x %2] [%2 { i64 250000, i64 1000 }, %2 { i64 250000, i64 2000 }, %2 { i64 250000, i64 3000 }, %2 { i64 250000, i64 4000 }, %2 { i64 250000, i64 5000 }, %2 { i64 250000, i64 6000 }, %2 { i64 250000, i64 7000 }, %2 { i64 250000, i64 8000 }, %2 { i64 250000, i64 9000 }, %2 { i64 250000, i64 10000 }, %2 { i64 250000, i64 11000 }, %2 { i64 250000, i64 12000 }, %2 { i64 250000, i64 13000 }, %2 { i64 250000, i64 14000 }, %2 { i64 250000, i64 15000 }, %2 { i64 250000, i64 16000 }], align 16
@test6_results = dso_local global [4 x x86_fp80] [x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000], align 16
@test6 = dso_local global %3 { [100 x i8] c"test6\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated within the same secondi32 1, i64 1, i64 1, i32 1, i64 16, i64 4, %2* getelementptr inbounds ([16 x %2], [16 x %2]* @test6_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([4 x x86_fp80], [4 x x86_fp80]* @test6_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test7_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 2000000, i64 2000 }, %2 { i64 2000000, i64 3000 }, %2 { i64 2000000, i64 4000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 2000000, i64 6000 }, %2 { i64 2000000, i64 7000 }, %2 { i64 2000000, i64 8000 }, %2 { i64 2000000, i64 9000 }, %2 { i64 2000000, i64 10000 }], align 16
@test7_results = dso_local global [19 x x86_fp80] [x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000], align 16
@test7 = dso_local global %3 { [100 x i8] c"test7\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in long durationsi32 1, i64 1, i64 1, i32 1, i64 10, i64 18, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test7_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([19 x x86_fp80], [19 x x86_fp80]* @test7_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test8_feed = dso_local global [6 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 2000000, i64 2000 }, %2 { i64 2000000, i64 3000 }, %2 { i64 2000000, i64 4000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 2000000, i64 6000 }], align 16
@test8_results = dso_local global [10 x x86_fp80] [x86_fp80 0xK40099C40000000000000, x86_fp80 0xK4009FA00000000000000, x86_fp80 0xK400A8CA0000000000000, x86_fp80 0xK400ABB80000000000000, x86_fp80 0xK400ACB20000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400B84D0000000000000, x86_fp80 0xK400B9C40000000000000, x86_fp80 0xK400BA410000000000000, x86_fp80 0xK400BBB80000000000000], align 16
@test8 = dso_local global %3 { [100 x i8] c"test8\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values updated in long durations\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 0, i64 6, i64 10, %2* getelementptr inbounds ([6 x %2], [6 x %2]* @test8_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([10 x x86_fp80], [10 x x86_fp80]* @test8_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test9_feed = dso_local global [16 x %2] [%2 { i64 250000, i64 1000 }, %2 { i64 250000, i64 2000 }, %2 { i64 250000, i64 3000 }, %2 { i64 250000, i64 4000 }, %2 { i64 250000, i64 5000 }, %2 { i64 250000, i64 6000 }, %2 { i64 250000, i64 7000 }, %2 { i64 250000, i64 8000 }, %2 { i64 250000, i64 9000 }, %2 { i64 250000, i64 10000 }, %2 { i64 250000, i64 11000 }, %2 { i64 250000, i64 12000 }, %2 { i64 250000, i64 13000 }, %2 { i64 250000, i64 14000 }, %2 { i64 250000, i64 15000 }, %2 { i64 250000, i64 16000 }], align 16
@test9_results = dso_local global [4 x x86_fp80] [x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400BFA00000000000000, x86_fp80 0xK400CBB80000000000000, x86_fp80 0xK400CFA00000000000000], align 16
@test9 = dso_local global %3 { [100 x i8] c"test9\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values updated within the same secondi32 1, i64 1, i64 1, i32 0, i64 16, i64 4, %2* getelementptr inbounds ([16 x %2], [16 x %2]* @test9_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([4 x x86_fp80], [4 x x86_fp80]* @test9_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test10_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 600000, i64 1600 }, %2 { i64 200000, i64 1800 }, %2 { i64 1000000, i64 2800 }, %2 { i64 200000, i64 3000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 600000, i64 5600 }, %2 { i64 400000, i64 6000 }, %2 { i64 900000, i64 6900 }, %2 { i64 1000000, i64 7900 }], align 16
@test10_results = dso_local global [7 x x86_fp80] [x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000], align 16
@test10 = dso_local global %3 { [100 x i8] c"test10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in short and long durationsi32 1, i64 1, i64 1, i32 1, i64 10, i64 7, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test10_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([7 x x86_fp80], [7 x x86_fp80]* @test10_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test11_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test11_feed2 = dso_local global [10 x i64] [i64 10, i64 20, i64 30, i64 40, i64 50, i64 60, i64 70, i64 80, i64 90, i64 100], align 16
@test11_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000], align 16
@test11_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000], align 16
@test11 = dso_local global %3 { [100 x i8] c"test11\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test percentage-of-incremental-row with equal valuesi32 1, i64 1, i64 1, i32 2, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test11_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test11_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test11_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test11_results2, i32 0, i32 0) }, align 8
@test12_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test12_feed2 = dso_local global [10 x i64] [i64 30, i64 60, i64 90, i64 120, i64 150, i64 180, i64 210, i64 240, i64 270, i64 300], align 16
@test12_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000], align 16
@test12_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000], align 16
@test12 = dso_local global %3 { [100 x i8] c"test12\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test percentage-of-incremental-row with equal valuesi32 1, i64 1, i64 1, i32 2, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test12_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test12_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test12_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test12_results2, i32 0, i32 0) }, align 8
@test13_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 600000, i64 1600 }, %2 { i64 200000, i64 1800 }, %2 { i64 1000000, i64 2800 }, %2 { i64 200000, i64 3000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 600000, i64 5600 }, %2 { i64 400000, i64 6000 }, %2 { i64 900000, i64 6900 }, %2 { i64 1000000, i64 7900 }], align 16
@test13_results = dso_local global [7 x x86_fp80] [x86_fp80 0xK4005A6AAAA3AD18D2800, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test13 = dso_local global %3 { [100 x i8] c"test13\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in short and long durations\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 2, i64 10, i64 7, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test13_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([7 x x86_fp80], [7 x x86_fp80]* @test13_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14_feed = dso_local global [10 x %2] [%2 { i64 0, i64 95586989362191425 }, %2 { i64 13573000, i64 95587031520116573 }, %2 { i64 29969000, i64 95587112906971816 }, %2 { i64 29958000, i64 95587195123709412 }, %2 { i64 30054000, i64 95587277093403523 }, %2 { i64 34952000, i64 95587372099099340 }, %2 { i64 25046000, i64 95587442350557688 }, %2 { i64 29947000, i64 95587526344914973 }, %2 { i64 30054000, i64 95587608265762786 }, %2 { i64 29942000, i64 95587690623894224 }], align 16
@test14_results = dso_local global [8 x x86_fp80] [x86_fp80 0xK4003B91B4CC250720800, x86_fp80 0xK4003AECFFEB074A77000, x86_fp80 0xK4003AF0B2E9CCB7D4000, x86_fp80 0xK4003AE3AFB7E90FF9800, x86_fp80 0xK4003B016FA82E87D3000, x86_fp80 0xK4003B38245F5AD96A800, x86_fp80 0xK4003B0B991BC55864800, x86_fp80 0xK4003AF52157689CA1800], align 16
@test14 = dso_local global %3 { [100 x i8] c"test14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with real datai32 30, i64 8, i64 1000000000, i32 1, i64 10, i64 8, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([8 x x86_fp80], [8 x x86_fp80]* @test14_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14b_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 13573000, i64 13573000 }, %2 { i64 29969000, i64 43542000 }, %2 { i64 29958000, i64 73500000 }, %2 { i64 30054000, i64 103554000 }, %2 { i64 34952000, i64 138506000 }, %2 { i64 25046000, i64 163552000 }, %2 { i64 29947000, i64 193499000 }, %2 { i64 30054000, i64 223553000 }, %2 { i64 29942000, i64 253495000 }], align 16
@test14b_results = dso_local global [8 x x86_fp80] [x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000], align 16
@test14b = dso_local global %3 { [100 x i8] c"test14b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with dummy datai32 30, i64 1, i64 1, i32 1, i64 10, i64 8, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14b_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([8 x x86_fp80], [8 x x86_fp80]* @test14b_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14c_feed = dso_local global [10 x %2] [%2 { i64 29000000, i64 29000000 }, %2 { i64 1000000, i64 30000000 }, %2 { i64 30000000, i64 60000000 }, %2 { i64 30000000, i64 90000000 }, %2 { i64 30000000, i64 120000000 }, %2 { i64 30000000, i64 150000000 }, %2 { i64 30000000, i64 180000000 }, %2 { i64 30000000, i64 210000000 }, %2 { i64 30000000, i64 240000000 }, %2 { i64 30000000, i64 270000000 }], align 16
@test14c_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000], align 16
@test14c = dso_local global %3 { [100 x i8] c"test14c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with dummy data, checking for late starti32 30, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14c_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test14c_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test15_feed = dso_local global [10 x %2] [%2 { i64 0, i64 1068066388 }, %2 { i64 1008752, i64 1068822698 }, %2 { i64 993809, i64 1069573072 }, %2 { i64 995911, i64 1070324135 }, %2 { i64 1014562, i64 1071078166 }, %2 { i64 994684, i64 1071831349 }, %2 { i64 993128, i64 1072235739 }, %2 { i64 1010332, i64 1072958871 }, %2 { i64 1003394, i64 1073707019 }, %2 { i64 995201, i64 1074460255 }], align 16
@test15_feed2 = dso_local global [10 x i64] [i64 178825286, i64 178825286, i64 178825286, i64 178825286, i64 178825498, i64 178825498, i64 179165652, i64 179202964, i64 179203282, i64 179204130], align 16
@test15_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK400BB70B439581062800, x86_fp80 0xK400BB853A1CAC0831000, x86_fp80 0xK400BB81D45A1CAC08000, x86_fp80 0xK400BB572872B020C4800, x86_fp80 0xK400BB8D21CAC08312800, x86_fp80 0xK400AC824353F7CED9000, x86_fp80 0xK400BAEAD3F7CED916800, x86_fp80 0xK400BB5F4353F7CED9000, x86_fp80 0xK400BB8BE04189374C000], align 16
@test15_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK00000000000000000000, x86_fp80 0xK3FF6A379166C530F7000, x86_fp80 0xK3FFFD0F5092BF8AC5000, x86_fp80 0xK3FF9AE4E92344A8A6800, x86_fp80 0xK400AA5F30624DD2F1800, x86_fp80 0xK40079144F41F212D7800, x86_fp80 0xK4001B58C2C5E2CDC0000, x86_fp80 0xK4001D3129CBAB649D000], align 16
@test15 = dso_local global %3 { [100 x i8] c"test15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental with 2 dimensionsi32 1, i64 8, i64 1024, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test15_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test15_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test15_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test15_results2, i32 0, i32 0) }, align 8
@47 = private unnamed_addr constant [24 x i8] c"\0ARunning test '%s':\0A%s\0A\00", align 1
@default_rrd_memory_mode = external dso_local global i32, align 4
@default_rrd_update_every = external dso_local global i32, align 4
@48 = private unnamed_addr constant [12 x i8] c"unittest-%s\00", align 1
@localhost = external dso_local global %4*, align 8
@49 = private unnamed_addr constant [8 x i8] c"netdata\00", align 1
@50 = private unnamed_addr constant [13 x i8] c"Unit Testing\00", align 1
@51 = private unnamed_addr constant [8 x i8] c"a value\00", align 1
@52 = private unnamed_addr constant [9 x i8] c"unittest\00", align 1
@53 = private unnamed_addr constant [5 x i8] c"dim1\00", align 1
@54 = private unnamed_addr constant [5 x i8] c"dim2\00", align 1
@debug_flags = external dso_local global i64, align 8
@55 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@56 = private unnamed_addr constant [107 x i8] c"    > %s: feeding position %lu, after %0.3f seconds (%0.3f seconds from start), delta %0.7Lf, rate %0.7Lf\0A\00", align 1
@57 = private unnamed_addr constant [32 x i8] c"    > %s: feeding position %lu\0A\00", align 1
@58 = private unnamed_addr constant [30 x i8] c"       >> %s with value %lld\0A\00", align 1
@59 = private unnamed_addr constant [83 x i8] c"    > %s: fixing first collection time to be %llu microseconds to second boundary\0A\00", align 1
@60 = private unnamed_addr constant [73 x i8] c"    %s stored %zu entries, but we were expecting %lu, ### E R R O R ###\0A\00", align 1
@61 = private unnamed_addr constant [90 x i8] c"    %s/%s: checking position %lu (at %lu secs), expecting value %0.7Lf, found %0.7Lf, %s\0A\00", align 1
@62 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@63 = private unnamed_addr constant [18 x i8] c"### E R R O R ###\00", align 1
@64 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@65 = private unnamed_addr constant [2 x i8] c".\00", align 1
@66 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@67 = private unnamed_addr constant [13 x i8] c"/etc/netdata\00", align 1
@68 = private unnamed_addr constant [16 x i8] c"/etc/netdata///\00", align 1
@69 = private unnamed_addr constant [9 x i8] c"health.d\00", align 1
@70 = private unnamed_addr constant [22 x i8] c"/etc/netdata/health.d\00", align 1
@71 = private unnamed_addr constant [12 x i8] c"///health.d\00", align 1
@72 = private unnamed_addr constant [11 x i8] c"./health.d\00", align 1
@73 = private unnamed_addr constant [10 x i8] c"/health.d\00", align 1
@74 = private unnamed_addr constant [10 x %38] [%38 { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @65, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @69, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @72, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @73, i32 0, i32 0) }, %38 zeroinitializer], align 16
@75 = private unnamed_addr constant [42 x i8] c"strdupz_path_subpath(\22%s\22, \22%s\22) = \22%s\22: \00", align 1
@76 = private unnamed_addr constant [8 x i8] c"FAILED\0A\00", align 1
@77 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@78 = internal global i32 0, align 4
@79 = private unnamed_addr constant [20 x i8] c"unittest-%d-%ld-%ld\00", align 1
@80 = private unnamed_addr constant [9 x i8] c"absolute\00", align 1
@81 = private unnamed_addr constant [12 x i8] c"incremental\00", align 1
@82 = private unnamed_addr constant [27 x i8] c"percentage-of-absolute-row\00", align 1
@83 = private unnamed_addr constant [30 x i8] c"percentage-of-incremental-row\00", align 1
@84 = private unnamed_addr constant [41 x i8] c"\0A\0ALOOP = %lu, DELAY = %ld, VALUE = %lld\0A\00", align 1
@85 = private unnamed_addr constant [64 x i8] c"\0A\0AORIGINAL INCREMENT: %lu, INCREMENT %ld, DELAY %ld, SHIFT %ld\0A\00", align 1
@86 = private unnamed_addr constant [40 x i8] c"\0APOSITION: c = %lu, EXPECTED VALUE %lu\0A\00", align 1
@87 = private unnamed_addr constant [35 x i8] c"\09 %s %0.7Lf (PACKED AS %u)   ->   \00", align 1
@88 = private unnamed_addr constant [9 x i8] c"passed.\0A\00", align 1
@89 = private unnamed_addr constant [26 x i8] c"ERROR! (expected %0.7Lf)\0A\00", align 1
@90 = private unnamed_addr constant [31 x i8] c"\0A\0AUNIT TEST(%ld, %ld) FAILED\0A\0A\00", align 1
@91 = private unnamed_addr constant [56 x i8] c"Flag 0x%08x is not checked correctly. It became 0x%08x\0A\00", align 1
@92 = private unnamed_addr constant [36 x i8] c"Wrong flags. Given %08x, Got %08x!\0A\00", align 1
@93 = private unnamed_addr constant [58 x i8] c"Wrong number returned. Expected %0.7Lf, returned %0.7Lf!\0A\00", align 1
@94 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@95 = private unnamed_addr constant [10 x i8] c"0.0000001\00", align 1
@96 = private unnamed_addr constant [4 x i8] c"100\00", align 1
@97 = private unnamed_addr constant [5 x i8] c"-100\00", align 1
@98 = private unnamed_addr constant [11 x i8] c"123.456789\00", align 1
@99 = private unnamed_addr constant [13 x i8] c"9999.9999999\00", align 1
@100 = private unnamed_addr constant [14 x i8] c"-9999.9999999\00", align 1
@101 = private unnamed_addr constant [10 x { x86_fp80, i8* }] [{ x86_fp80, i8* } { x86_fp80 0xK00000000000000000000, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @94, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE7D6BF94D5E57A4000, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @95, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE7C14605F3B4EE0800, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @95, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE189705F4136B4A800, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @94, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK4005C800000000000000, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @96, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xKC005C800000000000000, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @97, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK4005F6E9E03FDA64C800, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @98, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK400C9C3FFFFFF94A0000, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @99, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xKC00C9C3FFFFFF94A0000, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @100, i32 0, i32 0) }, { x86_fp80, i8* } zeroinitializer], align 16
@102 = private unnamed_addr constant [8 x i8] c"%0.12Lf\00", align 1
@103 = private unnamed_addr constant [45 x i8] c"'%s' (system) printed as '%s' (netdata): %s\0A\00", align 1
@104 = private unnamed_addr constant [7 x i8] c"FAILED\00", align 1
@105 = private unnamed_addr constant [17 x i8] c"%s is not zero.\0A\00", align 1
@106 = private unnamed_addr constant [24 x i8] c"%s is not less than %s\0A\00", align 1
@107 = private unnamed_addr constant [32 x i8] c"RRDCALC_STATUSes are sortable.\0A\00", align 1
@108 = private unnamed_addr constant [16 x i8] c"Creating chart\0A\00", align 1
@109 = private unnamed_addr constant [6 x i8] c"chart\00", align 1
@110 = private unnamed_addr constant [3 x i8] c"ID\00", align 1
@111 = private unnamed_addr constant [7 x i8] c"family\00", align 1
@112 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@113 = private unnamed_addr constant [39 x i8] c"Created chart with id '%s', name '%s'\0A\00", align 1
@114 = private unnamed_addr constant [25 x i8] c"Creating dimension DIM1\0A\00", align 1
@115 = private unnamed_addr constant [5 x i8] c"DIM1\00", align 1
@116 = private unnamed_addr constant [43 x i8] c"Created dimension with id '%s', name '%s'\0A\00", align 1
@117 = private unnamed_addr constant [25 x i8] c"Creating dimension DIM2\0A\00", align 1
@118 = private unnamed_addr constant [5 x i8] c"DIM2\00", align 1
@119 = private unnamed_addr constant [30 x i8] c"Renaming chart to CHARTNAME1\0A\00", align 1
@120 = private unnamed_addr constant [11 x i8] c"CHARTNAME1\00", align 1
@121 = private unnamed_addr constant [41 x i8] c"Renamed chart with id '%s' to name '%s'\0A\00", align 1
@122 = private unnamed_addr constant [30 x i8] c"Renaming chart to CHARTNAME2\0A\00", align 1
@123 = private unnamed_addr constant [11 x i8] c"CHARTNAME2\00", align 1
@124 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM1 to DIM1NAME1\0A\00", align 1
@125 = private unnamed_addr constant [10 x i8] c"DIM1NAME1\00", align 1
@126 = private unnamed_addr constant [45 x i8] c"Renamed dimension with id '%s' to name '%s'\0A\00", align 1
@127 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM1 to DIM1NAME2\0A\00", align 1
@128 = private unnamed_addr constant [10 x i8] c"DIM1NAME2\00", align 1
@129 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM2 to DIM2NAME1\0A\00", align 1
@130 = private unnamed_addr constant [10 x i8] c"DIM2NAME1\00", align 1
@131 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM2 to DIM2NAME2\0A\00", align 1
@132 = private unnamed_addr constant [10 x i8] c"DIM2NAME2\00", align 1
@133 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @check_storage_number(x86_fp80 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca x86_fp80, align 16
  %5 = alloca i32, align 4
  %6 = alloca [100 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca x86_fp80, align 16
  %10 = alloca i32, align 4
  %11 = alloca x86_fp80, align 16
  %12 = alloca x86_fp80, align 16
  %13 = alloca i64, align 8
  %14 = alloca x86_fp80, align 16
  %15 = alloca x86_fp80, align 16
  %16 = alloca x86_fp80, align 16
  store x86_fp80 %0, x86_fp80* %4, align 16
  store i32 %1, i32* %5, align 4
  %17 = bitcast [100 x i8]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %17) #10
  %18 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #10
  store i32 16777216, i32* %7, align 4
  %19 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #10
  %20 = load x86_fp80, x86_fp80* %4, align 16
  %21 = load i32, i32* %7, align 4
  %22 = call i32 @pack_storage_number(x86_fp80 %20, i32 %21)
  store i32 %22, i32* %8, align 4
  %23 = bitcast x86_fp80* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %23) #10
  %24 = load i32, i32* %8, align 4
  %25 = call x86_fp80 @unpack_storage_number(i32 %24)
  store x86_fp80 %25, x86_fp80* %9, align 16
  %26 = load i32, i32* %8, align 4
  %27 = and i32 %26, 16777216
  %28 = load i32, i32* %8, align 4
  %29 = and i32 %28, 33554432
  %30 = or i32 %27, %29
  %31 = load i32, i32* %8, align 4
  %32 = and i32 %31, 67108864
  %33 = or i32 %30, %32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %2
  br i1 true, label %41, label %37

36:                                               ; preds = %2
  br i1 false, label %41, label %37

37:                                               ; preds = %36, %35
  %38 = load %0*, %0** @stderr, align 8
  %39 = load x86_fp80, x86_fp80* %4, align 16
  %40 = call i32 (%0*, i8*, ...) @fprintf(%0* %38, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @0, i32 0, i32 0), x86_fp80 %39)
  store i32 5, i32* %3, align 4
  store i32 1, i32* %10, align 4
  br label %145

41:                                               ; preds = %36, %35
  %42 = bitcast x86_fp80* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %42) #10
  %43 = load x86_fp80, x86_fp80* %9, align 16
  %44 = load x86_fp80, x86_fp80* %4, align 16
  %45 = fsub x86_fp80 %43, %44
  store x86_fp80 %45, x86_fp80* %11, align 16
  %46 = bitcast x86_fp80* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %46) #10
  %47 = load x86_fp80, x86_fp80* %11, align 16
  %48 = fmul x86_fp80 %47, 0xK4005C800000000000000
  %49 = load x86_fp80, x86_fp80* %4, align 16
  %50 = fdiv x86_fp80 %48, %49
  store x86_fp80 %50, x86_fp80* %12, align 16
  %51 = load x86_fp80, x86_fp80* %12, align 16
  %52 = fcmp olt x86_fp80 %51, 0xK00000000000000000000
  br i1 %52, label %53, label %56

53:                                               ; preds = %41
  %54 = load x86_fp80, x86_fp80* %12, align 16
  %55 = fsub x86_fp80 0xK80000000000000000000, %54
  store x86_fp80 %55, x86_fp80* %12, align 16
  br label %56

56:                                               ; preds = %53, %41
  %57 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %57) #10
  %58 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %59 = load x86_fp80, x86_fp80* %9, align 16
  %60 = call i32 @print_calculated_number(i8* %58, x86_fp80 %59)
  %61 = sext i32 %60 to i64
  store i64 %61, i64* %13, align 8
  %62 = bitcast x86_fp80* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %62) #10
  %63 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %64 = call x86_fp80 @134(i8* %63, i8** null)
  store x86_fp80 %64, x86_fp80* %14, align 16
  %65 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %65) #10
  %66 = load x86_fp80, x86_fp80* %4, align 16
  %67 = load x86_fp80, x86_fp80* %14, align 16
  %68 = fsub x86_fp80 %66, %67
  store x86_fp80 %68, x86_fp80* %15, align 16
  %69 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %69) #10
  %70 = load x86_fp80, x86_fp80* %15, align 16
  %71 = fmul x86_fp80 %70, 0xK4005C800000000000000
  %72 = load x86_fp80, x86_fp80* %4, align 16
  %73 = fdiv x86_fp80 %71, %72
  store x86_fp80 %73, x86_fp80* %16, align 16
  %74 = load x86_fp80, x86_fp80* %16, align 16
  %75 = fcmp olt x86_fp80 %74, 0xK00000000000000000000
  br i1 %75, label %76, label %79

76:                                               ; preds = %56
  %77 = load x86_fp80, x86_fp80* %16, align 16
  %78 = fsub x86_fp80 0xK80000000000000000000, %77
  store x86_fp80 %78, x86_fp80* %16, align 16
  br label %79

79:                                               ; preds = %76, %56
  %80 = load i32, i32* %5, align 4
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %123

82:                                               ; preds = %79
  %83 = load %0*, %0** @stderr, align 8
  %84 = load x86_fp80, x86_fp80* %4, align 16
  %85 = load x86_fp80, x86_fp80* %9, align 16
  %86 = load i32, i32* %8, align 4
  %87 = load x86_fp80, x86_fp80* %11, align 16
  %88 = load x86_fp80, x86_fp80* %12, align 16
  %89 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %90 = load i64, i64* %13, align 8
  %91 = load x86_fp80, x86_fp80* %14, align 16
  %92 = load x86_fp80, x86_fp80* %15, align 16
  %93 = load x86_fp80, x86_fp80* %16, align 16
  %94 = call i32 (%0*, i8*, ...) @fprintf(%0* %83, i8* getelementptr inbounds ([180 x i8], [180 x i8]* @1, i32 0, i32 0), x86_fp80 %84, x86_fp80 %85, i32 %86, x86_fp80 %87, x86_fp80 %88, i8* %89, i64 %90, x86_fp80 %91, x86_fp80 %92, x86_fp80 %93)
  %95 = load i64, i64* %13, align 8
  %96 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %97 = call i64 @strlen(i8* %96) #11
  %98 = icmp ne i64 %95, %97
  br i1 %98, label %99, label %106

99:                                               ; preds = %82
  %100 = load %0*, %0** @stderr, align 8
  %101 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %102 = load i64, i64* %13, align 8
  %103 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %104 = call i64 @strlen(i8* %103) #11
  %105 = call i32 (%0*, i8*, ...) @fprintf(%0* %100, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @2, i32 0, i32 0), i8* %101, i64 %102, i64 %104)
  br label %106

106:                                              ; preds = %99, %82
  %107 = load x86_fp80, x86_fp80* %12, align 16
  %108 = fcmp ogt x86_fp80 %107, 0xK3FF1D1B71758E2196800
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = load %0*, %0** @stderr, align 8
  %111 = load x86_fp80, x86_fp80* %4, align 16
  %112 = load x86_fp80, x86_fp80* %12, align 16
  %113 = call i32 (%0*, i8*, ...) @fprintf(%0* %110, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @3, i32 0, i32 0), x86_fp80 %111, x86_fp80 %112)
  br label %114

114:                                              ; preds = %109, %106
  %115 = load x86_fp80, x86_fp80* %16, align 16
  %116 = fcmp ogt x86_fp80 %115, 0xK3FF1D1B71758E2196800
  br i1 %116, label %117, label %122

117:                                              ; preds = %114
  %118 = load %0*, %0** @stderr, align 8
  %119 = load x86_fp80, x86_fp80* %4, align 16
  %120 = load x86_fp80, x86_fp80* %16, align 16
  %121 = call i32 (%0*, i8*, ...) @fprintf(%0* %118, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @4, i32 0, i32 0), x86_fp80 %119, x86_fp80 %120)
  br label %122

122:                                              ; preds = %117, %114
  br label %123

123:                                              ; preds = %122, %79
  %124 = load i64, i64* %13, align 8
  %125 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %126 = call i64 @strlen(i8* %125) #11
  %127 = icmp ne i64 %124, %126
  br i1 %127, label %128, label %129

128:                                              ; preds = %123
  store i32 1, i32* %3, align 4
  store i32 1, i32* %10, align 4
  br label %138

129:                                              ; preds = %123
  %130 = load x86_fp80, x86_fp80* %12, align 16
  %131 = fcmp ogt x86_fp80 %130, 0xK3FF1D1B71758E2196800
  br i1 %131, label %132, label %133

132:                                              ; preds = %129
  store i32 3, i32* %3, align 4
  store i32 1, i32* %10, align 4
  br label %138

133:                                              ; preds = %129
  %134 = load x86_fp80, x86_fp80* %16, align 16
  %135 = fcmp ogt x86_fp80 %134, 0xK3FF1D1B71758E2196800
  br i1 %135, label %136, label %137

136:                                              ; preds = %133
  store i32 4, i32* %3, align 4
  store i32 1, i32* %10, align 4
  br label %138

137:                                              ; preds = %133
  store i32 0, i32* %3, align 4
  store i32 1, i32* %10, align 4
  br label %138

138:                                              ; preds = %137, %136, %132, %128
  %139 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %139) #10
  %140 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %140) #10
  %141 = bitcast x86_fp80* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %141) #10
  %142 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %142) #10
  %143 = bitcast x86_fp80* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %143) #10
  %144 = bitcast x86_fp80* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %144) #10
  br label %145

145:                                              ; preds = %138, %37
  %146 = bitcast x86_fp80* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %146) #10
  %147 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %147) #10
  %148 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %148) #10
  %149 = bitcast [100 x i8]* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %149) #10
  %150 = load i32, i32* %3, align 4
  ret i32 %150
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @pack_storage_number(x86_fp80, i32) #2

declare dso_local x86_fp80 @unpack_storage_number(i32) #2

declare dso_local i32 @fprintf(%0*, i8*, ...) #2

declare dso_local i32 @print_calculated_number(i8*, x86_fp80) #2

; Function Attrs: inlinehint nounwind uwtable
define internal x86_fp80 @134(i8* %0, i8** %1) #3 {
  %3 = alloca x86_fp80, align 16
  %4 = alloca i8*, align 8
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8** %1, i8*** %5, align 8
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  store i32 0, i32* %6, align 4
  %13 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = load i8*, i8** %4, align 8
  store i8* %14, i8** %7, align 8
  %15 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  store i64 0, i64* %8, align 8
  %16 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #10
  store i64 0, i64* %9, align 8
  %17 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #10
  store i64 0, i64* %10, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  switch i32 %20, label %69 [
    i32 45, label %21
    i32 43, label %24
    i32 110, label %27
    i32 105, label %48
  ]

21:                                               ; preds = %2
  %22 = load i8*, i8** %4, align 8
  %23 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %23, i8** %4, align 8
  store i32 1, i32* %6, align 4
  br label %70

24:                                               ; preds = %2
  %25 = load i8*, i8** %4, align 8
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %4, align 8
  br label %70

27:                                               ; preds = %2
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp eq i32 %31, 97
  br i1 %32, label %33, label %47

33:                                               ; preds = %27
  %34 = load i8*, i8** %4, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 110
  br i1 %38, label %39, label %47

39:                                               ; preds = %33
  %40 = load i8**, i8*** %5, align 8
  %41 = icmp ne i8** %40, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %39
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  %45 = load i8**, i8*** %5, align 8
  store i8* %44, i8** %45, align 8
  br label %46

46:                                               ; preds = %42, %39
  store x86_fp80 0xK7FFFC000000000000000, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

47:                                               ; preds = %33, %27
  br label %70

48:                                               ; preds = %2
  %49 = load i8*, i8** %4, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 110
  br i1 %53, label %54, label %68

54:                                               ; preds = %48
  %55 = load i8*, i8** %4, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 2
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %58, 102
  br i1 %59, label %60, label %68

60:                                               ; preds = %54
  %61 = load i8**, i8*** %5, align 8
  %62 = icmp ne i8** %61, null
  br i1 %62, label %63, label %67

63:                                               ; preds = %60
  %64 = load i8*, i8** %4, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 3
  %66 = load i8**, i8*** %5, align 8
  store i8* %65, i8** %66, align 8
  br label %67

67:                                               ; preds = %63, %60
  store x86_fp80 0xK7FFF8000000000000000, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

68:                                               ; preds = %54, %48
  br label %70

69:                                               ; preds = %2
  br label %70

70:                                               ; preds = %69, %68, %47, %24, %21
  br label %71

71:                                               ; preds = %83, %70
  %72 = load i8*, i8** %4, align 8
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp sge i32 %74, 48
  br i1 %75, label %76, label %81

76:                                               ; preds = %71
  %77 = load i8*, i8** %4, align 8
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp sle i32 %79, 57
  br label %81

81:                                               ; preds = %76, %71
  %82 = phi i1 [ false, %71 ], [ %80, %76 ]
  br i1 %82, label %83, label %94

83:                                               ; preds = %81
  %84 = load i64, i64* %8, align 8
  %85 = mul i64 %84, 10
  %86 = load i8*, i8** %4, align 8
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = sub nsw i32 %88, 48
  %90 = sext i32 %89 to i64
  %91 = add i64 %85, %90
  store i64 %91, i64* %8, align 8
  %92 = load i8*, i8** %4, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %4, align 8
  br label %71

94:                                               ; preds = %81
  %95 = load i8*, i8** %4, align 8
  %96 = load i8, i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp eq i32 %97, 46
  %99 = xor i1 %98, true
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %134

105:                                              ; preds = %94
  store i64 0, i64* %9, align 8
  %106 = load i8*, i8** %4, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %4, align 8
  br label %108

108:                                              ; preds = %120, %105
  %109 = load i8*, i8** %4, align 8
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp sge i32 %111, 48
  br i1 %112, label %113, label %118

113:                                              ; preds = %108
  %114 = load i8*, i8** %4, align 8
  %115 = load i8, i8* %114, align 1
  %116 = sext i8 %115 to i32
  %117 = icmp sle i32 %116, 57
  br label %118

118:                                              ; preds = %113, %108
  %119 = phi i1 [ false, %108 ], [ %117, %113 ]
  br i1 %119, label %120, label %133

120:                                              ; preds = %118
  %121 = load i64, i64* %9, align 8
  %122 = mul i64 %121, 10
  %123 = load i8*, i8** %4, align 8
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = sub nsw i32 %125, 48
  %127 = sext i32 %126 to i64
  %128 = add i64 %122, %127
  store i64 %128, i64* %9, align 8
  %129 = load i8*, i8** %4, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %4, align 8
  %131 = load i64, i64* %10, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %10, align 8
  br label %108

133:                                              ; preds = %118
  br label %134

134:                                              ; preds = %133, %94
  %135 = load i8*, i8** %4, align 8
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = icmp eq i32 %137, 101
  br i1 %138, label %144, label %139

139:                                              ; preds = %134
  %140 = load i8*, i8** %4, align 8
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = icmp eq i32 %142, 69
  br label %144

144:                                              ; preds = %139, %134
  %145 = phi i1 [ true, %134 ], [ %143, %139 ]
  %146 = xor i1 %145, true
  %147 = xor i1 %146, true
  %148 = zext i1 %147 to i32
  %149 = sext i32 %148 to i64
  %150 = call i64 @llvm.expect.i64(i64 %149, i64 0)
  %151 = icmp ne i64 %150, 0
  br i1 %151, label %152, label %156

152:                                              ; preds = %144
  %153 = load i8*, i8** %7, align 8
  %154 = load i8**, i8*** %5, align 8
  %155 = call x86_fp80 @strtold(i8* %153, i8** %154) #10
  store x86_fp80 %155, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

156:                                              ; preds = %144
  %157 = load i8**, i8*** %5, align 8
  %158 = icmp ne i8** %157, null
  %159 = xor i1 %158, true
  %160 = xor i1 %159, true
  %161 = zext i1 %160 to i32
  %162 = sext i32 %161 to i64
  %163 = call i64 @llvm.expect.i64(i64 %162, i64 0)
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %165, label %168

165:                                              ; preds = %156
  %166 = load i8*, i8** %4, align 8
  %167 = load i8**, i8*** %5, align 8
  store i8* %166, i8** %167, align 8
  br label %168

168:                                              ; preds = %165, %156
  %169 = load i32, i32* %6, align 4
  %170 = icmp ne i32 %169, 0
  %171 = xor i1 %170, true
  %172 = xor i1 %171, true
  %173 = zext i1 %172 to i32
  %174 = sext i32 %173 to i64
  %175 = call i64 @llvm.expect.i64(i64 %174, i64 0)
  %176 = icmp ne i64 %175, 0
  br i1 %176, label %177, label %201

177:                                              ; preds = %168
  %178 = load i64, i64* %10, align 8
  %179 = icmp ne i64 %178, 0
  %180 = xor i1 %179, true
  %181 = xor i1 %180, true
  %182 = zext i1 %181 to i32
  %183 = sext i32 %182 to i64
  %184 = call i64 @llvm.expect.i64(i64 %183, i64 0)
  %185 = icmp ne i64 %184, 0
  br i1 %185, label %186, label %197

186:                                              ; preds = %177
  %187 = load i64, i64* %8, align 8
  %188 = uitofp i64 %187 to x86_fp80
  %189 = load i64, i64* %9, align 8
  %190 = uitofp i64 %189 to x86_fp80
  %191 = load i64, i64* %10, align 8
  %192 = uitofp i64 %191 to x86_fp80
  %193 = call x86_fp80 @powl(x86_fp80 0xK4002A000000000000000, x86_fp80 %192) #10
  %194 = fdiv x86_fp80 %190, %193
  %195 = fadd x86_fp80 %188, %194
  %196 = fsub x86_fp80 0xK80000000000000000000, %195
  store x86_fp80 %196, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

197:                                              ; preds = %177
  %198 = load i64, i64* %8, align 8
  %199 = uitofp i64 %198 to x86_fp80
  %200 = fsub x86_fp80 0xK80000000000000000000, %199
  store x86_fp80 %200, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

201:                                              ; preds = %168
  %202 = load i64, i64* %10, align 8
  %203 = icmp ne i64 %202, 0
  %204 = xor i1 %203, true
  %205 = xor i1 %204, true
  %206 = zext i1 %205 to i32
  %207 = sext i32 %206 to i64
  %208 = call i64 @llvm.expect.i64(i64 %207, i64 0)
  %209 = icmp ne i64 %208, 0
  br i1 %209, label %210, label %220

210:                                              ; preds = %201
  %211 = load i64, i64* %8, align 8
  %212 = uitofp i64 %211 to x86_fp80
  %213 = load i64, i64* %9, align 8
  %214 = uitofp i64 %213 to x86_fp80
  %215 = load i64, i64* %10, align 8
  %216 = uitofp i64 %215 to x86_fp80
  %217 = call x86_fp80 @powl(x86_fp80 0xK4002A000000000000000, x86_fp80 %216) #10
  %218 = fdiv x86_fp80 %214, %217
  %219 = fadd x86_fp80 %212, %218
  store x86_fp80 %219, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

220:                                              ; preds = %201
  %221 = load i64, i64* %8, align 8
  %222 = uitofp i64 %221 to x86_fp80
  store x86_fp80 %222, x86_fp80* %3, align 16
  store i32 1, i32* %11, align 4
  br label %223

223:                                              ; preds = %220, %210, %197, %186, %152, %67, %46
  %224 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %224) #10
  %225 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %225) #10
  %226 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %226) #10
  %227 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %227) #10
  %228 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %228) #10
  %229 = load x86_fp80, x86_fp80* %3, align 16
  ret x86_fp80 %229
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define dso_local x86_fp80 @storage_number_min(x86_fp80 %0) #0 {
  %2 = alloca x86_fp80, align 16
  %3 = alloca x86_fp80, align 16
  %4 = alloca x86_fp80, align 16
  %5 = alloca i32, align 4
  store x86_fp80 %0, x86_fp80* %2, align 16
  %6 = bitcast x86_fp80* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %6) #10
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %3, align 16
  %7 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #10
  br label %8

8:                                                ; preds = %25, %1
  %9 = load x86_fp80, x86_fp80* %2, align 16
  store x86_fp80 %9, x86_fp80* %4, align 16
  %10 = load x86_fp80, x86_fp80* %2, align 16
  %11 = fdiv x86_fp80 %10, 0xK40008000000000000000
  store x86_fp80 %11, x86_fp80* %2, align 16
  %12 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  %13 = load x86_fp80, x86_fp80* %2, align 16
  %14 = call i32 @pack_storage_number(x86_fp80 %13, i32 16777216)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = call x86_fp80 @unpack_storage_number(i32 %15)
  store x86_fp80 %16, x86_fp80* %3, align 16
  %17 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %17) #10
  br label %18

18:                                               ; preds = %8
  %19 = load x86_fp80, x86_fp80* %3, align 16
  %20 = fcmp une x86_fp80 %19, 0xK00000000000000000000
  br i1 %20, label %21, label %25

21:                                               ; preds = %18
  %22 = load x86_fp80, x86_fp80* %3, align 16
  %23 = load x86_fp80, x86_fp80* %4, align 16
  %24 = fcmp une x86_fp80 %22, %23
  br label %25

25:                                               ; preds = %21, %18
  %26 = phi i1 [ false, %18 ], [ %24, %21 ]
  br i1 %26, label %8, label %27

27:                                               ; preds = %25
  %28 = load x86_fp80, x86_fp80* %4, align 16
  %29 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %29) #10
  %30 = bitcast x86_fp80* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %30) #10
  ret x86_fp80 %28
}

; Function Attrs: nounwind uwtable
define dso_local void @benchmark_storage_number(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca x86_fp80, align 16
  %8 = alloca x86_fp80, align 16
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca x86_fp80, align 16
  %16 = alloca x86_fp80, align 16
  %17 = alloca [100 x i8], align 16
  %18 = alloca %39, align 8
  %19 = alloca %39, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %20 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #10
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = bitcast x86_fp80* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %22) #10
  %23 = bitcast x86_fp80* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %23) #10
  %24 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #10
  %25 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #10
  %26 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #10
  %27 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #10
  %28 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #10
  %29 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #10
  %30 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %30) #10
  %31 = call x86_fp80 @unpack_storage_number(i32 956301313)
  store x86_fp80 %31, x86_fp80* %15, align 16
  %32 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %32) #10
  %33 = call x86_fp80 @unpack_storage_number(i32 2113929215)
  store x86_fp80 %33, x86_fp80* %16, align 16
  %34 = bitcast [100 x i8]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* %34) #10
  %35 = bitcast %39* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %35) #10
  %36 = bitcast %39* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %36) #10
  %37 = load %0*, %0** @stderr, align 8
  %38 = load i32, i32* %3, align 4
  %39 = call i32 (%0*, i8*, ...) @fprintf(%0* %37, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @5, i32 0, i32 0), i32 %38)
  %40 = load %0*, %0** @stderr, align 8
  %41 = call i32 (%0*, i8*, ...) @fprintf(%0* %40, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @6, i32 0, i32 0), i64 16)
  %42 = load %0*, %0** @stderr, align 8
  %43 = call i32 (%0*, i8*, ...) @fprintf(%0* %42, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @7, i32 0, i32 0), i64 4)
  %44 = load i32, i32* %3, align 4
  %45 = sitofp i32 %44 to x86_fp80
  %46 = fmul x86_fp80 0xK40018000000000000000, %45
  %47 = fptoui x86_fp80 %46 to i64
  store i64 %47, i64* %13, align 8
  %48 = load i32, i32* %3, align 4
  %49 = sitofp i32 %48 to x86_fp80
  %50 = fmul x86_fp80 0xK40038000000000000000, %49
  %51 = fptoui x86_fp80 %50 to i64
  store i64 %51, i64* %14, align 8
  %52 = load i64, i64* %13, align 8
  %53 = load i64, i64* %14, align 8
  %54 = icmp ugt i64 %52, %53
  br i1 %54, label %55, label %62

55:                                               ; preds = %2
  %56 = load %0*, %0** @stderr, align 8
  %57 = load i64, i64* %13, align 8
  %58 = load i64, i64* %14, align 8
  %59 = udiv i64 %57, %58
  %60 = uitofp i64 %59 to x86_fp80
  %61 = call i32 (%0*, i8*, ...) @fprintf(%0* %56, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @8, i32 0, i32 0), x86_fp80 %60)
  br label %69

62:                                               ; preds = %2
  %63 = load %0*, %0** @stderr, align 8
  %64 = load i64, i64* %14, align 8
  %65 = load i64, i64* %13, align 8
  %66 = udiv i64 %64, %65
  %67 = uitofp i64 %66 to x86_fp80
  %68 = call i32 (%0*, i8*, ...) @fprintf(%0* %63, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @9, i32 0, i32 0), x86_fp80 %67)
  br label %69

69:                                               ; preds = %62, %55
  %70 = load %0*, %0** @stderr, align 8
  %71 = call i32 (%0*, i8*, ...) @fprintf(%0* %70, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i32 0, i32 0))
  %72 = load %0*, %0** @stderr, align 8
  %73 = call x86_fp80 @unpack_storage_number(i32 956301313)
  %74 = call i32 (%0*, i8*, ...) @fprintf(%0* %72, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @11, i32 0, i32 0), x86_fp80 %73)
  %75 = load %0*, %0** @stderr, align 8
  %76 = call x86_fp80 @unpack_storage_number(i32 2113929215)
  %77 = call i32 (%0*, i8*, ...) @fprintf(%0* %75, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @12, i32 0, i32 0), x86_fp80 %76)
  %78 = load %0*, %0** @stderr, align 8
  %79 = call x86_fp80 @unpack_storage_number(i32 -33554433)
  %80 = call i32 (%0*, i8*, ...) @fprintf(%0* %78, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @13, i32 0, i32 0), x86_fp80 %79)
  %81 = load %0*, %0** @stderr, align 8
  %82 = call x86_fp80 @unpack_storage_number(i32 -1191182335)
  %83 = call i32 (%0*, i8*, ...) @fprintf(%0* %81, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @14, i32 0, i32 0), x86_fp80 %82)
  %84 = load %0*, %0** @stderr, align 8
  %85 = call i32 (%0*, i8*, ...) @fprintf(%0* %84, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @15, i32 0, i32 0), x86_fp80 0xK3FF1D1B71758E2196800)
  %86 = load %0*, %0** @stderr, align 8
  %87 = call i32 (%0*, i8*, ...) @fprintf(%0* %86, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @16, i32 0, i32 0))
  %88 = call i32 @getrusage(i32 0, %39* %19) #10
  store i32 1, i32* %6, align 4
  br label %89

89:                                               ; preds = %119, %69
  %90 = load i32, i32* %6, align 4
  %91 = icmp slt i32 %90, 11
  br i1 %91, label %92, label %122

92:                                               ; preds = %89
  %93 = load x86_fp80, x86_fp80* %15, align 16
  %94 = load i32, i32* %6, align 4
  %95 = sitofp i32 %94 to x86_fp80
  %96 = fmul x86_fp80 %93, %95
  store x86_fp80 %96, x86_fp80* %7, align 16
  store i32 0, i32* %5, align 4
  br label %97

97:                                               ; preds = %115, %92
  %98 = load i32, i32* %5, align 4
  %99 = load i32, i32* %3, align 4
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %101, label %118

101:                                              ; preds = %97
  %102 = load i32, i32* %4, align 4
  %103 = sitofp i32 %102 to x86_fp80
  %104 = load x86_fp80, x86_fp80* %7, align 16
  %105 = fmul x86_fp80 %104, %103
  store x86_fp80 %105, x86_fp80* %7, align 16
  %106 = load x86_fp80, x86_fp80* %7, align 16
  %107 = load x86_fp80, x86_fp80* %16, align 16
  %108 = fcmp ogt x86_fp80 %106, %107
  br i1 %108, label %109, label %111

109:                                              ; preds = %101
  %110 = load x86_fp80, x86_fp80* %15, align 16
  store x86_fp80 %110, x86_fp80* %7, align 16
  br label %111

111:                                              ; preds = %109, %101
  %112 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i32 0, i32 0
  %113 = load x86_fp80, x86_fp80* %7, align 16
  %114 = call i32 @print_calculated_number(i8* %112, x86_fp80 %113)
  br label %115

115:                                              ; preds = %111
  %116 = load i32, i32* %5, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %5, align 4
  br label %97

118:                                              ; preds = %97
  br label %119

119:                                              ; preds = %118
  %120 = load i32, i32* %6, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %6, align 4
  br label %89

122:                                              ; preds = %89
  %123 = call i32 @getrusage(i32 0, %39* %18) #10
  %124 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %125 = getelementptr inbounds %18, %18* %124, i32 0, i32 0
  %126 = load i64, i64* %125, align 8
  %127 = mul i64 %126, 1000000
  %128 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %129 = getelementptr inbounds %18, %18* %128, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = add i64 %127, %130
  %132 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %133 = getelementptr inbounds %18, %18* %132, i32 0, i32 0
  %134 = load i64, i64* %133, align 8
  %135 = mul i64 %134, 1000000
  %136 = sub i64 %131, %135
  %137 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %138 = getelementptr inbounds %18, %18* %137, i32 0, i32 1
  %139 = load i64, i64* %138, align 8
  %140 = add i64 %136, %139
  store i64 %140, i64* %10, align 8
  %141 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %142 = getelementptr inbounds %18, %18* %141, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = mul i64 %143, 1000000
  %145 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %146 = getelementptr inbounds %18, %18* %145, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %144, %147
  %149 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %150 = getelementptr inbounds %18, %18* %149, i32 0, i32 0
  %151 = load i64, i64* %150, align 8
  %152 = mul i64 %151, 1000000
  %153 = sub i64 %148, %152
  %154 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %155 = getelementptr inbounds %18, %18* %154, i32 0, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = add i64 %153, %156
  store i64 %157, i64* %11, align 8
  %158 = load i64, i64* %10, align 8
  %159 = load i64, i64* %11, align 8
  %160 = add i64 %158, %159
  store i64 %160, i64* %12, align 8
  %161 = load i64, i64* %12, align 8
  store i64 %161, i64* %13, align 8
  %162 = load %0*, %0** @stderr, align 8
  %163 = load i64, i64* %10, align 8
  %164 = uitofp i64 %163 to double
  %165 = fdiv double %164, 1.000000e+06
  %166 = fpext double %165 to x86_fp80
  %167 = load i64, i64* %11, align 8
  %168 = uitofp i64 %167 to double
  %169 = fdiv double %168, 1.000000e+06
  %170 = fpext double %169 to x86_fp80
  %171 = load i64, i64* %12, align 8
  %172 = uitofp i64 %171 to double
  %173 = fdiv double %172, 1.000000e+06
  %174 = fpext double %173 to x86_fp80
  %175 = call i32 (%0*, i8*, ...) @fprintf(%0* %162, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i32 0, i32 0), x86_fp80 %166, x86_fp80 %170, x86_fp80 %174)
  %176 = load %0*, %0** @stderr, align 8
  %177 = call i32 (%0*, i8*, ...) @fprintf(%0* %176, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @18, i32 0, i32 0))
  %178 = call i32 @getrusage(i32 0, %39* %19) #10
  store i32 1, i32* %6, align 4
  br label %179

179:                                              ; preds = %209, %122
  %180 = load i32, i32* %6, align 4
  %181 = icmp slt i32 %180, 11
  br i1 %181, label %182, label %212

182:                                              ; preds = %179
  %183 = load x86_fp80, x86_fp80* %15, align 16
  %184 = load i32, i32* %6, align 4
  %185 = sitofp i32 %184 to x86_fp80
  %186 = fmul x86_fp80 %183, %185
  store x86_fp80 %186, x86_fp80* %7, align 16
  store i32 0, i32* %5, align 4
  br label %187

187:                                              ; preds = %205, %182
  %188 = load i32, i32* %5, align 4
  %189 = load i32, i32* %3, align 4
  %190 = icmp slt i32 %188, %189
  br i1 %190, label %191, label %208

191:                                              ; preds = %187
  %192 = load i32, i32* %4, align 4
  %193 = sitofp i32 %192 to x86_fp80
  %194 = load x86_fp80, x86_fp80* %7, align 16
  %195 = fmul x86_fp80 %194, %193
  store x86_fp80 %195, x86_fp80* %7, align 16
  %196 = load x86_fp80, x86_fp80* %7, align 16
  %197 = load x86_fp80, x86_fp80* %16, align 16
  %198 = fcmp ogt x86_fp80 %196, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %191
  %200 = load x86_fp80, x86_fp80* %15, align 16
  store x86_fp80 %200, x86_fp80* %7, align 16
  br label %201

201:                                              ; preds = %199, %191
  %202 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i32 0, i32 0
  %203 = load x86_fp80, x86_fp80* %7, align 16
  %204 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* %202, i64 100, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i32 0, i32 0), x86_fp80 %203)
  br label %205

205:                                              ; preds = %201
  %206 = load i32, i32* %5, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %5, align 4
  br label %187

208:                                              ; preds = %187
  br label %209

209:                                              ; preds = %208
  %210 = load i32, i32* %6, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %6, align 4
  br label %179

212:                                              ; preds = %179
  %213 = call i32 @getrusage(i32 0, %39* %18) #10
  %214 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %215 = getelementptr inbounds %18, %18* %214, i32 0, i32 0
  %216 = load i64, i64* %215, align 8
  %217 = mul i64 %216, 1000000
  %218 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %219 = getelementptr inbounds %18, %18* %218, i32 0, i32 1
  %220 = load i64, i64* %219, align 8
  %221 = add i64 %217, %220
  %222 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %223 = getelementptr inbounds %18, %18* %222, i32 0, i32 0
  %224 = load i64, i64* %223, align 8
  %225 = mul i64 %224, 1000000
  %226 = sub i64 %221, %225
  %227 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %228 = getelementptr inbounds %18, %18* %227, i32 0, i32 1
  %229 = load i64, i64* %228, align 8
  %230 = add i64 %226, %229
  store i64 %230, i64* %10, align 8
  %231 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %232 = getelementptr inbounds %18, %18* %231, i32 0, i32 0
  %233 = load i64, i64* %232, align 8
  %234 = mul i64 %233, 1000000
  %235 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %236 = getelementptr inbounds %18, %18* %235, i32 0, i32 1
  %237 = load i64, i64* %236, align 8
  %238 = add i64 %234, %237
  %239 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %240 = getelementptr inbounds %18, %18* %239, i32 0, i32 0
  %241 = load i64, i64* %240, align 8
  %242 = mul i64 %241, 1000000
  %243 = sub i64 %238, %242
  %244 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %245 = getelementptr inbounds %18, %18* %244, i32 0, i32 1
  %246 = load i64, i64* %245, align 8
  %247 = add i64 %243, %246
  store i64 %247, i64* %11, align 8
  %248 = load i64, i64* %10, align 8
  %249 = load i64, i64* %11, align 8
  %250 = add i64 %248, %249
  store i64 %250, i64* %12, align 8
  %251 = load i64, i64* %12, align 8
  store i64 %251, i64* %14, align 8
  %252 = load %0*, %0** @stderr, align 8
  %253 = load i64, i64* %10, align 8
  %254 = uitofp i64 %253 to double
  %255 = fdiv double %254, 1.000000e+06
  %256 = fpext double %255 to x86_fp80
  %257 = load i64, i64* %11, align 8
  %258 = uitofp i64 %257 to double
  %259 = fdiv double %258, 1.000000e+06
  %260 = fpext double %259 to x86_fp80
  %261 = load i64, i64* %12, align 8
  %262 = uitofp i64 %261 to double
  %263 = fdiv double %262, 1.000000e+06
  %264 = fpext double %263 to x86_fp80
  %265 = call i32 (%0*, i8*, ...) @fprintf(%0* %252, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i32 0, i32 0), x86_fp80 %256, x86_fp80 %260, x86_fp80 %264)
  %266 = load i64, i64* %13, align 8
  %267 = load i64, i64* %12, align 8
  %268 = icmp ugt i64 %266, %267
  br i1 %268, label %269, label %280

269:                                              ; preds = %212
  %270 = load %0*, %0** @stderr, align 8
  %271 = load i64, i64* %13, align 8
  %272 = uitofp i64 %271 to double
  %273 = fmul double %272, 1.000000e+02
  %274 = load i64, i64* %14, align 8
  %275 = uitofp i64 %274 to double
  %276 = fdiv double %273, %275
  %277 = fsub double %276, 1.000000e+02
  %278 = fpext double %277 to x86_fp80
  %279 = call i32 (%0*, i8*, ...) @fprintf(%0* %270, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @20, i32 0, i32 0), x86_fp80 %278)
  br label %291

280:                                              ; preds = %212
  %281 = load %0*, %0** @stderr, align 8
  %282 = load i64, i64* %14, align 8
  %283 = uitofp i64 %282 to double
  %284 = fmul double %283, 1.000000e+02
  %285 = load i64, i64* %13, align 8
  %286 = uitofp i64 %285 to double
  %287 = fdiv double %284, %286
  %288 = fsub double %287, 1.000000e+02
  %289 = fpext double %288 to x86_fp80
  %290 = call i32 (%0*, i8*, ...) @fprintf(%0* %281, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @21, i32 0, i32 0), x86_fp80 %289)
  br label %291

291:                                              ; preds = %280, %269
  %292 = load %0*, %0** @stderr, align 8
  %293 = call i32 (%0*, i8*, ...) @fprintf(%0* %292, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @22, i32 0, i32 0))
  %294 = call i32 @getrusage(i32 0, %39* %19) #10
  store i32 1, i32* %6, align 4
  br label %295

295:                                              ; preds = %329, %291
  %296 = load i32, i32* %6, align 4
  %297 = icmp slt i32 %296, 11
  br i1 %297, label %298, label %332

298:                                              ; preds = %295
  %299 = load x86_fp80, x86_fp80* %15, align 16
  %300 = load i32, i32* %6, align 4
  %301 = sitofp i32 %300 to x86_fp80
  %302 = fmul x86_fp80 %299, %301
  store x86_fp80 %302, x86_fp80* %7, align 16
  store i32 0, i32* %5, align 4
  br label %303

303:                                              ; preds = %325, %298
  %304 = load i32, i32* %5, align 4
  %305 = load i32, i32* %3, align 4
  %306 = icmp slt i32 %304, %305
  br i1 %306, label %307, label %328

307:                                              ; preds = %303
  %308 = load i32, i32* %4, align 4
  %309 = sitofp i32 %308 to x86_fp80
  %310 = load x86_fp80, x86_fp80* %7, align 16
  %311 = fmul x86_fp80 %310, %309
  store x86_fp80 %311, x86_fp80* %7, align 16
  %312 = load x86_fp80, x86_fp80* %7, align 16
  %313 = load x86_fp80, x86_fp80* %16, align 16
  %314 = fcmp ogt x86_fp80 %312, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %307
  %316 = load x86_fp80, x86_fp80* %15, align 16
  store x86_fp80 %316, x86_fp80* %7, align 16
  br label %317

317:                                              ; preds = %315, %307
  %318 = load x86_fp80, x86_fp80* %7, align 16
  %319 = call i32 @pack_storage_number(x86_fp80 %318, i32 16777216)
  store i32 %319, i32* %9, align 4
  %320 = load i32, i32* %9, align 4
  %321 = call x86_fp80 @unpack_storage_number(i32 %320)
  store x86_fp80 %321, x86_fp80* %8, align 16
  %322 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i32 0, i32 0
  %323 = load x86_fp80, x86_fp80* %8, align 16
  %324 = call i32 @print_calculated_number(i8* %322, x86_fp80 %323)
  br label %325

325:                                              ; preds = %317
  %326 = load i32, i32* %5, align 4
  %327 = add nsw i32 %326, 1
  store i32 %327, i32* %5, align 4
  br label %303

328:                                              ; preds = %303
  br label %329

329:                                              ; preds = %328
  %330 = load i32, i32* %6, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %6, align 4
  br label %295

332:                                              ; preds = %295
  %333 = call i32 @getrusage(i32 0, %39* %18) #10
  %334 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %335 = getelementptr inbounds %18, %18* %334, i32 0, i32 0
  %336 = load i64, i64* %335, align 8
  %337 = mul i64 %336, 1000000
  %338 = getelementptr inbounds %39, %39* %18, i32 0, i32 0
  %339 = getelementptr inbounds %18, %18* %338, i32 0, i32 1
  %340 = load i64, i64* %339, align 8
  %341 = add i64 %337, %340
  %342 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %343 = getelementptr inbounds %18, %18* %342, i32 0, i32 0
  %344 = load i64, i64* %343, align 8
  %345 = mul i64 %344, 1000000
  %346 = sub i64 %341, %345
  %347 = getelementptr inbounds %39, %39* %19, i32 0, i32 0
  %348 = getelementptr inbounds %18, %18* %347, i32 0, i32 1
  %349 = load i64, i64* %348, align 8
  %350 = add i64 %346, %349
  store i64 %350, i64* %10, align 8
  %351 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %352 = getelementptr inbounds %18, %18* %351, i32 0, i32 0
  %353 = load i64, i64* %352, align 8
  %354 = mul i64 %353, 1000000
  %355 = getelementptr inbounds %39, %39* %18, i32 0, i32 1
  %356 = getelementptr inbounds %18, %18* %355, i32 0, i32 1
  %357 = load i64, i64* %356, align 8
  %358 = add i64 %354, %357
  %359 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %360 = getelementptr inbounds %18, %18* %359, i32 0, i32 0
  %361 = load i64, i64* %360, align 8
  %362 = mul i64 %361, 1000000
  %363 = sub i64 %358, %362
  %364 = getelementptr inbounds %39, %39* %19, i32 0, i32 1
  %365 = getelementptr inbounds %18, %18* %364, i32 0, i32 1
  %366 = load i64, i64* %365, align 8
  %367 = add i64 %363, %366
  store i64 %367, i64* %11, align 8
  %368 = load i64, i64* %10, align 8
  %369 = load i64, i64* %11, align 8
  %370 = add i64 %368, %369
  store i64 %370, i64* %12, align 8
  %371 = load i64, i64* %12, align 8
  store i64 %371, i64* %13, align 8
  %372 = load %0*, %0** @stderr, align 8
  %373 = load i64, i64* %10, align 8
  %374 = uitofp i64 %373 to double
  %375 = fdiv double %374, 1.000000e+06
  %376 = fpext double %375 to x86_fp80
  %377 = load i64, i64* %11, align 8
  %378 = uitofp i64 %377 to double
  %379 = fdiv double %378, 1.000000e+06
  %380 = fpext double %379 to x86_fp80
  %381 = load i64, i64* %12, align 8
  %382 = uitofp i64 %381 to double
  %383 = fdiv double %382, 1.000000e+06
  %384 = fpext double %383 to x86_fp80
  %385 = call i32 (%0*, i8*, ...) @fprintf(%0* %372, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i32 0, i32 0), x86_fp80 %376, x86_fp80 %380, x86_fp80 %384)
  %386 = load i64, i64* %13, align 8
  %387 = load i64, i64* %14, align 8
  %388 = icmp ugt i64 %386, %387
  br i1 %388, label %389, label %400

389:                                              ; preds = %332
  %390 = load %0*, %0** @stderr, align 8
  %391 = load i64, i64* %13, align 8
  %392 = uitofp i64 %391 to double
  %393 = fmul double %392, 1.000000e+02
  %394 = load i64, i64* %14, align 8
  %395 = uitofp i64 %394 to double
  %396 = fdiv double %393, %395
  %397 = fsub double %396, 1.000000e+02
  %398 = fpext double %397 to x86_fp80
  %399 = call i32 (%0*, i8*, ...) @fprintf(%0* %390, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @23, i32 0, i32 0), x86_fp80 %398)
  br label %411

400:                                              ; preds = %332
  %401 = load %0*, %0** @stderr, align 8
  %402 = load i64, i64* %14, align 8
  %403 = uitofp i64 %402 to double
  %404 = fmul double %403, 1.000000e+02
  %405 = load i64, i64* %13, align 8
  %406 = uitofp i64 %405 to double
  %407 = fdiv double %404, %406
  %408 = fsub double %407, 1.000000e+02
  %409 = fpext double %408 to x86_fp80
  %410 = call i32 (%0*, i8*, ...) @fprintf(%0* %401, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @24, i32 0, i32 0), x86_fp80 %409)
  br label %411

411:                                              ; preds = %400, %389
  %412 = bitcast %39* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %412) #10
  %413 = bitcast %39* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %413) #10
  %414 = bitcast [100 x i8]* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 100, i8* %414) #10
  %415 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %415) #10
  %416 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %416) #10
  %417 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %417) #10
  %418 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %418) #10
  %419 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %419) #10
  %420 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %420) #10
  %421 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %421) #10
  %422 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %422) #10
  %423 = bitcast x86_fp80* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %423) #10
  %424 = bitcast x86_fp80* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %424) #10
  %425 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %425) #10
  %426 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %426) #10
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @getrusage(i32, %39*) #5

declare dso_local i32 @snprintfz(i8*, i64, i8*, ...) #2

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_storage() #0 {
  %1 = alloca i32, align 4
  %2 = alloca x86_fp80, align 16
  %3 = alloca x86_fp80, align 16
  %4 = alloca x86_fp80, align 16
  %5 = alloca x86_fp80, align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = call i32 @139()
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %0
  store i32 0, i32* %1, align 4
  br label %92

14:                                               ; preds = %0
  %15 = bitcast x86_fp80* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %15) #10
  %16 = call x86_fp80 @unpack_storage_number(i32 956301313)
  store x86_fp80 %16, x86_fp80* %2, align 16
  %17 = bitcast x86_fp80* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %17) #10
  %18 = call x86_fp80 @unpack_storage_number(i32 -1191182335)
  store x86_fp80 %18, x86_fp80* %3, align 16
  %19 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %19) #10
  %20 = bitcast x86_fp80* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %20) #10
  store x86_fp80 0xK00000000000000000000, x86_fp80* %5, align 16
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #10
  %23 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #10
  %24 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #10
  store i32 0, i32* %9, align 4
  store i32 -1, i32* %8, align 4
  br label %25

25:                                               ; preds = %78, %14
  %26 = load i32, i32* %8, align 4
  %27 = icmp sle i32 %26, 1
  br i1 %27, label %28, label %81

28:                                               ; preds = %25
  store x86_fp80 0xK00000000000000000000, x86_fp80* %5, align 16
  %29 = load i32, i32* %8, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %32, label %31

31:                                               ; preds = %28
  br label %78

32:                                               ; preds = %28
  store i32 0, i32* %7, align 4
  br label %33

33:                                               ; preds = %74, %32
  %34 = load i32, i32* %7, align 4
  %35 = icmp slt i32 %34, 9
  br i1 %35, label %36, label %77

36:                                               ; preds = %33
  %37 = load x86_fp80, x86_fp80* %5, align 16
  %38 = fadd x86_fp80 %37, 0xK3FE7D6BF94D5E57A4000
  store x86_fp80 %38, x86_fp80* %5, align 16
  %39 = load x86_fp80, x86_fp80* %5, align 16
  %40 = load i32, i32* %8, align 4
  %41 = sitofp i32 %40 to x86_fp80
  %42 = fmul x86_fp80 %39, %41
  store x86_fp80 %42, x86_fp80* %4, align 16
  store i32 0, i32* %6, align 4
  br label %43

43:                                               ; preds = %68, %36
  %44 = load i32, i32* %6, align 4
  %45 = icmp slt i32 %44, 21
  br i1 %45, label %46, label %73

46:                                               ; preds = %43
  %47 = load x86_fp80, x86_fp80* %4, align 16
  %48 = fcmp ogt x86_fp80 %47, 0xK00000000000000000000
  br i1 %48, label %49, label %54

49:                                               ; preds = %46
  %50 = load x86_fp80, x86_fp80* %4, align 16
  %51 = load x86_fp80, x86_fp80* %2, align 16
  %52 = fcmp olt x86_fp80 %50, %51
  br i1 %52, label %53, label %54

53:                                               ; preds = %49
  br label %68

54:                                               ; preds = %49, %46
  %55 = load x86_fp80, x86_fp80* %4, align 16
  %56 = fcmp olt x86_fp80 %55, 0xK00000000000000000000
  br i1 %56, label %57, label %62

57:                                               ; preds = %54
  %58 = load x86_fp80, x86_fp80* %4, align 16
  %59 = load x86_fp80, x86_fp80* %3, align 16
  %60 = fcmp ogt x86_fp80 %58, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %57
  br label %68

62:                                               ; preds = %57, %54
  %63 = load x86_fp80, x86_fp80* %4, align 16
  %64 = call i32 @check_storage_number(x86_fp80 %63, i32 1)
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %62
  store i32 1, i32* %1, align 4
  store i32 1, i32* %10, align 4
  br label %83

67:                                               ; preds = %62
  br label %68

68:                                               ; preds = %67, %61, %53
  %69 = load i32, i32* %6, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %6, align 4
  %71 = load x86_fp80, x86_fp80* %4, align 16
  %72 = fmul x86_fp80 %71, 0xK4002A000000000000000
  store x86_fp80 %72, x86_fp80* %4, align 16
  br label %43

73:                                               ; preds = %43
  br label %74

74:                                               ; preds = %73
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %7, align 4
  br label %33

77:                                               ; preds = %33
  br label %78

78:                                               ; preds = %77, %31
  %79 = load i32, i32* %8, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %8, align 4
  br label %25

81:                                               ; preds = %25
  call void @benchmark_storage_number(i32 1000000, i32 2)
  %82 = load i32, i32* %9, align 4
  store i32 %82, i32* %1, align 4
  store i32 1, i32* %10, align 4
  br label %83

83:                                               ; preds = %81, %66
  %84 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #10
  %85 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #10
  %86 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %86) #10
  %87 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %87) #10
  %88 = bitcast x86_fp80* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %88) #10
  %89 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %89) #10
  %90 = bitcast x86_fp80* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %90) #10
  %91 = bitcast x86_fp80* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %91) #10
  br label %92

92:                                               ; preds = %83, %13
  %93 = load i32, i32* %1, align 4
  ret i32 %93
}

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_str2ld() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [11 x i8*], align 16
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca x86_fp80, align 16
  %7 = alloca x86_fp80, align 16
  %8 = alloca i32, align 4
  %9 = bitcast [11 x i8*]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* %9) #10
  %10 = bitcast [11 x i8*]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([11 x i8*]* @35 to i8*), i64 88, i1 false)
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #10
  store i32 0, i32* %3, align 4
  br label %12

12:                                               ; preds = %178, %0
  %13 = load i32, i32* %3, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %181

18:                                               ; preds = %12
  %19 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0), i8** %4, align 8
  %20 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #10
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @36, i32 0, i32 0), i8** %5, align 8
  %21 = bitcast x86_fp80* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %21) #10
  %22 = load i32, i32* %3, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %23
  %25 = load i8*, i8** %24, align 8
  %26 = call x86_fp80 @134(i8* %25, i8** %4)
  store x86_fp80 %26, x86_fp80* %6, align 16
  %27 = bitcast x86_fp80* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %27) #10
  %28 = load i32, i32* %3, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %29
  %31 = load i8*, i8** %30, align 8
  %32 = call x86_fp80 @strtold(i8* %31, i8** %5) #10
  store x86_fp80 %32, x86_fp80* %7, align 16
  br i1 false, label %33, label %38

33:                                               ; preds = %18
  %34 = load x86_fp80, x86_fp80* %6, align 16
  %35 = fptrunc x86_fp80 %34 to float
  %36 = call i32 @__isnanf(float %35) #12
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %48, label %74

38:                                               ; preds = %18
  br i1 false, label %39, label %44

39:                                               ; preds = %38
  %40 = load x86_fp80, x86_fp80* %6, align 16
  %41 = fptrunc x86_fp80 %40 to double
  %42 = call i32 @__isnan(double %41) #12
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %48, label %74

44:                                               ; preds = %38
  %45 = load x86_fp80, x86_fp80* %6, align 16
  %46 = call i32 @__isnanl(x86_fp80 %45) #12
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %74

48:                                               ; preds = %44, %39, %33
  br i1 false, label %49, label %54

49:                                               ; preds = %48
  %50 = load x86_fp80, x86_fp80* %7, align 16
  %51 = fptrunc x86_fp80 %50 to float
  %52 = call i32 @__isnanf(float %51) #12
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %73, label %64

54:                                               ; preds = %48
  br i1 false, label %55, label %60

55:                                               ; preds = %54
  %56 = load x86_fp80, x86_fp80* %7, align 16
  %57 = fptrunc x86_fp80 %56 to double
  %58 = call i32 @__isnan(double %57) #12
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %73, label %64

60:                                               ; preds = %54
  %61 = load x86_fp80, x86_fp80* %7, align 16
  %62 = call i32 @__isnanl(x86_fp80 %61) #12
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %73, label %64

64:                                               ; preds = %60, %55, %49
  %65 = load %0*, %0** @stderr, align 8
  %66 = load i32, i32* %3, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %67
  %69 = load i8*, i8** %68, align 8
  %70 = load x86_fp80, x86_fp80* %6, align 16
  %71 = load x86_fp80, x86_fp80* %7, align 16
  %72 = call i32 (%0*, i8*, ...) @fprintf(%0* %65, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @37, i32 0, i32 0), i8* %69, x86_fp80 %70, x86_fp80 %71)
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %171

73:                                               ; preds = %60, %55, %49
  br label %151

74:                                               ; preds = %44, %39, %33
  br i1 false, label %75, label %80

75:                                               ; preds = %74
  %76 = load x86_fp80, x86_fp80* %6, align 16
  %77 = fptrunc x86_fp80 %76 to float
  %78 = call i32 @__isinff(float %77) #12
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %90, label %116

80:                                               ; preds = %74
  br i1 false, label %81, label %86

81:                                               ; preds = %80
  %82 = load x86_fp80, x86_fp80* %6, align 16
  %83 = fptrunc x86_fp80 %82 to double
  %84 = call i32 @__isinf(double %83) #12
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %90, label %116

86:                                               ; preds = %80
  %87 = load x86_fp80, x86_fp80* %6, align 16
  %88 = call i32 @__isinfl(x86_fp80 %87) #12
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %116

90:                                               ; preds = %86, %81, %75
  br i1 false, label %91, label %96

91:                                               ; preds = %90
  %92 = load x86_fp80, x86_fp80* %7, align 16
  %93 = fptrunc x86_fp80 %92 to float
  %94 = call i32 @__isinff(float %93) #12
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %115, label %106

96:                                               ; preds = %90
  br i1 false, label %97, label %102

97:                                               ; preds = %96
  %98 = load x86_fp80, x86_fp80* %7, align 16
  %99 = fptrunc x86_fp80 %98 to double
  %100 = call i32 @__isinf(double %99) #12
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %115, label %106

102:                                              ; preds = %96
  %103 = load x86_fp80, x86_fp80* %7, align 16
  %104 = call i32 @__isinfl(x86_fp80 %103) #12
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %115, label %106

106:                                              ; preds = %102, %97, %91
  %107 = load %0*, %0** @stderr, align 8
  %108 = load i32, i32* %3, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %109
  %111 = load i8*, i8** %110, align 8
  %112 = load x86_fp80, x86_fp80* %6, align 16
  %113 = load x86_fp80, x86_fp80* %7, align 16
  %114 = call i32 (%0*, i8*, ...) @fprintf(%0* %107, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @37, i32 0, i32 0), i8* %111, x86_fp80 %112, x86_fp80 %113)
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %171

115:                                              ; preds = %102, %97, %91
  br label %150

116:                                              ; preds = %86, %81, %75
  %117 = load x86_fp80, x86_fp80* %6, align 16
  %118 = load x86_fp80, x86_fp80* %7, align 16
  %119 = fcmp une x86_fp80 %117, %118
  br i1 %119, label %120, label %149

120:                                              ; preds = %116
  %121 = load x86_fp80, x86_fp80* %6, align 16
  %122 = load x86_fp80, x86_fp80* %7, align 16
  %123 = fsub x86_fp80 %121, %122
  %124 = fcmp olt x86_fp80 %123, 0xK00000000000000000000
  br i1 %124, label %125, label %130

125:                                              ; preds = %120
  %126 = load x86_fp80, x86_fp80* %6, align 16
  %127 = load x86_fp80, x86_fp80* %7, align 16
  %128 = fsub x86_fp80 %126, %127
  %129 = fsub x86_fp80 0xK80000000000000000000, %128
  br label %134

130:                                              ; preds = %120
  %131 = load x86_fp80, x86_fp80* %6, align 16
  %132 = load x86_fp80, x86_fp80* %7, align 16
  %133 = fsub x86_fp80 %131, %132
  br label %134

134:                                              ; preds = %130, %125
  %135 = phi x86_fp80 [ %129, %125 ], [ %133, %130 ]
  %136 = fcmp ogt x86_fp80 %135, 0xK3FEB8637BD05AF6C6800
  br i1 %136, label %137, label %149

137:                                              ; preds = %134
  %138 = load %0*, %0** @stderr, align 8
  %139 = load i32, i32* %3, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %140
  %142 = load i8*, i8** %141, align 8
  %143 = load x86_fp80, x86_fp80* %6, align 16
  %144 = load x86_fp80, x86_fp80* %7, align 16
  %145 = load x86_fp80, x86_fp80* %7, align 16
  %146 = load x86_fp80, x86_fp80* %6, align 16
  %147 = fsub x86_fp80 %145, %146
  %148 = call i32 (%0*, i8*, ...) @fprintf(%0* %138, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @38, i32 0, i32 0), i8* %142, x86_fp80 %143, x86_fp80 %144, x86_fp80 %147)
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %171

149:                                              ; preds = %134, %116
  br label %150

150:                                              ; preds = %149, %115
  br label %151

151:                                              ; preds = %150, %73
  %152 = load i8*, i8** %4, align 8
  %153 = load i8*, i8** %5, align 8
  %154 = icmp ne i8* %152, %153
  br i1 %154, label %155, label %162

155:                                              ; preds = %151
  %156 = load %0*, %0** @stderr, align 8
  %157 = load i32, i32* %3, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %158
  %160 = load i8*, i8** %159, align 8
  %161 = call i32 (%0*, i8*, ...) @fprintf(%0* %156, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @39, i32 0, i32 0), i8* %160)
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %171

162:                                              ; preds = %151
  %163 = load %0*, %0** @stderr, align 8
  %164 = load i32, i32* %3, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [11 x i8*], [11 x i8*]* %2, i64 0, i64 %165
  %167 = load i8*, i8** %166, align 8
  %168 = load x86_fp80, x86_fp80* %6, align 16
  %169 = load x86_fp80, x86_fp80* %7, align 16
  %170 = call i32 (%0*, i8*, ...) @fprintf(%0* %163, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @40, i32 0, i32 0), i8* %167, x86_fp80 %168, x86_fp80 %169)
  store i32 0, i32* %8, align 4
  br label %171

171:                                              ; preds = %162, %155, %137, %106, %64
  %172 = bitcast x86_fp80* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %172) #10
  %173 = bitcast x86_fp80* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %173) #10
  %174 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %174) #10
  %175 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #10
  %176 = load i32, i32* %8, align 4
  switch i32 %176, label %182 [
    i32 0, label %177
  ]

177:                                              ; preds = %171
  br label %178

178:                                              ; preds = %177
  %179 = load i32, i32* %3, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %3, align 4
  br label %12

181:                                              ; preds = %12
  store i32 0, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %182

182:                                              ; preds = %181, %171
  %183 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %183) #10
  %184 = bitcast [11 x i8*]* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 88, i8* %184) #10
  %185 = load i32, i32* %1, align 4
  ret i32 %185
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare dso_local x86_fp80 @strtold(i8*, i8**) #5

; Function Attrs: nounwind readnone
declare dso_local i32 @__isnanf(float) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isnan(double) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isnanl(x86_fp80) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isinff(float) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isinf(double) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isinfl(x86_fp80) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_buffer() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %10*, align 8
  %3 = alloca [2049 x i8], align 16
  %4 = alloca [9001 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = bitcast %10** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = call %10* @buffer_create(i64 1)
  store %10* %10, %10** %2, align 8
  %11 = bitcast [2049 x i8]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2049, i8* %11) #10
  %12 = bitcast [9001 x i8]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9001, i8* %12) #10
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #10
  store i32 0, i32* %5, align 4
  br label %14

14:                                               ; preds = %25, %0
  %15 = load i32, i32* %5, align 4
  %16 = icmp slt i32 %15, 2048
  br i1 %16, label %17, label %28

17:                                               ; preds = %14
  %18 = load i32, i32* %5, align 4
  %19 = srem i32 %18, 24
  %20 = add nsw i32 %19, 97
  %21 = trunc i32 %20 to i8
  %22 = load i32, i32* %5, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i64 0, i64 %23
  store i8 %21, i8* %24, align 1
  br label %25

25:                                               ; preds = %17
  %26 = load i32, i32* %5, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %5, align 4
  br label %14

28:                                               ; preds = %14
  %29 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i64 0, i64 2048
  store i8 0, i8* %29, align 16
  %30 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #10
  store i8* getelementptr inbounds ([48 x i8], [48 x i8]* @41, i32 0, i32 0), i8** %6, align 8
  %31 = load %10*, %10** %2, align 8
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %34 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %35 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %36 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  call void (%10*, i8*, ...) @buffer_sprintf(%10* %31, i8* %32, i8* %33, i8* %34, i8* %35, i8* %36)
  %37 = getelementptr inbounds [9001 x i8], [9001 x i8]* %4, i32 0, i32 0
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %40 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %41 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %42 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %43 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* %37, i64 9000, i8* %38, i8* %39, i8* %40, i8* %41, i8* %42)
  %44 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #10
  %45 = load %10*, %10** %2, align 8
  %46 = call i8* @buffer_tostring(%10* %45)
  store i8* %46, i8** %7, align 8
  %47 = load %10*, %10** %2, align 8
  %48 = getelementptr inbounds %10, %10* %47, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds [9001 x i8], [9001 x i8]* %4, i32 0, i32 0
  %51 = call i64 @strlen(i8* %50) #11
  %52 = icmp ne i64 %49, %51
  br i1 %52, label %58, label %53

53:                                               ; preds = %28
  %54 = load i8*, i8** %7, align 8
  %55 = getelementptr inbounds [9001 x i8], [9001 x i8]* %4, i32 0, i32 0
  %56 = call i32 @strcmp(i8* %54, i8* %55) #11
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %78

58:                                               ; preds = %53, %28
  %59 = load %0*, %0** @stderr, align 8
  %60 = call i32 (%0*, i8*, ...) @fprintf(%0* %59, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @42, i32 0, i32 0))
  %61 = load %0*, %0** @stderr, align 8
  %62 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %63 = getelementptr inbounds [2049 x i8], [2049 x i8]* %3, i32 0, i32 0
  %64 = call i64 @strlen(i8* %63) #11
  %65 = call i32 (%0*, i8*, ...) @fprintf(%0* %61, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @43, i32 0, i32 0), i8* %62, i64 %64)
  %66 = load %0*, %0** @stderr, align 8
  %67 = load i8*, i8** %7, align 8
  %68 = load %10*, %10** %2, align 8
  %69 = getelementptr inbounds %10, %10* %68, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = call i32 (%0*, i8*, ...) @fprintf(%0* %66, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @44, i32 0, i32 0), i8* %67, i64 %70)
  %72 = load %0*, %0** @stderr, align 8
  %73 = getelementptr inbounds [9001 x i8], [9001 x i8]* %4, i32 0, i32 0
  %74 = getelementptr inbounds [9001 x i8], [9001 x i8]* %4, i32 0, i32 0
  %75 = call i64 @strlen(i8* %74) #11
  %76 = call i32 (%0*, i8*, ...) @fprintf(%0* %72, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @45, i32 0, i32 0), i8* %73, i64 %75)
  %77 = load %10*, %10** %2, align 8
  call void @buffer_free(%10* %77)
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %82

78:                                               ; preds = %53
  %79 = load %0*, %0** @stderr, align 8
  %80 = call i32 (%0*, i8*, ...) @fprintf(%0* %79, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @46, i32 0, i32 0))
  %81 = load %10*, %10** %2, align 8
  call void @buffer_free(%10* %81)
  store i32 0, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %82

82:                                               ; preds = %78, %58
  %83 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %83) #10
  %84 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %84) #10
  %85 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #10
  %86 = bitcast [9001 x i8]* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 9001, i8* %86) #10
  %87 = bitcast [2049 x i8]* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2049, i8* %87) #10
  %88 = bitcast %10** %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %88) #10
  %89 = load i32, i32* %1, align 4
  ret i32 %89
}

declare dso_local %10* @buffer_create(i64) #2

declare dso_local void @buffer_sprintf(%10*, i8*, ...) #2

declare dso_local i8* @buffer_tostring(%10*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #4

declare dso_local void @buffer_free(%10*) #2

; Function Attrs: nounwind uwtable
define dso_local i32 @run_test(%3* %0) #0 {
  %2 = alloca %3*, align 8
  %3 = alloca [101 x i8], align 16
  %4 = alloca %17*, align 8
  %5 = alloca %21*, align 8
  %6 = alloca %21*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca x86_fp80, align 16
  %16 = alloca x86_fp80, align 16
  %17 = alloca i32, align 4
  store %3* %0, %3** %2, align 8
  %18 = load %0*, %0** @stderr, align 8
  %19 = load %3*, %3** %2, align 8
  %20 = getelementptr inbounds %3, %3* %19, i32 0, i32 0
  %21 = getelementptr inbounds [100 x i8], [100 x i8]* %20, i32 0, i32 0
  %22 = load %3*, %3** %2, align 8
  %23 = getelementptr inbounds %3, %3* %22, i32 0, i32 1
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %23, i32 0, i32 0
  %25 = call i32 (%0*, i8*, ...) @fprintf(%0* %18, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @47, i32 0, i32 0), i8* %21, i8* %24)
  store i32 4, i32* @default_rrd_memory_mode, align 4
  %26 = load %3*, %3** %2, align 8
  %27 = getelementptr inbounds %3, %3* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* @default_rrd_update_every, align 4
  %29 = bitcast [101 x i8]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 101, i8* %29) #10
  %30 = getelementptr inbounds [101 x i8], [101 x i8]* %3, i32 0, i32 0
  %31 = load %3*, %3** %2, align 8
  %32 = getelementptr inbounds %3, %3* %31, i32 0, i32 0
  %33 = getelementptr inbounds [100 x i8], [100 x i8]* %32, i32 0, i32 0
  %34 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* %30, i64 100, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @48, i32 0, i32 0), i8* %33)
  %35 = bitcast %17** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %35) #10
  %36 = load %4*, %4** @localhost, align 8
  %37 = getelementptr inbounds [101 x i8], [101 x i8]* %3, i32 0, i32 0
  %38 = getelementptr inbounds [101 x i8], [101 x i8]* %3, i32 0, i32 0
  %39 = load %3*, %3** %2, align 8
  %40 = getelementptr inbounds %3, %3* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = load %4*, %4** @localhost, align 8
  %43 = getelementptr inbounds %4, %4* %42, i32 0, i32 13
  %44 = load i32, i32* %43, align 8
  %45 = load %4*, %4** @localhost, align 8
  %46 = getelementptr inbounds %4, %4* %45, i32 0, i32 12
  %47 = load i64, i64* %46, align 8
  %48 = call %17* @rrdset_create_custom(%4* %36, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i32 0, i32 0), i8* %37, i8* %38, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i32 0, i32 0), i8* null, i64 1, i32 %41, i32 0, i32 %44, i64 %47)
  store %17* %48, %17** %4, align 8
  %49 = bitcast %21** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %49) #10
  %50 = load %17*, %17** %4, align 8
  %51 = load %3*, %3** %2, align 8
  %52 = getelementptr inbounds %3, %3* %51, i32 0, i32 3
  %53 = load i64, i64* %52, align 8
  %54 = load %3*, %3** %2, align 8
  %55 = getelementptr inbounds %3, %3* %54, i32 0, i32 4
  %56 = load i64, i64* %55, align 8
  %57 = load %3*, %3** %2, align 8
  %58 = getelementptr inbounds %3, %3* %57, i32 0, i32 5
  %59 = load i32, i32* %58, align 8
  %60 = load %17*, %17** %4, align 8
  %61 = getelementptr inbounds %17, %17* %60, i32 0, i32 19
  %62 = load i32, i32* %61, align 8
  %63 = call %21* @rrddim_add_custom(%17* %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i32 0, i32 0), i8* null, i64 %53, i64 %56, i32 %59, i32 %62)
  store %21* %63, %21** %5, align 8
  %64 = bitcast %21** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %64) #10
  store %21* null, %21** %6, align 8
  %65 = load %3*, %3** %2, align 8
  %66 = getelementptr inbounds %3, %3* %65, i32 0, i32 10
  %67 = load i64*, i64** %66, align 8
  %68 = icmp ne i64* %67, null
  br i1 %68, label %69, label %84

69:                                               ; preds = %1
  %70 = load %17*, %17** %4, align 8
  %71 = load %3*, %3** %2, align 8
  %72 = getelementptr inbounds %3, %3* %71, i32 0, i32 3
  %73 = load i64, i64* %72, align 8
  %74 = load %3*, %3** %2, align 8
  %75 = getelementptr inbounds %3, %3* %74, i32 0, i32 4
  %76 = load i64, i64* %75, align 8
  %77 = load %3*, %3** %2, align 8
  %78 = getelementptr inbounds %3, %3* %77, i32 0, i32 5
  %79 = load i32, i32* %78, align 8
  %80 = load %17*, %17** %4, align 8
  %81 = getelementptr inbounds %17, %17* %80, i32 0, i32 19
  %82 = load i32, i32* %81, align 8
  %83 = call %21* @rrddim_add_custom(%17* %70, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @54, i32 0, i32 0), i8* null, i64 %73, i64 %76, i32 %79, i32 %82)
  store %21* %83, %21** %6, align 8
  br label %84

84:                                               ; preds = %69, %1
  %85 = load %17*, %17** %4, align 8
  %86 = getelementptr inbounds %17, %17* %85, i32 0, i32 15
  store i32 4, i32* %7, align 4
  %87 = load i32, i32* %7, align 4
  %88 = atomicrmw or i32* %86, i32 %87 seq_cst
  %89 = or i32 %88, %87
  store i32 %89, i32* %8, align 4
  %90 = load i32, i32* %8, align 4
  %91 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %91) #10
  store i64 0, i64* %9, align 8
  %92 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %92) #10
  %93 = call i64 @now_realtime_sec()
  store i64 %93, i64* %10, align 8
  %94 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %94) #10
  %95 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %95) #10
  store i64 0, i64* %12, align 8
  store i64 0, i64* %11, align 8
  br label %96

96:                                               ; preds = %296, %84
  %97 = load i64, i64* %11, align 8
  %98 = load %3*, %3** %2, align 8
  %99 = getelementptr inbounds %3, %3* %98, i32 0, i32 6
  %100 = load i64, i64* %99, align 8
  %101 = icmp ult i64 %97, %100
  br i1 %101, label %102, label %299

102:                                              ; preds = %96
  %103 = load i64, i64* @debug_flags, align 8
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %108

105:                                              ; preds = %102
  %106 = load %0*, %0** @stderr, align 8
  %107 = call i32 (%0*, i8*, ...) @fprintf(%0* %106, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @55, i32 0, i32 0))
  br label %108

108:                                              ; preds = %105, %102
  %109 = load i64, i64* %11, align 8
  %110 = icmp ne i64 %109, 0
  br i1 %110, label %111, label %203

111:                                              ; preds = %108
  %112 = load %3*, %3** %2, align 8
  %113 = getelementptr inbounds %3, %3* %112, i32 0, i32 8
  %114 = load %2*, %2** %113, align 8
  %115 = load i64, i64* %11, align 8
  %116 = getelementptr inbounds %2, %2* %114, i64 %115
  %117 = getelementptr inbounds %2, %2* %116, i32 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = load i64, i64* %9, align 8
  %120 = add i64 %119, %118
  store i64 %120, i64* %9, align 8
  %121 = load %0*, %0** @stderr, align 8
  %122 = load %3*, %3** %2, align 8
  %123 = getelementptr inbounds %3, %3* %122, i32 0, i32 0
  %124 = getelementptr inbounds [100 x i8], [100 x i8]* %123, i32 0, i32 0
  %125 = load i64, i64* %11, align 8
  %126 = add i64 %125, 1
  %127 = load %3*, %3** %2, align 8
  %128 = getelementptr inbounds %3, %3* %127, i32 0, i32 8
  %129 = load %2*, %2** %128, align 8
  %130 = load i64, i64* %11, align 8
  %131 = getelementptr inbounds %2, %2* %129, i64 %130
  %132 = getelementptr inbounds %2, %2* %131, i32 0, i32 0
  %133 = load i64, i64* %132, align 8
  %134 = uitofp i64 %133 to float
  %135 = fpext float %134 to double
  %136 = fdiv double %135, 1.000000e+06
  %137 = load i64, i64* %9, align 8
  %138 = sitofp i64 %137 to float
  %139 = fpext float %138 to double
  %140 = fdiv double %139, 1.000000e+06
  %141 = load %3*, %3** %2, align 8
  %142 = getelementptr inbounds %3, %3* %141, i32 0, i32 8
  %143 = load %2*, %2** %142, align 8
  %144 = load i64, i64* %11, align 8
  %145 = getelementptr inbounds %2, %2* %143, i64 %144
  %146 = getelementptr inbounds %2, %2* %145, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = sitofp i64 %147 to x86_fp80
  %149 = load i64, i64* %12, align 8
  %150 = sitofp i64 %149 to x86_fp80
  %151 = fsub x86_fp80 %148, %150
  %152 = load %3*, %3** %2, align 8
  %153 = getelementptr inbounds %3, %3* %152, i32 0, i32 3
  %154 = load i64, i64* %153, align 8
  %155 = uitofp i64 %154 to x86_fp80
  %156 = fmul x86_fp80 %151, %155
  %157 = load %3*, %3** %2, align 8
  %158 = getelementptr inbounds %3, %3* %157, i32 0, i32 4
  %159 = load i64, i64* %158, align 8
  %160 = uitofp i64 %159 to x86_fp80
  %161 = fdiv x86_fp80 %156, %160
  %162 = load %3*, %3** %2, align 8
  %163 = getelementptr inbounds %3, %3* %162, i32 0, i32 8
  %164 = load %2*, %2** %163, align 8
  %165 = load i64, i64* %11, align 8
  %166 = getelementptr inbounds %2, %2* %164, i64 %165
  %167 = getelementptr inbounds %2, %2* %166, i32 0, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = sitofp i64 %168 to x86_fp80
  %170 = load i64, i64* %12, align 8
  %171 = sitofp i64 %170 to x86_fp80
  %172 = fsub x86_fp80 %169, %171
  %173 = load %3*, %3** %2, align 8
  %174 = getelementptr inbounds %3, %3* %173, i32 0, i32 3
  %175 = load i64, i64* %174, align 8
  %176 = uitofp i64 %175 to x86_fp80
  %177 = fmul x86_fp80 %172, %176
  %178 = load %3*, %3** %2, align 8
  %179 = getelementptr inbounds %3, %3* %178, i32 0, i32 4
  %180 = load i64, i64* %179, align 8
  %181 = uitofp i64 %180 to x86_fp80
  %182 = fdiv x86_fp80 %177, %181
  %183 = load %3*, %3** %2, align 8
  %184 = getelementptr inbounds %3, %3* %183, i32 0, i32 8
  %185 = load %2*, %2** %184, align 8
  %186 = load i64, i64* %11, align 8
  %187 = getelementptr inbounds %2, %2* %185, i64 %186
  %188 = getelementptr inbounds %2, %2* %187, i32 0, i32 0
  %189 = load i64, i64* %188, align 8
  %190 = uitofp i64 %189 to x86_fp80
  %191 = fdiv x86_fp80 %182, %190
  %192 = fmul x86_fp80 %191, 0xK4012F424000000000000
  %193 = call i32 (%0*, i8*, ...) @fprintf(%0* %121, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @56, i32 0, i32 0), i8* %124, i64 %126, double %136, double %140, x86_fp80 %161, x86_fp80 %192)
  %194 = load %3*, %3** %2, align 8
  %195 = getelementptr inbounds %3, %3* %194, i32 0, i32 8
  %196 = load %2*, %2** %195, align 8
  %197 = load i64, i64* %11, align 8
  %198 = getelementptr inbounds %2, %2* %196, i64 %197
  %199 = getelementptr inbounds %2, %2* %198, i32 0, i32 0
  %200 = load i64, i64* %199, align 8
  %201 = load %17*, %17** %4, align 8
  %202 = getelementptr inbounds %17, %17* %201, i32 0, i32 33
  store i64 %200, i64* %202, align 16
  br label %211

203:                                              ; preds = %108
  %204 = load %0*, %0** @stderr, align 8
  %205 = load %3*, %3** %2, align 8
  %206 = getelementptr inbounds %3, %3* %205, i32 0, i32 0
  %207 = getelementptr inbounds [100 x i8], [100 x i8]* %206, i32 0, i32 0
  %208 = load i64, i64* %11, align 8
  %209 = add i64 %208, 1
  %210 = call i32 (%0*, i8*, ...) @fprintf(%0* %204, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @57, i32 0, i32 0), i8* %207, i64 %209)
  br label %211

211:                                              ; preds = %203, %111
  %212 = load %0*, %0** @stderr, align 8
  %213 = load %21*, %21** %5, align 8
  %214 = getelementptr inbounds %21, %21* %213, i32 0, i32 2
  %215 = load i8*, i8** %214, align 16
  %216 = load %3*, %3** %2, align 8
  %217 = getelementptr inbounds %3, %3* %216, i32 0, i32 8
  %218 = load %2*, %2** %217, align 8
  %219 = load i64, i64* %11, align 8
  %220 = getelementptr inbounds %2, %2* %218, i64 %219
  %221 = getelementptr inbounds %2, %2* %220, i32 0, i32 1
  %222 = load i64, i64* %221, align 8
  %223 = call i32 (%0*, i8*, ...) @fprintf(%0* %212, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @58, i32 0, i32 0), i8* %215, i64 %222)
  %224 = load %17*, %17** %4, align 8
  %225 = load %3*, %3** %2, align 8
  %226 = getelementptr inbounds %3, %3* %225, i32 0, i32 8
  %227 = load %2*, %2** %226, align 8
  %228 = load i64, i64* %11, align 8
  %229 = getelementptr inbounds %2, %2* %227, i64 %228
  %230 = getelementptr inbounds %2, %2* %229, i32 0, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = call i64 @rrddim_set(%17* %224, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i32 0, i32 0), i64 %231)
  %233 = load %3*, %3** %2, align 8
  %234 = getelementptr inbounds %3, %3* %233, i32 0, i32 8
  %235 = load %2*, %2** %234, align 8
  %236 = load i64, i64* %11, align 8
  %237 = getelementptr inbounds %2, %2* %235, i64 %236
  %238 = getelementptr inbounds %2, %2* %237, i32 0, i32 1
  %239 = load i64, i64* %238, align 8
  store i64 %239, i64* %12, align 8
  %240 = load %21*, %21** %6, align 8
  %241 = icmp ne %21* %240, null
  br i1 %241, label %242, label %262

242:                                              ; preds = %211
  %243 = load %0*, %0** @stderr, align 8
  %244 = load %21*, %21** %6, align 8
  %245 = getelementptr inbounds %21, %21* %244, i32 0, i32 2
  %246 = load i8*, i8** %245, align 16
  %247 = load %3*, %3** %2, align 8
  %248 = getelementptr inbounds %3, %3* %247, i32 0, i32 10
  %249 = load i64*, i64** %248, align 8
  %250 = load i64, i64* %11, align 8
  %251 = getelementptr inbounds i64, i64* %249, i64 %250
  %252 = load i64, i64* %251, align 8
  %253 = call i32 (%0*, i8*, ...) @fprintf(%0* %243, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @58, i32 0, i32 0), i8* %246, i64 %252)
  %254 = load %17*, %17** %4, align 8
  %255 = load %3*, %3** %2, align 8
  %256 = getelementptr inbounds %3, %3* %255, i32 0, i32 10
  %257 = load i64*, i64** %256, align 8
  %258 = load i64, i64* %11, align 8
  %259 = getelementptr inbounds i64, i64* %257, i64 %258
  %260 = load i64, i64* %259, align 8
  %261 = call i64 @rrddim_set(%17* %254, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @54, i32 0, i32 0), i64 %260)
  br label %262

262:                                              ; preds = %242, %211
  %263 = load %17*, %17** %4, align 8
  call void @rrdset_done(%17* %263)
  %264 = load i64, i64* %11, align 8
  %265 = icmp ne i64 %264, 0
  br i1 %265, label %295, label %266

266:                                              ; preds = %262
  %267 = load %0*, %0** @stderr, align 8
  %268 = load %3*, %3** %2, align 8
  %269 = getelementptr inbounds %3, %3* %268, i32 0, i32 0
  %270 = getelementptr inbounds [100 x i8], [100 x i8]* %269, i32 0, i32 0
  %271 = load %3*, %3** %2, align 8
  %272 = getelementptr inbounds %3, %3* %271, i32 0, i32 8
  %273 = load %2*, %2** %272, align 8
  %274 = load i64, i64* %11, align 8
  %275 = getelementptr inbounds %2, %2* %273, i64 %274
  %276 = getelementptr inbounds %2, %2* %275, i32 0, i32 0
  %277 = load i64, i64* %276, align 8
  %278 = call i32 (%0*, i8*, ...) @fprintf(%0* %267, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @59, i32 0, i32 0), i8* %270, i64 %277)
  %279 = load %3*, %3** %2, align 8
  %280 = getelementptr inbounds %3, %3* %279, i32 0, i32 8
  %281 = load %2*, %2** %280, align 8
  %282 = load i64, i64* %11, align 8
  %283 = getelementptr inbounds %2, %2* %281, i64 %282
  %284 = getelementptr inbounds %2, %2* %283, i32 0, i32 0
  %285 = load i64, i64* %284, align 8
  %286 = load %17*, %17** %4, align 8
  %287 = getelementptr inbounds %17, %17* %286, i32 0, i32 34
  %288 = getelementptr inbounds %18, %18* %287, i32 0, i32 1
  store i64 %285, i64* %288, align 8
  %289 = load %17*, %17** %4, align 8
  %290 = getelementptr inbounds %17, %17* %289, i32 0, i32 35
  %291 = getelementptr inbounds %18, %18* %290, i32 0, i32 1
  store i64 %285, i64* %291, align 8
  %292 = load %21*, %21** %5, align 8
  %293 = getelementptr inbounds %21, %21* %292, i32 0, i32 16
  %294 = getelementptr inbounds %18, %18* %293, i32 0, i32 1
  store i64 %285, i64* %294, align 8
  br label %295

295:                                              ; preds = %266, %262
  br label %296

296:                                              ; preds = %295
  %297 = load i64, i64* %11, align 8
  %298 = add i64 %297, 1
  store i64 %298, i64* %11, align 8
  br label %96

299:                                              ; preds = %96
  %300 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %300) #10
  store i32 0, i32* %13, align 4
  %301 = load %17*, %17** %4, align 8
  %302 = getelementptr inbounds %17, %17* %301, i32 0, i32 23
  %303 = load i64, i64* %302, align 8
  %304 = load %3*, %3** %2, align 8
  %305 = getelementptr inbounds %3, %3* %304, i32 0, i32 7
  %306 = load i64, i64* %305, align 8
  %307 = icmp ne i64 %303, %306
  br i1 %307, label %308, label %322

308:                                              ; preds = %299
  %309 = load %0*, %0** @stderr, align 8
  %310 = load %3*, %3** %2, align 8
  %311 = getelementptr inbounds %3, %3* %310, i32 0, i32 0
  %312 = getelementptr inbounds [100 x i8], [100 x i8]* %311, i32 0, i32 0
  %313 = load %17*, %17** %4, align 8
  %314 = getelementptr inbounds %17, %17* %313, i32 0, i32 23
  %315 = load i64, i64* %314, align 8
  %316 = load %3*, %3** %2, align 8
  %317 = getelementptr inbounds %3, %3* %316, i32 0, i32 7
  %318 = load i64, i64* %317, align 8
  %319 = call i32 (%0*, i8*, ...) @fprintf(%0* %309, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @60, i32 0, i32 0), i8* %312, i64 %315, i64 %318)
  %320 = load i32, i32* %13, align 4
  %321 = add nsw i32 %320, 1
  store i32 %321, i32* %13, align 4
  br label %322

322:                                              ; preds = %308, %299
  %323 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %323) #10
  %324 = load %17*, %17** %4, align 8
  %325 = getelementptr inbounds %17, %17* %324, i32 0, i32 23
  %326 = load i64, i64* %325, align 8
  %327 = load %3*, %3** %2, align 8
  %328 = getelementptr inbounds %3, %3* %327, i32 0, i32 7
  %329 = load i64, i64* %328, align 8
  %330 = icmp ult i64 %326, %329
  br i1 %330, label %331, label %335

331:                                              ; preds = %322
  %332 = load %17*, %17** %4, align 8
  %333 = getelementptr inbounds %17, %17* %332, i32 0, i32 23
  %334 = load i64, i64* %333, align 8
  br label %339

335:                                              ; preds = %322
  %336 = load %3*, %3** %2, align 8
  %337 = getelementptr inbounds %3, %3* %336, i32 0, i32 7
  %338 = load i64, i64* %337, align 8
  br label %339

339:                                              ; preds = %335, %331
  %340 = phi i64 [ %334, %331 ], [ %338, %335 ]
  store i64 %340, i64* %14, align 8
  store i64 0, i64* %11, align 8
  br label %341

341:                                              ; preds = %466, %339
  %342 = load i64, i64* %11, align 8
  %343 = load i64, i64* %14, align 8
  %344 = icmp ult i64 %342, %343
  br i1 %344, label %345, label %469

345:                                              ; preds = %341
  %346 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %346) #10
  %347 = load %21*, %21** %5, align 8
  %348 = getelementptr inbounds %21, %21* %347, i32 0, i32 31
  %349 = load i64, i64* %11, align 8
  %350 = getelementptr inbounds [0 x i32], [0 x i32]* %348, i64 0, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = call x86_fp80 @unpack_storage_number(i32 %351)
  store x86_fp80 %352, x86_fp80* %15, align 16
  %353 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %353) #10
  %354 = load %3*, %3** %2, align 8
  %355 = getelementptr inbounds %3, %3* %354, i32 0, i32 9
  %356 = load x86_fp80*, x86_fp80** %355, align 8
  %357 = load i64, i64* %11, align 8
  %358 = getelementptr inbounds x86_fp80, x86_fp80* %356, i64 %357
  %359 = load x86_fp80, x86_fp80* %358, align 16
  %360 = call i32 @pack_storage_number(x86_fp80 %359, i32 16777216)
  %361 = call x86_fp80 @unpack_storage_number(i32 %360)
  store x86_fp80 %361, x86_fp80* %16, align 16
  %362 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %362) #10
  %363 = load x86_fp80, x86_fp80* %15, align 16
  %364 = fmul x86_fp80 %363, 0xK40169896800000000000
  %365 = call x86_fp80 @llvm.round.f80(x86_fp80 %364)
  %366 = load x86_fp80, x86_fp80* %16, align 16
  %367 = fmul x86_fp80 %366, 0xK40169896800000000000
  %368 = call x86_fp80 @llvm.round.f80(x86_fp80 %367)
  %369 = fcmp oeq x86_fp80 %365, %368
  %370 = zext i1 %369 to i64
  %371 = select i1 %369, i32 1, i32 0
  store i32 %371, i32* %17, align 4
  %372 = load %0*, %0** @stderr, align 8
  %373 = load %3*, %3** %2, align 8
  %374 = getelementptr inbounds %3, %3* %373, i32 0, i32 0
  %375 = getelementptr inbounds [100 x i8], [100 x i8]* %374, i32 0, i32 0
  %376 = load %21*, %21** %5, align 8
  %377 = getelementptr inbounds %21, %21* %376, i32 0, i32 2
  %378 = load i8*, i8** %377, align 16
  %379 = load i64, i64* %11, align 8
  %380 = add i64 %379, 1
  %381 = load %17*, %17** %4, align 8
  %382 = call i64 @135(%17* %381)
  %383 = load i64, i64* %11, align 8
  %384 = load %17*, %17** %4, align 8
  %385 = getelementptr inbounds %17, %17* %384, i32 0, i32 12
  %386 = load i32, i32* %385, align 16
  %387 = sext i32 %386 to i64
  %388 = mul i64 %383, %387
  %389 = add i64 %382, %388
  %390 = load i64, i64* %10, align 8
  %391 = sub i64 %389, %390
  %392 = load x86_fp80, x86_fp80* %16, align 16
  %393 = load x86_fp80, x86_fp80* %15, align 16
  %394 = load i32, i32* %17, align 4
  %395 = icmp ne i32 %394, 0
  %396 = zext i1 %395 to i64
  %397 = select i1 %395, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @63, i32 0, i32 0)
  %398 = call i32 (%0*, i8*, ...) @fprintf(%0* %372, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @61, i32 0, i32 0), i8* %375, i8* %378, i64 %380, i64 %391, x86_fp80 %392, x86_fp80 %393, i8* %397)
  %399 = load i32, i32* %17, align 4
  %400 = icmp ne i32 %399, 0
  br i1 %400, label %404, label %401

401:                                              ; preds = %345
  %402 = load i32, i32* %13, align 4
  %403 = add nsw i32 %402, 1
  store i32 %403, i32* %13, align 4
  br label %404

404:                                              ; preds = %401, %345
  %405 = load %21*, %21** %6, align 8
  %406 = icmp ne %21* %405, null
  br i1 %406, label %407, label %462

407:                                              ; preds = %404
  %408 = load %21*, %21** %6, align 8
  %409 = getelementptr inbounds %21, %21* %408, i32 0, i32 31
  %410 = load i64, i64* %11, align 8
  %411 = getelementptr inbounds [0 x i32], [0 x i32]* %409, i64 0, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = call x86_fp80 @unpack_storage_number(i32 %412)
  store x86_fp80 %413, x86_fp80* %15, align 16
  %414 = load %3*, %3** %2, align 8
  %415 = getelementptr inbounds %3, %3* %414, i32 0, i32 11
  %416 = load x86_fp80*, x86_fp80** %415, align 8
  %417 = load i64, i64* %11, align 8
  %418 = getelementptr inbounds x86_fp80, x86_fp80* %416, i64 %417
  %419 = load x86_fp80, x86_fp80* %418, align 16
  store x86_fp80 %419, x86_fp80* %16, align 16
  %420 = load x86_fp80, x86_fp80* %15, align 16
  %421 = fmul x86_fp80 %420, 0xK40169896800000000000
  %422 = call x86_fp80 @llvm.round.f80(x86_fp80 %421)
  %423 = load x86_fp80, x86_fp80* %16, align 16
  %424 = fmul x86_fp80 %423, 0xK40169896800000000000
  %425 = call x86_fp80 @llvm.round.f80(x86_fp80 %424)
  %426 = fcmp oeq x86_fp80 %422, %425
  %427 = zext i1 %426 to i64
  %428 = select i1 %426, i32 1, i32 0
  store i32 %428, i32* %17, align 4
  %429 = load %0*, %0** @stderr, align 8
  %430 = load %3*, %3** %2, align 8
  %431 = getelementptr inbounds %3, %3* %430, i32 0, i32 0
  %432 = getelementptr inbounds [100 x i8], [100 x i8]* %431, i32 0, i32 0
  %433 = load %21*, %21** %6, align 8
  %434 = getelementptr inbounds %21, %21* %433, i32 0, i32 2
  %435 = load i8*, i8** %434, align 16
  %436 = load i64, i64* %11, align 8
  %437 = add i64 %436, 1
  %438 = load %17*, %17** %4, align 8
  %439 = call i64 @135(%17* %438)
  %440 = load i64, i64* %11, align 8
  %441 = load %17*, %17** %4, align 8
  %442 = getelementptr inbounds %17, %17* %441, i32 0, i32 12
  %443 = load i32, i32* %442, align 16
  %444 = sext i32 %443 to i64
  %445 = mul i64 %440, %444
  %446 = add i64 %439, %445
  %447 = load i64, i64* %10, align 8
  %448 = sub i64 %446, %447
  %449 = load x86_fp80, x86_fp80* %16, align 16
  %450 = load x86_fp80, x86_fp80* %15, align 16
  %451 = load i32, i32* %17, align 4
  %452 = icmp ne i32 %451, 0
  %453 = zext i1 %452 to i64
  %454 = select i1 %452, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @63, i32 0, i32 0)
  %455 = call i32 (%0*, i8*, ...) @fprintf(%0* %429, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @61, i32 0, i32 0), i8* %432, i8* %435, i64 %437, i64 %448, x86_fp80 %449, x86_fp80 %450, i8* %454)
  %456 = load i32, i32* %17, align 4
  %457 = icmp ne i32 %456, 0
  br i1 %457, label %461, label %458

458:                                              ; preds = %407
  %459 = load i32, i32* %13, align 4
  %460 = add nsw i32 %459, 1
  store i32 %460, i32* %13, align 4
  br label %461

461:                                              ; preds = %458, %407
  br label %462

462:                                              ; preds = %461, %404
  %463 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %463) #10
  %464 = bitcast x86_fp80* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %464) #10
  %465 = bitcast x86_fp80* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %465) #10
  br label %466

466:                                              ; preds = %462
  %467 = load i64, i64* %11, align 8
  %468 = add i64 %467, 1
  store i64 %468, i64* %11, align 8
  br label %341

469:                                              ; preds = %341
  %470 = load i32, i32* %13, align 4
  %471 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %471) #10
  %472 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %472) #10
  %473 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %473) #10
  %474 = bitcast i64* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %474) #10
  %475 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %475) #10
  %476 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %476) #10
  %477 = bitcast %21** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %477) #10
  %478 = bitcast %21** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %478) #10
  %479 = bitcast %17** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %479) #10
  %480 = bitcast [101 x i8]* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 101, i8* %480) #10
  ret i32 %470
}

declare dso_local %17* @rrdset_create_custom(%4*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i32, i32, i32, i64) #2

declare dso_local %21* @rrddim_add_custom(%17*, i8*, i8*, i64, i64, i32, i32) #2

declare dso_local i64 @now_realtime_sec() #2

declare dso_local i64 @rrddim_set(%17*, i8*, i64) #2

declare dso_local void @rrdset_done(%17*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare x86_fp80 @llvm.round.f80(x86_fp80) #7

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @135(%17* %0) #3 {
  %2 = alloca i64, align 8
  %3 = alloca %17*, align 8
  %4 = alloca %21*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %17* %0, %17** %3, align 8
  %8 = load %17*, %17** %3, align 8
  %9 = getelementptr inbounds %17, %17* %8, i32 0, i32 19
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 5
  br i1 %11, label %12, label %76

12:                                               ; preds = %1
  %13 = bitcast %21** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  store i64 9223372036854775807, i64* %5, align 8
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #10
  %16 = load %17*, %17** %3, align 8
  %17 = getelementptr inbounds %17, %17* %16, i32 0, i32 22
  %18 = call i32 @__netdata_rwlock_tryrdlock(%32* %17)
  store i32 %18, i32* %6, align 4
  %19 = load %17*, %17** %3, align 8
  %20 = getelementptr inbounds %17, %17* %19, i32 0, i32 49
  %21 = load %21*, %21** %20, align 8
  store %21* %21, %21** %4, align 8
  br label %22

22:                                               ; preds = %49, %12
  %23 = load %21*, %21** %4, align 8
  %24 = icmp ne %21* %23, null
  br i1 %24, label %25, label %53

25:                                               ; preds = %22
  %26 = load i64, i64* %5, align 8
  %27 = load %21*, %21** %4, align 8
  %28 = getelementptr inbounds %21, %21* %27, i32 0, i32 12
  %29 = load %22*, %22** %28, align 16
  %30 = getelementptr inbounds %22, %22* %29, i32 0, i32 2
  %31 = getelementptr inbounds %26, %26* %30, i32 0, i32 5
  %32 = load i64 (%21*)*, i64 (%21*)** %31, align 8
  %33 = load %21*, %21** %4, align 8
  %34 = call i64 %32(%21* %33)
  %35 = icmp slt i64 %26, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %25
  %37 = load i64, i64* %5, align 8
  br label %47

38:                                               ; preds = %25
  %39 = load %21*, %21** %4, align 8
  %40 = getelementptr inbounds %21, %21* %39, i32 0, i32 12
  %41 = load %22*, %22** %40, align 16
  %42 = getelementptr inbounds %22, %22* %41, i32 0, i32 2
  %43 = getelementptr inbounds %26, %26* %42, i32 0, i32 5
  %44 = load i64 (%21*)*, i64 (%21*)** %43, align 8
  %45 = load %21*, %21** %4, align 8
  %46 = call i64 %44(%21* %45)
  br label %47

47:                                               ; preds = %38, %36
  %48 = phi i64 [ %37, %36 ], [ %46, %38 ]
  store i64 %48, i64* %5, align 8
  br label %49

49:                                               ; preds = %47
  %50 = load %21*, %21** %4, align 8
  %51 = getelementptr inbounds %21, %21* %50, i32 0, i32 24
  %52 = load %21*, %21** %51, align 16
  store %21* %52, %21** %4, align 8
  br label %22

53:                                               ; preds = %22
  %54 = load i32, i32* %6, align 4
  %55 = icmp eq i32 0, %54
  br i1 %55, label %56, label %60

56:                                               ; preds = %53
  %57 = load %17*, %17** %3, align 8
  %58 = getelementptr inbounds %17, %17* %57, i32 0, i32 22
  %59 = call i32 @__netdata_rwlock_unlock(%32* %58)
  br label %60

60:                                               ; preds = %56, %53
  %61 = load i64, i64* %5, align 8
  %62 = icmp eq i64 9223372036854775807, %61
  %63 = xor i1 %62, true
  %64 = xor i1 %63, true
  %65 = zext i1 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = call i64 @llvm.expect.i64(i64 %66, i64 0)
  %68 = icmp ne i64 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %60
  store i64 0, i64* %2, align 8
  store i32 1, i32* %7, align 4
  br label %72

70:                                               ; preds = %60
  %71 = load i64, i64* %5, align 8
  store i64 %71, i64* %2, align 8
  store i32 1, i32* %7, align 4
  br label %72

72:                                               ; preds = %70, %69
  %73 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %73) #10
  %74 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #10
  %75 = bitcast %21** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %75) #10
  br label %102

76:                                               ; preds = %1
  %77 = load %17*, %17** %3, align 8
  %78 = call i64 @140(%17* %77)
  %79 = load %17*, %17** %3, align 8
  %80 = getelementptr inbounds %17, %17* %79, i32 0, i32 23
  %81 = load i64, i64* %80, align 8
  %82 = load %17*, %17** %3, align 8
  %83 = getelementptr inbounds %17, %17* %82, i32 0, i32 13
  %84 = load i64, i64* %83, align 8
  %85 = icmp uge i64 %81, %84
  br i1 %85, label %86, label %90

86:                                               ; preds = %76
  %87 = load %17*, %17** %3, align 8
  %88 = getelementptr inbounds %17, %17* %87, i32 0, i32 13
  %89 = load i64, i64* %88, align 8
  br label %94

90:                                               ; preds = %76
  %91 = load %17*, %17** %3, align 8
  %92 = getelementptr inbounds %17, %17* %91, i32 0, i32 23
  %93 = load i64, i64* %92, align 8
  br label %94

94:                                               ; preds = %90, %86
  %95 = phi i64 [ %89, %86 ], [ %93, %90 ]
  %96 = load %17*, %17** %3, align 8
  %97 = getelementptr inbounds %17, %17* %96, i32 0, i32 12
  %98 = load i32, i32* %97, align 16
  %99 = sext i32 %98 to i64
  %100 = mul i64 %95, %99
  %101 = sub nsw i64 %78, %100
  store i64 %101, i64* %2, align 8
  br label %102

102:                                              ; preds = %94, %72
  %103 = load i64, i64* %2, align 8
  ret i64 %103
}

; Function Attrs: nounwind uwtable
define dso_local i32 @check_strdupz_path_subpath() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [10 x %38], align 16
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = bitcast [10 x %38]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* %6) #10
  %7 = bitcast [10 x %38]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([10 x %38]* @74 to i8*), i64 240, i1 false)
  %8 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  store i64 0, i64* %3, align 8
  br label %9

9:                                                ; preds = %60, %0
  %10 = load i64, i64* %3, align 8
  %11 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %10
  %12 = getelementptr inbounds %38, %38* %11, i32 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %63

15:                                               ; preds = %9
  %16 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #10
  %17 = load i64, i64* %3, align 8
  %18 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %17
  %19 = getelementptr inbounds %38, %38* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = load i64, i64* %3, align 8
  %22 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %21
  %23 = getelementptr inbounds %38, %38* %22, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i8* @strdupz_path_subpath(i8* %20, i8* %24)
  store i8* %25, i8** %4, align 8
  %26 = load %0*, %0** @stderr, align 8
  %27 = load i64, i64* %3, align 8
  %28 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %27
  %29 = getelementptr inbounds %38, %38* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = load i64, i64* %3, align 8
  %32 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %31
  %33 = getelementptr inbounds %38, %38* %32, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = load i8*, i8** %4, align 8
  %36 = call i32 (%0*, i8*, ...) @fprintf(%0* %26, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @75, i32 0, i32 0), i8* %30, i8* %34, i8* %35)
  %37 = load i8*, i8** %4, align 8
  %38 = icmp ne i8* %37, null
  br i1 %38, label %39, label %47

39:                                               ; preds = %15
  %40 = load i8*, i8** %4, align 8
  %41 = load i64, i64* %3, align 8
  %42 = getelementptr inbounds [10 x %38], [10 x %38]* %2, i64 0, i64 %41
  %43 = getelementptr inbounds %38, %38* %42, i32 0, i32 2
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @strcmp(i8* %40, i8* %44) #11
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %39, %15
  %48 = load i8*, i8** %4, align 8
  call void @freez(i8* %48)
  %49 = load %0*, %0** @stderr, align 8
  %50 = call i32 (%0*, i8*, ...) @fprintf(%0* %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @76, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  store i32 1, i32* %5, align 4
  br label %56

51:                                               ; preds = %39
  %52 = load i8*, i8** %4, align 8
  call void @freez(i8* %52)
  %53 = load %0*, %0** @stderr, align 8
  %54 = call i32 (%0*, i8*, ...) @fprintf(%0* %53, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @77, i32 0, i32 0))
  br label %55

55:                                               ; preds = %51
  store i32 0, i32* %5, align 4
  br label %56

56:                                               ; preds = %55, %47
  %57 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #10
  %58 = load i32, i32* %5, align 4
  switch i32 %58, label %64 [
    i32 0, label %59
  ]

59:                                               ; preds = %56
  br label %60

60:                                               ; preds = %59
  %61 = load i64, i64* %3, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %3, align 8
  br label %9

63:                                               ; preds = %9
  store i32 0, i32* %1, align 4
  store i32 1, i32* %5, align 4
  br label %64

64:                                               ; preds = %63, %56
  %65 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #10
  %66 = bitcast [10 x %38]* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 240, i8* %66) #10
  %67 = load i32, i32* %1, align 4
  ret i32 %67
}

declare dso_local i8* @strdupz_path_subpath(i8*, i8*) #2

declare dso_local void @freez(i8*) #2

; Function Attrs: nounwind uwtable
define dso_local i32 @run_all_mockup_tests() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 @check_strdupz_path_subpath()
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  store i32 1, i32* %1, align 4
  br label %90

5:                                                ; preds = %0
  %6 = call i32 @136()
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  store i32 1, i32* %1, align 4
  br label %90

9:                                                ; preds = %5
  %10 = call i32 @137()
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i32 1, i32* %1, align 4
  br label %90

13:                                               ; preds = %9
  %14 = call i32 @138()
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %13
  store i32 1, i32* %1, align 4
  br label %90

17:                                               ; preds = %13
  %18 = call i32 @run_test(%3* @test1)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  store i32 1, i32* %1, align 4
  br label %90

21:                                               ; preds = %17
  %22 = call i32 @run_test(%3* @test2)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %21
  store i32 1, i32* %1, align 4
  br label %90

25:                                               ; preds = %21
  %26 = call i32 @run_test(%3* @test3)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  store i32 1, i32* %1, align 4
  br label %90

29:                                               ; preds = %25
  %30 = call i32 @run_test(%3* @test4)
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  store i32 1, i32* %1, align 4
  br label %90

33:                                               ; preds = %29
  %34 = call i32 @run_test(%3* @test5)
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  store i32 1, i32* %1, align 4
  br label %90

37:                                               ; preds = %33
  %38 = call i32 @run_test(%3* @test5b)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  store i32 1, i32* %1, align 4
  br label %90

41:                                               ; preds = %37
  %42 = call i32 @run_test(%3* @test6)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  store i32 1, i32* %1, align 4
  br label %90

45:                                               ; preds = %41
  %46 = call i32 @run_test(%3* @test7)
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  store i32 1, i32* %1, align 4
  br label %90

49:                                               ; preds = %45
  %50 = call i32 @run_test(%3* @test8)
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  store i32 1, i32* %1, align 4
  br label %90

53:                                               ; preds = %49
  %54 = call i32 @run_test(%3* @test9)
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  store i32 1, i32* %1, align 4
  br label %90

57:                                               ; preds = %53
  %58 = call i32 @run_test(%3* @test10)
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  store i32 1, i32* %1, align 4
  br label %90

61:                                               ; preds = %57
  %62 = call i32 @run_test(%3* @test11)
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i32 1, i32* %1, align 4
  br label %90

65:                                               ; preds = %61
  %66 = call i32 @run_test(%3* @test12)
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  store i32 1, i32* %1, align 4
  br label %90

69:                                               ; preds = %65
  %70 = call i32 @run_test(%3* @test13)
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  store i32 1, i32* %1, align 4
  br label %90

73:                                               ; preds = %69
  %74 = call i32 @run_test(%3* @test14)
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  store i32 1, i32* %1, align 4
  br label %90

77:                                               ; preds = %73
  %78 = call i32 @run_test(%3* @test14b)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  store i32 1, i32* %1, align 4
  br label %90

81:                                               ; preds = %77
  %82 = call i32 @run_test(%3* @test14c)
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  store i32 1, i32* %1, align 4
  br label %90

85:                                               ; preds = %81
  %86 = call i32 @run_test(%3* @test15)
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  store i32 1, i32* %1, align 4
  br label %90

89:                                               ; preds = %85
  store i32 0, i32* %1, align 4
  br label %90

90:                                               ; preds = %89, %88, %84, %80, %76, %72, %68, %64, %60, %56, %52, %48, %44, %40, %36, %32, %28, %24, %20, %16, %12, %8, %4
  %91 = load i32, i32* %1, align 4
  ret i32 %91
}

; Function Attrs: nounwind uwtable
define internal i32 @136() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [10 x %54], align 16
  %3 = alloca [50 x i8], align 16
  %4 = alloca [50 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast [10 x %54]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* %9) #10
  %10 = bitcast [10 x %54]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([10 x { x86_fp80, i8* }]* @101 to i8*), i64 320, i1 false)
  %11 = bitcast [50 x i8]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %11) #10
  %12 = bitcast [50 x i8]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 50, i8* %12) #10
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %13) #10
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #10
  store i32 0, i32* %6, align 4
  store i32 0, i32* %5, align 4
  br label %15

15:                                               ; preds = %59, %0
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [10 x %54], [10 x %54]* %2, i64 0, i64 %17
  %19 = getelementptr inbounds %54, %54* %18, i32 0, i32 1
  %20 = load i8*, i8** %19, align 16
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %62

22:                                               ; preds = %15
  %23 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
  %24 = load i32, i32* %5, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [10 x %54], [10 x %54]* %2, i64 0, i64 %25
  %27 = getelementptr inbounds %54, %54* %26, i32 0, i32 0
  %28 = load x86_fp80, x86_fp80* %27, align 16
  %29 = call i32 @print_calculated_number(i8* %23, x86_fp80 %28)
  %30 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i32 0, i32 0
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [10 x %54], [10 x %54]* %2, i64 0, i64 %32
  %34 = getelementptr inbounds %54, %54* %33, i32 0, i32 0
  %35 = load x86_fp80, x86_fp80* %34, align 16
  %36 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* %30, i64 49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @102, i32 0, i32 0), x86_fp80 %35)
  %37 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #10
  store i32 1, i32* %7, align 4
  %38 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
  %39 = load i32, i32* %5, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [10 x %54], [10 x %54]* %2, i64 0, i64 %40
  %42 = getelementptr inbounds %54, %54* %41, i32 0, i32 1
  %43 = load i8*, i8** %42, align 16
  %44 = call i32 @strcmp(i8* %38, i8* %43) #11
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %22
  store i32 0, i32* %7, align 4
  %47 = load i32, i32* %6, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %6, align 4
  br label %49

49:                                               ; preds = %46, %22
  %50 = load %0*, %0** @stderr, align 8
  %51 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i32 0, i32 0
  %52 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i32 0, i32 0
  %53 = load i32, i32* %7, align 4
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i64
  %56 = select i1 %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @104, i32 0, i32 0)
  %57 = call i32 (%0*, i8*, ...) @fprintf(%0* %50, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @103, i32 0, i32 0), i8* %51, i8* %52, i8* %56)
  %58 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %58) #10
  br label %59

59:                                               ; preds = %49
  %60 = load i32, i32* %5, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %5, align 4
  br label %15

62:                                               ; preds = %15
  %63 = load i32, i32* %6, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  store i32 1, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %67

66:                                               ; preds = %62
  store i32 0, i32* %1, align 4
  store i32 1, i32* %8, align 4
  br label %67

67:                                               ; preds = %66, %65
  %68 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %68) #10
  %69 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %69) #10
  %70 = bitcast [50 x i8]* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %70) #10
  %71 = bitcast [50 x i8]* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 50, i8* %71) #10
  %72 = bitcast [10 x %54]* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 320, i8* %72) #10
  %73 = load i32, i32* %1, align 4
  ret i32 %73
}

; Function Attrs: nounwind uwtable
define internal i32 @137() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #10
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #10
  %7 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 4, i1 false)
  %8 = load i32, i32* %2, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %0
  %11 = load %0*, %0** @stderr, align 8
  %12 = call i8* @rrdcalc_status2string(i32 0)
  %13 = call i32 (%0*, i8*, ...) @fprintf(%0* %11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @105, i32 0, i32 0), i8* %12)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

14:                                               ; preds = %0
  store i32 -2, i32* %2, align 4
  store i32 -1, i32* %3, align 4
  %15 = load i32, i32* %2, align 4
  %16 = load i32, i32* %3, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  %19 = load %0*, %0** @stderr, align 8
  %20 = load i32, i32* %2, align 4
  %21 = call i8* @rrdcalc_status2string(i32 %20)
  %22 = load i32, i32* %3, align 4
  %23 = call i8* @rrdcalc_status2string(i32 %22)
  %24 = call i32 (%0*, i8*, ...) @fprintf(%0* %19, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %21, i8* %23)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

25:                                               ; preds = %14
  store i32 -1, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %26 = load i32, i32* %2, align 4
  %27 = load i32, i32* %3, align 4
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %36, label %29

29:                                               ; preds = %25
  %30 = load %0*, %0** @stderr, align 8
  %31 = load i32, i32* %2, align 4
  %32 = call i8* @rrdcalc_status2string(i32 %31)
  %33 = load i32, i32* %3, align 4
  %34 = call i8* @rrdcalc_status2string(i32 %33)
  %35 = call i32 (%0*, i8*, ...) @fprintf(%0* %30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %32, i8* %34)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

36:                                               ; preds = %25
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %37 = load i32, i32* %2, align 4
  %38 = load i32, i32* %3, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %47, label %40

40:                                               ; preds = %36
  %41 = load %0*, %0** @stderr, align 8
  %42 = load i32, i32* %2, align 4
  %43 = call i8* @rrdcalc_status2string(i32 %42)
  %44 = load i32, i32* %3, align 4
  %45 = call i8* @rrdcalc_status2string(i32 %44)
  %46 = call i32 (%0*, i8*, ...) @fprintf(%0* %41, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %43, i8* %45)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

47:                                               ; preds = %36
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %48 = load i32, i32* %2, align 4
  %49 = load i32, i32* %3, align 4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %58, label %51

51:                                               ; preds = %47
  %52 = load %0*, %0** @stderr, align 8
  %53 = load i32, i32* %2, align 4
  %54 = call i8* @rrdcalc_status2string(i32 %53)
  %55 = load i32, i32* %3, align 4
  %56 = call i8* @rrdcalc_status2string(i32 %55)
  %57 = call i32 (%0*, i8*, ...) @fprintf(%0* %52, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %54, i8* %56)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

58:                                               ; preds = %47
  store i32 2, i32* %2, align 4
  store i32 3, i32* %3, align 4
  %59 = load i32, i32* %2, align 4
  %60 = load i32, i32* %3, align 4
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %69, label %62

62:                                               ; preds = %58
  %63 = load %0*, %0** @stderr, align 8
  %64 = load i32, i32* %2, align 4
  %65 = call i8* @rrdcalc_status2string(i32 %64)
  %66 = load i32, i32* %3, align 4
  %67 = call i8* @rrdcalc_status2string(i32 %66)
  %68 = call i32 (%0*, i8*, ...) @fprintf(%0* %63, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %65, i8* %67)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

69:                                               ; preds = %58
  store i32 3, i32* %2, align 4
  store i32 4, i32* %3, align 4
  %70 = load i32, i32* %2, align 4
  %71 = load i32, i32* %3, align 4
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %80, label %73

73:                                               ; preds = %69
  %74 = load %0*, %0** @stderr, align 8
  %75 = load i32, i32* %2, align 4
  %76 = call i8* @rrdcalc_status2string(i32 %75)
  %77 = load i32, i32* %3, align 4
  %78 = call i8* @rrdcalc_status2string(i32 %77)
  %79 = call i32 (%0*, i8*, ...) @fprintf(%0* %74, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @106, i32 0, i32 0), i8* %76, i8* %78)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

80:                                               ; preds = %69
  %81 = load %0*, %0** @stderr, align 8
  %82 = call i32 (%0*, i8*, ...) @fprintf(%0* %81, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @107, i32 0, i32 0))
  store i32 0, i32* %1, align 4
  store i32 1, i32* %4, align 4
  br label %83

83:                                               ; preds = %80, %73, %62, %51, %40, %29, %18, %10
  %84 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %84) #10
  %85 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %85) #10
  %86 = load i32, i32* %1, align 4
  ret i32 %86
}

; Function Attrs: nounwind uwtable
define internal i32 @138() #0 {
  %1 = alloca %17*, align 8
  %2 = alloca %21*, align 8
  %3 = alloca %21*, align 8
  %4 = alloca %10*, align 8
  %5 = load %0*, %0** @stderr, align 8
  %6 = call i32 (%0*, i8*, ...) @fprintf(%0* %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @108, i32 0, i32 0))
  %7 = bitcast %17** %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = load %4*, %4** @localhost, align 8
  %9 = load %4*, %4** @localhost, align 8
  %10 = getelementptr inbounds %4, %4* %9, i32 0, i32 13
  %11 = load i32, i32* %10, align 8
  %12 = load %4*, %4** @localhost, align 8
  %13 = getelementptr inbounds %4, %4* %12, i32 0, i32 12
  %14 = load i64, i64* %13, align 8
  %15 = call %17* @rrdset_create_custom(%4* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @109, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @110, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @111, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @112, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i32 0, i32 0), i8* null, i64 1, i32 1, i32 0, i32 %11, i64 %14)
  store %17* %15, %17** %1, align 8
  %16 = load %0*, %0** @stderr, align 8
  %17 = load %17*, %17** %1, align 8
  %18 = getelementptr inbounds %17, %17* %17, i32 0, i32 2
  %19 = getelementptr inbounds [201 x i8], [201 x i8]* %18, i32 0, i32 0
  %20 = load %17*, %17** %1, align 8
  %21 = getelementptr inbounds %17, %17* %20, i32 0, i32 3
  %22 = load i8*, i8** %21, align 16
  %23 = call i32 (%0*, i8*, ...) @fprintf(%0* %16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @113, i32 0, i32 0), i8* %19, i8* %22)
  %24 = load %0*, %0** @stderr, align 8
  %25 = call i32 (%0*, i8*, ...) @fprintf(%0* %24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @114, i32 0, i32 0))
  %26 = bitcast %21** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #10
  %27 = load %17*, %17** %1, align 8
  %28 = load %17*, %17** %1, align 8
  %29 = getelementptr inbounds %17, %17* %28, i32 0, i32 19
  %30 = load i32, i32* %29, align 8
  %31 = call %21* @rrddim_add_custom(%17* %27, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @115, i32 0, i32 0), i8* null, i64 1, i64 1, i32 1, i32 %30)
  store %21* %31, %21** %2, align 8
  %32 = load %0*, %0** @stderr, align 8
  %33 = load %21*, %21** %2, align 8
  %34 = getelementptr inbounds %21, %21* %33, i32 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = load %21*, %21** %2, align 8
  %37 = getelementptr inbounds %21, %21* %36, i32 0, i32 2
  %38 = load i8*, i8** %37, align 16
  %39 = call i32 (%0*, i8*, ...) @fprintf(%0* %32, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @116, i32 0, i32 0), i8* %35, i8* %38)
  %40 = load %0*, %0** @stderr, align 8
  %41 = call i32 (%0*, i8*, ...) @fprintf(%0* %40, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @117, i32 0, i32 0))
  %42 = bitcast %21** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #10
  %43 = load %17*, %17** %1, align 8
  %44 = load %17*, %17** %1, align 8
  %45 = getelementptr inbounds %17, %17* %44, i32 0, i32 19
  %46 = load i32, i32* %45, align 8
  %47 = call %21* @rrddim_add_custom(%17* %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @118, i32 0, i32 0), i8* null, i64 1, i64 1, i32 1, i32 %46)
  store %21* %47, %21** %3, align 8
  %48 = load %0*, %0** @stderr, align 8
  %49 = load %21*, %21** %3, align 8
  %50 = getelementptr inbounds %21, %21* %49, i32 0, i32 1
  %51 = load i8*, i8** %50, align 8
  %52 = load %21*, %21** %3, align 8
  %53 = getelementptr inbounds %21, %21* %52, i32 0, i32 2
  %54 = load i8*, i8** %53, align 16
  %55 = call i32 (%0*, i8*, ...) @fprintf(%0* %48, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @116, i32 0, i32 0), i8* %51, i8* %54)
  %56 = load %0*, %0** @stderr, align 8
  %57 = call i32 (%0*, i8*, ...) @fprintf(%0* %56, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @119, i32 0, i32 0))
  %58 = load %17*, %17** %1, align 8
  %59 = call i32 @rrdset_set_name(%17* %58, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @120, i32 0, i32 0))
  %60 = load %0*, %0** @stderr, align 8
  %61 = load %17*, %17** %1, align 8
  %62 = getelementptr inbounds %17, %17* %61, i32 0, i32 2
  %63 = getelementptr inbounds [201 x i8], [201 x i8]* %62, i32 0, i32 0
  %64 = load %17*, %17** %1, align 8
  %65 = getelementptr inbounds %17, %17* %64, i32 0, i32 3
  %66 = load i8*, i8** %65, align 16
  %67 = call i32 (%0*, i8*, ...) @fprintf(%0* %60, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @121, i32 0, i32 0), i8* %63, i8* %66)
  %68 = load %0*, %0** @stderr, align 8
  %69 = call i32 (%0*, i8*, ...) @fprintf(%0* %68, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @122, i32 0, i32 0))
  %70 = load %17*, %17** %1, align 8
  %71 = call i32 @rrdset_set_name(%17* %70, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @123, i32 0, i32 0))
  %72 = load %0*, %0** @stderr, align 8
  %73 = load %17*, %17** %1, align 8
  %74 = getelementptr inbounds %17, %17* %73, i32 0, i32 2
  %75 = getelementptr inbounds [201 x i8], [201 x i8]* %74, i32 0, i32 0
  %76 = load %17*, %17** %1, align 8
  %77 = getelementptr inbounds %17, %17* %76, i32 0, i32 3
  %78 = load i8*, i8** %77, align 16
  %79 = call i32 (%0*, i8*, ...) @fprintf(%0* %72, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @121, i32 0, i32 0), i8* %75, i8* %78)
  %80 = load %0*, %0** @stderr, align 8
  %81 = call i32 (%0*, i8*, ...) @fprintf(%0* %80, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @124, i32 0, i32 0))
  %82 = load %17*, %17** %1, align 8
  %83 = load %21*, %21** %2, align 8
  %84 = call i32 @rrddim_set_name(%17* %82, %21* %83, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @125, i32 0, i32 0))
  %85 = load %0*, %0** @stderr, align 8
  %86 = load %21*, %21** %2, align 8
  %87 = getelementptr inbounds %21, %21* %86, i32 0, i32 1
  %88 = load i8*, i8** %87, align 8
  %89 = load %21*, %21** %2, align 8
  %90 = getelementptr inbounds %21, %21* %89, i32 0, i32 2
  %91 = load i8*, i8** %90, align 16
  %92 = call i32 (%0*, i8*, ...) @fprintf(%0* %85, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @126, i32 0, i32 0), i8* %88, i8* %91)
  %93 = load %0*, %0** @stderr, align 8
  %94 = call i32 (%0*, i8*, ...) @fprintf(%0* %93, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @127, i32 0, i32 0))
  %95 = load %17*, %17** %1, align 8
  %96 = load %21*, %21** %2, align 8
  %97 = call i32 @rrddim_set_name(%17* %95, %21* %96, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @128, i32 0, i32 0))
  %98 = load %0*, %0** @stderr, align 8
  %99 = load %21*, %21** %2, align 8
  %100 = getelementptr inbounds %21, %21* %99, i32 0, i32 1
  %101 = load i8*, i8** %100, align 8
  %102 = load %21*, %21** %2, align 8
  %103 = getelementptr inbounds %21, %21* %102, i32 0, i32 2
  %104 = load i8*, i8** %103, align 16
  %105 = call i32 (%0*, i8*, ...) @fprintf(%0* %98, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @126, i32 0, i32 0), i8* %101, i8* %104)
  %106 = load %0*, %0** @stderr, align 8
  %107 = call i32 (%0*, i8*, ...) @fprintf(%0* %106, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @129, i32 0, i32 0))
  %108 = load %17*, %17** %1, align 8
  %109 = load %21*, %21** %3, align 8
  %110 = call i32 @rrddim_set_name(%17* %108, %21* %109, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @130, i32 0, i32 0))
  %111 = load %0*, %0** @stderr, align 8
  %112 = load %21*, %21** %3, align 8
  %113 = getelementptr inbounds %21, %21* %112, i32 0, i32 1
  %114 = load i8*, i8** %113, align 8
  %115 = load %21*, %21** %3, align 8
  %116 = getelementptr inbounds %21, %21* %115, i32 0, i32 2
  %117 = load i8*, i8** %116, align 16
  %118 = call i32 (%0*, i8*, ...) @fprintf(%0* %111, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @126, i32 0, i32 0), i8* %114, i8* %117)
  %119 = load %0*, %0** @stderr, align 8
  %120 = call i32 (%0*, i8*, ...) @fprintf(%0* %119, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @131, i32 0, i32 0))
  %121 = load %17*, %17** %1, align 8
  %122 = load %21*, %21** %3, align 8
  %123 = call i32 @rrddim_set_name(%17* %121, %21* %122, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @132, i32 0, i32 0))
  %124 = load %0*, %0** @stderr, align 8
  %125 = load %21*, %21** %3, align 8
  %126 = getelementptr inbounds %21, %21* %125, i32 0, i32 1
  %127 = load i8*, i8** %126, align 8
  %128 = load %21*, %21** %3, align 8
  %129 = getelementptr inbounds %21, %21* %128, i32 0, i32 2
  %130 = load i8*, i8** %129, align 16
  %131 = call i32 (%0*, i8*, ...) @fprintf(%0* %124, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @126, i32 0, i32 0), i8* %127, i8* %130)
  %132 = bitcast %10** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %132) #10
  %133 = call %10* @buffer_create(i64 1)
  store %10* %133, %10** %4, align 8
  %134 = load %17*, %17** %1, align 8
  %135 = load %10*, %10** %4, align 8
  call void @health_api_v1_chart_variables2json(%17* %134, %10* %135)
  %136 = load %0*, %0** @stderr, align 8
  %137 = load %10*, %10** %4, align 8
  %138 = call i8* @buffer_tostring(%10* %137)
  %139 = call i32 (%0*, i8*, ...) @fprintf(%0* %136, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @133, i32 0, i32 0), i8* %138)
  %140 = load %10*, %10** %4, align 8
  call void @buffer_free(%10* %140)
  %141 = bitcast %10** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %141) #10
  %142 = bitcast %21** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %142) #10
  %143 = bitcast %21** %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %143) #10
  %144 = bitcast %17** %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %144) #10
  ret i32 1
}

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca [101 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %17*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %21*, align 8
  %14 = alloca %21*, align 8
  %15 = alloca %21*, align 8
  %16 = alloca %21*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca %21*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca x86_fp80, align 16
  %26 = alloca x86_fp80, align 16
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %27 = load i32, i32* @78, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* @78, align 4
  %29 = bitcast [101 x i8]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 101, i8* %29) #10
  %30 = getelementptr inbounds [101 x i8], [101 x i8]* %5, i32 0, i32 0
  %31 = load i32, i32* @78, align 4
  %32 = load i64, i64* %3, align 8
  %33 = load i64, i64* %4, align 8
  %34 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* %30, i64 100, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @79, i32 0, i32 0), i32 %31, i64 %32, i64 %33)
  store i32 4, i32* @default_rrd_memory_mode, align 4
  store i32 1, i32* @default_rrd_update_every, align 4
  %35 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #10
  store i32 1, i32* %6, align 4
  %36 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #10
  store i32 1, i32* %7, align 4
  %37 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #10
  store i32 0, i32* %8, align 4
  %38 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #10
  store i32 0, i32* %9, align 4
  %39 = bitcast %17** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #10
  %40 = load %4*, %4** @localhost, align 8
  %41 = getelementptr inbounds [101 x i8], [101 x i8]* %5, i32 0, i32 0
  %42 = getelementptr inbounds [101 x i8], [101 x i8]* %5, i32 0, i32 0
  %43 = load %4*, %4** @localhost, align 8
  %44 = getelementptr inbounds %4, %4* %43, i32 0, i32 13
  %45 = load i32, i32* %44, align 8
  %46 = load %4*, %4** @localhost, align 8
  %47 = getelementptr inbounds %4, %4* %46, i32 0, i32 12
  %48 = load i64, i64* %47, align 8
  %49 = call %17* @rrdset_create_custom(%4* %40, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i32 0, i32 0), i8* %41, i8* %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i32 0, i32 0), i8* null, i64 1, i32 1, i32 0, i32 %45, i64 %48)
  store %17* %49, %17** %10, align 8
  %50 = load %17*, %17** %10, align 8
  %51 = getelementptr inbounds %17, %17* %50, i32 0, i32 15
  store i32 4, i32* %11, align 4
  %52 = load i32, i32* %11, align 4
  %53 = atomicrmw or i32* %51, i32 %52 seq_cst
  %54 = or i32 %53, %52
  store i32 %54, i32* %12, align 4
  %55 = load i32, i32* %12, align 4
  %56 = bitcast %21** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %56) #10
  store %21* null, %21** %13, align 8
  %57 = bitcast %21** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %57) #10
  store %21* null, %21** %14, align 8
  %58 = bitcast %21** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %58) #10
  store %21* null, %21** %15, align 8
  %59 = bitcast %21** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %59) #10
  store %21* null, %21** %16, align 8
  %60 = load i32, i32* %6, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %2
  %63 = load %17*, %17** %10, align 8
  %64 = load %17*, %17** %10, align 8
  %65 = getelementptr inbounds %17, %17* %64, i32 0, i32 19
  %66 = load i32, i32* %65, align 8
  %67 = call %21* @rrddim_add_custom(%17* %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i32 0, i32 0), i64 1, i64 1, i32 0, i32 %66)
  store %21* %67, %21** %13, align 8
  br label %68

68:                                               ; preds = %62, %2
  %69 = load i32, i32* %7, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %77

71:                                               ; preds = %68
  %72 = load %17*, %17** %10, align 8
  %73 = load %17*, %17** %10, align 8
  %74 = getelementptr inbounds %17, %17* %73, i32 0, i32 19
  %75 = load i32, i32* %74, align 8
  %76 = call %21* @rrddim_add_custom(%17* %72, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i32 0, i32 0), i64 1, i64 1, i32 1, i32 %75)
  store %21* %76, %21** %14, align 8
  br label %77

77:                                               ; preds = %71, %68
  %78 = load i32, i32* %8, align 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %86

80:                                               ; preds = %77
  %81 = load %17*, %17** %10, align 8
  %82 = load %17*, %17** %10, align 8
  %83 = getelementptr inbounds %17, %17* %82, i32 0, i32 19
  %84 = load i32, i32* %83, align 8
  %85 = call %21* @rrddim_add_custom(%17* %81, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @82, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @82, i32 0, i32 0), i64 1, i64 1, i32 3, i32 %84)
  store %21* %85, %21** %15, align 8
  br label %86

86:                                               ; preds = %80, %77
  %87 = load i32, i32* %9, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %95

89:                                               ; preds = %86
  %90 = load %17*, %17** %10, align 8
  %91 = load %17*, %17** %10, align 8
  %92 = getelementptr inbounds %17, %17* %91, i32 0, i32 19
  %93 = load i32, i32* %92, align 8
  %94 = call %21* @rrddim_add_custom(%17* %90, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @83, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @83, i32 0, i32 0), i64 1, i64 1, i32 2, i32 %93)
  store %21* %94, %21** %16, align 8
  br label %95

95:                                               ; preds = %89, %86
  %96 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %96) #10
  store i64 1000, i64* %17, align 8
  %97 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %97) #10
  store i64 0, i64* %18, align 8
  %98 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %98) #10
  %99 = bitcast i64* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %99) #10
  store i64 0, i64* %20, align 8
  %100 = bitcast %21** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %100) #10
  %101 = load %17*, %17** %10, align 8
  %102 = getelementptr inbounds %17, %17* %101, i32 0, i32 49
  %103 = load %21*, %21** %102, align 8
  store %21* %103, %21** %21, align 8
  br label %104

104:                                              ; preds = %110, %95
  %105 = load %21*, %21** %21, align 8
  %106 = icmp ne %21* %105, null
  br i1 %106, label %107, label %114

107:                                              ; preds = %104
  %108 = load i64, i64* %20, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %20, align 8
  br label %110

110:                                              ; preds = %107
  %111 = load %21*, %21** %21, align 8
  %112 = getelementptr inbounds %21, %21* %111, i32 0, i32 24
  %113 = load %21*, %21** %112, align 16
  store %21* %113, %21** %21, align 8
  br label %104

114:                                              ; preds = %104
  store i64 0, i64* %19, align 8
  br label %115

115:                                              ; preds = %193, %114
  %116 = load i64, i64* %19, align 8
  %117 = icmp ult i64 %116, 20
  br i1 %117, label %118, label %196

118:                                              ; preds = %115
  %119 = load i64, i64* %17, align 8
  %120 = load i64, i64* %18, align 8
  %121 = add nsw i64 %120, %119
  store i64 %121, i64* %18, align 8
  %122 = load %0*, %0** @stderr, align 8
  %123 = load i64, i64* %19, align 8
  %124 = load i64, i64* %3, align 8
  %125 = load i64, i64* %18, align 8
  %126 = call i32 (%0*, i8*, ...) @fprintf(%0* %122, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @84, i32 0, i32 0), i64 %123, i64 %124, i64 %125)
  %127 = load i64, i64* %19, align 8
  %128 = icmp ne i64 %127, 0
  br i1 %128, label %129, label %133

129:                                              ; preds = %118
  %130 = load i64, i64* %3, align 8
  %131 = load %17*, %17** %10, align 8
  %132 = getelementptr inbounds %17, %17* %131, i32 0, i32 33
  store i64 %130, i64* %132, align 16
  br label %133

133:                                              ; preds = %129, %118
  %134 = load i32, i32* %6, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %133
  %137 = load %17*, %17** %10, align 8
  %138 = load i64, i64* %18, align 8
  %139 = call i64 @rrddim_set(%17* %137, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i32 0, i32 0), i64 %138)
  br label %140

140:                                              ; preds = %136, %133
  %141 = load i32, i32* %7, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %147

143:                                              ; preds = %140
  %144 = load %17*, %17** %10, align 8
  %145 = load i64, i64* %18, align 8
  %146 = call i64 @rrddim_set(%17* %144, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i32 0, i32 0), i64 %145)
  br label %147

147:                                              ; preds = %143, %140
  %148 = load i32, i32* %8, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %147
  %151 = load %17*, %17** %10, align 8
  %152 = load i64, i64* %18, align 8
  %153 = call i64 @rrddim_set(%17* %151, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @82, i32 0, i32 0), i64 %152)
  br label %154

154:                                              ; preds = %150, %147
  %155 = load i32, i32* %9, align 4
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %161

157:                                              ; preds = %154
  %158 = load %17*, %17** %10, align 8
  %159 = load i64, i64* %18, align 8
  %160 = call i64 @rrddim_set(%17* %158, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @83, i32 0, i32 0), i64 %159)
  br label %161

161:                                              ; preds = %157, %154
  %162 = load i64, i64* %19, align 8
  %163 = icmp ne i64 %162, 0
  br i1 %163, label %172, label %164

164:                                              ; preds = %161
  %165 = load %17*, %17** %10, align 8
  %166 = getelementptr inbounds %17, %17* %165, i32 0, i32 35
  %167 = call i32 @now_realtime_timeval(%18* %166)
  %168 = load i64, i64* %4, align 8
  %169 = load %17*, %17** %10, align 8
  %170 = getelementptr inbounds %17, %17* %169, i32 0, i32 35
  %171 = getelementptr inbounds %18, %18* %170, i32 0, i32 1
  store i64 %168, i64* %171, align 8
  br label %172

172:                                              ; preds = %164, %161
  %173 = load %17*, %17** %10, align 8
  %174 = getelementptr inbounds %17, %17* %173, i32 0, i32 49
  %175 = load %21*, %21** %174, align 8
  store %21* %175, %21** %21, align 8
  br label %176

176:                                              ; preds = %187, %172
  %177 = load %21*, %21** %21, align 8
  %178 = icmp ne %21* %177, null
  br i1 %178, label %179, label %191

179:                                              ; preds = %176
  %180 = load %17*, %17** %10, align 8
  %181 = getelementptr inbounds %17, %17* %180, i32 0, i32 35
  %182 = getelementptr inbounds %18, %18* %181, i32 0, i32 0
  %183 = load i64, i64* %182, align 8
  %184 = load %21*, %21** %21, align 8
  %185 = getelementptr inbounds %21, %21* %184, i32 0, i32 16
  %186 = getelementptr inbounds %18, %18* %185, i32 0, i32 0
  store i64 %183, i64* %186, align 8
  br label %187

187:                                              ; preds = %179
  %188 = load %21*, %21** %21, align 8
  %189 = getelementptr inbounds %21, %21* %188, i32 0, i32 24
  %190 = load %21*, %21** %189, align 16
  store %21* %190, %21** %21, align 8
  br label %176

191:                                              ; preds = %176
  %192 = load %17*, %17** %10, align 8
  call void @rrdset_done(%17* %192)
  br label %193

193:                                              ; preds = %191
  %194 = load i64, i64* %19, align 8
  %195 = add i64 %194, 1
  store i64 %195, i64* %19, align 8
  br label %115

196:                                              ; preds = %115
  %197 = bitcast i64* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %197) #10
  %198 = load i64, i64* %17, align 8
  store i64 %198, i64* %22, align 8
  %199 = load i64, i64* %17, align 8
  %200 = load %17*, %17** %10, align 8
  %201 = getelementptr inbounds %17, %17* %200, i32 0, i32 12
  %202 = load i32, i32* %201, align 16
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %199, %203
  %205 = mul nsw i64 %204, 1000000
  %206 = load i64, i64* %3, align 8
  %207 = sdiv i64 %205, %206
  store i64 %207, i64* %17, align 8
  %208 = load %0*, %0** @stderr, align 8
  %209 = load i64, i64* %22, align 8
  %210 = mul i64 %209, 10
  %211 = load i64, i64* %17, align 8
  %212 = mul nsw i64 %211, 10
  %213 = load i64, i64* %3, align 8
  %214 = load i64, i64* %4, align 8
  %215 = call i32 (%0*, i8*, ...) @fprintf(%0* %208, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @85, i32 0, i32 0), i64 %210, i64 %212, i64 %213, i64 %214)
  %216 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %216) #10
  store i32 0, i32* %23, align 4
  %217 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %217) #10
  %218 = bitcast x86_fp80* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %218) #10
  %219 = bitcast x86_fp80* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %219) #10
  store i64 0, i64* %19, align 8
  br label %220

220:                                              ; preds = %333, %196
  %221 = load i64, i64* %19, align 8
  %222 = load %17*, %17** %10, align 8
  %223 = getelementptr inbounds %17, %17* %222, i32 0, i32 23
  %224 = load i64, i64* %223, align 8
  %225 = icmp ult i64 %221, %224
  br i1 %225, label %226, label %336

226:                                              ; preds = %220
  %227 = load %0*, %0** @stderr, align 8
  %228 = load i64, i64* %19, align 8
  %229 = load i64, i64* %22, align 8
  %230 = load i64, i64* %19, align 8
  %231 = load i64, i64* %17, align 8
  %232 = mul i64 %230, %231
  %233 = add i64 %229, %232
  %234 = load i64, i64* %17, align 8
  %235 = load i64, i64* %4, align 8
  %236 = sub nsw i64 1000000, %235
  %237 = mul nsw i64 %234, %236
  %238 = sdiv i64 %237, 1000000
  %239 = add i64 %233, %238
  %240 = mul i64 %239, 10
  %241 = call i32 (%0*, i8*, ...) @fprintf(%0* %227, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @86, i32 0, i32 0), i64 %228, i64 %240)
  %242 = load %17*, %17** %10, align 8
  %243 = getelementptr inbounds %17, %17* %242, i32 0, i32 49
  %244 = load %21*, %21** %243, align 8
  store %21* %244, %21** %21, align 8
  br label %245

245:                                              ; preds = %328, %226
  %246 = load %21*, %21** %21, align 8
  %247 = icmp ne %21* %246, null
  br i1 %247, label %248, label %332

248:                                              ; preds = %245
  %249 = load %21*, %21** %21, align 8
  %250 = getelementptr inbounds %21, %21* %249, i32 0, i32 31
  %251 = load i64, i64* %19, align 8
  %252 = getelementptr inbounds [0 x i32], [0 x i32]* %250, i64 0, i64 %251
  %253 = load i32, i32* %252, align 4
  store i32 %253, i32* %24, align 4
  %254 = load i32, i32* %24, align 4
  %255 = call x86_fp80 @unpack_storage_number(i32 %254)
  store x86_fp80 %255, x86_fp80* %25, align 16
  %256 = load %0*, %0** @stderr, align 8
  %257 = load %21*, %21** %21, align 8
  %258 = getelementptr inbounds %21, %21* %257, i32 0, i32 1
  %259 = load i8*, i8** %258, align 8
  %260 = load x86_fp80, x86_fp80* %25, align 16
  %261 = load i32, i32* %24, align 4
  %262 = call i32 (%0*, i8*, ...) @fprintf(%0* %256, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @87, i32 0, i32 0), i8* %259, x86_fp80 %260, i32 %261)
  %263 = load %21*, %21** %21, align 8
  %264 = load %21*, %21** %13, align 8
  %265 = icmp eq %21* %263, %264
  br i1 %265, label %266, label %274

266:                                              ; preds = %248
  %267 = load i64, i64* %22, align 8
  %268 = load i64, i64* %19, align 8
  %269 = add i64 %268, 1
  %270 = load i64, i64* %17, align 8
  %271 = mul i64 %269, %270
  %272 = add i64 %267, %271
  %273 = uitofp i64 %272 to x86_fp80
  store x86_fp80 %273, x86_fp80* %26, align 16
  br label %316

274:                                              ; preds = %248
  %275 = load %21*, %21** %21, align 8
  %276 = load %21*, %21** %14, align 8
  %277 = icmp eq %21* %275, %276
  br i1 %277, label %278, label %292

278:                                              ; preds = %274
  %279 = load i64, i64* %19, align 8
  %280 = icmp ne i64 %279, 0
  br i1 %280, label %281, label %283

281:                                              ; preds = %278
  %282 = load i64, i64* %17, align 8
  br label %289

283:                                              ; preds = %278
  %284 = load i64, i64* %17, align 8
  %285 = load i64, i64* %4, align 8
  %286 = sub nsw i64 1000000, %285
  %287 = mul nsw i64 %284, %286
  %288 = sdiv i64 %287, 1000000
  br label %289

289:                                              ; preds = %283, %281
  %290 = phi i64 [ %282, %281 ], [ %288, %283 ]
  %291 = sitofp i64 %290 to x86_fp80
  store x86_fp80 %291, x86_fp80* %26, align 16
  br label %315

292:                                              ; preds = %274
  %293 = load %21*, %21** %21, align 8
  %294 = load %21*, %21** %15, align 8
  %295 = icmp eq %21* %293, %294
  br i1 %295, label %296, label %302

296:                                              ; preds = %292
  %297 = load i64, i64* %22, align 8
  %298 = load i64, i64* %20, align 8
  %299 = udiv i64 %297, %298
  %300 = udiv i64 %299, 10
  %301 = uitofp i64 %300 to x86_fp80
  store x86_fp80 %301, x86_fp80* %26, align 16
  br label %314

302:                                              ; preds = %292
  %303 = load %21*, %21** %21, align 8
  %304 = load %21*, %21** %16, align 8
  %305 = icmp eq %21* %303, %304
  br i1 %305, label %306, label %312

306:                                              ; preds = %302
  %307 = load i64, i64* %22, align 8
  %308 = load i64, i64* %20, align 8
  %309 = udiv i64 %307, %308
  %310 = udiv i64 %309, 10
  %311 = uitofp i64 %310 to x86_fp80
  store x86_fp80 %311, x86_fp80* %26, align 16
  br label %313

312:                                              ; preds = %302
  store x86_fp80 0xK00000000000000000000, x86_fp80* %26, align 16
  br label %313

313:                                              ; preds = %312, %306
  br label %314

314:                                              ; preds = %313, %296
  br label %315

315:                                              ; preds = %314, %289
  br label %316

316:                                              ; preds = %315, %266
  %317 = load x86_fp80, x86_fp80* %26, align 16
  %318 = load x86_fp80, x86_fp80* %25, align 16
  %319 = fcmp oeq x86_fp80 %317, %318
  br i1 %319, label %320, label %323

320:                                              ; preds = %316
  %321 = load %0*, %0** @stderr, align 8
  %322 = call i32 (%0*, i8*, ...) @fprintf(%0* %321, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @88, i32 0, i32 0))
  br label %327

323:                                              ; preds = %316
  %324 = load %0*, %0** @stderr, align 8
  %325 = load x86_fp80, x86_fp80* %26, align 16
  %326 = call i32 (%0*, i8*, ...) @fprintf(%0* %324, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @89, i32 0, i32 0), x86_fp80 %325)
  store i32 1, i32* %23, align 4
  br label %327

327:                                              ; preds = %323, %320
  br label %328

328:                                              ; preds = %327
  %329 = load %21*, %21** %21, align 8
  %330 = getelementptr inbounds %21, %21* %329, i32 0, i32 24
  %331 = load %21*, %21** %330, align 16
  store %21* %331, %21** %21, align 8
  br label %245

332:                                              ; preds = %245
  br label %333

333:                                              ; preds = %332
  %334 = load i64, i64* %19, align 8
  %335 = add i64 %334, 1
  store i64 %335, i64* %19, align 8
  br label %220

336:                                              ; preds = %220
  %337 = load i32, i32* %23, align 4
  %338 = icmp ne i32 %337, 0
  br i1 %338, label %339, label %344

339:                                              ; preds = %336
  %340 = load %0*, %0** @stderr, align 8
  %341 = load i64, i64* %3, align 8
  %342 = load i64, i64* %4, align 8
  %343 = call i32 (%0*, i8*, ...) @fprintf(%0* %340, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @90, i32 0, i32 0), i64 %341, i64 %342)
  br label %344

344:                                              ; preds = %339, %336
  %345 = load i32, i32* %23, align 4
  %346 = bitcast x86_fp80* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %346) #10
  %347 = bitcast x86_fp80* %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %347) #10
  %348 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %348) #10
  %349 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %349) #10
  %350 = bitcast i64* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %350) #10
  %351 = bitcast %21** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %351) #10
  %352 = bitcast i64* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %352) #10
  %353 = bitcast i64* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %353) #10
  %354 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %354) #10
  %355 = bitcast i64* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %355) #10
  %356 = bitcast %21** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %356) #10
  %357 = bitcast %21** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %357) #10
  %358 = bitcast %21** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %358) #10
  %359 = bitcast %21** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %359) #10
  %360 = bitcast %17** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %360) #10
  %361 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %361) #10
  %362 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %362) #10
  %363 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %363) #10
  %364 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %364) #10
  %365 = bitcast [101 x i8]* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 101, i8* %365) #10
  ret i32 %345
}

declare dso_local i32 @now_realtime_timeval(%18*) #2

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.expect.i64(i64, i64) #8

; Function Attrs: nounwind
declare dso_local x86_fp80 @powl(x86_fp80, x86_fp80) #5

; Function Attrs: nounwind uwtable
define internal i32 @139() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca x86_fp80, align 16
  %5 = alloca i32, align 4
  %6 = alloca x86_fp80, align 16
  %7 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #10
  store i32 0, i32* %2, align 4
  br label %8

8:                                                ; preds = %43, %0
  %9 = load i32, i32* %2, align 4
  %10 = icmp ult i32 %9, 7
  br i1 %10, label %11, label %46

11:                                               ; preds = %8
  %12 = load i32, i32* %2, align 4
  %13 = shl i32 %12, 24
  %14 = and i32 %13, 16777216
  %15 = load i32, i32* %2, align 4
  %16 = shl i32 %15, 24
  %17 = and i32 %16, 33554432
  %18 = or i32 %14, %17
  %19 = load i32, i32* %2, align 4
  %20 = shl i32 %19, 24
  %21 = and i32 %20, 67108864
  %22 = or i32 %18, %21
  %23 = load i32, i32* %2, align 4
  %24 = shl i32 %23, 24
  %25 = icmp ne i32 %22, %24
  br i1 %25, label %26, label %42

26:                                               ; preds = %11
  %27 = load %0*, %0** @stderr, align 8
  %28 = load i32, i32* %2, align 4
  %29 = shl i32 %28, 24
  %30 = load i32, i32* %2, align 4
  %31 = shl i32 %30, 24
  %32 = and i32 %31, 16777216
  %33 = load i32, i32* %2, align 4
  %34 = shl i32 %33, 24
  %35 = and i32 %34, 33554432
  %36 = or i32 %32, %35
  %37 = load i32, i32* %2, align 4
  %38 = shl i32 %37, 24
  %39 = and i32 %38, 67108864
  %40 = or i32 %36, %39
  %41 = call i32 (%0*, i8*, ...) @fprintf(%0* %27, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @91, i32 0, i32 0), i32 %29, i32 %40)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %91

42:                                               ; preds = %11
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* %2, align 4
  %45 = add i32 %44, 1
  store i32 %45, i32* %2, align 4
  br label %8

46:                                               ; preds = %8
  store i32 16777216, i32* %2, align 4
  %47 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %47) #10
  store x86_fp80 0xK00000000000000000000, x86_fp80* %4, align 16
  %48 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %48) #10
  %49 = load x86_fp80, x86_fp80* %4, align 16
  %50 = load i32, i32* %2, align 4
  %51 = call i32 @pack_storage_number(x86_fp80 %49, i32 %50)
  store i32 %51, i32* %5, align 4
  %52 = bitcast x86_fp80* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %52) #10
  %53 = load i32, i32* %5, align 4
  %54 = call x86_fp80 @unpack_storage_number(i32 %53)
  store x86_fp80 %54, x86_fp80* %6, align 16
  %55 = load i32, i32* %5, align 4
  %56 = and i32 %55, 16777216
  %57 = load i32, i32* %5, align 4
  %58 = and i32 %57, 33554432
  %59 = or i32 %56, %58
  %60 = load i32, i32* %5, align 4
  %61 = and i32 %60, 67108864
  %62 = or i32 %59, %61
  %63 = load i32, i32* %2, align 4
  %64 = icmp ne i32 %62, %63
  br i1 %64, label %65, label %77

65:                                               ; preds = %46
  %66 = load %0*, %0** @stderr, align 8
  %67 = load i32, i32* %2, align 4
  %68 = load i32, i32* %5, align 4
  %69 = and i32 %68, 16777216
  %70 = load i32, i32* %5, align 4
  %71 = and i32 %70, 33554432
  %72 = or i32 %69, %71
  %73 = load i32, i32* %5, align 4
  %74 = and i32 %73, 67108864
  %75 = or i32 %72, %74
  %76 = call i32 (%0*, i8*, ...) @fprintf(%0* %66, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @92, i32 0, i32 0), i32 %67, i32 %75)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %87

77:                                               ; preds = %46
  %78 = load x86_fp80, x86_fp80* %4, align 16
  %79 = load x86_fp80, x86_fp80* %6, align 16
  %80 = fcmp une x86_fp80 %78, %79
  br i1 %80, label %81, label %86

81:                                               ; preds = %77
  %82 = load %0*, %0** @stderr, align 8
  %83 = load x86_fp80, x86_fp80* %4, align 16
  %84 = load x86_fp80, x86_fp80* %6, align 16
  %85 = call i32 (%0*, i8*, ...) @fprintf(%0* %82, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @93, i32 0, i32 0), x86_fp80 %83, x86_fp80 %84)
  store i32 1, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %87

86:                                               ; preds = %77
  store i32 0, i32* %1, align 4
  store i32 1, i32* %3, align 4
  br label %87

87:                                               ; preds = %86, %81, %65
  %88 = bitcast x86_fp80* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %88) #10
  %89 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %89) #10
  %90 = bitcast x86_fp80* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %90) #10
  br label %91

91:                                               ; preds = %87, %26
  %92 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %92) #10
  %93 = load i32, i32* %1, align 4
  ret i32 %93
}

declare dso_local i32 @__netdata_rwlock_tryrdlock(%32*) #2

declare dso_local i32 @__netdata_rwlock_unlock(%32*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @140(%17* %0) #3 {
  %2 = alloca i64, align 8
  %3 = alloca %17*, align 8
  %4 = alloca %21*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store %17* %0, %17** %3, align 8
  %7 = load %17*, %17** %3, align 8
  %8 = getelementptr inbounds %17, %17* %7, i32 0, i32 19
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 5
  br i1 %10, label %11, label %64

11:                                               ; preds = %1
  %12 = bitcast %21** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %13 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  store i64 0, i64* %5, align 8
  %14 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #10
  %15 = load %17*, %17** %3, align 8
  %16 = getelementptr inbounds %17, %17* %15, i32 0, i32 22
  %17 = call i32 @__netdata_rwlock_tryrdlock(%32* %16)
  store i32 %17, i32* %6, align 4
  %18 = load %17*, %17** %3, align 8
  %19 = getelementptr inbounds %17, %17* %18, i32 0, i32 49
  %20 = load %21*, %21** %19, align 8
  store %21* %20, %21** %4, align 8
  br label %21

21:                                               ; preds = %48, %11
  %22 = load %21*, %21** %4, align 8
  %23 = icmp ne %21* %22, null
  br i1 %23, label %24, label %52

24:                                               ; preds = %21
  %25 = load i64, i64* %5, align 8
  %26 = load %21*, %21** %4, align 8
  %27 = getelementptr inbounds %21, %21* %26, i32 0, i32 12
  %28 = load %22*, %22** %27, align 16
  %29 = getelementptr inbounds %22, %22* %28, i32 0, i32 2
  %30 = getelementptr inbounds %26, %26* %29, i32 0, i32 4
  %31 = load i64 (%21*)*, i64 (%21*)** %30, align 8
  %32 = load %21*, %21** %4, align 8
  %33 = call i64 %31(%21* %32)
  %34 = icmp sgt i64 %25, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %24
  %36 = load i64, i64* %5, align 8
  br label %46

37:                                               ; preds = %24
  %38 = load %21*, %21** %4, align 8
  %39 = getelementptr inbounds %21, %21* %38, i32 0, i32 12
  %40 = load %22*, %22** %39, align 16
  %41 = getelementptr inbounds %22, %22* %40, i32 0, i32 2
  %42 = getelementptr inbounds %26, %26* %41, i32 0, i32 4
  %43 = load i64 (%21*)*, i64 (%21*)** %42, align 8
  %44 = load %21*, %21** %4, align 8
  %45 = call i64 %43(%21* %44)
  br label %46

46:                                               ; preds = %37, %35
  %47 = phi i64 [ %36, %35 ], [ %45, %37 ]
  store i64 %47, i64* %5, align 8
  br label %48

48:                                               ; preds = %46
  %49 = load %21*, %21** %4, align 8
  %50 = getelementptr inbounds %21, %21* %49, i32 0, i32 24
  %51 = load %21*, %21** %50, align 16
  store %21* %51, %21** %4, align 8
  br label %21

52:                                               ; preds = %21
  %53 = load i32, i32* %6, align 4
  %54 = icmp eq i32 0, %53
  br i1 %54, label %55, label %59

55:                                               ; preds = %52
  %56 = load %17*, %17** %3, align 8
  %57 = getelementptr inbounds %17, %17* %56, i32 0, i32 22
  %58 = call i32 @__netdata_rwlock_unlock(%32* %57)
  br label %59

59:                                               ; preds = %55, %52
  %60 = load i64, i64* %5, align 8
  store i64 %60, i64* %2, align 8
  %61 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %61) #10
  %62 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #10
  %63 = bitcast %21** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #10
  br label %69

64:                                               ; preds = %1
  %65 = load %17*, %17** %3, align 8
  %66 = getelementptr inbounds %17, %17* %65, i32 0, i32 34
  %67 = getelementptr inbounds %18, %18* %66, i32 0, i32 0
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %2, align 8
  br label %69

69:                                               ; preds = %64, %59
  %70 = load i64, i64* %2, align 8
  ret i64 %70
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #9

declare dso_local i8* @rrdcalc_status2string(i32) #2

declare dso_local i32 @rrdset_set_name(%17*, i8*) #2

declare dso_local i32 @rrddim_set_name(%17*, %21*, i8*) #2

declare dso_local void @health_api_v1_chart_variables2json(%17*, %10*) #2

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable willreturn }
attributes #8 = { nounwind readnone willreturn }
attributes #9 = { argmemonly nounwind willreturn writeonly }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
