; ModuleID = 'basic_functions-strip-renamed.bc'
source_filename = "/home/travis/build/orestisfl/compilation-database/build/php-src/ext/standard/basic_functions.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i8*, i64, i8, i8 }
%1 = type { %2*, %1*, %29*, %4*, %29, %1*, %7*, i8**, %29* }
%2 = type { i8*, %3, %3, %3, i32, i32, i8, i8, i8, i8 }
%3 = type { i32 }
%4 = type { %5 }
%5 = type { i8, [3 x i8], i32, %28*, %6*, %4*, i32, i32, %25*, i32*, i32, %2*, i32, i32, %28**, i32, i32, %26*, %27*, %7*, %28*, i32, i32, %28*, i32, i32, %29*, i32, i8**, [6 x i8*] }
%6 = type { i8, %28*, %6*, i32, i32, i32, i32, %29*, %29*, %29*, %7, %7, %7, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %4*, %12, %15* (%6*)*, %14* (%6*, %29*, i32)*, i32 (%6*, %6*)*, %4* (%6*, %28*)*, i32 (%29*, i8**, i64*, %17*)*, i32 (%29*, %6*, i8*, i64, %18*)*, i32, i32, %6**, %6**, %19**, %21**, %23 }
%7 = type { %8, %10, i32, %11*, i32, i32, i32, i32, i64, void (%29*)* }
%8 = type { i32, %9 }
%9 = type { i32 }
%10 = type { i32 }
%11 = type { %29, i64, %28* }
%12 = type { %13*, %4*, %4*, %4*, %4*, %4*, %4* }
%13 = type { void (%14*)*, i32 (%14*)*, %29* (%14*)*, void (%14*, %29*)*, void (%14*)*, void (%14*)*, void (%14*)* }
%14 = type { %15, %29, %13*, i64 }
%15 = type { %8, i32, %6*, %16*, %7*, [1 x %29] }
%16 = type { i32, void (%15*)*, void (%15*)*, %15* (%29*)*, %29* (%29*, %29*, i32, i8**, %29*)*, void (%29*, %29*, %29*, i8**)*, %29* (%29*, %29*, i32, %29*)*, void (%29*, %29*, %29*)*, %29* (%29*, %29*, i32, i8**)*, %29* (%29*, %29*)*, void (%29*, %29*)*, i32 (%29*, %29*, i32, i8**)*, void (%29*, %29*, i8**)*, i32 (%29*, %29*, i32)*, void (%29*, %29*)*, %7* (%29*)*, %4* (%15**, %28*, %29*)*, i32 (%28*, %15*, %1*, %29*)*, %4* (%15*)*, %28* (%15*)*, i32 (%29*, %29*)*, i32 (%29*, %29*, i32)*, i32 (%29*, i64*)*, %7* (%29*, i32*)*, i32 (%29*, %6**, %4**, %15**)*, %7* (%29*, %29**, i32*)*, i32 (i8, %29*, %29*, %29*)*, i32 (%29*, %29*, %29*)* }
%17 = type opaque
%18 = type opaque
%19 = type { %20*, %28*, i32 }
%20 = type { %28*, %6*, %28* }
%21 = type { %20*, %22* }
%22 = type { %6* }
%23 = type { %24 }
%24 = type { %28*, i32, i32, %28* }
%25 = type { %28*, i64, i8, i8 }
%26 = type { i32, i32, i32 }
%27 = type { i32, i32, i32, i32 }
%28 = type { %8, i64, i64, [1 x i8] }
%29 = type { %30, %31, %32 }
%30 = type { i64 }
%31 = type { i32 }
%32 = type { i32 }
%33 = type { i8*, i8*, i8*, i8 }
%34 = type { i16, i32, i8, i8, %35*, %33*, i8*, %36*, i32 (i32, i32)*, i32 (i32, i32)*, i32 (i32, i32)*, i32 (i32, i32)*, void (%34*)*, i8*, i64, i8*, void (i8*)*, void (i8*)*, i32 ()*, i32, i8, i8*, i32, i8* }
%35 = type { %28*, i32 (%35*, %28*, i8*, i8*, i8*, i32)*, i8*, i8*, i8*, %28*, %28*, void (%35*, i32)*, i32, i32, i32, i32 }
%36 = type { i8*, {}*, %0*, i32, i32 }
%37 = type { %7*, %7, %29, i8*, %28*, i8, i8*, [256 x i8], i64, [40 x i8], %38, %39, %38, %39, %40*, %29, i64, i64, i64, i64, i8*, i8*, %42, %42, [625 x i32], i32*, i32, i8, i64, i8*, %6*, i32, %45, %47, %49, %7, %49, %7, i8*, i64, %7*, i32 }
%38 = type { i64, %29, %29*, %29*, %15*, i8, i32 }
%39 = type { i8, %4*, %6*, %6*, %15* }
%40 = type { %41*, %41*, i64, i64, void (i8*)*, i8, %41* }
%41 = type { %41*, %41*, [1 x i8] }
%42 = type { %43 }
%43 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %44, %44, %44, [3 x i64] }
%44 = type { i64, i64 }
%45 = type { %46*, i32 }
%46 = type opaque
%47 = type { %48*, i32 }
%48 = type opaque
%49 = type { %50, %50, %50, %50, %50, %50, %50, i32, i8*, i32, i32, %50, i32, i32, %7* }
%50 = type { %28*, i64 }
%51 = type { %52*, i8*, i32 }
%52 = type { %53* (%51*, i8*, i8*, i32, %28**, %63*)*, i32 (%51*, %53*)*, i32 (%51*, %53*, %42*)*, i32 (%51*, i8*, i32, %42*, %63*)*, %53* (%51*, i8*, i8*, i32, %28**, %63*)*, i8*, i32 (%51*, i8*, i32, %63*)*, i32 (%51*, i8*, i8*, i32, %63*)*, i32 (%51*, i8*, i32, i32, %63*)*, i32 (%51*, i8*, i32, %63*)*, i32 (%51*, i8*, i32, i8*, %63*)* }
%53 = type { %54*, i8*, %55, %55, %51*, i8*, %29, i8, i8, [16 x i8], i32, %62*, %60*, i8*, %62*, i64, i8*, i64, i64, i64, i64, %53* }
%54 = type { i64 (%53*, i8*, i64)*, i64 (%53*, i8*, i64)*, i32 (%53*, i32)*, i32 (%53*)*, i8*, i32 (%53*, i64, i32, i64*)*, i32 (%53*, i32, i8**)*, i32 (%53*, %42*)*, i32 (%53*, i32, i32, i8*)* }
%55 = type { %56*, %56*, %53* }
%56 = type { %57*, %29, %56*, %56*, i32, %55*, %58, %62* }
%57 = type { i32 (%53*, %56*, %58*, %58*, i64*, i32)*, void (%56*)*, i8* }
%58 = type { %59*, %59* }
%59 = type { %59*, %59*, %58*, i8*, i64, i8, i8, i32 }
%60 = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %61*, %60*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%61 = type { %61*, %60*, i32 }
%62 = type { %8, i32, i32, i8* }
%63 = type { %64*, %29, %62* }
%64 = type { void (%63*, i32, i32, i8*, i32, i64, i64, i8*)*, void (%64*)*, %29, i32, i64, i64 }
%65 = type { i32, i64, i64, i64, i8*, i8*, i8*, %63*, %7*, %7*, %7*, i32, %66, i8*, i64 }
%66 = type { i8*, i8**, i32, i32, i8** }
%67 = type { %29, %29, [32 x %7*], %7**, %7**, %7, %7, [1 x %68]*, i32, i32, %7*, %7*, %7*, %29*, %29*, %70*, %1*, %6*, i64, i32, %7*, %4*, i8, i8, i8, i8, i64, %7, %7, i32, %29, %29, %71, %71, %71, i32, %6*, i64, i32, %7*, %7*, %35*, %72, %15*, %15*, %2*, [3 x %2], %34*, i8, i8, i64, i32, i32, %73*, [16 x %73], i8*, i16, %4, %2, i8, [6 x i8*] }
%68 = type { [8 x i64], i32, %69 }
%69 = type { [16 x i64] }
%70 = type { %29*, %29*, %70* }
%71 = type { i32, i32, i32, i8* }
%72 = type { %15**, i32, i32, i32 }
%73 = type { %7*, i32 }
%74 = type { i8, i64, i8, i8*, i8*, i64, i64, i64, i8, i8, i8, i8, i64, i8, i8, i8, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %75, i8*, %7, i16, i8, i8, i8, %40, [6 x %29], i8, i8, i8, i8*, i8*, i8, i8, i64, [8 x i8], i8, i8, i8, i8, i8, i8, i32, i8*, i8*, i32, i8*, i8*, i8*, i8, i64, i64, i8, i8*, i64, i8*, i8, i8*, i8 }
%75 = type { i8*, i8* }
%76 = type { i8*, i8*, i32 (%76*)*, i32 (%76*)*, i32 ()*, i32 ()*, i64 (i8*, i64)*, void (i8*)*, %43* ()*, i8* (i8*, i64)*, void (i32, i8*, ...)*, i32 (%77*, i32, %78*)*, i32 (%78*)*, void (%77*, i8*)*, i64 (i8*, i64)*, i8* ()*, void (%29*)*, void (i8*, i32)*, double ()*, void ()*, i8*, void ()*, void (i32, i8*, %29*)*, i8*, i32, i32, i32 (i32*)*, i32 ()*, i32 (i32*)*, i32 (i32*)*, i32 (i32, i8*, i8**, i64, i64*)*, void (%7*)*, i32, i8*, %36*, i32 ()* }
%77 = type { i8*, i64 }
%78 = type { %40, i32, i8, i8*, i8* }
%79 = type { i8*, %80, %78, i64, i8, i8, %43, i8*, i8*, %7*, i64, i32, i8, double, %7, %29, %39 }
%80 = type { i8*, i8*, i8*, i64, i8*, i8*, %53*, i8*, i8, i8, i8, %81*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i8**, i32 }
%81 = type { i8*, i32, void ()*, void (i8*, i8*)* }
%82 = type { %8 }
%83 = type { i8, i8, i8, i8 }
%84 = type { i64, i64 }
%85 = type { i32, i32 }
%86 = type { i8*, i8**, i32, i8* }
%87 = type { i8*, i8**, i32 }
%88 = type { i32 }
%89 = type { i8*, i8*, i8*, i32 }
%90 = type { i8, i32, i8* }
%91 = type { %8, %29 }
%92 = type { i8, [3 x i8], i32, %28*, %6*, %4*, i32, i32, %25* }
%93 = type { i8, i8, i16 }
%94 = type { %29*, i32 }
%95 = type { %29*, i32, i32 }
%96 = type { i8*, i8*, i8*, i8*, i8* }
%97 = type { i32, i8*, i8*, i8*, i8*, i8*, i32, %71, %98, %99*, i32, %28*, i8*, i64, i8*, i64, i64 (i8**, i64*, i8*, i64)*, i64 (i8**, i64*, i8*, i64)*, %103*, void (i32, i32, i32, i8*)*, i8*, %104*, %105* }
%98 = type { i32, i32, i8**, i8**, i8 }
%99 = type { %100, i8*, %28*, i32, i8 }
%100 = type { %101 }
%101 = type { i8*, i32, %102, i64 (i8*, i8*, i64)*, i64 (i8*)*, void (i8*)* }
%102 = type { i64, i64, i8*, i8*, i8*, void (i8*)* }
%103 = type opaque
%104 = type { i16, i16, i32, [1 x %104*] }
%105 = type { i8*, i8*, %105* }
%106 = type { i32, i32, i8*, i8* }
%107 = type { i64, %28* }

@0 = private unnamed_addr constant [9 x i8] c"constant\00", align 1
@1 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1147, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@2 = private unnamed_addr constant [8 x i8] c"bin2hex\00", align 1
@3 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@4 = private unnamed_addr constant [8 x i8] c"hex2bin\00", align 1
@5 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@6 = private unnamed_addr constant [6 x i8] c"sleep\00", align 1
@7 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1115, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@8 = private unnamed_addr constant [7 x i8] c"usleep\00", align 1
@9 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1148, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@10 = private unnamed_addr constant [15 x i8] c"time_nanosleep\00", align 1
@11 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1115, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1116, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@12 = private unnamed_addr constant [17 x i8] c"time_sleep_until\00", align 1
@13 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1149, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@14 = private unnamed_addr constant [9 x i8] c"strptime\00", align 1
@15 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1149, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@16 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@17 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@18 = private unnamed_addr constant [9 x i8] c"wordwrap\00", align 1
@19 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1152, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1153, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1154, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@20 = private unnamed_addr constant [17 x i8] c"htmlspecialchars\00", align 1
@21 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1156, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1157, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1158, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@22 = private unnamed_addr constant [13 x i8] c"htmlentities\00", align 1
@23 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1156, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1157, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1158, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@24 = private unnamed_addr constant [19 x i8] c"html_entity_decode\00", align 1
@25 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1156, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1157, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@26 = private unnamed_addr constant [24 x i8] c"htmlspecialchars_decode\00", align 1
@27 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1156, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@28 = private unnamed_addr constant [27 x i8] c"get_html_translation_table\00", align 1
@29 = internal constant [4 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1159, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1156, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1157, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@30 = private unnamed_addr constant [5 x i8] c"sha1\00", align 1
@31 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1160, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@32 = private unnamed_addr constant [10 x i8] c"sha1_file\00", align 1
@33 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1160, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@34 = private unnamed_addr constant [4 x i8] c"md5\00", align 1
@35 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1160, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@36 = private unnamed_addr constant [9 x i8] c"md5_file\00", align 1
@37 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1160, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@38 = private unnamed_addr constant [6 x i8] c"crc32\00", align 1
@39 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@40 = private unnamed_addr constant [10 x i8] c"iptcparse\00", align 1
@41 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1162, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@42 = private unnamed_addr constant [10 x i8] c"iptcembed\00", align 1
@43 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1162, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1163, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1164, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@44 = private unnamed_addr constant [13 x i8] c"getimagesize\00", align 1
@45 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1165, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1166, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@46 = private unnamed_addr constant [23 x i8] c"getimagesizefromstring\00", align 1
@47 = private unnamed_addr constant [24 x i8] c"image_type_to_mime_type\00", align 1
@48 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1167, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@49 = private unnamed_addr constant [24 x i8] c"image_type_to_extension\00", align 1
@50 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1167, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1168, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@51 = private unnamed_addr constant [8 x i8] c"phpinfo\00", align 1
@52 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1169, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@53 = private unnamed_addr constant [11 x i8] c"phpversion\00", align 1
@54 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1170, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@55 = private unnamed_addr constant [11 x i8] c"phpcredits\00", align 1
@56 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1171, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@57 = private unnamed_addr constant [14 x i8] c"php_sapi_name\00", align 1
@58 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@59 = private unnamed_addr constant [10 x i8] c"php_uname\00", align 1
@60 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@61 = private unnamed_addr constant [22 x i8] c"php_ini_scanned_files\00", align 1
@62 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@63 = private unnamed_addr constant [20 x i8] c"php_ini_loaded_file\00", align 1
@64 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@65 = private unnamed_addr constant [10 x i8] c"strnatcmp\00", align 1
@66 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1173, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1174, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@67 = private unnamed_addr constant [14 x i8] c"strnatcasecmp\00", align 1
@68 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1173, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1174, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@69 = private unnamed_addr constant [13 x i8] c"substr_count\00", align 1
@70 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@71 = private unnamed_addr constant [7 x i8] c"strspn\00", align 1
@72 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1179, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1180, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1181, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@73 = private unnamed_addr constant [8 x i8] c"strcspn\00", align 1
@74 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1179, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1180, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1181, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@75 = private unnamed_addr constant [7 x i8] c"strtok\00", align 1
@76 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1182, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@77 = private unnamed_addr constant [11 x i8] c"strtoupper\00", align 1
@78 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@79 = private unnamed_addr constant [11 x i8] c"strtolower\00", align 1
@80 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@81 = private unnamed_addr constant [7 x i8] c"strpos\00", align 1
@82 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@83 = private unnamed_addr constant [8 x i8] c"stripos\00", align 1
@84 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@85 = private unnamed_addr constant [8 x i8] c"strrpos\00", align 1
@86 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@87 = private unnamed_addr constant [9 x i8] c"strripos\00", align 1
@88 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@89 = private unnamed_addr constant [7 x i8] c"strrev\00", align 1
@90 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@91 = private unnamed_addr constant [7 x i8] c"hebrev\00", align 1
@92 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1183, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@93 = private unnamed_addr constant [8 x i8] c"hebrevc\00", align 1
@94 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1183, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@95 = private unnamed_addr constant [6 x i8] c"nl2br\00", align 1
@96 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1184, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@97 = private unnamed_addr constant [9 x i8] c"basename\00", align 1
@98 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1186, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@99 = private unnamed_addr constant [8 x i8] c"dirname\00", align 1
@100 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1187, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@101 = private unnamed_addr constant [9 x i8] c"pathinfo\00", align 1
@102 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@103 = private unnamed_addr constant [13 x i8] c"stripslashes\00", align 1
@104 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@105 = private unnamed_addr constant [14 x i8] c"stripcslashes\00", align 1
@106 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@107 = private unnamed_addr constant [7 x i8] c"strstr\00", align 1
@108 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1189, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@109 = private unnamed_addr constant [8 x i8] c"stristr\00", align 1
@110 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1189, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@111 = private unnamed_addr constant [8 x i8] c"strrchr\00", align 1
@112 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@113 = private unnamed_addr constant [12 x i8] c"str_shuffle\00", align 1
@114 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@115 = private unnamed_addr constant [15 x i8] c"str_word_count\00", align 1
@116 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1190, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@117 = private unnamed_addr constant [10 x i8] c"str_split\00", align 1
@118 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1191, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@119 = private unnamed_addr constant [8 x i8] c"strpbrk\00", align 1
@120 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1192, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@121 = private unnamed_addr constant [15 x i8] c"substr_compare\00", align 1
@122 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1193, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1194, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@123 = private unnamed_addr constant [12 x i8] c"utf8_encode\00", align 1
@124 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@125 = private unnamed_addr constant [12 x i8] c"utf8_decode\00", align 1
@126 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@127 = private unnamed_addr constant [8 x i8] c"strcoll\00", align 1
@128 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1195, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1196, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@129 = private unnamed_addr constant [13 x i8] c"money_format\00", align 1
@130 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@131 = private unnamed_addr constant [7 x i8] c"substr\00", align 1
@132 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1180, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@133 = private unnamed_addr constant [15 x i8] c"substr_replace\00", align 1
@134 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1198, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1180, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@135 = private unnamed_addr constant [10 x i8] c"quotemeta\00", align 1
@136 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@137 = private unnamed_addr constant [8 x i8] c"ucfirst\00", align 1
@138 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@139 = private unnamed_addr constant [8 x i8] c"lcfirst\00", align 1
@140 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@141 = private unnamed_addr constant [8 x i8] c"ucwords\00", align 1
@142 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1199, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@143 = private unnamed_addr constant [6 x i8] c"strtr\00", align 1
@144 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1200, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1201, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@145 = private unnamed_addr constant [11 x i8] c"addslashes\00", align 1
@146 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@147 = private unnamed_addr constant [12 x i8] c"addcslashes\00", align 1
@148 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1190, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@149 = private unnamed_addr constant [6 x i8] c"rtrim\00", align 1
@150 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1202, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@151 = private unnamed_addr constant [12 x i8] c"str_replace\00", align 1
@152 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1203, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1198, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1204, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1205, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@153 = private unnamed_addr constant [13 x i8] c"str_ireplace\00", align 1
@154 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1203, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1198, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1204, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1205, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@155 = private unnamed_addr constant [11 x i8] c"str_repeat\00", align 1
@156 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1207, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@157 = private unnamed_addr constant [12 x i8] c"count_chars\00", align 1
@158 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@159 = private unnamed_addr constant [12 x i8] c"chunk_split\00", align 1
@160 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1208, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1209, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@161 = private unnamed_addr constant [5 x i8] c"trim\00", align 1
@162 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1202, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@163 = private unnamed_addr constant [6 x i8] c"ltrim\00", align 1
@164 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1202, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@165 = private unnamed_addr constant [11 x i8] c"strip_tags\00", align 1
@166 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1210, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@167 = private unnamed_addr constant [13 x i8] c"similar_text\00", align 1
@168 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1195, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1196, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1211, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@169 = private unnamed_addr constant [8 x i8] c"explode\00", align 1
@170 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1212, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1213, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@171 = private unnamed_addr constant [8 x i8] c"implode\00", align 1
@172 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1214, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1215, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@173 = private unnamed_addr constant [5 x i8] c"join\00", align 1
@174 = private unnamed_addr constant [10 x i8] c"setlocale\00", align 1
@175 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1216, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1217, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@176 = private unnamed_addr constant [11 x i8] c"localeconv\00", align 1
@177 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@178 = private unnamed_addr constant [12 x i8] c"nl_langinfo\00", align 1
@179 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1218, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@180 = private unnamed_addr constant [8 x i8] c"soundex\00", align 1
@181 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@182 = private unnamed_addr constant [12 x i8] c"levenshtein\00", align 1
@183 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1195, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1196, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1219, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1220, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1221, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@184 = private unnamed_addr constant [4 x i8] c"chr\00", align 1
@185 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1222, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@186 = private unnamed_addr constant [4 x i8] c"ord\00", align 1
@187 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1223, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@188 = private unnamed_addr constant [10 x i8] c"parse_str\00", align 1
@189 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1224, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1225, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@190 = private unnamed_addr constant [11 x i8] c"str_getcsv\00", align 1
@191 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1226, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1227, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1228, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@192 = private unnamed_addr constant [8 x i8] c"str_pad\00", align 1
@193 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1229, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1230, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1231, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@194 = private unnamed_addr constant [5 x i8] c"chop\00", align 1
@195 = private unnamed_addr constant [7 x i8] c"strchr\00", align 1
@196 = private unnamed_addr constant [8 x i8] c"sprintf\00", align 1
@197 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@198 = private unnamed_addr constant [7 x i8] c"printf\00", align 1
@199 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@200 = private unnamed_addr constant [8 x i8] c"vprintf\00", align 1
@201 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@202 = private unnamed_addr constant [9 x i8] c"vsprintf\00", align 1
@203 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@204 = private unnamed_addr constant [8 x i8] c"fprintf\00", align 1
@205 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@206 = private unnamed_addr constant [9 x i8] c"vfprintf\00", align 1
@207 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@208 = private unnamed_addr constant [7 x i8] c"sscanf\00", align 1
@209 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 1, i8 1 }], align 16
@210 = private unnamed_addr constant [7 x i8] c"fscanf\00", align 1
@211 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 1, i8 1 }], align 16
@212 = private unnamed_addr constant [10 x i8] c"parse_url\00", align 1
@213 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1235, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1236, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@214 = private unnamed_addr constant [10 x i8] c"urlencode\00", align 1
@215 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@216 = private unnamed_addr constant [10 x i8] c"urldecode\00", align 1
@217 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@218 = private unnamed_addr constant [13 x i8] c"rawurlencode\00", align 1
@219 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@220 = private unnamed_addr constant [13 x i8] c"rawurldecode\00", align 1
@221 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@222 = private unnamed_addr constant [17 x i8] c"http_build_query\00", align 1
@223 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1237, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1238, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1239, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1240, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@224 = private unnamed_addr constant [9 x i8] c"readlink\00", align 1
@225 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@226 = private unnamed_addr constant [9 x i8] c"linkinfo\00", align 1
@227 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@228 = private unnamed_addr constant [8 x i8] c"symlink\00", align 1
@229 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1241, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @230, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@230 = private unnamed_addr constant [5 x i8] c"link\00", align 1
@231 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1241, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @230, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@232 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@233 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@234 = private unnamed_addr constant [5 x i8] c"exec\00", align 1
@235 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1244, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1245, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@236 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@237 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1245, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@238 = private unnamed_addr constant [15 x i8] c"escapeshellcmd\00", align 1
@239 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@240 = private unnamed_addr constant [15 x i8] c"escapeshellarg\00", align 1
@241 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@242 = private unnamed_addr constant [9 x i8] c"passthru\00", align 1
@243 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1245, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@244 = private unnamed_addr constant [11 x i8] c"shell_exec\00", align 1
@245 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1247, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@246 = private unnamed_addr constant [10 x i8] c"proc_open\00", align 1
@247 = internal constant [7 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1248, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1249, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1250, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1251, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1252, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@248 = private unnamed_addr constant [11 x i8] c"proc_close\00", align 1
@249 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1253, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@250 = private unnamed_addr constant [15 x i8] c"proc_terminate\00", align 1
@251 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1253, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1254, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@252 = private unnamed_addr constant [16 x i8] c"proc_get_status\00", align 1
@253 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1253, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@254 = private unnamed_addr constant [10 x i8] c"proc_nice\00", align 1
@255 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1255, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@256 = private unnamed_addr constant [5 x i8] c"rand\00", align 1
@257 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @896, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @898, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@258 = private unnamed_addr constant [6 x i8] c"srand\00", align 1
@259 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1256, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@260 = private unnamed_addr constant [11 x i8] c"getrandmax\00", align 1
@261 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@262 = private unnamed_addr constant [8 x i8] c"mt_rand\00", align 1
@263 = private unnamed_addr constant [9 x i8] c"mt_srand\00", align 1
@264 = private unnamed_addr constant [14 x i8] c"mt_getrandmax\00", align 1
@265 = private unnamed_addr constant [13 x i8] c"random_bytes\00", align 1
@266 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@267 = private unnamed_addr constant [11 x i8] c"random_int\00", align 1
@268 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @896, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @898, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@269 = private unnamed_addr constant [14 x i8] c"getservbyname\00", align 1
@270 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1257, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@271 = private unnamed_addr constant [14 x i8] c"getservbyport\00", align 1
@272 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1259, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@273 = private unnamed_addr constant [15 x i8] c"getprotobyname\00", align 1
@274 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1260, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@275 = private unnamed_addr constant [17 x i8] c"getprotobynumber\00", align 1
@276 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1261, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@277 = private unnamed_addr constant [9 x i8] c"getmyuid\00", align 1
@278 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@279 = private unnamed_addr constant [9 x i8] c"getmygid\00", align 1
@280 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@281 = private unnamed_addr constant [9 x i8] c"getmypid\00", align 1
@282 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@283 = private unnamed_addr constant [11 x i8] c"getmyinode\00", align 1
@284 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@285 = private unnamed_addr constant [11 x i8] c"getlastmod\00", align 1
@286 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@287 = private unnamed_addr constant [14 x i8] c"base64_decode\00", align 1
@288 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1262, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@289 = private unnamed_addr constant [14 x i8] c"base64_encode\00", align 1
@290 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@291 = private unnamed_addr constant [14 x i8] c"password_hash\00", align 1
@292 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1089, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1263, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@293 = private unnamed_addr constant [18 x i8] c"password_get_info\00", align 1
@294 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1264, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@295 = private unnamed_addr constant [22 x i8] c"password_needs_rehash\00", align 1
@296 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1264, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1263, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@297 = private unnamed_addr constant [16 x i8] c"password_verify\00", align 1
@298 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1089, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1264, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@299 = private unnamed_addr constant [17 x i8] c"convert_uuencode\00", align 1
@300 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@301 = private unnamed_addr constant [17 x i8] c"convert_uudecode\00", align 1
@302 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@303 = private unnamed_addr constant [4 x i8] c"abs\00", align 1
@304 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@305 = private unnamed_addr constant [5 x i8] c"ceil\00", align 1
@306 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@307 = private unnamed_addr constant [6 x i8] c"floor\00", align 1
@308 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@309 = private unnamed_addr constant [6 x i8] c"round\00", align 1
@310 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1266, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@311 = private unnamed_addr constant [4 x i8] c"sin\00", align 1
@312 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@313 = private unnamed_addr constant [4 x i8] c"cos\00", align 1
@314 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@315 = private unnamed_addr constant [4 x i8] c"tan\00", align 1
@316 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@317 = private unnamed_addr constant [5 x i8] c"asin\00", align 1
@318 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@319 = private unnamed_addr constant [5 x i8] c"acos\00", align 1
@320 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@321 = private unnamed_addr constant [5 x i8] c"atan\00", align 1
@322 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@323 = private unnamed_addr constant [6 x i8] c"atanh\00", align 1
@324 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@325 = private unnamed_addr constant [6 x i8] c"atan2\00", align 1
@326 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1267, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1268, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@327 = private unnamed_addr constant [5 x i8] c"sinh\00", align 1
@328 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@329 = private unnamed_addr constant [5 x i8] c"cosh\00", align 1
@330 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@331 = private unnamed_addr constant [5 x i8] c"tanh\00", align 1
@332 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@333 = private unnamed_addr constant [6 x i8] c"asinh\00", align 1
@334 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@335 = private unnamed_addr constant [6 x i8] c"acosh\00", align 1
@336 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@337 = private unnamed_addr constant [6 x i8] c"expm1\00", align 1
@338 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@339 = private unnamed_addr constant [6 x i8] c"log1p\00", align 1
@340 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@341 = private unnamed_addr constant [3 x i8] c"pi\00", align 1
@342 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@343 = private unnamed_addr constant [10 x i8] c"is_finite\00", align 1
@344 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1269, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@345 = private unnamed_addr constant [7 x i8] c"is_nan\00", align 1
@346 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1269, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@347 = private unnamed_addr constant [12 x i8] c"is_infinite\00", align 1
@348 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1269, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@349 = private unnamed_addr constant [4 x i8] c"pow\00", align 1
@350 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1270, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1271, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@351 = private unnamed_addr constant [4 x i8] c"exp\00", align 1
@352 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@353 = private unnamed_addr constant [4 x i8] c"log\00", align 1
@354 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1270, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@355 = private unnamed_addr constant [6 x i8] c"log10\00", align 1
@356 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@357 = private unnamed_addr constant [5 x i8] c"sqrt\00", align 1
@358 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@359 = private unnamed_addr constant [6 x i8] c"hypot\00", align 1
@360 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1272, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1273, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@361 = private unnamed_addr constant [8 x i8] c"deg2rad\00", align 1
@362 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@363 = private unnamed_addr constant [8 x i8] c"rad2deg\00", align 1
@364 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@365 = private unnamed_addr constant [7 x i8] c"bindec\00", align 1
@366 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1274, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@367 = private unnamed_addr constant [7 x i8] c"hexdec\00", align 1
@368 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1275, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@369 = private unnamed_addr constant [7 x i8] c"octdec\00", align 1
@370 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1276, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@371 = private unnamed_addr constant [7 x i8] c"decbin\00", align 1
@372 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1277, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@373 = private unnamed_addr constant [7 x i8] c"decoct\00", align 1
@374 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1277, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@375 = private unnamed_addr constant [7 x i8] c"dechex\00", align 1
@376 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1277, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@377 = private unnamed_addr constant [13 x i8] c"base_convert\00", align 1
@378 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1278, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1279, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@379 = private unnamed_addr constant [14 x i8] c"number_format\00", align 1
@380 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1265, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1280, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1281, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1282, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@381 = private unnamed_addr constant [5 x i8] c"fmod\00", align 1
@382 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1268, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1267, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@383 = private unnamed_addr constant [7 x i8] c"intdiv\00", align 1
@384 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1283, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1284, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@385 = private unnamed_addr constant [10 x i8] c"inet_ntop\00", align 1
@386 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1285, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@387 = private unnamed_addr constant [10 x i8] c"inet_pton\00", align 1
@388 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1286, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@389 = private unnamed_addr constant [8 x i8] c"ip2long\00", align 1
@390 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1286, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@391 = private unnamed_addr constant [8 x i8] c"long2ip\00", align 1
@392 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1287, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@393 = private unnamed_addr constant [7 x i8] c"getenv\00", align 1
@394 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1288, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1289, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@395 = private unnamed_addr constant [7 x i8] c"putenv\00", align 1
@396 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1290, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@397 = private unnamed_addr constant [7 x i8] c"getopt\00", align 1
@398 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1291, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1292, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@399 = private unnamed_addr constant [15 x i8] c"sys_getloadavg\00", align 1
@400 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@401 = private unnamed_addr constant [10 x i8] c"microtime\00", align 1
@402 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1293, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@403 = private unnamed_addr constant [13 x i8] c"gettimeofday\00", align 1
@404 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1293, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@405 = private unnamed_addr constant [10 x i8] c"getrusage\00", align 1
@406 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1294, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@407 = private unnamed_addr constant [7 x i8] c"uniqid\00", align 1
@408 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1238, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1295, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@409 = private unnamed_addr constant [24 x i8] c"quoted_printable_decode\00", align 1
@410 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@411 = private unnamed_addr constant [24 x i8] c"quoted_printable_encode\00", align 1
@412 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@413 = private unnamed_addr constant [19 x i8] c"convert_cyr_string\00", align 1
@414 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1200, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1201, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@415 = private unnamed_addr constant [17 x i8] c"get_current_user\00", align 1
@416 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@417 = private unnamed_addr constant [15 x i8] c"set_time_limit\00", align 1
@418 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1115, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@419 = private unnamed_addr constant [25 x i8] c"header_register_callback\00", align 1
@420 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1296, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@421 = private unnamed_addr constant [12 x i8] c"get_cfg_var\00", align 1
@422 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1297, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@423 = private unnamed_addr constant [21 x i8] c"get_magic_quotes_gpc\00", align 1
@424 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@425 = private unnamed_addr constant [25 x i8] c"get_magic_quotes_runtime\00", align 1
@426 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@427 = private unnamed_addr constant [10 x i8] c"error_log\00", align 1
@428 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1123, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1298, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1299, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1300, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@429 = private unnamed_addr constant [15 x i8] c"error_get_last\00", align 1
@430 = internal constant [1 x %0] zeroinitializer, align 16
@431 = private unnamed_addr constant [17 x i8] c"error_clear_last\00", align 1
@432 = internal constant [1 x %0] zeroinitializer, align 16
@433 = private unnamed_addr constant [15 x i8] c"call_user_func\00", align 1
@434 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@435 = private unnamed_addr constant [21 x i8] c"call_user_func_array\00", align 1
@436 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@437 = private unnamed_addr constant [20 x i8] c"forward_static_call\00", align 1
@438 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@439 = private unnamed_addr constant [26 x i8] c"forward_static_call_array\00", align 1
@440 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@441 = private unnamed_addr constant [10 x i8] c"serialize\00", align 1
@442 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@443 = private unnamed_addr constant [12 x i8] c"unserialize\00", align 1
@444 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1304, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1305, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@445 = private unnamed_addr constant [9 x i8] c"var_dump\00", align 1
@446 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@447 = private unnamed_addr constant [11 x i8] c"var_export\00", align 1
@448 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1306, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@449 = private unnamed_addr constant [16 x i8] c"debug_zval_dump\00", align 1
@450 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@451 = private unnamed_addr constant [8 x i8] c"print_r\00", align 1
@452 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1306, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@453 = private unnamed_addr constant [17 x i8] c"memory_get_usage\00", align 1
@454 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1307, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@455 = private unnamed_addr constant [22 x i8] c"memory_get_peak_usage\00", align 1
@456 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1307, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@457 = private unnamed_addr constant [27 x i8] c"register_shutdown_function\00", align 1
@458 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@459 = private unnamed_addr constant [23 x i8] c"register_tick_function\00", align 1
@460 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1302, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@461 = private unnamed_addr constant [25 x i8] c"unregister_tick_function\00", align 1
@462 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1301, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@463 = private unnamed_addr constant [15 x i8] c"highlight_file\00", align 1
@464 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1308, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1306, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@465 = private unnamed_addr constant [12 x i8] c"show_source\00", align 1
@466 = private unnamed_addr constant [17 x i8] c"highlight_string\00", align 1
@467 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1155, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1306, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@468 = private unnamed_addr constant [21 x i8] c"php_strip_whitespace\00", align 1
@469 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1308, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@470 = private unnamed_addr constant [8 x i8] c"ini_get\00", align 1
@471 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1288, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@472 = private unnamed_addr constant [12 x i8] c"ini_get_all\00", align 1
@473 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1170, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1309, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@474 = private unnamed_addr constant [8 x i8] c"ini_set\00", align 1
@475 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1288, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1310, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@476 = private unnamed_addr constant [10 x i8] c"ini_alter\00", align 1
@477 = private unnamed_addr constant [12 x i8] c"ini_restore\00", align 1
@478 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1288, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@479 = private unnamed_addr constant [17 x i8] c"get_include_path\00", align 1
@480 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@481 = private unnamed_addr constant [17 x i8] c"set_include_path\00", align 1
@482 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1311, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@483 = private unnamed_addr constant [21 x i8] c"restore_include_path\00", align 1
@484 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@485 = private unnamed_addr constant [10 x i8] c"setcookie\00", align 1
@486 = internal constant [8 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1260, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1312, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1313, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1314, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1315, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@487 = private unnamed_addr constant [13 x i8] c"setrawcookie\00", align 1
@488 = internal constant [8 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1260, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1312, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1313, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1314, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1315, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@489 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@490 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @489, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1198, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @497, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@491 = private unnamed_addr constant [14 x i8] c"header_remove\00", align 1
@492 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1260, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@493 = private unnamed_addr constant [13 x i8] c"headers_sent\00", align 1
@494 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1125, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@495 = private unnamed_addr constant [13 x i8] c"headers_list\00", align 1
@496 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@497 = private unnamed_addr constant [19 x i8] c"http_response_code\00", align 1
@498 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1316, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@499 = private unnamed_addr constant [19 x i8] c"connection_aborted\00", align 1
@500 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@501 = private unnamed_addr constant [18 x i8] c"connection_status\00", align 1
@502 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@503 = private unnamed_addr constant [18 x i8] c"ignore_user_abort\00", align 1
@504 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@505 = private unnamed_addr constant [15 x i8] c"parse_ini_file\00", align 1
@506 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1317, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1318, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@507 = private unnamed_addr constant [17 x i8] c"parse_ini_string\00", align 1
@508 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1319, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1317, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1318, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@509 = private unnamed_addr constant [17 x i8] c"is_uploaded_file\00", align 1
@510 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@511 = private unnamed_addr constant [19 x i8] c"move_uploaded_file\00", align 1
@512 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1320, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@513 = private unnamed_addr constant [14 x i8] c"gethostbyaddr\00", align 1
@514 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1286, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@515 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@516 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@517 = private unnamed_addr constant [15 x i8] c"gethostbynamel\00", align 1
@518 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@519 = private unnamed_addr constant [12 x i8] c"gethostname\00", align 1
@520 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@521 = private unnamed_addr constant [17 x i8] c"dns_check_record\00", align 1
@522 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1322, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1122, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@523 = private unnamed_addr constant [11 x i8] c"checkdnsrr\00", align 1
@524 = private unnamed_addr constant [11 x i8] c"dns_get_mx\00", align 1
@525 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1323, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1324, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@526 = private unnamed_addr constant [8 x i8] c"getmxrr\00", align 1
@527 = private unnamed_addr constant [15 x i8] c"dns_get_record\00", align 1
@528 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1122, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1325, i32 0, i32 0), i64 15, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1326, i32 0, i32 0), i64 15, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1327, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@529 = private unnamed_addr constant [7 x i8] c"intval\00", align 1
@530 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1270, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@531 = private unnamed_addr constant [9 x i8] c"floatval\00", align 1
@532 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@533 = private unnamed_addr constant [10 x i8] c"doubleval\00", align 1
@534 = private unnamed_addr constant [7 x i8] c"strval\00", align 1
@535 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@536 = private unnamed_addr constant [8 x i8] c"boolval\00", align 1
@537 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@538 = private unnamed_addr constant [8 x i8] c"gettype\00", align 1
@539 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@540 = private unnamed_addr constant [8 x i8] c"settype\00", align 1
@541 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1122, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@542 = private unnamed_addr constant [8 x i8] c"is_null\00", align 1
@543 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@544 = private unnamed_addr constant [12 x i8] c"is_resource\00", align 1
@545 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@546 = private unnamed_addr constant [8 x i8] c"is_bool\00", align 1
@547 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@548 = private unnamed_addr constant [7 x i8] c"is_int\00", align 1
@549 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@550 = private unnamed_addr constant [9 x i8] c"is_float\00", align 1
@551 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@552 = private unnamed_addr constant [11 x i8] c"is_integer\00", align 1
@553 = private unnamed_addr constant [8 x i8] c"is_long\00", align 1
@554 = private unnamed_addr constant [10 x i8] c"is_double\00", align 1
@555 = private unnamed_addr constant [8 x i8] c"is_real\00", align 1
@556 = private unnamed_addr constant [11 x i8] c"is_numeric\00", align 1
@557 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@558 = private unnamed_addr constant [10 x i8] c"is_string\00", align 1
@559 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@560 = private unnamed_addr constant [9 x i8] c"is_array\00", align 1
@561 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@562 = private unnamed_addr constant [10 x i8] c"is_object\00", align 1
@563 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@564 = private unnamed_addr constant [10 x i8] c"is_scalar\00", align 1
@565 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@566 = private unnamed_addr constant [12 x i8] c"is_callable\00", align 1
@567 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1328, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1329, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@568 = private unnamed_addr constant [12 x i8] c"is_iterable\00", align 1
@569 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@570 = private unnamed_addr constant [7 x i8] c"pclose\00", align 1
@571 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@572 = private unnamed_addr constant [6 x i8] c"popen\00", align 1
@573 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1243, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@574 = private unnamed_addr constant [9 x i8] c"readfile\00", align 1
@575 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@576 = private unnamed_addr constant [7 x i8] c"rewind\00", align 1
@577 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@578 = private unnamed_addr constant [6 x i8] c"rmdir\00", align 1
@579 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @99, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@580 = private unnamed_addr constant [6 x i8] c"umask\00", align 1
@581 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1179, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@582 = private unnamed_addr constant [7 x i8] c"fclose\00", align 1
@583 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@584 = private unnamed_addr constant [5 x i8] c"feof\00", align 1
@585 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@586 = private unnamed_addr constant [6 x i8] c"fgetc\00", align 1
@587 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@588 = private unnamed_addr constant [6 x i8] c"fgets\00", align 1
@589 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@590 = private unnamed_addr constant [7 x i8] c"fgetss\00", align 1
@591 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1210, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@592 = private unnamed_addr constant [6 x i8] c"fread\00", align 1
@593 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@594 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@595 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1332, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@596 = private unnamed_addr constant [10 x i8] c"fpassthru\00", align 1
@597 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@598 = private unnamed_addr constant [10 x i8] c"ftruncate\00", align 1
@599 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1333, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@600 = private unnamed_addr constant [6 x i8] c"fstat\00", align 1
@601 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@602 = private unnamed_addr constant [6 x i8] c"fseek\00", align 1
@603 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1334, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@604 = private unnamed_addr constant [6 x i8] c"ftell\00", align 1
@605 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@606 = private unnamed_addr constant [7 x i8] c"fflush\00", align 1
@607 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@608 = private unnamed_addr constant [7 x i8] c"fwrite\00", align 1
@609 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@610 = private unnamed_addr constant [6 x i8] c"fputs\00", align 1
@611 = private unnamed_addr constant [6 x i8] c"mkdir\00", align 1
@612 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1335, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1336, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@613 = private unnamed_addr constant [7 x i8] c"rename\00", align 1
@614 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1337, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1338, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@615 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@616 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1339, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1340, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@617 = private unnamed_addr constant [8 x i8] c"tempnam\00", align 1
@618 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @748, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1238, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@619 = private unnamed_addr constant [8 x i8] c"tmpfile\00", align 1
@620 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@621 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@622 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@623 = private unnamed_addr constant [18 x i8] c"file_get_contents\00", align 1
@624 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1341, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@625 = private unnamed_addr constant [18 x i8] c"file_put_contents\00", align 1
@626 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@627 = private unnamed_addr constant [14 x i8] c"stream_select\00", align 1
@628 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 4 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1342, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1343, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1344, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1345, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1346, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@629 = private unnamed_addr constant [22 x i8] c"stream_context_create\00", align 1
@630 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1347, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@631 = private unnamed_addr constant [26 x i8] c"stream_context_set_params\00", align 1
@632 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1348, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@633 = private unnamed_addr constant [26 x i8] c"stream_context_get_params\00", align 1
@634 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1348, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@635 = private unnamed_addr constant [26 x i8] c"stream_context_set_option\00", align 1
@636 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1348, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1349, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1350, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@637 = private unnamed_addr constant [27 x i8] c"stream_context_get_options\00", align 1
@638 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1348, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@639 = private unnamed_addr constant [27 x i8] c"stream_context_get_default\00", align 1
@640 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@641 = private unnamed_addr constant [27 x i8] c"stream_context_set_default\00", align 1
@642 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1188, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@643 = private unnamed_addr constant [22 x i8] c"stream_filter_prepend\00", align 1
@644 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1351, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1352, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1353, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@645 = private unnamed_addr constant [21 x i8] c"stream_filter_append\00", align 1
@646 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1351, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1352, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1353, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@647 = private unnamed_addr constant [21 x i8] c"stream_filter_remove\00", align 1
@648 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1354, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@649 = private unnamed_addr constant [21 x i8] c"stream_socket_client\00", align 1
@650 = internal constant [7 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1355, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1356, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1357, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1358, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@651 = private unnamed_addr constant [21 x i8] c"stream_socket_server\00", align 1
@652 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1359, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1356, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1357, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@653 = private unnamed_addr constant [21 x i8] c"stream_socket_accept\00", align 1
@654 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1360, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1358, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1361, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@655 = private unnamed_addr constant [23 x i8] c"stream_socket_get_name\00", align 1
@656 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1362, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@657 = private unnamed_addr constant [23 x i8] c"stream_socket_recvfrom\00", align 1
@658 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1363, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1364, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@659 = private unnamed_addr constant [21 x i8] c"stream_socket_sendto\00", align 1
@660 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1365, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@661 = private unnamed_addr constant [28 x i8] c"stream_socket_enable_crypto\00", align 1
@662 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1366, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1367, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1368, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@663 = private unnamed_addr constant [23 x i8] c"stream_socket_shutdown\00", align 1
@664 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1369, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@665 = private unnamed_addr constant [19 x i8] c"stream_socket_pair\00", align 1
@666 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1313, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1122, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@667 = private unnamed_addr constant [22 x i8] c"stream_copy_to_stream\00", align 1
@668 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1370, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1371, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1341, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1004, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@669 = private unnamed_addr constant [20 x i8] c"stream_get_contents\00", align 1
@670 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1370, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1341, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@671 = private unnamed_addr constant [21 x i8] c"stream_supports_lock\00", align 1
@672 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@673 = private unnamed_addr constant [14 x i8] c"stream_isatty\00", align 1
@674 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@675 = private unnamed_addr constant [8 x i8] c"fgetcsv\00", align 1
@676 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1226, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1227, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1228, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@677 = private unnamed_addr constant [8 x i8] c"fputcsv\00", align 1
@678 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1372, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1226, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1227, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1373, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@679 = private unnamed_addr constant [6 x i8] c"flock\00", align 1
@680 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1374, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1375, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@681 = private unnamed_addr constant [14 x i8] c"get_meta_tags\00", align 1
@682 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1332, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@683 = private unnamed_addr constant [23 x i8] c"stream_set_read_buffer\00", align 1
@684 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1376, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@685 = private unnamed_addr constant [24 x i8] c"stream_set_write_buffer\00", align 1
@686 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1376, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@687 = private unnamed_addr constant [16 x i8] c"set_file_buffer\00", align 1
@688 = private unnamed_addr constant [22 x i8] c"stream_set_chunk_size\00", align 1
@689 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1377, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@690 = private unnamed_addr constant [20 x i8] c"stream_set_blocking\00", align 1
@691 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1378, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@692 = private unnamed_addr constant [20 x i8] c"socket_set_blocking\00", align 1
@693 = private unnamed_addr constant [21 x i8] c"stream_get_meta_data\00", align 1
@694 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1330, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@695 = private unnamed_addr constant [16 x i8] c"stream_get_line\00", align 1
@696 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1341, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1209, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@697 = private unnamed_addr constant [24 x i8] c"stream_wrapper_register\00", align 1
@698 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1379, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@699 = private unnamed_addr constant [24 x i8] c"stream_register_wrapper\00", align 1
@700 = private unnamed_addr constant [26 x i8] c"stream_wrapper_unregister\00", align 1
@701 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@702 = private unnamed_addr constant [23 x i8] c"stream_wrapper_restore\00", align 1
@703 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1258, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@704 = private unnamed_addr constant [20 x i8] c"stream_get_wrappers\00", align 1
@705 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@706 = private unnamed_addr constant [22 x i8] c"stream_get_transports\00", align 1
@707 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@708 = private unnamed_addr constant [28 x i8] c"stream_resolve_include_path\00", align 1
@709 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@710 = private unnamed_addr constant [16 x i8] c"stream_is_local\00", align 1
@711 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@712 = private unnamed_addr constant [12 x i8] c"get_headers\00", align 1
@713 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1235, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@714 = private unnamed_addr constant [19 x i8] c"stream_set_timeout\00", align 1
@715 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1115, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1380, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@716 = private unnamed_addr constant [19 x i8] c"socket_set_timeout\00", align 1
@717 = private unnamed_addr constant [18 x i8] c"socket_get_status\00", align 1
@718 = private unnamed_addr constant [9 x i8] c"realpath\00", align 1
@719 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@720 = private unnamed_addr constant [8 x i8] c"fnmatch\00", align 1
@721 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1381, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@722 = private unnamed_addr constant [10 x i8] c"fsockopen\00", align 1
@723 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1259, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1382, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1383, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1358, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@724 = private unnamed_addr constant [11 x i8] c"pfsockopen\00", align 1
@725 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1321, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1259, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1382, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1383, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1358, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@726 = private unnamed_addr constant [5 x i8] c"pack\00", align 1
@727 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@728 = private unnamed_addr constant [7 x i8] c"unpack\00", align 1
@729 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1150, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@730 = private unnamed_addr constant [12 x i8] c"get_browser\00", align 1
@731 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1384, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1385, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@732 = private unnamed_addr constant [6 x i8] c"crypt\00", align 1
@733 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1386, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@734 = private unnamed_addr constant [8 x i8] c"opendir\00", align 1
@735 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@736 = private unnamed_addr constant [9 x i8] c"closedir\00", align 1
@737 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1387, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@738 = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@739 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1388, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@740 = private unnamed_addr constant [7 x i8] c"chroot\00", align 1
@741 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1388, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@742 = private unnamed_addr constant [7 x i8] c"getcwd\00", align 1
@743 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@744 = private unnamed_addr constant [10 x i8] c"rewinddir\00", align 1
@745 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1387, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@746 = private unnamed_addr constant [8 x i8] c"readdir\00", align 1
@747 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1387, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@748 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@749 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1388, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@750 = private unnamed_addr constant [8 x i8] c"scandir\00", align 1
@751 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @748, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1389, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1242, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@752 = private unnamed_addr constant [5 x i8] c"glob\00", align 1
@753 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1381, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@754 = private unnamed_addr constant [10 x i8] c"fileatime\00", align 1
@755 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@756 = private unnamed_addr constant [10 x i8] c"filectime\00", align 1
@757 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@758 = private unnamed_addr constant [10 x i8] c"filegroup\00", align 1
@759 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@760 = private unnamed_addr constant [10 x i8] c"fileinode\00", align 1
@761 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@762 = private unnamed_addr constant [10 x i8] c"filemtime\00", align 1
@763 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@764 = private unnamed_addr constant [10 x i8] c"fileowner\00", align 1
@765 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@766 = private unnamed_addr constant [10 x i8] c"fileperms\00", align 1
@767 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@768 = private unnamed_addr constant [9 x i8] c"filesize\00", align 1
@769 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@770 = private unnamed_addr constant [9 x i8] c"filetype\00", align 1
@771 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@772 = private unnamed_addr constant [12 x i8] c"file_exists\00", align 1
@773 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@774 = private unnamed_addr constant [12 x i8] c"is_writable\00", align 1
@775 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@776 = private unnamed_addr constant [13 x i8] c"is_writeable\00", align 1
@777 = private unnamed_addr constant [12 x i8] c"is_readable\00", align 1
@778 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@779 = private unnamed_addr constant [14 x i8] c"is_executable\00", align 1
@780 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@781 = private unnamed_addr constant [8 x i8] c"is_file\00", align 1
@782 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@783 = private unnamed_addr constant [7 x i8] c"is_dir\00", align 1
@784 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@785 = private unnamed_addr constant [8 x i8] c"is_link\00", align 1
@786 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@787 = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@788 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@789 = private unnamed_addr constant [6 x i8] c"lstat\00", align 1
@790 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@791 = private unnamed_addr constant [6 x i8] c"chown\00", align 1
@792 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1390, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@793 = private unnamed_addr constant [6 x i8] c"chgrp\00", align 1
@794 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1391, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@795 = private unnamed_addr constant [7 x i8] c"lchown\00", align 1
@796 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1390, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@797 = private unnamed_addr constant [7 x i8] c"lchgrp\00", align 1
@798 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1391, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@799 = private unnamed_addr constant [6 x i8] c"chmod\00", align 1
@800 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@801 = private unnamed_addr constant [6 x i8] c"touch\00", align 1
@802 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1392, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1393, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@803 = private unnamed_addr constant [15 x i8] c"clearstatcache\00", align 1
@804 = internal constant [3 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1394, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1161, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@805 = private unnamed_addr constant [17 x i8] c"disk_total_space\00", align 1
@806 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@807 = private unnamed_addr constant [16 x i8] c"disk_free_space\00", align 1
@808 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1185, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@809 = private unnamed_addr constant [14 x i8] c"diskfreespace\00", align 1
@810 = private unnamed_addr constant [20 x i8] c"realpath_cache_size\00", align 1
@811 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@812 = private unnamed_addr constant [19 x i8] c"realpath_cache_get\00", align 1
@813 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@814 = private unnamed_addr constant [5 x i8] c"mail\00", align 1
@815 = internal constant [6 x %0] [%0 { i8* inttoptr (i64 3 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1201, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1204, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1123, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1395, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1396, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@816 = private unnamed_addr constant [11 x i8] c"ezmlm_hash\00", align 1
@817 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1397, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@818 = private unnamed_addr constant [8 x i8] c"openlog\00", align 1
@819 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1398, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1399, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1400, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@820 = private unnamed_addr constant [7 x i8] c"syslog\00", align 1
@821 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1255, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1123, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@822 = private unnamed_addr constant [9 x i8] c"closelog\00", align 1
@823 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@824 = private unnamed_addr constant [10 x i8] c"lcg_value\00", align 1
@825 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@826 = private unnamed_addr constant [10 x i8] c"metaphone\00", align 1
@827 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1401, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1402, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@828 = private unnamed_addr constant [9 x i8] c"ob_start\00", align 1
@829 = internal constant [4 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1403, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1377, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@830 = private unnamed_addr constant [9 x i8] c"ob_flush\00", align 1
@831 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@832 = private unnamed_addr constant [9 x i8] c"ob_clean\00", align 1
@833 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@834 = private unnamed_addr constant [13 x i8] c"ob_end_flush\00", align 1
@835 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@836 = private unnamed_addr constant [13 x i8] c"ob_end_clean\00", align 1
@837 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@838 = private unnamed_addr constant [13 x i8] c"ob_get_flush\00", align 1
@839 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@840 = private unnamed_addr constant [13 x i8] c"ob_get_clean\00", align 1
@841 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@842 = private unnamed_addr constant [14 x i8] c"ob_get_length\00", align 1
@843 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@844 = private unnamed_addr constant [13 x i8] c"ob_get_level\00", align 1
@845 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@846 = private unnamed_addr constant [14 x i8] c"ob_get_status\00", align 1
@847 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1404, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@848 = private unnamed_addr constant [16 x i8] c"ob_get_contents\00", align 1
@849 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@850 = private unnamed_addr constant [18 x i8] c"ob_implicit_flush\00", align 1
@851 = internal constant [2 x %0] [%0 zeroinitializer, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1171, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@852 = private unnamed_addr constant [17 x i8] c"ob_list_handlers\00", align 1
@853 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@854 = private unnamed_addr constant [6 x i8] c"ksort\00", align 1
@855 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@856 = private unnamed_addr constant [7 x i8] c"krsort\00", align 1
@857 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@858 = private unnamed_addr constant [8 x i8] c"natsort\00", align 1
@859 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@860 = private unnamed_addr constant [12 x i8] c"natcasesort\00", align 1
@861 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@862 = private unnamed_addr constant [6 x i8] c"asort\00", align 1
@863 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@864 = private unnamed_addr constant [7 x i8] c"arsort\00", align 1
@865 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@866 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@867 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@868 = private unnamed_addr constant [6 x i8] c"rsort\00", align 1
@869 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@870 = private unnamed_addr constant [6 x i8] c"usort\00", align 1
@871 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1406, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@872 = private unnamed_addr constant [7 x i8] c"uasort\00", align 1
@873 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1406, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@874 = private unnamed_addr constant [7 x i8] c"uksort\00", align 1
@875 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1406, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@876 = private unnamed_addr constant [8 x i8] c"shuffle\00", align 1
@877 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@878 = private unnamed_addr constant [11 x i8] c"array_walk\00", align 1
@879 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1407, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1408, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@880 = private unnamed_addr constant [21 x i8] c"array_walk_recursive\00", align 1
@881 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1407, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1408, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@882 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@883 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1303, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1172, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@884 = private unnamed_addr constant [4 x i8] c"end\00", align 1
@885 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@886 = private unnamed_addr constant [5 x i8] c"prev\00", align 1
@887 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@888 = private unnamed_addr constant [5 x i8] c"next\00", align 1
@889 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@890 = private unnamed_addr constant [6 x i8] c"reset\00", align 1
@891 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@892 = private unnamed_addr constant [8 x i8] c"current\00", align 1
@893 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@894 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@895 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@896 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@897 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@898 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@899 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1232, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@900 = private unnamed_addr constant [9 x i8] c"in_array\00", align 1
@901 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1262, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@902 = private unnamed_addr constant [13 x i8] c"array_search\00", align 1
@903 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1176, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1175, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1262, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@904 = private unnamed_addr constant [8 x i8] c"extract\00", align 1
@905 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 2, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1409, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1238, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@906 = private unnamed_addr constant [8 x i8] c"compact\00", align 1
@907 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1410, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@908 = private unnamed_addr constant [11 x i8] c"array_fill\00", align 1
@909 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1411, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1412, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1269, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@910 = private unnamed_addr constant [16 x i8] c"array_fill_keys\00", align 1
@911 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1413, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1269, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@912 = private unnamed_addr constant [6 x i8] c"range\00", align 1
@913 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1414, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1415, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1416, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@914 = private unnamed_addr constant [16 x i8] c"array_multisort\00", align 1
@915 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 2, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1418, i32 0, i32 0), i64 0, i8 2, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1405, i32 0, i32 0), i64 0, i8 2, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 2, i8 1 }], align 16
@916 = private unnamed_addr constant [11 x i8] c"array_push\00", align 1
@917 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1420, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@918 = private unnamed_addr constant [10 x i8] c"array_pop\00", align 1
@919 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1420, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@920 = private unnamed_addr constant [12 x i8] c"array_shift\00", align 1
@921 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1420, i32 0, i32 0), i64 0, i8 1, i8 0 }], align 16
@922 = private unnamed_addr constant [14 x i8] c"array_unshift\00", align 1
@923 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1420, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1234, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@924 = private unnamed_addr constant [13 x i8] c"array_splice\00", align 1
@925 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 1, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1421, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@926 = private unnamed_addr constant [12 x i8] c"array_slice\00", align 1
@927 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1177, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1178, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1422, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@928 = private unnamed_addr constant [12 x i8] c"array_merge\00", align 1
@929 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@930 = private unnamed_addr constant [22 x i8] c"array_merge_recursive\00", align 1
@931 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@932 = private unnamed_addr constant [14 x i8] c"array_replace\00", align 1
@933 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@934 = private unnamed_addr constant [24 x i8] c"array_replace_recursive\00", align 1
@935 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@936 = private unnamed_addr constant [11 x i8] c"array_keys\00", align 1
@937 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1424, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1262, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@938 = private unnamed_addr constant [13 x i8] c"array_values\00", align 1
@939 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@940 = private unnamed_addr constant [19 x i8] c"array_count_values\00", align 1
@941 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@942 = private unnamed_addr constant [13 x i8] c"array_column\00", align 1
@943 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1425, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1426, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@944 = private unnamed_addr constant [14 x i8] c"array_reverse\00", align 1
@945 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1422, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@946 = private unnamed_addr constant [13 x i8] c"array_reduce\00", align 1
@947 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1296, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1427, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@948 = private unnamed_addr constant [10 x i8] c"array_pad\00", align 1
@949 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1428, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1429, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@950 = private unnamed_addr constant [11 x i8] c"array_flip\00", align 1
@951 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@952 = private unnamed_addr constant [22 x i8] c"array_change_key_case\00", align 1
@953 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1206, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1430, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@954 = private unnamed_addr constant [11 x i8] c"array_rand\00", align 1
@955 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1431, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@956 = private unnamed_addr constant [13 x i8] c"array_unique\00", align 1
@957 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1331, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@958 = private unnamed_addr constant [16 x i8] c"array_intersect\00", align 1
@959 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@960 = private unnamed_addr constant [20 x i8] c"array_intersect_key\00", align 1
@961 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@962 = private unnamed_addr constant [21 x i8] c"array_intersect_ukey\00", align 1
@963 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1432, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@964 = private unnamed_addr constant [17 x i8] c"array_uintersect\00", align 1
@965 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @1433, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@966 = private unnamed_addr constant [22 x i8] c"array_intersect_assoc\00", align 1
@967 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@968 = private unnamed_addr constant [23 x i8] c"array_uintersect_assoc\00", align 1
@969 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @1433, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@970 = private unnamed_addr constant [23 x i8] c"array_intersect_uassoc\00", align 1
@971 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1432, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@972 = private unnamed_addr constant [24 x i8] c"array_uintersect_uassoc\00", align 1
@973 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @1433, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1432, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@974 = private unnamed_addr constant [11 x i8] c"array_diff\00", align 1
@975 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@976 = private unnamed_addr constant [15 x i8] c"array_diff_key\00", align 1
@977 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@978 = private unnamed_addr constant [16 x i8] c"array_diff_ukey\00", align 1
@979 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1434, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@980 = private unnamed_addr constant [12 x i8] c"array_udiff\00", align 1
@981 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1435, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@982 = private unnamed_addr constant [17 x i8] c"array_diff_assoc\00", align 1
@983 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@984 = private unnamed_addr constant [18 x i8] c"array_udiff_assoc\00", align 1
@985 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1434, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@986 = private unnamed_addr constant [18 x i8] c"array_diff_uassoc\00", align 1
@987 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1435, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@988 = private unnamed_addr constant [19 x i8] c"array_udiff_uassoc\00", align 1
@989 = internal constant [5 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1417, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1419, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1435, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1434, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@990 = private unnamed_addr constant [10 x i8] c"array_sum\00", align 1
@991 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@992 = private unnamed_addr constant [14 x i8] c"array_product\00", align 1
@993 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@994 = private unnamed_addr constant [13 x i8] c"array_filter\00", align 1
@995 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1296, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1436, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@996 = private unnamed_addr constant [10 x i8] c"array_map\00", align 1
@997 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1296, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1423, i32 0, i32 0), i64 0, i8 0, i8 1 }], align 16
@998 = private unnamed_addr constant [12 x i8] c"array_chunk\00", align 1
@999 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1246, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1333, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1422, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1000 = private unnamed_addr constant [14 x i8] c"array_combine\00", align 1
@1001 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1413, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1437, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1002 = private unnamed_addr constant [17 x i8] c"array_key_exists\00", align 1
@1003 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @894, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1203, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1004 = private unnamed_addr constant [4 x i8] c"pos\00", align 1
@1005 = private unnamed_addr constant [7 x i8] c"sizeof\00", align 1
@1006 = private unnamed_addr constant [11 x i8] c"key_exists\00", align 1
@1007 = private unnamed_addr constant [7 x i8] c"assert\00", align 1
@1008 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1438, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1439, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1009 = private unnamed_addr constant [15 x i8] c"assert_options\00", align 1
@1010 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1169, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1011 = private unnamed_addr constant [16 x i8] c"version_compare\00", align 1
@1012 = internal constant [4 x %0] [%0 { i8* inttoptr (i64 2 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1440, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1441, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1442, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1013 = private unnamed_addr constant [5 x i8] c"ftok\00", align 1
@1014 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1335, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1443, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1015 = private unnamed_addr constant [10 x i8] c"str_rot13\00", align 1
@1016 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1151, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1017 = private unnamed_addr constant [19 x i8] c"stream_get_filters\00", align 1
@1018 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@1019 = private unnamed_addr constant [23 x i8] c"stream_filter_register\00", align 1
@1020 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1351, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1379, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1021 = private unnamed_addr constant [29 x i8] c"stream_bucket_make_writeable\00", align 1
@1022 = internal constant [2 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1444, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1023 = private unnamed_addr constant [22 x i8] c"stream_bucket_prepend\00", align 1
@1024 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1444, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1445, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1025 = private unnamed_addr constant [21 x i8] c"stream_bucket_append\00", align 1
@1026 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1444, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1445, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1027 = private unnamed_addr constant [18 x i8] c"stream_bucket_new\00", align 1
@1028 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1233, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1376, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1029 = private unnamed_addr constant [23 x i8] c"output_add_rewrite_var\00", align 1
@1030 = internal constant [3 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1260, i32 0, i32 0), i64 0, i8 0, i8 0 }, %0 { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1197, i32 0, i32 0), i64 0, i8 0, i8 0 }], align 16
@1031 = private unnamed_addr constant [26 x i8] c"output_reset_rewrite_vars\00", align 1
@1032 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@1033 = private unnamed_addr constant [17 x i8] c"sys_get_temp_dir\00", align 1
@1034 = internal constant [1 x %0] [%0 { i8* inttoptr (i64 -1 to i8*), i64 0, i8 0, i8 0 }], align 16
@basic_functions = hidden constant [532 x { i8*, void (%1*, %29*)*, %0*, i32, i32 }] [{ i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @0, i32 0, i32 0), void (%1*, %29*)* @zif_constant, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @1, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @2, i32 0, i32 0), void (%1*, %29*)* @zif_bin2hex, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @3, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @4, i32 0, i32 0), void (%1*, %29*)* @zif_hex2bin, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @5, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @6, i32 0, i32 0), void (%1*, %29*)* @zif_sleep, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @7, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @8, i32 0, i32 0), void (%1*, %29*)* @zif_usleep, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @9, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @10, i32 0, i32 0), void (%1*, %29*)* @zif_time_nanosleep, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @11, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @12, i32 0, i32 0), void (%1*, %29*)* @zif_time_sleep_until, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @13, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @14, i32 0, i32 0), void (%1*, %29*)* @zif_strptime, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @15, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @16, i32 0, i32 0), void (%1*, %29*)* @zif_flush, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @17, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @18, i32 0, i32 0), void (%1*, %29*)* @zif_wordwrap, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @19, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @20, i32 0, i32 0), void (%1*, %29*)* @zif_htmlspecialchars, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @21, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @22, i32 0, i32 0), void (%1*, %29*)* @zif_htmlentities, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @23, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @24, i32 0, i32 0), void (%1*, %29*)* @zif_html_entity_decode, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @25, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @26, i32 0, i32 0), void (%1*, %29*)* @zif_htmlspecialchars_decode, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @27, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @28, i32 0, i32 0), void (%1*, %29*)* @zif_get_html_translation_table, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @29, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @30, i32 0, i32 0), void (%1*, %29*)* @zif_sha1, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @31, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @32, i32 0, i32 0), void (%1*, %29*)* @zif_sha1_file, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @33, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i32 0, i32 0), void (%1*, %29*)* @php_if_md5, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @35, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @36, i32 0, i32 0), void (%1*, %29*)* @php_if_md5_file, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @37, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @38, i32 0, i32 0), void (%1*, %29*)* @php_if_crc32, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @39, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @40, i32 0, i32 0), void (%1*, %29*)* @zif_iptcparse, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @41, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @42, i32 0, i32 0), void (%1*, %29*)* @zif_iptcembed, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @43, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @44, i32 0, i32 0), void (%1*, %29*)* @zif_getimagesize, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @45, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @46, i32 0, i32 0), void (%1*, %29*)* @zif_getimagesizefromstring, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @45, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @47, i32 0, i32 0), void (%1*, %29*)* @zif_image_type_to_mime_type, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @48, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @49, i32 0, i32 0), void (%1*, %29*)* @zif_image_type_to_extension, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @50, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i32 0, i32 0), void (%1*, %29*)* @zif_phpinfo, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @52, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @53, i32 0, i32 0), void (%1*, %29*)* @zif_phpversion, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @54, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @55, i32 0, i32 0), void (%1*, %29*)* @zif_phpcredits, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @56, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @57, i32 0, i32 0), void (%1*, %29*)* @zif_php_sapi_name, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @58, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @59, i32 0, i32 0), void (%1*, %29*)* @zif_php_uname, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @60, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @61, i32 0, i32 0), void (%1*, %29*)* @zif_php_ini_scanned_files, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @62, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @63, i32 0, i32 0), void (%1*, %29*)* @zif_php_ini_loaded_file, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @64, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @65, i32 0, i32 0), void (%1*, %29*)* @zif_strnatcmp, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @66, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @67, i32 0, i32 0), void (%1*, %29*)* @zif_strnatcasecmp, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @68, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @69, i32 0, i32 0), void (%1*, %29*)* @zif_substr_count, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @70, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @71, i32 0, i32 0), void (%1*, %29*)* @zif_strspn, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @72, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @73, i32 0, i32 0), void (%1*, %29*)* @zif_strcspn, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @74, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @75, i32 0, i32 0), void (%1*, %29*)* @zif_strtok, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @76, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @77, i32 0, i32 0), void (%1*, %29*)* @zif_strtoupper, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @78, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @79, i32 0, i32 0), void (%1*, %29*)* @zif_strtolower, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @80, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @81, i32 0, i32 0), void (%1*, %29*)* @zif_strpos, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @82, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @83, i32 0, i32 0), void (%1*, %29*)* @zif_stripos, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @84, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @85, i32 0, i32 0), void (%1*, %29*)* @zif_strrpos, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @86, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @87, i32 0, i32 0), void (%1*, %29*)* @zif_strripos, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @88, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @89, i32 0, i32 0), void (%1*, %29*)* @zif_strrev, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @90, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @91, i32 0, i32 0), void (%1*, %29*)* @zif_hebrev, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @92, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @93, i32 0, i32 0), void (%1*, %29*)* @zif_hebrevc, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @94, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @95, i32 0, i32 0), void (%1*, %29*)* @zif_nl2br, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @96, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @97, i32 0, i32 0), void (%1*, %29*)* @zif_basename, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @98, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @99, i32 0, i32 0), void (%1*, %29*)* @zif_dirname, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @100, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @101, i32 0, i32 0), void (%1*, %29*)* @zif_pathinfo, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @102, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @103, i32 0, i32 0), void (%1*, %29*)* @zif_stripslashes, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @104, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @105, i32 0, i32 0), void (%1*, %29*)* @zif_stripcslashes, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @106, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @107, i32 0, i32 0), void (%1*, %29*)* @zif_strstr, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @108, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @109, i32 0, i32 0), void (%1*, %29*)* @zif_stristr, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @110, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @111, i32 0, i32 0), void (%1*, %29*)* @zif_strrchr, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @112, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @113, i32 0, i32 0), void (%1*, %29*)* @zif_str_shuffle, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @114, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @115, i32 0, i32 0), void (%1*, %29*)* @zif_str_word_count, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @116, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @117, i32 0, i32 0), void (%1*, %29*)* @zif_str_split, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @118, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @119, i32 0, i32 0), void (%1*, %29*)* @zif_strpbrk, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @120, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @121, i32 0, i32 0), void (%1*, %29*)* @zif_substr_compare, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @122, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @123, i32 0, i32 0), void (%1*, %29*)* @zif_utf8_encode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @124, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @125, i32 0, i32 0), void (%1*, %29*)* @zif_utf8_decode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @126, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @127, i32 0, i32 0), void (%1*, %29*)* @zif_strcoll, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @128, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @129, i32 0, i32 0), void (%1*, %29*)* @zif_money_format, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @130, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @131, i32 0, i32 0), void (%1*, %29*)* @zif_substr, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @132, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @133, i32 0, i32 0), void (%1*, %29*)* @zif_substr_replace, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @134, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @135, i32 0, i32 0), void (%1*, %29*)* @zif_quotemeta, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @136, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @137, i32 0, i32 0), void (%1*, %29*)* @zif_ucfirst, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @138, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @139, i32 0, i32 0), void (%1*, %29*)* @zif_lcfirst, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @140, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @141, i32 0, i32 0), void (%1*, %29*)* @zif_ucwords, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @142, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @143, i32 0, i32 0), void (%1*, %29*)* @zif_strtr, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @144, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @145, i32 0, i32 0), void (%1*, %29*)* @zif_addslashes, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @146, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @147, i32 0, i32 0), void (%1*, %29*)* @zif_addcslashes, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @148, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @149, i32 0, i32 0), void (%1*, %29*)* @zif_rtrim, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @150, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @151, i32 0, i32 0), void (%1*, %29*)* @zif_str_replace, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @152, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @153, i32 0, i32 0), void (%1*, %29*)* @zif_str_ireplace, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @154, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @155, i32 0, i32 0), void (%1*, %29*)* @zif_str_repeat, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @156, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @157, i32 0, i32 0), void (%1*, %29*)* @zif_count_chars, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @158, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @159, i32 0, i32 0), void (%1*, %29*)* @zif_chunk_split, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @160, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @161, i32 0, i32 0), void (%1*, %29*)* @zif_trim, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @162, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @163, i32 0, i32 0), void (%1*, %29*)* @zif_ltrim, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @164, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @165, i32 0, i32 0), void (%1*, %29*)* @zif_strip_tags, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @166, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @167, i32 0, i32 0), void (%1*, %29*)* @zif_similar_text, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @168, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @169, i32 0, i32 0), void (%1*, %29*)* @zif_explode, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @170, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @171, i32 0, i32 0), void (%1*, %29*)* @zif_implode, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @172, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @173, i32 0, i32 0), void (%1*, %29*)* @zif_implode, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @172, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @174, i32 0, i32 0), void (%1*, %29*)* @zif_setlocale, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @175, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @176, i32 0, i32 0), void (%1*, %29*)* @zif_localeconv, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @177, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @178, i32 0, i32 0), void (%1*, %29*)* @zif_nl_langinfo, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @179, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @180, i32 0, i32 0), void (%1*, %29*)* @zif_soundex, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @181, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @182, i32 0, i32 0), void (%1*, %29*)* @zif_levenshtein, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @183, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @184, i32 0, i32 0), void (%1*, %29*)* @zif_chr, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @185, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @186, i32 0, i32 0), void (%1*, %29*)* @zif_ord, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @187, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @188, i32 0, i32 0), void (%1*, %29*)* @zif_parse_str, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @189, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @190, i32 0, i32 0), void (%1*, %29*)* @zif_str_getcsv, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @191, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @192, i32 0, i32 0), void (%1*, %29*)* @zif_str_pad, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @193, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @194, i32 0, i32 0), void (%1*, %29*)* @zif_rtrim, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @150, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @195, i32 0, i32 0), void (%1*, %29*)* @zif_strstr, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @108, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @196, i32 0, i32 0), void (%1*, %29*)* @zif_user_sprintf, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @197, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @198, i32 0, i32 0), void (%1*, %29*)* @zif_user_printf, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @199, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @200, i32 0, i32 0), void (%1*, %29*)* @zif_vprintf, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @201, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @202, i32 0, i32 0), void (%1*, %29*)* @zif_vsprintf, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @203, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @204, i32 0, i32 0), void (%1*, %29*)* @zif_fprintf, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @205, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @206, i32 0, i32 0), void (%1*, %29*)* @zif_vfprintf, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @207, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @208, i32 0, i32 0), void (%1*, %29*)* @zif_sscanf, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @209, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @210, i32 0, i32 0), void (%1*, %29*)* @zif_fscanf, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @211, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @212, i32 0, i32 0), void (%1*, %29*)* @zif_parse_url, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @213, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @214, i32 0, i32 0), void (%1*, %29*)* @zif_urlencode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @215, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @216, i32 0, i32 0), void (%1*, %29*)* @zif_urldecode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @217, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @218, i32 0, i32 0), void (%1*, %29*)* @zif_rawurlencode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @219, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @220, i32 0, i32 0), void (%1*, %29*)* @zif_rawurldecode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @221, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @222, i32 0, i32 0), void (%1*, %29*)* @zif_http_build_query, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @223, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @224, i32 0, i32 0), void (%1*, %29*)* @zif_readlink, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @225, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @226, i32 0, i32 0), void (%1*, %29*)* @zif_linkinfo, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @227, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @228, i32 0, i32 0), void (%1*, %29*)* @zif_symlink, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @229, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @230, i32 0, i32 0), void (%1*, %29*)* @zif_link, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @231, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @232, i32 0, i32 0), void (%1*, %29*)* @zif_unlink, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @233, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @234, i32 0, i32 0), void (%1*, %29*)* @zif_exec, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @235, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @236, i32 0, i32 0), void (%1*, %29*)* @zif_system, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @237, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @238, i32 0, i32 0), void (%1*, %29*)* @zif_escapeshellcmd, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @239, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @240, i32 0, i32 0), void (%1*, %29*)* @zif_escapeshellarg, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @241, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @242, i32 0, i32 0), void (%1*, %29*)* @zif_passthru, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @243, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @244, i32 0, i32 0), void (%1*, %29*)* @zif_shell_exec, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @245, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @246, i32 0, i32 0), void (%1*, %29*)* @zif_proc_open, %0* getelementptr inbounds ([7 x %0], [7 x %0]* @247, i32 0, i32 0), i32 6, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @248, i32 0, i32 0), void (%1*, %29*)* @zif_proc_close, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @249, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @250, i32 0, i32 0), void (%1*, %29*)* @zif_proc_terminate, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @251, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @252, i32 0, i32 0), void (%1*, %29*)* @zif_proc_get_status, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @253, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @254, i32 0, i32 0), void (%1*, %29*)* @zif_proc_nice, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @255, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @256, i32 0, i32 0), void (%1*, %29*)* @zif_rand, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @257, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @258, i32 0, i32 0), void (%1*, %29*)* @zif_mt_srand, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @259, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @260, i32 0, i32 0), void (%1*, %29*)* @zif_mt_getrandmax, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @261, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @262, i32 0, i32 0), void (%1*, %29*)* @zif_mt_rand, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @257, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @263, i32 0, i32 0), void (%1*, %29*)* @zif_mt_srand, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @259, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @264, i32 0, i32 0), void (%1*, %29*)* @zif_mt_getrandmax, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @261, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @265, i32 0, i32 0), void (%1*, %29*)* @zif_random_bytes, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @266, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @267, i32 0, i32 0), void (%1*, %29*)* @zif_random_int, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @268, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @269, i32 0, i32 0), void (%1*, %29*)* @zif_getservbyname, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @270, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @271, i32 0, i32 0), void (%1*, %29*)* @zif_getservbyport, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @272, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @273, i32 0, i32 0), void (%1*, %29*)* @zif_getprotobyname, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @274, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @275, i32 0, i32 0), void (%1*, %29*)* @zif_getprotobynumber, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @276, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @277, i32 0, i32 0), void (%1*, %29*)* @zif_getmyuid, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @278, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @279, i32 0, i32 0), void (%1*, %29*)* @zif_getmygid, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @280, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @281, i32 0, i32 0), void (%1*, %29*)* @zif_getmypid, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @282, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @283, i32 0, i32 0), void (%1*, %29*)* @zif_getmyinode, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @284, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @285, i32 0, i32 0), void (%1*, %29*)* @zif_getlastmod, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @286, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @287, i32 0, i32 0), void (%1*, %29*)* @zif_base64_decode, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @288, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @289, i32 0, i32 0), void (%1*, %29*)* @zif_base64_encode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @290, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @291, i32 0, i32 0), void (%1*, %29*)* @zif_password_hash, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @292, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @293, i32 0, i32 0), void (%1*, %29*)* @zif_password_get_info, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @294, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @295, i32 0, i32 0), void (%1*, %29*)* @zif_password_needs_rehash, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @296, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @297, i32 0, i32 0), void (%1*, %29*)* @zif_password_verify, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @298, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @299, i32 0, i32 0), void (%1*, %29*)* @zif_convert_uuencode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @300, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @301, i32 0, i32 0), void (%1*, %29*)* @zif_convert_uudecode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @302, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @303, i32 0, i32 0), void (%1*, %29*)* @zif_abs, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @304, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @305, i32 0, i32 0), void (%1*, %29*)* @zif_ceil, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @306, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @307, i32 0, i32 0), void (%1*, %29*)* @zif_floor, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @308, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @309, i32 0, i32 0), void (%1*, %29*)* @zif_round, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @310, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @311, i32 0, i32 0), void (%1*, %29*)* @zif_sin, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @312, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @313, i32 0, i32 0), void (%1*, %29*)* @zif_cos, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @314, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @315, i32 0, i32 0), void (%1*, %29*)* @zif_tan, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @316, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @317, i32 0, i32 0), void (%1*, %29*)* @zif_asin, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @318, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @319, i32 0, i32 0), void (%1*, %29*)* @zif_acos, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @320, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @321, i32 0, i32 0), void (%1*, %29*)* @zif_atan, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @322, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @323, i32 0, i32 0), void (%1*, %29*)* @zif_atanh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @324, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @325, i32 0, i32 0), void (%1*, %29*)* @zif_atan2, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @326, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @327, i32 0, i32 0), void (%1*, %29*)* @zif_sinh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @328, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @329, i32 0, i32 0), void (%1*, %29*)* @zif_cosh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @330, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @331, i32 0, i32 0), void (%1*, %29*)* @zif_tanh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @332, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @333, i32 0, i32 0), void (%1*, %29*)* @zif_asinh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @334, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @335, i32 0, i32 0), void (%1*, %29*)* @zif_acosh, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @336, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @337, i32 0, i32 0), void (%1*, %29*)* @zif_expm1, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @338, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @339, i32 0, i32 0), void (%1*, %29*)* @zif_log1p, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @340, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @341, i32 0, i32 0), void (%1*, %29*)* @zif_pi, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @342, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @343, i32 0, i32 0), void (%1*, %29*)* @zif_is_finite, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @344, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @345, i32 0, i32 0), void (%1*, %29*)* @zif_is_nan, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @346, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @347, i32 0, i32 0), void (%1*, %29*)* @zif_is_infinite, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @348, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @349, i32 0, i32 0), void (%1*, %29*)* @zif_pow, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @350, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @351, i32 0, i32 0), void (%1*, %29*)* @zif_exp, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @352, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @353, i32 0, i32 0), void (%1*, %29*)* @zif_log, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @354, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @355, i32 0, i32 0), void (%1*, %29*)* @zif_log10, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @356, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @357, i32 0, i32 0), void (%1*, %29*)* @zif_sqrt, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @358, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @359, i32 0, i32 0), void (%1*, %29*)* @zif_hypot, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @360, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @361, i32 0, i32 0), void (%1*, %29*)* @zif_deg2rad, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @362, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @363, i32 0, i32 0), void (%1*, %29*)* @zif_rad2deg, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @364, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @365, i32 0, i32 0), void (%1*, %29*)* @zif_bindec, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @366, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @367, i32 0, i32 0), void (%1*, %29*)* @zif_hexdec, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @368, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @369, i32 0, i32 0), void (%1*, %29*)* @zif_octdec, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @370, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @371, i32 0, i32 0), void (%1*, %29*)* @zif_decbin, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @372, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @373, i32 0, i32 0), void (%1*, %29*)* @zif_decoct, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @374, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @375, i32 0, i32 0), void (%1*, %29*)* @zif_dechex, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @376, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @377, i32 0, i32 0), void (%1*, %29*)* @zif_base_convert, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @378, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @379, i32 0, i32 0), void (%1*, %29*)* @zif_number_format, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @380, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @381, i32 0, i32 0), void (%1*, %29*)* @zif_fmod, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @382, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @383, i32 0, i32 0), void (%1*, %29*)* @zif_intdiv, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @384, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @385, i32 0, i32 0), void (%1*, %29*)* @php_inet_ntop, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @386, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @387, i32 0, i32 0), void (%1*, %29*)* @php_inet_pton, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @388, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @389, i32 0, i32 0), void (%1*, %29*)* @zif_ip2long, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @390, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @391, i32 0, i32 0), void (%1*, %29*)* @zif_long2ip, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @392, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @393, i32 0, i32 0), void (%1*, %29*)* @zif_getenv, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @394, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @395, i32 0, i32 0), void (%1*, %29*)* @zif_putenv, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @396, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @397, i32 0, i32 0), void (%1*, %29*)* @zif_getopt, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @398, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @399, i32 0, i32 0), void (%1*, %29*)* @zif_sys_getloadavg, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @400, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @401, i32 0, i32 0), void (%1*, %29*)* @zif_microtime, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @402, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @403, i32 0, i32 0), void (%1*, %29*)* @zif_gettimeofday, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @404, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @405, i32 0, i32 0), void (%1*, %29*)* @zif_getrusage, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @406, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @407, i32 0, i32 0), void (%1*, %29*)* @zif_uniqid, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @408, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @409, i32 0, i32 0), void (%1*, %29*)* @zif_quoted_printable_decode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @410, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @411, i32 0, i32 0), void (%1*, %29*)* @zif_quoted_printable_encode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @412, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @413, i32 0, i32 0), void (%1*, %29*)* @zif_convert_cyr_string, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @414, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @415, i32 0, i32 0), void (%1*, %29*)* @zif_get_current_user, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @416, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @417, i32 0, i32 0), void (%1*, %29*)* @zif_set_time_limit, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @418, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @419, i32 0, i32 0), void (%1*, %29*)* @zif_header_register_callback, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @420, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @421, i32 0, i32 0), void (%1*, %29*)* @zif_get_cfg_var, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @422, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @423, i32 0, i32 0), void (%1*, %29*)* @zif_get_magic_quotes_gpc, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @424, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @425, i32 0, i32 0), void (%1*, %29*)* @zif_get_magic_quotes_runtime, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @426, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @427, i32 0, i32 0), void (%1*, %29*)* @zif_error_log, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @428, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @429, i32 0, i32 0), void (%1*, %29*)* @zif_error_get_last, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @430, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @431, i32 0, i32 0), void (%1*, %29*)* @zif_error_clear_last, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @432, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @433, i32 0, i32 0), void (%1*, %29*)* @zif_call_user_func, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @434, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @435, i32 0, i32 0), void (%1*, %29*)* @zif_call_user_func_array, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @436, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @437, i32 0, i32 0), void (%1*, %29*)* @zif_forward_static_call, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @438, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @439, i32 0, i32 0), void (%1*, %29*)* @zif_forward_static_call_array, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @440, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @441, i32 0, i32 0), void (%1*, %29*)* @zif_serialize, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @442, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @443, i32 0, i32 0), void (%1*, %29*)* @zif_unserialize, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @444, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @445, i32 0, i32 0), void (%1*, %29*)* @zif_var_dump, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @446, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @447, i32 0, i32 0), void (%1*, %29*)* @zif_var_export, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @448, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @449, i32 0, i32 0), void (%1*, %29*)* @zif_debug_zval_dump, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @450, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @451, i32 0, i32 0), void (%1*, %29*)* @zif_print_r, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @452, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @453, i32 0, i32 0), void (%1*, %29*)* @zif_memory_get_usage, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @454, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @455, i32 0, i32 0), void (%1*, %29*)* @zif_memory_get_peak_usage, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @456, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @457, i32 0, i32 0), void (%1*, %29*)* @zif_register_shutdown_function, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @458, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @459, i32 0, i32 0), void (%1*, %29*)* @zif_register_tick_function, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @460, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @461, i32 0, i32 0), void (%1*, %29*)* @zif_unregister_tick_function, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @462, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @463, i32 0, i32 0), void (%1*, %29*)* @zif_highlight_file, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @464, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @465, i32 0, i32 0), void (%1*, %29*)* @zif_highlight_file, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @464, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @466, i32 0, i32 0), void (%1*, %29*)* @zif_highlight_string, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @467, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @468, i32 0, i32 0), void (%1*, %29*)* @zif_php_strip_whitespace, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @469, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @470, i32 0, i32 0), void (%1*, %29*)* @zif_ini_get, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @471, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @472, i32 0, i32 0), void (%1*, %29*)* @zif_ini_get_all, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @473, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @474, i32 0, i32 0), void (%1*, %29*)* @zif_ini_set, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @475, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @476, i32 0, i32 0), void (%1*, %29*)* @zif_ini_set, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @475, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @477, i32 0, i32 0), void (%1*, %29*)* @zif_ini_restore, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @478, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @479, i32 0, i32 0), void (%1*, %29*)* @zif_get_include_path, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @480, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @481, i32 0, i32 0), void (%1*, %29*)* @zif_set_include_path, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @482, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @483, i32 0, i32 0), void (%1*, %29*)* @zif_restore_include_path, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @484, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @485, i32 0, i32 0), void (%1*, %29*)* @zif_setcookie, %0* getelementptr inbounds ([8 x %0], [8 x %0]* @486, i32 0, i32 0), i32 7, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @487, i32 0, i32 0), void (%1*, %29*)* @zif_setrawcookie, %0* getelementptr inbounds ([8 x %0], [8 x %0]* @488, i32 0, i32 0), i32 7, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @489, i32 0, i32 0), void (%1*, %29*)* @zif_header, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @490, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @491, i32 0, i32 0), void (%1*, %29*)* @zif_header_remove, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @492, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @493, i32 0, i32 0), void (%1*, %29*)* @zif_headers_sent, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @494, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @495, i32 0, i32 0), void (%1*, %29*)* @zif_headers_list, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @496, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @497, i32 0, i32 0), void (%1*, %29*)* @zif_http_response_code, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @498, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @499, i32 0, i32 0), void (%1*, %29*)* @zif_connection_aborted, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @500, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @501, i32 0, i32 0), void (%1*, %29*)* @zif_connection_status, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @502, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @503, i32 0, i32 0), void (%1*, %29*)* @zif_ignore_user_abort, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @504, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @505, i32 0, i32 0), void (%1*, %29*)* @zif_parse_ini_file, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @506, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @507, i32 0, i32 0), void (%1*, %29*)* @zif_parse_ini_string, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @508, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @509, i32 0, i32 0), void (%1*, %29*)* @zif_is_uploaded_file, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @510, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @511, i32 0, i32 0), void (%1*, %29*)* @zif_move_uploaded_file, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @512, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @513, i32 0, i32 0), void (%1*, %29*)* @zif_gethostbyaddr, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @514, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @515, i32 0, i32 0), void (%1*, %29*)* @zif_gethostbyname, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @516, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @517, i32 0, i32 0), void (%1*, %29*)* @zif_gethostbynamel, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @518, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @519, i32 0, i32 0), void (%1*, %29*)* @zif_gethostname, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @520, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @521, i32 0, i32 0), void (%1*, %29*)* @zif_dns_check_record, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @522, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @523, i32 0, i32 0), void (%1*, %29*)* @zif_dns_check_record, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @522, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @524, i32 0, i32 0), void (%1*, %29*)* @zif_dns_get_mx, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @525, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @526, i32 0, i32 0), void (%1*, %29*)* @zif_dns_get_mx, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @525, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @527, i32 0, i32 0), void (%1*, %29*)* @zif_dns_get_record, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @528, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @529, i32 0, i32 0), void (%1*, %29*)* @zif_intval, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @530, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @531, i32 0, i32 0), void (%1*, %29*)* @zif_floatval, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @532, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @533, i32 0, i32 0), void (%1*, %29*)* @zif_floatval, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @532, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @534, i32 0, i32 0), void (%1*, %29*)* @zif_strval, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @535, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @536, i32 0, i32 0), void (%1*, %29*)* @zif_boolval, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @537, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @538, i32 0, i32 0), void (%1*, %29*)* @zif_gettype, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @539, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @540, i32 0, i32 0), void (%1*, %29*)* @zif_settype, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @541, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @542, i32 0, i32 0), void (%1*, %29*)* @zif_is_null, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @543, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @544, i32 0, i32 0), void (%1*, %29*)* @zif_is_resource, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @545, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @546, i32 0, i32 0), void (%1*, %29*)* @zif_is_bool, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @547, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @548, i32 0, i32 0), void (%1*, %29*)* @zif_is_int, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @549, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @550, i32 0, i32 0), void (%1*, %29*)* @zif_is_float, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @551, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @552, i32 0, i32 0), void (%1*, %29*)* @zif_is_int, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @549, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @553, i32 0, i32 0), void (%1*, %29*)* @zif_is_int, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @549, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @554, i32 0, i32 0), void (%1*, %29*)* @zif_is_float, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @551, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @555, i32 0, i32 0), void (%1*, %29*)* @zif_is_float, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @551, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @556, i32 0, i32 0), void (%1*, %29*)* @zif_is_numeric, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @557, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @558, i32 0, i32 0), void (%1*, %29*)* @zif_is_string, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @559, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @560, i32 0, i32 0), void (%1*, %29*)* @zif_is_array, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @561, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @562, i32 0, i32 0), void (%1*, %29*)* @zif_is_object, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @563, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @564, i32 0, i32 0), void (%1*, %29*)* @zif_is_scalar, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @565, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @566, i32 0, i32 0), void (%1*, %29*)* @zif_is_callable, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @567, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @568, i32 0, i32 0), void (%1*, %29*)* @zif_is_iterable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @569, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @570, i32 0, i32 0), void (%1*, %29*)* @zif_pclose, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @571, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @572, i32 0, i32 0), void (%1*, %29*)* @zif_popen, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @573, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @574, i32 0, i32 0), void (%1*, %29*)* @zif_readfile, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @575, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @576, i32 0, i32 0), void (%1*, %29*)* @zif_rewind, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @577, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @578, i32 0, i32 0), void (%1*, %29*)* @zif_rmdir, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @579, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @580, i32 0, i32 0), void (%1*, %29*)* @zif_umask, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @581, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @582, i32 0, i32 0), void (%1*, %29*)* @zif_fclose, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @583, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @584, i32 0, i32 0), void (%1*, %29*)* @zif_feof, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @585, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @586, i32 0, i32 0), void (%1*, %29*)* @zif_fgetc, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @587, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @588, i32 0, i32 0), void (%1*, %29*)* @zif_fgets, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @589, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @590, i32 0, i32 0), void (%1*, %29*)* @zif_fgetss, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @591, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @592, i32 0, i32 0), void (%1*, %29*)* @zif_fread, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @593, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @594, i32 0, i32 0), void (%1*, %29*)* @php_if_fopen, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @595, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @596, i32 0, i32 0), void (%1*, %29*)* @zif_fpassthru, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @597, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @598, i32 0, i32 0), void (%1*, %29*)* @php_if_ftruncate, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @599, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @600, i32 0, i32 0), void (%1*, %29*)* @php_if_fstat, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @601, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @602, i32 0, i32 0), void (%1*, %29*)* @zif_fseek, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @603, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @604, i32 0, i32 0), void (%1*, %29*)* @zif_ftell, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @605, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @606, i32 0, i32 0), void (%1*, %29*)* @zif_fflush, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @607, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @608, i32 0, i32 0), void (%1*, %29*)* @zif_fwrite, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @609, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @610, i32 0, i32 0), void (%1*, %29*)* @zif_fwrite, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @609, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @611, i32 0, i32 0), void (%1*, %29*)* @zif_mkdir, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @612, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @613, i32 0, i32 0), void (%1*, %29*)* @zif_rename, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @614, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @615, i32 0, i32 0), void (%1*, %29*)* @zif_copy, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @616, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @617, i32 0, i32 0), void (%1*, %29*)* @zif_tempnam, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @618, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @619, i32 0, i32 0), void (%1*, %29*)* @php_if_tmpfile, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @620, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), void (%1*, %29*)* @zif_file, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @622, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @623, i32 0, i32 0), void (%1*, %29*)* @zif_file_get_contents, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @624, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @625, i32 0, i32 0), void (%1*, %29*)* @zif_file_put_contents, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @626, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @627, i32 0, i32 0), void (%1*, %29*)* @zif_stream_select, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @628, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @629, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_create, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @630, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @631, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_set_params, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @632, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @633, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_get_params, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @634, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @635, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_set_option, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @636, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @637, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_get_options, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @638, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @639, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_get_default, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @640, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @641, i32 0, i32 0), void (%1*, %29*)* @zif_stream_context_set_default, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @642, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @643, i32 0, i32 0), void (%1*, %29*)* @zif_stream_filter_prepend, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @644, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @645, i32 0, i32 0), void (%1*, %29*)* @zif_stream_filter_append, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @646, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @647, i32 0, i32 0), void (%1*, %29*)* @zif_stream_filter_remove, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @648, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @649, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_client, %0* getelementptr inbounds ([7 x %0], [7 x %0]* @650, i32 0, i32 0), i32 6, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @651, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_server, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @652, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @653, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_accept, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @654, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @655, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_get_name, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @656, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @657, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_recvfrom, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @658, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @659, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_sendto, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @660, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @661, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_enable_crypto, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @662, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @663, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_shutdown, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @664, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @665, i32 0, i32 0), void (%1*, %29*)* @zif_stream_socket_pair, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @666, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @667, i32 0, i32 0), void (%1*, %29*)* @zif_stream_copy_to_stream, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @668, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @669, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_contents, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @670, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @671, i32 0, i32 0), void (%1*, %29*)* @zif_stream_supports_lock, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @672, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @673, i32 0, i32 0), void (%1*, %29*)* @zif_stream_isatty, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @674, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @675, i32 0, i32 0), void (%1*, %29*)* @zif_fgetcsv, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @676, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @677, i32 0, i32 0), void (%1*, %29*)* @zif_fputcsv, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @678, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @679, i32 0, i32 0), void (%1*, %29*)* @zif_flock, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @680, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @681, i32 0, i32 0), void (%1*, %29*)* @zif_get_meta_tags, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @682, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @683, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_read_buffer, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @684, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @685, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_write_buffer, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @686, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @687, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_write_buffer, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @686, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @688, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_chunk_size, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @689, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @690, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_blocking, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @691, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @692, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_blocking, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @691, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @693, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_meta_data, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @694, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @695, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_line, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @696, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @697, i32 0, i32 0), void (%1*, %29*)* @zif_stream_wrapper_register, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @698, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @699, i32 0, i32 0), void (%1*, %29*)* @zif_stream_wrapper_register, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @698, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @700, i32 0, i32 0), void (%1*, %29*)* @zif_stream_wrapper_unregister, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @701, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @702, i32 0, i32 0), void (%1*, %29*)* @zif_stream_wrapper_restore, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @703, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @704, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_wrappers, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @705, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @706, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_transports, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @707, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @708, i32 0, i32 0), void (%1*, %29*)* @zif_stream_resolve_include_path, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @709, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @710, i32 0, i32 0), void (%1*, %29*)* @zif_stream_is_local, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @711, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @712, i32 0, i32 0), void (%1*, %29*)* @zif_get_headers, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @713, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @714, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_timeout, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @715, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @716, i32 0, i32 0), void (%1*, %29*)* @zif_stream_set_timeout, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @715, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @717, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_meta_data, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @694, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @718, i32 0, i32 0), void (%1*, %29*)* @zif_realpath, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @719, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @720, i32 0, i32 0), void (%1*, %29*)* @zif_fnmatch, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @721, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @722, i32 0, i32 0), void (%1*, %29*)* @zif_fsockopen, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @723, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @724, i32 0, i32 0), void (%1*, %29*)* @zif_pfsockopen, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @725, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @726, i32 0, i32 0), void (%1*, %29*)* @zif_pack, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @727, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @728, i32 0, i32 0), void (%1*, %29*)* @zif_unpack, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @729, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @730, i32 0, i32 0), void (%1*, %29*)* @zif_get_browser, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @731, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @732, i32 0, i32 0), void (%1*, %29*)* @zif_crypt, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @733, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @734, i32 0, i32 0), void (%1*, %29*)* @zif_opendir, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @735, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @736, i32 0, i32 0), void (%1*, %29*)* @zif_closedir, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @737, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @738, i32 0, i32 0), void (%1*, %29*)* @zif_chdir, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @739, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @740, i32 0, i32 0), void (%1*, %29*)* @zif_chroot, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @741, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @742, i32 0, i32 0), void (%1*, %29*)* @zif_getcwd, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @743, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @744, i32 0, i32 0), void (%1*, %29*)* @zif_rewinddir, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @745, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @746, i32 0, i32 0), void (%1*, %29*)* @php_if_readdir, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @747, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @748, i32 0, i32 0), void (%1*, %29*)* @zif_getdir, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @749, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @750, i32 0, i32 0), void (%1*, %29*)* @zif_scandir, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @751, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @752, i32 0, i32 0), void (%1*, %29*)* @zif_glob, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @753, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @754, i32 0, i32 0), void (%1*, %29*)* @zif_fileatime, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @755, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @756, i32 0, i32 0), void (%1*, %29*)* @zif_filectime, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @757, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @758, i32 0, i32 0), void (%1*, %29*)* @zif_filegroup, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @759, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @760, i32 0, i32 0), void (%1*, %29*)* @zif_fileinode, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @761, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @762, i32 0, i32 0), void (%1*, %29*)* @zif_filemtime, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @763, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @764, i32 0, i32 0), void (%1*, %29*)* @zif_fileowner, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @765, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @766, i32 0, i32 0), void (%1*, %29*)* @zif_fileperms, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @767, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @768, i32 0, i32 0), void (%1*, %29*)* @zif_filesize, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @769, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @770, i32 0, i32 0), void (%1*, %29*)* @zif_filetype, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @771, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @772, i32 0, i32 0), void (%1*, %29*)* @zif_file_exists, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @773, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @774, i32 0, i32 0), void (%1*, %29*)* @zif_is_writable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @775, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @776, i32 0, i32 0), void (%1*, %29*)* @zif_is_writable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @775, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @777, i32 0, i32 0), void (%1*, %29*)* @zif_is_readable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @778, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @779, i32 0, i32 0), void (%1*, %29*)* @zif_is_executable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @780, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @781, i32 0, i32 0), void (%1*, %29*)* @zif_is_file, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @782, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @783, i32 0, i32 0), void (%1*, %29*)* @zif_is_dir, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @784, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @785, i32 0, i32 0), void (%1*, %29*)* @zif_is_link, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @786, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @787, i32 0, i32 0), void (%1*, %29*)* @php_if_stat, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @788, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @789, i32 0, i32 0), void (%1*, %29*)* @php_if_lstat, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @790, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @791, i32 0, i32 0), void (%1*, %29*)* @zif_chown, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @792, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @793, i32 0, i32 0), void (%1*, %29*)* @zif_chgrp, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @794, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @795, i32 0, i32 0), void (%1*, %29*)* @zif_lchown, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @796, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @797, i32 0, i32 0), void (%1*, %29*)* @zif_lchgrp, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @798, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @799, i32 0, i32 0), void (%1*, %29*)* @zif_chmod, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @800, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @801, i32 0, i32 0), void (%1*, %29*)* @zif_touch, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @802, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @803, i32 0, i32 0), void (%1*, %29*)* @zif_clearstatcache, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @804, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @805, i32 0, i32 0), void (%1*, %29*)* @zif_disk_total_space, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @806, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @807, i32 0, i32 0), void (%1*, %29*)* @zif_disk_free_space, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @808, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @809, i32 0, i32 0), void (%1*, %29*)* @zif_disk_free_space, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @808, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @810, i32 0, i32 0), void (%1*, %29*)* @zif_realpath_cache_size, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @811, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @812, i32 0, i32 0), void (%1*, %29*)* @zif_realpath_cache_get, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @813, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @814, i32 0, i32 0), void (%1*, %29*)* @zif_mail, %0* getelementptr inbounds ([6 x %0], [6 x %0]* @815, i32 0, i32 0), i32 5, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @816, i32 0, i32 0), void (%1*, %29*)* @zif_ezmlm_hash, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @817, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @818, i32 0, i32 0), void (%1*, %29*)* @zif_openlog, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @819, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @820, i32 0, i32 0), void (%1*, %29*)* @zif_syslog, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @821, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @822, i32 0, i32 0), void (%1*, %29*)* @zif_closelog, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @823, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @824, i32 0, i32 0), void (%1*, %29*)* @zif_lcg_value, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @825, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @826, i32 0, i32 0), void (%1*, %29*)* @zif_metaphone, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @827, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @828, i32 0, i32 0), void (%1*, %29*)* @zif_ob_start, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @829, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @830, i32 0, i32 0), void (%1*, %29*)* @zif_ob_flush, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @831, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @832, i32 0, i32 0), void (%1*, %29*)* @zif_ob_clean, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @833, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @834, i32 0, i32 0), void (%1*, %29*)* @zif_ob_end_flush, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @835, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @836, i32 0, i32 0), void (%1*, %29*)* @zif_ob_end_clean, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @837, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @838, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_flush, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @839, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @840, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_clean, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @841, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @842, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_length, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @843, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @844, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_level, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @845, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @846, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_status, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @847, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @848, i32 0, i32 0), void (%1*, %29*)* @zif_ob_get_contents, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @849, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @850, i32 0, i32 0), void (%1*, %29*)* @zif_ob_implicit_flush, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @851, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @852, i32 0, i32 0), void (%1*, %29*)* @zif_ob_list_handlers, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @853, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @854, i32 0, i32 0), void (%1*, %29*)* @zif_ksort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @855, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @856, i32 0, i32 0), void (%1*, %29*)* @zif_krsort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @857, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @858, i32 0, i32 0), void (%1*, %29*)* @zif_natsort, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @859, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @860, i32 0, i32 0), void (%1*, %29*)* @zif_natcasesort, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @861, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @862, i32 0, i32 0), void (%1*, %29*)* @zif_asort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @863, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @864, i32 0, i32 0), void (%1*, %29*)* @zif_arsort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @865, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @866, i32 0, i32 0), void (%1*, %29*)* @zif_sort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @867, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @868, i32 0, i32 0), void (%1*, %29*)* @zif_rsort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @869, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @870, i32 0, i32 0), void (%1*, %29*)* @zif_usort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @871, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @872, i32 0, i32 0), void (%1*, %29*)* @zif_uasort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @873, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @874, i32 0, i32 0), void (%1*, %29*)* @zif_uksort, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @875, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @876, i32 0, i32 0), void (%1*, %29*)* @zif_shuffle, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @877, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @878, i32 0, i32 0), void (%1*, %29*)* @zif_array_walk, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @879, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @880, i32 0, i32 0), void (%1*, %29*)* @zif_array_walk_recursive, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @881, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @882, i32 0, i32 0), void (%1*, %29*)* @zif_count, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @883, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @884, i32 0, i32 0), void (%1*, %29*)* @zif_end, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @885, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @886, i32 0, i32 0), void (%1*, %29*)* @zif_prev, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @887, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @888, i32 0, i32 0), void (%1*, %29*)* @zif_next, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @889, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @890, i32 0, i32 0), void (%1*, %29*)* @zif_reset, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @891, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @892, i32 0, i32 0), void (%1*, %29*)* @zif_current, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @893, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @894, i32 0, i32 0), void (%1*, %29*)* @zif_key, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @895, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @896, i32 0, i32 0), void (%1*, %29*)* @zif_min, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @897, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @898, i32 0, i32 0), void (%1*, %29*)* @zif_max, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @899, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @900, i32 0, i32 0), void (%1*, %29*)* @zif_in_array, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @901, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @902, i32 0, i32 0), void (%1*, %29*)* @zif_array_search, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @903, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @904, i32 0, i32 0), void (%1*, %29*)* @zif_extract, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @905, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @906, i32 0, i32 0), void (%1*, %29*)* @zif_compact, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @907, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @908, i32 0, i32 0), void (%1*, %29*)* @zif_array_fill, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @909, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @910, i32 0, i32 0), void (%1*, %29*)* @zif_array_fill_keys, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @911, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @912, i32 0, i32 0), void (%1*, %29*)* @zif_range, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @913, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @914, i32 0, i32 0), void (%1*, %29*)* @zif_array_multisort, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @915, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @916, i32 0, i32 0), void (%1*, %29*)* @zif_array_push, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @917, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @918, i32 0, i32 0), void (%1*, %29*)* @zif_array_pop, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @919, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @920, i32 0, i32 0), void (%1*, %29*)* @zif_array_shift, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @921, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @922, i32 0, i32 0), void (%1*, %29*)* @zif_array_unshift, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @923, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @924, i32 0, i32 0), void (%1*, %29*)* @zif_array_splice, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @925, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @926, i32 0, i32 0), void (%1*, %29*)* @zif_array_slice, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @927, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @928, i32 0, i32 0), void (%1*, %29*)* @zif_array_merge, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @929, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @930, i32 0, i32 0), void (%1*, %29*)* @zif_array_merge_recursive, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @931, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @932, i32 0, i32 0), void (%1*, %29*)* @zif_array_replace, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @933, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @934, i32 0, i32 0), void (%1*, %29*)* @zif_array_replace_recursive, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @935, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @936, i32 0, i32 0), void (%1*, %29*)* @zif_array_keys, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @937, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @938, i32 0, i32 0), void (%1*, %29*)* @zif_array_values, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @939, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @940, i32 0, i32 0), void (%1*, %29*)* @zif_array_count_values, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @941, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @942, i32 0, i32 0), void (%1*, %29*)* @zif_array_column, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @943, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @944, i32 0, i32 0), void (%1*, %29*)* @zif_array_reverse, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @945, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @946, i32 0, i32 0), void (%1*, %29*)* @zif_array_reduce, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @947, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @948, i32 0, i32 0), void (%1*, %29*)* @zif_array_pad, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @949, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @950, i32 0, i32 0), void (%1*, %29*)* @zif_array_flip, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @951, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @952, i32 0, i32 0), void (%1*, %29*)* @zif_array_change_key_case, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @953, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @954, i32 0, i32 0), void (%1*, %29*)* @zif_array_rand, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @955, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @956, i32 0, i32 0), void (%1*, %29*)* @zif_array_unique, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @957, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @958, i32 0, i32 0), void (%1*, %29*)* @zif_array_intersect, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @959, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @960, i32 0, i32 0), void (%1*, %29*)* @zif_array_intersect_key, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @961, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @962, i32 0, i32 0), void (%1*, %29*)* @zif_array_intersect_ukey, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @963, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @964, i32 0, i32 0), void (%1*, %29*)* @zif_array_uintersect, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @965, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @966, i32 0, i32 0), void (%1*, %29*)* @zif_array_intersect_assoc, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @967, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @968, i32 0, i32 0), void (%1*, %29*)* @zif_array_uintersect_assoc, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @969, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @970, i32 0, i32 0), void (%1*, %29*)* @zif_array_intersect_uassoc, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @971, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @972, i32 0, i32 0), void (%1*, %29*)* @zif_array_uintersect_uassoc, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @973, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @974, i32 0, i32 0), void (%1*, %29*)* @zif_array_diff, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @975, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @976, i32 0, i32 0), void (%1*, %29*)* @zif_array_diff_key, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @977, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @978, i32 0, i32 0), void (%1*, %29*)* @zif_array_diff_ukey, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @979, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @980, i32 0, i32 0), void (%1*, %29*)* @zif_array_udiff, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @981, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @982, i32 0, i32 0), void (%1*, %29*)* @zif_array_diff_assoc, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @983, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @984, i32 0, i32 0), void (%1*, %29*)* @zif_array_udiff_assoc, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @985, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @986, i32 0, i32 0), void (%1*, %29*)* @zif_array_diff_uassoc, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @987, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @988, i32 0, i32 0), void (%1*, %29*)* @zif_array_udiff_uassoc, %0* getelementptr inbounds ([5 x %0], [5 x %0]* @989, i32 0, i32 0), i32 4, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @990, i32 0, i32 0), void (%1*, %29*)* @zif_array_sum, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @991, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @992, i32 0, i32 0), void (%1*, %29*)* @zif_array_product, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @993, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @994, i32 0, i32 0), void (%1*, %29*)* @zif_array_filter, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @995, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @996, i32 0, i32 0), void (%1*, %29*)* @zif_array_map, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @997, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @998, i32 0, i32 0), void (%1*, %29*)* @zif_array_chunk, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @999, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1000, i32 0, i32 0), void (%1*, %29*)* @zif_array_combine, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1001, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1002, i32 0, i32 0), void (%1*, %29*)* @zif_array_key_exists, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1003, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1004, i32 0, i32 0), void (%1*, %29*)* @zif_current, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @893, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1005, i32 0, i32 0), void (%1*, %29*)* @zif_count, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @883, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1006, i32 0, i32 0), void (%1*, %29*)* @zif_array_key_exists, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1003, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1007, i32 0, i32 0), void (%1*, %29*)* @zif_assert, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1008, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1009, i32 0, i32 0), void (%1*, %29*)* @zif_assert_options, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1010, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1011, i32 0, i32 0), void (%1*, %29*)* @zif_version_compare, %0* getelementptr inbounds ([4 x %0], [4 x %0]* @1012, i32 0, i32 0), i32 3, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1013, i32 0, i32 0), void (%1*, %29*)* @zif_ftok, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1014, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1015, i32 0, i32 0), void (%1*, %29*)* @zif_str_rot13, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @1016, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1017, i32 0, i32 0), void (%1*, %29*)* @zif_stream_get_filters, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @1018, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1019, i32 0, i32 0), void (%1*, %29*)* @zif_stream_filter_register, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1020, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1021, i32 0, i32 0), void (%1*, %29*)* @zif_stream_bucket_make_writeable, %0* getelementptr inbounds ([2 x %0], [2 x %0]* @1022, i32 0, i32 0), i32 1, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1023, i32 0, i32 0), void (%1*, %29*)* @zif_stream_bucket_prepend, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1024, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @1025, i32 0, i32 0), void (%1*, %29*)* @zif_stream_bucket_append, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1026, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1027, i32 0, i32 0), void (%1*, %29*)* @zif_stream_bucket_new, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1028, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @1029, i32 0, i32 0), void (%1*, %29*)* @zif_output_add_rewrite_var, %0* getelementptr inbounds ([3 x %0], [3 x %0]* @1030, i32 0, i32 0), i32 2, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1031, i32 0, i32 0), void (%1*, %29*)* @zif_output_reset_rewrite_vars, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @1032, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1033, i32 0, i32 0), void (%1*, %29*)* @zif_sys_get_temp_dir, %0* getelementptr inbounds ([1 x %0], [1 x %0]* @1034, i32 0, i32 0), i32 0, i32 0 }, { i8*, void (%1*, %29*)*, %0*, i32, i32 } zeroinitializer], align 16
@1035 = internal constant [2 x %33] [%33 { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1446, i32 0, i32 0), i8* null, i8* null, i8 3 }, %33 zeroinitializer], align 16
@1036 = private unnamed_addr constant [9 x i8] c"standard\00", align 1
@1037 = private unnamed_addr constant [11 x i8] c"7.2.28-dev\00", align 1
@1038 = private unnamed_addr constant [16 x i8] c"API20170718,NTS\00", align 1
@basic_functions_module = hidden global %34 { i16 168, i32 20170718, i8 0, i8 0, %35* null, %33* getelementptr inbounds ([2 x %33], [2 x %33]* @1035, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1036, i32 0, i32 0), %36* bitcast ([532 x { i8*, void (%1*, %29*)*, %0*, i32, i32 }]* @basic_functions to %36*), i32 (i32, i32)* @zm_startup_basic, i32 (i32, i32)* @zm_shutdown_basic, i32 (i32, i32)* @zm_activate_basic, i32 (i32, i32)* @zm_deactivate_basic, void (%34*)* @zm_info_basic, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1037, i32 0, i32 0), i64 0, i8* null, void (i8*)* null, void (i8*)* null, i32 ()* null, i32 0, i8 0, i8* null, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1038, i32 0, i32 0) }, align 8
@basic_globals = common dso_local global %37 zeroinitializer, align 8
@1039 = internal global %7 zeroinitializer, align 8
@1040 = internal global %6* null, align 8
@1041 = private unnamed_addr constant [19 x i8] c"CONNECTION_ABORTED\00", align 1
@1042 = private unnamed_addr constant [18 x i8] c"CONNECTION_NORMAL\00", align 1
@1043 = private unnamed_addr constant [19 x i8] c"CONNECTION_TIMEOUT\00", align 1
@1044 = private unnamed_addr constant [9 x i8] c"INI_USER\00", align 1
@1045 = private unnamed_addr constant [11 x i8] c"INI_PERDIR\00", align 1
@1046 = private unnamed_addr constant [11 x i8] c"INI_SYSTEM\00", align 1
@1047 = private unnamed_addr constant [8 x i8] c"INI_ALL\00", align 1
@1048 = private unnamed_addr constant [19 x i8] c"INI_SCANNER_NORMAL\00", align 1
@1049 = private unnamed_addr constant [16 x i8] c"INI_SCANNER_RAW\00", align 1
@1050 = private unnamed_addr constant [18 x i8] c"INI_SCANNER_TYPED\00", align 1
@1051 = private unnamed_addr constant [15 x i8] c"PHP_URL_SCHEME\00", align 1
@1052 = private unnamed_addr constant [13 x i8] c"PHP_URL_HOST\00", align 1
@1053 = private unnamed_addr constant [13 x i8] c"PHP_URL_PORT\00", align 1
@1054 = private unnamed_addr constant [13 x i8] c"PHP_URL_USER\00", align 1
@1055 = private unnamed_addr constant [13 x i8] c"PHP_URL_PASS\00", align 1
@1056 = private unnamed_addr constant [13 x i8] c"PHP_URL_PATH\00", align 1
@1057 = private unnamed_addr constant [14 x i8] c"PHP_URL_QUERY\00", align 1
@1058 = private unnamed_addr constant [17 x i8] c"PHP_URL_FRAGMENT\00", align 1
@1059 = private unnamed_addr constant [18 x i8] c"PHP_QUERY_RFC1738\00", align 1
@1060 = private unnamed_addr constant [18 x i8] c"PHP_QUERY_RFC3986\00", align 1
@1061 = private unnamed_addr constant [4 x i8] c"M_E\00", align 1
@1062 = private unnamed_addr constant [8 x i8] c"M_LOG2E\00", align 1
@1063 = private unnamed_addr constant [9 x i8] c"M_LOG10E\00", align 1
@1064 = private unnamed_addr constant [6 x i8] c"M_LN2\00", align 1
@1065 = private unnamed_addr constant [7 x i8] c"M_LN10\00", align 1
@1066 = private unnamed_addr constant [5 x i8] c"M_PI\00", align 1
@1067 = private unnamed_addr constant [7 x i8] c"M_PI_2\00", align 1
@1068 = private unnamed_addr constant [7 x i8] c"M_PI_4\00", align 1
@1069 = private unnamed_addr constant [7 x i8] c"M_1_PI\00", align 1
@1070 = private unnamed_addr constant [7 x i8] c"M_2_PI\00", align 1
@1071 = private unnamed_addr constant [9 x i8] c"M_SQRTPI\00", align 1
@1072 = private unnamed_addr constant [11 x i8] c"M_2_SQRTPI\00", align 1
@1073 = private unnamed_addr constant [7 x i8] c"M_LNPI\00", align 1
@1074 = private unnamed_addr constant [8 x i8] c"M_EULER\00", align 1
@1075 = private unnamed_addr constant [8 x i8] c"M_SQRT2\00", align 1
@1076 = private unnamed_addr constant [10 x i8] c"M_SQRT1_2\00", align 1
@1077 = private unnamed_addr constant [8 x i8] c"M_SQRT3\00", align 1
@1078 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@1079 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@1080 = private unnamed_addr constant [18 x i8] c"PHP_ROUND_HALF_UP\00", align 1
@1081 = private unnamed_addr constant [20 x i8] c"PHP_ROUND_HALF_DOWN\00", align 1
@1082 = private unnamed_addr constant [20 x i8] c"PHP_ROUND_HALF_EVEN\00", align 1
@1083 = private unnamed_addr constant [19 x i8] c"PHP_ROUND_HALF_ODD\00", align 1
@1084 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@1085 = private unnamed_addr constant [8 x i8] c"streams\00", align 1
@1086 = private unnamed_addr constant [9 x i8] c"browscap\00", align 1
@1087 = private unnamed_addr constant [17 x i8] c"standard_filters\00", align 1
@1088 = private unnamed_addr constant [13 x i8] c"user_filters\00", align 1
@1089 = private unnamed_addr constant [9 x i8] c"password\00", align 1
@1090 = private unnamed_addr constant [4 x i8] c"lcg\00", align 1
@1091 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@1092 = private unnamed_addr constant [15 x i8] c"url_scanner_ex\00", align 1
@1093 = private unnamed_addr constant [13 x i8] c"user_streams\00", align 1
@1094 = private unnamed_addr constant [11 x i8] c"imagetypes\00", align 1
@1095 = private unnamed_addr constant [4 x i8] c"php\00", align 1
@php_stream_php_wrapper = external dso_local global %51, align 8
@php_plain_files_wrapper = external dso_local global %51, align 8
@php_glob_stream_wrapper = external dso_local global %51, align 8
@1096 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@php_stream_rfc2397_wrapper = external dso_local global %51, align 8
@1097 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@php_stream_http_wrapper = external dso_local global %51, align 8
@1098 = private unnamed_addr constant [4 x i8] c"ftp\00", align 1
@php_stream_ftp_wrapper = external dso_local global %51, align 8
@1099 = private unnamed_addr constant [4 x i8] c"dns\00", align 1
@1100 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@empty_fcall_info = external dso_local constant %38, align 8
@empty_fcall_info_cache = external dso_local constant %39, align 8
@file_globals = external dso_local global %65, align 8
@1101 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@1102 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@executor_globals = external dso_local global %67, align 8
@1103 = private unnamed_addr constant [26 x i8] c"Couldn't find constant %s\00", align 1
@1104 = private unnamed_addr constant [22 x i8] c"Invalid in_addr value\00", align 1
@1105 = private unnamed_addr constant [26 x i8] c"An unknown error occurred\00", align 1
@1106 = private unnamed_addr constant [24 x i8] c"Unrecognized address %s\00", align 1
@php_import_environment_variables = external dso_local global void (%29*)*, align 8
@1107 = private unnamed_addr constant [25 x i8] c"Invalid parameter syntax\00", align 1
@environ = external dso_local global i8**, align 8
@1108 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@core_globals = external dso_local global %74, align 8
@1109 = private unnamed_addr constant [8 x i8] c"_SERVER\00", align 1
@1110 = private unnamed_addr constant [5 x i8] c"argv\00", align 1
@php_optidx = external dso_local global i32, align 4
@1111 = private unnamed_addr constant [53 x i8] c"Number of seconds must be greater than or equal to 0\00", align 1
@1112 = private unnamed_addr constant [58 x i8] c"Number of microseconds must be greater than or equal to 0\00", align 1
@1113 = private unnamed_addr constant [41 x i8] c"The seconds value must be greater than 0\00", align 1
@1114 = private unnamed_addr constant [45 x i8] c"The nanoseconds value must be greater than 0\00", align 1
@1115 = private unnamed_addr constant [8 x i8] c"seconds\00", align 1
@1116 = private unnamed_addr constant [12 x i8] c"nanoseconds\00", align 1
@1117 = private unnamed_addr constant [74 x i8] c"nanoseconds was not in the range 0 to 999 999 999 or seconds was negative\00", align 1
@1118 = private unnamed_addr constant [46 x i8] c"Sleep until to time is less than current time\00", align 1
@1119 = private unnamed_addr constant [22 x i8] c"PHP error_log message\00", align 1
@1120 = private unnamed_addr constant [29 x i8] c"TCP/IP option not available!\00", align 1
@1121 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@sapi_module = external dso_local global %76, align 8
@1122 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@1123 = private unnamed_addr constant [8 x i8] c"message\00", align 1
@1124 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@1125 = private unnamed_addr constant [5 x i8] c"line\00", align 1
@1126 = private unnamed_addr constant [64 x i8] c"Cannot call forward_static_call() when no class scope is active\00", align 1
@1127 = private unnamed_addr constant [38 x i8] c"Invalid shutdown callback '%s' passed\00", align 1
@1128 = private unnamed_addr constant [18 x i8] c"highlight.comment\00", align 1
@1129 = private unnamed_addr constant [18 x i8] c"highlight.default\00", align 1
@1130 = private unnamed_addr constant [15 x i8] c"highlight.html\00", align 1
@1131 = private unnamed_addr constant [18 x i8] c"highlight.keyword\00", align 1
@1132 = private unnamed_addr constant [17 x i8] c"highlight.string\00", align 1
@zend_empty_string = external dso_local global %28*, align 8
@1133 = private unnamed_addr constant [17 x i8] c"highlighted code\00", align 1
@zend_one_char_string = external dso_local global [256 x %28*], align 16
@module_registry = external dso_local global %7, align 8
@1134 = private unnamed_addr constant [30 x i8] c"Unable to find extension '%s'\00", align 1
@1135 = private unnamed_addr constant [16 x i8] c"java.class.path\00", align 1
@1136 = private unnamed_addr constant [10 x i8] c"java.home\00", align 1
@1137 = private unnamed_addr constant [9 x i8] c"mail.log\00", align 1
@1138 = private unnamed_addr constant [18 x i8] c"java.library.path\00", align 1
@1139 = private unnamed_addr constant [19 x i8] c"vpopmail.directory\00", align 1
@1140 = private unnamed_addr constant [13 x i8] c"include_path\00", align 1
@1141 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@1142 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@1143 = private unnamed_addr constant [34 x i8] c"Invalid tick callback '%s' passed\00", align 1
@sapi_globals = external dso_local global %79, align 8
@1144 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@1145 = private unnamed_addr constant [28 x i8] c"Unable to move '%s' to '%s'\00", align 1
@1146 = private unnamed_addr constant [26 x i8] c"Filename cannot be empty!\00", align 1
@1147 = private unnamed_addr constant [11 x i8] c"const_name\00", align 1
@1148 = private unnamed_addr constant [14 x i8] c"micro_seconds\00", align 1
@1149 = private unnamed_addr constant [10 x i8] c"timestamp\00", align 1
@1150 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@1151 = private unnamed_addr constant [4 x i8] c"str\00", align 1
@1152 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@1153 = private unnamed_addr constant [6 x i8] c"break\00", align 1
@1154 = private unnamed_addr constant [4 x i8] c"cut\00", align 1
@1155 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@1156 = private unnamed_addr constant [12 x i8] c"quote_style\00", align 1
@1157 = private unnamed_addr constant [9 x i8] c"encoding\00", align 1
@1158 = private unnamed_addr constant [14 x i8] c"double_encode\00", align 1
@1159 = private unnamed_addr constant [6 x i8] c"table\00", align 1
@1160 = private unnamed_addr constant [11 x i8] c"raw_output\00", align 1
@1161 = private unnamed_addr constant [9 x i8] c"filename\00", align 1
@1162 = private unnamed_addr constant [9 x i8] c"iptcdata\00", align 1
@1163 = private unnamed_addr constant [15 x i8] c"jpeg_file_name\00", align 1
@1164 = private unnamed_addr constant [6 x i8] c"spool\00", align 1
@1165 = private unnamed_addr constant [10 x i8] c"imagefile\00", align 1
@1166 = private unnamed_addr constant [5 x i8] c"info\00", align 1
@1167 = private unnamed_addr constant [10 x i8] c"imagetype\00", align 1
@1168 = private unnamed_addr constant [12 x i8] c"include_dot\00", align 1
@1169 = private unnamed_addr constant [5 x i8] c"what\00", align 1
@1170 = private unnamed_addr constant [10 x i8] c"extension\00", align 1
@1171 = private unnamed_addr constant [5 x i8] c"flag\00", align 1
@1172 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@1173 = private unnamed_addr constant [3 x i8] c"s1\00", align 1
@1174 = private unnamed_addr constant [3 x i8] c"s2\00", align 1
@1175 = private unnamed_addr constant [9 x i8] c"haystack\00", align 1
@1176 = private unnamed_addr constant [7 x i8] c"needle\00", align 1
@1177 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@1178 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@1179 = private unnamed_addr constant [5 x i8] c"mask\00", align 1
@1180 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@1181 = private unnamed_addr constant [4 x i8] c"len\00", align 1
@1182 = private unnamed_addr constant [6 x i8] c"token\00", align 1
@1183 = private unnamed_addr constant [19 x i8] c"max_chars_per_line\00", align 1
@1184 = private unnamed_addr constant [9 x i8] c"is_xhtml\00", align 1
@1185 = private unnamed_addr constant [5 x i8] c"path\00", align 1
@1186 = private unnamed_addr constant [7 x i8] c"suffix\00", align 1
@1187 = private unnamed_addr constant [7 x i8] c"levels\00", align 1
@1188 = private unnamed_addr constant [8 x i8] c"options\00", align 1
@1189 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@1190 = private unnamed_addr constant [9 x i8] c"charlist\00", align 1
@1191 = private unnamed_addr constant [13 x i8] c"split_length\00", align 1
@1192 = private unnamed_addr constant [10 x i8] c"char_list\00", align 1
@1193 = private unnamed_addr constant [9 x i8] c"main_str\00", align 1
@1194 = private unnamed_addr constant [17 x i8] c"case_sensitivity\00", align 1
@1195 = private unnamed_addr constant [5 x i8] c"str1\00", align 1
@1196 = private unnamed_addr constant [5 x i8] c"str2\00", align 1
@1197 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@1198 = private unnamed_addr constant [8 x i8] c"replace\00", align 1
@1199 = private unnamed_addr constant [11 x i8] c"delimiters\00", align 1
@1200 = private unnamed_addr constant [5 x i8] c"from\00", align 1
@1201 = private unnamed_addr constant [3 x i8] c"to\00", align 1
@1202 = private unnamed_addr constant [15 x i8] c"character_mask\00", align 1
@1203 = private unnamed_addr constant [7 x i8] c"search\00", align 1
@1204 = private unnamed_addr constant [8 x i8] c"subject\00", align 1
@1205 = private unnamed_addr constant [14 x i8] c"replace_count\00", align 1
@1206 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@1207 = private unnamed_addr constant [5 x i8] c"mult\00", align 1
@1208 = private unnamed_addr constant [9 x i8] c"chunklen\00", align 1
@1209 = private unnamed_addr constant [7 x i8] c"ending\00", align 1
@1210 = private unnamed_addr constant [15 x i8] c"allowable_tags\00", align 1
@1211 = private unnamed_addr constant [8 x i8] c"percent\00", align 1
@1212 = private unnamed_addr constant [10 x i8] c"separator\00", align 1
@1213 = private unnamed_addr constant [6 x i8] c"limit\00", align 1
@1214 = private unnamed_addr constant [5 x i8] c"glue\00", align 1
@1215 = private unnamed_addr constant [7 x i8] c"pieces\00", align 1
@1216 = private unnamed_addr constant [9 x i8] c"category\00", align 1
@1217 = private unnamed_addr constant [8 x i8] c"locales\00", align 1
@1218 = private unnamed_addr constant [5 x i8] c"item\00", align 1
@1219 = private unnamed_addr constant [9 x i8] c"cost_ins\00", align 1
@1220 = private unnamed_addr constant [9 x i8] c"cost_rep\00", align 1
@1221 = private unnamed_addr constant [9 x i8] c"cost_del\00", align 1
@1222 = private unnamed_addr constant [10 x i8] c"codepoint\00", align 1
@1223 = private unnamed_addr constant [10 x i8] c"character\00", align 1
@1224 = private unnamed_addr constant [15 x i8] c"encoded_string\00", align 1
@1225 = private unnamed_addr constant [7 x i8] c"result\00", align 1
@1226 = private unnamed_addr constant [10 x i8] c"delimiter\00", align 1
@1227 = private unnamed_addr constant [10 x i8] c"enclosure\00", align 1
@1228 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@1229 = private unnamed_addr constant [11 x i8] c"pad_length\00", align 1
@1230 = private unnamed_addr constant [11 x i8] c"pad_string\00", align 1
@1231 = private unnamed_addr constant [9 x i8] c"pad_type\00", align 1
@1232 = private unnamed_addr constant [5 x i8] c"args\00", align 1
@1233 = private unnamed_addr constant [7 x i8] c"stream\00", align 1
@1234 = private unnamed_addr constant [5 x i8] c"vars\00", align 1
@1235 = private unnamed_addr constant [4 x i8] c"url\00", align 1
@1236 = private unnamed_addr constant [10 x i8] c"component\00", align 1
@1237 = private unnamed_addr constant [9 x i8] c"formdata\00", align 1
@1238 = private unnamed_addr constant [7 x i8] c"prefix\00", align 1
@1239 = private unnamed_addr constant [14 x i8] c"arg_separator\00", align 1
@1240 = private unnamed_addr constant [9 x i8] c"enc_type\00", align 1
@1241 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@1242 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@1243 = private unnamed_addr constant [8 x i8] c"command\00", align 1
@1244 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@1245 = private unnamed_addr constant [13 x i8] c"return_value\00", align 1
@1246 = private unnamed_addr constant [4 x i8] c"arg\00", align 1
@1247 = private unnamed_addr constant [4 x i8] c"cmd\00", align 1
@1248 = private unnamed_addr constant [15 x i8] c"descriptorspec\00", align 1
@1249 = private unnamed_addr constant [6 x i8] c"pipes\00", align 1
@1250 = private unnamed_addr constant [4 x i8] c"cwd\00", align 1
@1251 = private unnamed_addr constant [4 x i8] c"env\00", align 1
@1252 = private unnamed_addr constant [14 x i8] c"other_options\00", align 1
@1253 = private unnamed_addr constant [8 x i8] c"process\00", align 1
@1254 = private unnamed_addr constant [7 x i8] c"signal\00", align 1
@1255 = private unnamed_addr constant [9 x i8] c"priority\00", align 1
@1256 = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@1257 = private unnamed_addr constant [8 x i8] c"service\00", align 1
@1258 = private unnamed_addr constant [9 x i8] c"protocol\00", align 1
@1259 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@1260 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@1261 = private unnamed_addr constant [6 x i8] c"proto\00", align 1
@1262 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@1263 = private unnamed_addr constant [5 x i8] c"algo\00", align 1
@1264 = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@1265 = private unnamed_addr constant [7 x i8] c"number\00", align 1
@1266 = private unnamed_addr constant [10 x i8] c"precision\00", align 1
@1267 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@1268 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@1269 = private unnamed_addr constant [4 x i8] c"val\00", align 1
@1270 = private unnamed_addr constant [5 x i8] c"base\00", align 1
@1271 = private unnamed_addr constant [9 x i8] c"exponent\00", align 1
@1272 = private unnamed_addr constant [5 x i8] c"num1\00", align 1
@1273 = private unnamed_addr constant [5 x i8] c"num2\00", align 1
@1274 = private unnamed_addr constant [14 x i8] c"binary_number\00", align 1
@1275 = private unnamed_addr constant [19 x i8] c"hexadecimal_number\00", align 1
@1276 = private unnamed_addr constant [13 x i8] c"octal_number\00", align 1
@1277 = private unnamed_addr constant [15 x i8] c"decimal_number\00", align 1
@1278 = private unnamed_addr constant [9 x i8] c"frombase\00", align 1
@1279 = private unnamed_addr constant [7 x i8] c"tobase\00", align 1
@1280 = private unnamed_addr constant [19 x i8] c"num_decimal_places\00", align 1
@1281 = private unnamed_addr constant [14 x i8] c"dec_separator\00", align 1
@1282 = private unnamed_addr constant [20 x i8] c"thousands_separator\00", align 1
@1283 = private unnamed_addr constant [9 x i8] c"dividend\00", align 1
@1284 = private unnamed_addr constant [8 x i8] c"divisor\00", align 1
@1285 = private unnamed_addr constant [8 x i8] c"in_addr\00", align 1
@1286 = private unnamed_addr constant [11 x i8] c"ip_address\00", align 1
@1287 = private unnamed_addr constant [15 x i8] c"proper_address\00", align 1
@1288 = private unnamed_addr constant [8 x i8] c"varname\00", align 1
@1289 = private unnamed_addr constant [11 x i8] c"local_only\00", align 1
@1290 = private unnamed_addr constant [8 x i8] c"setting\00", align 1
@1291 = private unnamed_addr constant [5 x i8] c"opts\00", align 1
@1292 = private unnamed_addr constant [7 x i8] c"optind\00", align 1
@1293 = private unnamed_addr constant [13 x i8] c"get_as_float\00", align 1
@1294 = private unnamed_addr constant [4 x i8] c"who\00", align 1
@1295 = private unnamed_addr constant [13 x i8] c"more_entropy\00", align 1
@1296 = private unnamed_addr constant [9 x i8] c"callback\00", align 1
@1297 = private unnamed_addr constant [12 x i8] c"option_name\00", align 1
@1298 = private unnamed_addr constant [13 x i8] c"message_type\00", align 1
@1299 = private unnamed_addr constant [12 x i8] c"destination\00", align 1
@1300 = private unnamed_addr constant [14 x i8] c"extra_headers\00", align 1
@1301 = private unnamed_addr constant [14 x i8] c"function_name\00", align 1
@1302 = private unnamed_addr constant [11 x i8] c"parameters\00", align 1
@1303 = private unnamed_addr constant [4 x i8] c"var\00", align 1
@1304 = private unnamed_addr constant [24 x i8] c"variable_representation\00", align 1
@1305 = private unnamed_addr constant [16 x i8] c"allowed_classes\00", align 1
@1306 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@1307 = private unnamed_addr constant [11 x i8] c"real_usage\00", align 1
@1308 = private unnamed_addr constant [10 x i8] c"file_name\00", align 1
@1309 = private unnamed_addr constant [8 x i8] c"details\00", align 1
@1310 = private unnamed_addr constant [9 x i8] c"newvalue\00", align 1
@1311 = private unnamed_addr constant [17 x i8] c"new_include_path\00", align 1
@1312 = private unnamed_addr constant [8 x i8] c"expires\00", align 1
@1313 = private unnamed_addr constant [7 x i8] c"domain\00", align 1
@1314 = private unnamed_addr constant [7 x i8] c"secure\00", align 1
@1315 = private unnamed_addr constant [9 x i8] c"httponly\00", align 1
@1316 = private unnamed_addr constant [14 x i8] c"response_code\00", align 1
@1317 = private unnamed_addr constant [17 x i8] c"process_sections\00", align 1
@1318 = private unnamed_addr constant [13 x i8] c"scanner_mode\00", align 1
@1319 = private unnamed_addr constant [11 x i8] c"ini_string\00", align 1
@1320 = private unnamed_addr constant [9 x i8] c"new_path\00", align 1
@1321 = private unnamed_addr constant [9 x i8] c"hostname\00", align 1
@1322 = private unnamed_addr constant [5 x i8] c"host\00", align 1
@1323 = private unnamed_addr constant [8 x i8] c"mxhosts\00", align 1
@1324 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@1325 = private unnamed_addr constant [7 x i8] c"authns\00", align 1
@1326 = private unnamed_addr constant [6 x i8] c"addtl\00", align 1
@1327 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@1328 = private unnamed_addr constant [12 x i8] c"syntax_only\00", align 1
@1329 = private unnamed_addr constant [14 x i8] c"callable_name\00", align 1
@1330 = private unnamed_addr constant [3 x i8] c"fp\00", align 1
@1331 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@1332 = private unnamed_addr constant [17 x i8] c"use_include_path\00", align 1
@1333 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@1334 = private unnamed_addr constant [7 x i8] c"whence\00", align 1
@1335 = private unnamed_addr constant [9 x i8] c"pathname\00", align 1
@1336 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@1337 = private unnamed_addr constant [9 x i8] c"old_name\00", align 1
@1338 = private unnamed_addr constant [9 x i8] c"new_name\00", align 1
@1339 = private unnamed_addr constant [12 x i8] c"source_file\00", align 1
@1340 = private unnamed_addr constant [17 x i8] c"destination_file\00", align 1
@1341 = private unnamed_addr constant [7 x i8] c"maxlen\00", align 1
@1342 = private unnamed_addr constant [13 x i8] c"read_streams\00", align 1
@1343 = private unnamed_addr constant [14 x i8] c"write_streams\00", align 1
@1344 = private unnamed_addr constant [15 x i8] c"except_streams\00", align 1
@1345 = private unnamed_addr constant [7 x i8] c"tv_sec\00", align 1
@1346 = private unnamed_addr constant [8 x i8] c"tv_usec\00", align 1
@1347 = private unnamed_addr constant [7 x i8] c"params\00", align 1
@1348 = private unnamed_addr constant [18 x i8] c"stream_or_context\00", align 1
@1349 = private unnamed_addr constant [12 x i8] c"wrappername\00", align 1
@1350 = private unnamed_addr constant [11 x i8] c"optionname\00", align 1
@1351 = private unnamed_addr constant [11 x i8] c"filtername\00", align 1
@1352 = private unnamed_addr constant [11 x i8] c"read_write\00", align 1
@1353 = private unnamed_addr constant [13 x i8] c"filterparams\00", align 1
@1354 = private unnamed_addr constant [14 x i8] c"stream_filter\00", align 1
@1355 = private unnamed_addr constant [14 x i8] c"remoteaddress\00", align 1
@1356 = private unnamed_addr constant [8 x i8] c"errcode\00", align 1
@1357 = private unnamed_addr constant [10 x i8] c"errstring\00", align 1
@1358 = private unnamed_addr constant [8 x i8] c"timeout\00", align 1
@1359 = private unnamed_addr constant [13 x i8] c"localaddress\00", align 1
@1360 = private unnamed_addr constant [13 x i8] c"serverstream\00", align 1
@1361 = private unnamed_addr constant [9 x i8] c"peername\00", align 1
@1362 = private unnamed_addr constant [10 x i8] c"want_peer\00", align 1
@1363 = private unnamed_addr constant [7 x i8] c"amount\00", align 1
@1364 = private unnamed_addr constant [12 x i8] c"remote_addr\00", align 1
@1365 = private unnamed_addr constant [12 x i8] c"target_addr\00", align 1
@1366 = private unnamed_addr constant [7 x i8] c"enable\00", align 1
@1367 = private unnamed_addr constant [11 x i8] c"cryptokind\00", align 1
@1368 = private unnamed_addr constant [14 x i8] c"sessionstream\00", align 1
@1369 = private unnamed_addr constant [4 x i8] c"how\00", align 1
@1370 = private unnamed_addr constant [7 x i8] c"source\00", align 1
@1371 = private unnamed_addr constant [5 x i8] c"dest\00", align 1
@1372 = private unnamed_addr constant [7 x i8] c"fields\00", align 1
@1373 = private unnamed_addr constant [12 x i8] c"escape_char\00", align 1
@1374 = private unnamed_addr constant [10 x i8] c"operation\00", align 1
@1375 = private unnamed_addr constant [11 x i8] c"wouldblock\00", align 1
@1376 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@1377 = private unnamed_addr constant [11 x i8] c"chunk_size\00", align 1
@1378 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@1379 = private unnamed_addr constant [10 x i8] c"classname\00", align 1
@1380 = private unnamed_addr constant [13 x i8] c"microseconds\00", align 1
@1381 = private unnamed_addr constant [8 x i8] c"pattern\00", align 1
@1382 = private unnamed_addr constant [6 x i8] c"errno\00", align 1
@1383 = private unnamed_addr constant [7 x i8] c"errstr\00", align 1
@1384 = private unnamed_addr constant [13 x i8] c"browser_name\00", align 1
@1385 = private unnamed_addr constant [13 x i8] c"return_array\00", align 1
@1386 = private unnamed_addr constant [5 x i8] c"salt\00", align 1
@1387 = private unnamed_addr constant [11 x i8] c"dir_handle\00", align 1
@1388 = private unnamed_addr constant [10 x i8] c"directory\00", align 1
@1389 = private unnamed_addr constant [14 x i8] c"sorting_order\00", align 1
@1390 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@1391 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@1392 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@1393 = private unnamed_addr constant [6 x i8] c"atime\00", align 1
@1394 = private unnamed_addr constant [21 x i8] c"clear_realpath_cache\00", align 1
@1395 = private unnamed_addr constant [19 x i8] c"additional_headers\00", align 1
@1396 = private unnamed_addr constant [22 x i8] c"additional_parameters\00", align 1
@1397 = private unnamed_addr constant [5 x i8] c"addr\00", align 1
@1398 = private unnamed_addr constant [6 x i8] c"ident\00", align 1
@1399 = private unnamed_addr constant [7 x i8] c"option\00", align 1
@1400 = private unnamed_addr constant [9 x i8] c"facility\00", align 1
@1401 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@1402 = private unnamed_addr constant [7 x i8] c"phones\00", align 1
@1403 = private unnamed_addr constant [14 x i8] c"user_function\00", align 1
@1404 = private unnamed_addr constant [12 x i8] c"full_status\00", align 1
@1405 = private unnamed_addr constant [11 x i8] c"sort_flags\00", align 1
@1406 = private unnamed_addr constant [13 x i8] c"cmp_function\00", align 1
@1407 = private unnamed_addr constant [9 x i8] c"funcname\00", align 1
@1408 = private unnamed_addr constant [9 x i8] c"userdata\00", align 1
@1409 = private unnamed_addr constant [13 x i8] c"extract_type\00", align 1
@1410 = private unnamed_addr constant [10 x i8] c"var_names\00", align 1
@1411 = private unnamed_addr constant [10 x i8] c"start_key\00", align 1
@1412 = private unnamed_addr constant [4 x i8] c"num\00", align 1
@1413 = private unnamed_addr constant [5 x i8] c"keys\00", align 1
@1414 = private unnamed_addr constant [4 x i8] c"low\00", align 1
@1415 = private unnamed_addr constant [5 x i8] c"high\00", align 1
@1416 = private unnamed_addr constant [5 x i8] c"step\00", align 1
@1417 = private unnamed_addr constant [5 x i8] c"arr1\00", align 1
@1418 = private unnamed_addr constant [11 x i8] c"sort_order\00", align 1
@1419 = private unnamed_addr constant [5 x i8] c"arr2\00", align 1
@1420 = private unnamed_addr constant [6 x i8] c"stack\00", align 1
@1421 = private unnamed_addr constant [12 x i8] c"replacement\00", align 1
@1422 = private unnamed_addr constant [14 x i8] c"preserve_keys\00", align 1
@1423 = private unnamed_addr constant [7 x i8] c"arrays\00", align 1
@1424 = private unnamed_addr constant [13 x i8] c"search_value\00", align 1
@1425 = private unnamed_addr constant [11 x i8] c"column_key\00", align 1
@1426 = private unnamed_addr constant [10 x i8] c"index_key\00", align 1
@1427 = private unnamed_addr constant [8 x i8] c"initial\00", align 1
@1428 = private unnamed_addr constant [9 x i8] c"pad_size\00", align 1
@1429 = private unnamed_addr constant [10 x i8] c"pad_value\00", align 1
@1430 = private unnamed_addr constant [5 x i8] c"case\00", align 1
@1431 = private unnamed_addr constant [8 x i8] c"num_req\00", align 1
@1432 = private unnamed_addr constant [26 x i8] c"callback_key_compare_func\00", align 1
@1433 = private unnamed_addr constant [27 x i8] c"callback_data_compare_func\00", align 1
@1434 = private unnamed_addr constant [23 x i8] c"callback_key_comp_func\00", align 1
@1435 = private unnamed_addr constant [24 x i8] c"callback_data_comp_func\00", align 1
@1436 = private unnamed_addr constant [9 x i8] c"use_keys\00", align 1
@1437 = private unnamed_addr constant [7 x i8] c"values\00", align 1
@1438 = private unnamed_addr constant [10 x i8] c"assertion\00", align 1
@1439 = private unnamed_addr constant [12 x i8] c"description\00", align 1
@1440 = private unnamed_addr constant [5 x i8] c"ver1\00", align 1
@1441 = private unnamed_addr constant [5 x i8] c"ver2\00", align 1
@1442 = private unnamed_addr constant [5 x i8] c"oper\00", align 1
@1443 = private unnamed_addr constant [5 x i8] c"proj\00", align 1
@1444 = private unnamed_addr constant [8 x i8] c"brigade\00", align 1
@1445 = private unnamed_addr constant [7 x i8] c"bucket\00", align 1
@1446 = private unnamed_addr constant [8 x i8] c"session\00", align 1
@1447 = private unnamed_addr constant [78 x i8] c"(Registered shutdown functions) Unable to call %s() - function does not exist\00", align 1
@1448 = private unnamed_addr constant [13 x i8] c"global_value\00", align 1
@1449 = private unnamed_addr constant [12 x i8] c"local_value\00", align 1
@1450 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@1451 = private unnamed_addr constant [46 x i8] c"Unable to call %s() - function does not exist\00", align 1
@1452 = private unnamed_addr constant [50 x i8] c"Unable to call %s::%s() - function does not exist\00", align 1
@1453 = private unnamed_addr constant [29 x i8] c"Unable to call tick function\00", align 1
@1454 = private unnamed_addr constant [54 x i8] c"Unable to delete tick function executed at the moment\00", align 1

; Function Attrs: nounwind uwtable
define hidden void @zif_constant(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %28*, align 8
  %6 = alloca %29*, align 8
  %7 = alloca %6*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %29*, align 8
  %22 = alloca %29*, align 8
  %23 = alloca %82*, align 8
  %24 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %25 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = bitcast %6** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %8, align 4
  %30 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %9, align 4
  %31 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %10, align 4
  %32 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %11, align 4
  %38 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %14, align 8
  %41 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %15, align 4
  %42 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %43 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %19, align 4
  %44 = load i32, i32* %12, align 4
  %45 = load %29*, %29** %13, align 8
  %46 = load %29*, %29** %14, align 8
  %47 = load i32, i32* %15, align 4
  %48 = load i8*, i8** %16, align 8
  %49 = load i8, i8* %17, align 1
  %50 = load i8, i8* %18, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %11, align 4
  %53 = load i32, i32* %9, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %11, align 4
  %63 = load i32, i32* %10, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %10, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %11, align 4
  %82 = load i32, i32* %9, align 4
  %83 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %19, align 4
  br label %159

84:                                               ; preds = %71, %61
  store i32 0, i32* %12, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %13, align 8
  %88 = load i32, i32* %12, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %12, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %12, align 4
  %92 = load i32, i32* %9, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %18, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %12, align 4
  %111 = load i32, i32* %9, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %18, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %18, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %12, align 4
  %132 = load i32, i32* %11, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %159

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %13, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %13, align 8
  %145 = load %29*, %29** %13, align 8
  store %29* %145, %29** %14, align 8
  %146 = load %29*, %29** %14, align 8
  %147 = call i32 @1461(%29* %146, %28** %5, i32 0)
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = call i64 @llvm.expect.i64(i64 %153, i64 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %159

157:                                              ; preds = %142
  br label %158

158:                                              ; preds = %157
  br label %159

159:                                              ; preds = %158, %156, %140, %80
  %160 = load i32, i32* %19, align 4
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = call i64 @llvm.expect.i64(i64 %165, i64 0)
  %167 = icmp ne i64 %166, 0
  br i1 %167, label %168, label %191

168:                                              ; preds = %159
  %169 = load i32, i32* %19, align 4
  %170 = icmp eq i32 %169, 2
  br i1 %170, label %171, label %174

171:                                              ; preds = %168
  %172 = load i32, i32* %12, align 4
  %173 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %172, i8* %173)
  br label %190

174:                                              ; preds = %168
  %175 = load i32, i32* %19, align 4
  %176 = icmp eq i32 %175, 3
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %12, align 4
  %179 = load i8*, i8** %16, align 8
  %180 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %178, i8* %179, %29* %180)
  br label %189

181:                                              ; preds = %174
  %182 = load i32, i32* %19, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %181
  %185 = load i32, i32* %12, align 4
  %186 = load i32, i32* %15, align 4
  %187 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %185, i32 %186, %29* %187)
  br label %188

188:                                              ; preds = %184, %181
  br label %189

189:                                              ; preds = %188, %177
  br label %190

190:                                              ; preds = %189, %171
  store i32 1, i32* %20, align 4
  br label %192

191:                                              ; preds = %159
  store i32 0, i32* %20, align 4
  br label %192

192:                                              ; preds = %191, %190
  %193 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %194 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %197) #13
  %198 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = load i32, i32* %20, align 4
  switch i32 %203, label %300 [
    i32 0, label %204
  ]

204:                                              ; preds = %192
  br label %205

205:                                              ; preds = %204
  br label %206

206:                                              ; preds = %205
  %207 = call %6* @zend_get_executed_scope()
  store %6* %207, %6** %7, align 8
  %208 = load %28*, %28** %5, align 8
  %209 = load %6*, %6** %7, align 8
  %210 = call %29* @zend_get_constant_ex(%28* %208, %6* %209, i32 256)
  store %29* %210, %29** %6, align 8
  %211 = load %29*, %29** %6, align 8
  %212 = icmp ne %29* %211, null
  br i1 %212, label %213, label %285

213:                                              ; preds = %206
  br label %214

214:                                              ; preds = %213
  %215 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %215) #13
  %216 = load %29*, %29** %4, align 8
  store %29* %216, %29** %21, align 8
  %217 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %217) #13
  %218 = load %29*, %29** %6, align 8
  store %29* %218, %29** %22, align 8
  %219 = bitcast %82** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %219) #13
  %220 = load %29*, %29** %22, align 8
  %221 = getelementptr inbounds %29, %29* %220, i32 0, i32 0
  %222 = bitcast %30* %221 to %82**
  %223 = load %82*, %82** %222, align 8
  store %82* %223, %82** %23, align 8
  %224 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %224) #13
  %225 = load %29*, %29** %22, align 8
  %226 = getelementptr inbounds %29, %29* %225, i32 0, i32 1
  %227 = bitcast %31* %226 to i32*
  %228 = load i32, i32* %227, align 8
  store i32 %228, i32* %24, align 4
  br label %229

229:                                              ; preds = %214
  %230 = load %82*, %82** %23, align 8
  %231 = load %29*, %29** %21, align 8
  %232 = getelementptr inbounds %29, %29* %231, i32 0, i32 0
  %233 = bitcast %30* %232 to %82**
  store %82* %230, %82** %233, align 8
  %234 = load i32, i32* %24, align 4
  %235 = load %29*, %29** %21, align 8
  %236 = getelementptr inbounds %29, %29* %235, i32 0, i32 1
  %237 = bitcast %31* %236 to i32*
  store i32 %234, i32* %237, align 8
  br label %238

238:                                              ; preds = %229
  br label %239

239:                                              ; preds = %238
  %240 = load i32, i32* %24, align 4
  %241 = and i32 %240, 5120
  %242 = icmp ne i32 %241, 0
  br i1 %242, label %243, label %256

243:                                              ; preds = %239
  %244 = load i32, i32* %24, align 4
  %245 = and i32 %244, 4096
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %247, label %249

247:                                              ; preds = %243
  %248 = load %29*, %29** %21, align 8
  call void @_zval_copy_ctor_func(%29* %248)
  br label %255

249:                                              ; preds = %243
  %250 = load %82*, %82** %23, align 8
  %251 = getelementptr inbounds %82, %82* %250, i32 0, i32 0
  %252 = getelementptr inbounds %8, %8* %251, i32 0, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = add i32 %253, 1
  store i32 %254, i32* %252, align 4
  br label %255

255:                                              ; preds = %249, %247
  br label %256

256:                                              ; preds = %255, %239
  %257 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %257) #13
  %258 = bitcast %82** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %258) #13
  %259 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %259) #13
  %260 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %260) #13
  br label %261

261:                                              ; preds = %256
  br label %262

262:                                              ; preds = %261
  %263 = load %29*, %29** %4, align 8
  %264 = getelementptr inbounds %29, %29* %263, i32 0, i32 1
  %265 = bitcast %31* %264 to %83*
  %266 = getelementptr inbounds %83, %83* %265, i32 0, i32 1
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = and i32 %268, 1
  %270 = icmp ne i32 %269, 0
  br i1 %270, label %271, label %284

271:                                              ; preds = %262
  %272 = load %29*, %29** %4, align 8
  %273 = load %6*, %6** %7, align 8
  %274 = call i32 @zval_update_constant_ex(%29* %272, %6* %273)
  %275 = icmp ne i32 %274, 0
  %276 = xor i1 %275, true
  %277 = xor i1 %276, true
  %278 = zext i1 %277 to i32
  %279 = sext i32 %278 to i64
  %280 = call i64 @llvm.expect.i64(i64 %279, i64 0)
  %281 = icmp ne i64 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %271
  store i32 1, i32* %20, align 4
  br label %300

283:                                              ; preds = %271
  br label %284

284:                                              ; preds = %283, %262
  br label %299

285:                                              ; preds = %206
  %286 = load %15*, %15** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 43), align 8
  %287 = icmp ne %15* %286, null
  br i1 %287, label %292, label %288

288:                                              ; preds = %285
  %289 = load %28*, %28** %5, align 8
  %290 = getelementptr inbounds %28, %28* %289, i32 0, i32 3
  %291 = getelementptr inbounds [1 x i8], [1 x i8]* %290, i32 0, i32 0
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1103, i32 0, i32 0), i8* %291)
  br label %292

292:                                              ; preds = %288, %285
  br label %293

293:                                              ; preds = %292
  %294 = load %29*, %29** %4, align 8
  %295 = getelementptr inbounds %29, %29* %294, i32 0, i32 1
  %296 = bitcast %31* %295 to i32*
  store i32 1, i32* %296, align 8
  br label %297

297:                                              ; preds = %293
  br label %298

298:                                              ; preds = %297
  store i32 1, i32* %20, align 4
  br label %300

299:                                              ; preds = %284
  store i32 0, i32* %20, align 4
  br label %300

300:                                              ; preds = %299, %298, %282, %192
  %301 = bitcast %6** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %301) #13
  %302 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %302) #13
  %303 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %303) #13
  %304 = load i32, i32* %20, align 4
  switch i32 %304, label %306 [
    i32 0, label %305
    i32 1, label %305
  ]

305:                                              ; preds = %300, %300
  ret void

306:                                              ; preds = %300
  unreachable
}

declare dso_local void @zif_bin2hex(%1*, %29*) #1

declare dso_local void @zif_hex2bin(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_sleep(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %29*, align 8
  %12 = alloca %29*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %20 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #13
  br label %21

21:                                               ; preds = %2
  %22 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #13
  store i32 0, i32* %6, align 4
  %23 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #13
  store i32 1, i32* %7, align 4
  %24 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #13
  store i32 1, i32* %8, align 4
  %25 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #13
  %26 = load %1*, %1** %3, align 8
  %27 = getelementptr inbounds %1, %1* %26, i32 0, i32 4
  %28 = getelementptr inbounds %29, %29* %27, i32 0, i32 2
  %29 = bitcast %32* %28 to i32*
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %9, align 4
  %31 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  %32 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  %33 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %33) #13
  store %29* null, %29** %12, align 8
  %34 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 0, i32* %13, align 4
  %35 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %35) #13
  store i8* null, i8** %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %15) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  store i8 0, i8* %16, align 1
  %36 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  store i32 0, i32* %17, align 4
  %37 = load i32, i32* %10, align 4
  %38 = load %29*, %29** %11, align 8
  %39 = load %29*, %29** %12, align 8
  %40 = load i32, i32* %13, align 4
  %41 = load i8*, i8** %14, align 8
  %42 = load i8, i8* %15, align 1
  %43 = load i8, i8* %16, align 1
  br label %44

44:                                               ; preds = %21
  %45 = load i32, i32* %9, align 4
  %46 = load i32, i32* %7, align 4
  %47 = icmp slt i32 %45, %46
  %48 = xor i1 %47, true
  %49 = xor i1 %48, true
  %50 = zext i1 %49 to i32
  %51 = sext i32 %50 to i64
  %52 = call i64 @llvm.expect.i64(i64 %51, i64 0)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %44
  %55 = load i32, i32* %9, align 4
  %56 = load i32, i32* %8, align 4
  %57 = icmp sgt i32 %55, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = call i64 @llvm.expect.i64(i64 %61, i64 0)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %77

64:                                               ; preds = %54
  %65 = load i32, i32* %8, align 4
  %66 = icmp sge i32 %65, 0
  %67 = xor i1 %66, true
  %68 = xor i1 %67, true
  %69 = zext i1 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = call i64 @llvm.expect.i64(i64 %70, i64 1)
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %64, %44
  %74 = load i32, i32* %9, align 4
  %75 = load i32, i32* %7, align 4
  %76 = load i32, i32* %8, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %74, i32 %75, i32 %76)
  store i32 1, i32* %17, align 4
  br label %152

77:                                               ; preds = %64, %54
  store i32 0, i32* %10, align 4
  %78 = load %1*, %1** %3, align 8
  %79 = bitcast %1* %78 to %29*
  %80 = getelementptr inbounds %29, %29* %79, i64 4
  store %29* %80, %29** %11, align 8
  %81 = load i32, i32* %10, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %10, align 4
  br label %83

83:                                               ; preds = %77
  %84 = load i32, i32* %10, align 4
  %85 = load i32, i32* %7, align 4
  %86 = icmp sle i32 %84, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %83
  %88 = load i8, i8* %16, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp eq i32 %89, 1
  br label %91

91:                                               ; preds = %87, %83
  %92 = phi i1 [ true, %83 ], [ %90, %87 ]
  %93 = xor i1 %92, true
  %94 = zext i1 %93 to i32
  %95 = sext i32 %94 to i64
  %96 = call i64 @llvm.expect.i64(i64 %95, i64 0)
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %91
  unreachable

99:                                               ; preds = %91
  br label %100

100:                                              ; preds = %99
  br label %101

101:                                              ; preds = %100
  br label %102

102:                                              ; preds = %101
  %103 = load i32, i32* %10, align 4
  %104 = load i32, i32* %7, align 4
  %105 = icmp sgt i32 %103, %104
  br i1 %105, label %110, label %106

106:                                              ; preds = %102
  %107 = load i8, i8* %16, align 1
  %108 = zext i8 %107 to i32
  %109 = icmp eq i32 %108, 0
  br label %110

110:                                              ; preds = %106, %102
  %111 = phi i1 [ true, %102 ], [ %109, %106 ]
  %112 = xor i1 %111, true
  %113 = zext i1 %112 to i32
  %114 = sext i32 %113 to i64
  %115 = call i64 @llvm.expect.i64(i64 %114, i64 0)
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %110
  unreachable

118:                                              ; preds = %110
  br label %119

119:                                              ; preds = %118
  br label %120

120:                                              ; preds = %119
  %121 = load i8, i8* %16, align 1
  %122 = icmp ne i8 %121, 0
  br i1 %122, label %123, label %135

123:                                              ; preds = %120
  %124 = load i32, i32* %10, align 4
  %125 = load i32, i32* %9, align 4
  %126 = icmp sgt i32 %124, %125
  %127 = xor i1 %126, true
  %128 = xor i1 %127, true
  %129 = zext i1 %128 to i32
  %130 = sext i32 %129 to i64
  %131 = call i64 @llvm.expect.i64(i64 %130, i64 0)
  %132 = icmp ne i64 %131, 0
  br i1 %132, label %133, label %134

133:                                              ; preds = %123
  br label %152

134:                                              ; preds = %123
  br label %135

135:                                              ; preds = %134, %120
  %136 = load %29*, %29** %11, align 8
  %137 = getelementptr inbounds %29, %29* %136, i32 1
  store %29* %137, %29** %11, align 8
  %138 = load %29*, %29** %11, align 8
  store %29* %138, %29** %12, align 8
  %139 = load %29*, %29** %12, align 8
  %140 = call i32 @1464(%29* %139, i64* %5, i8* %15, i32 0, i32 0)
  %141 = icmp ne i32 %140, 0
  %142 = xor i1 %141, true
  %143 = xor i1 %142, true
  %144 = xor i1 %143, true
  %145 = zext i1 %144 to i32
  %146 = sext i32 %145 to i64
  %147 = call i64 @llvm.expect.i64(i64 %146, i64 0)
  %148 = icmp ne i64 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %135
  store i32 0, i32* %13, align 4
  store i32 4, i32* %17, align 4
  br label %152

150:                                              ; preds = %135
  br label %151

151:                                              ; preds = %150
  br label %152

152:                                              ; preds = %151, %149, %133, %73
  %153 = load i32, i32* %17, align 4
  %154 = icmp ne i32 %153, 0
  %155 = xor i1 %154, true
  %156 = xor i1 %155, true
  %157 = zext i1 %156 to i32
  %158 = sext i32 %157 to i64
  %159 = call i64 @llvm.expect.i64(i64 %158, i64 0)
  %160 = icmp ne i64 %159, 0
  br i1 %160, label %161, label %190

161:                                              ; preds = %152
  %162 = load i32, i32* %17, align 4
  %163 = icmp eq i32 %162, 2
  br i1 %163, label %164, label %167

164:                                              ; preds = %161
  %165 = load i32, i32* %10, align 4
  %166 = load i8*, i8** %14, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %165, i8* %166)
  br label %183

167:                                              ; preds = %161
  %168 = load i32, i32* %17, align 4
  %169 = icmp eq i32 %168, 3
  br i1 %169, label %170, label %174

170:                                              ; preds = %167
  %171 = load i32, i32* %10, align 4
  %172 = load i8*, i8** %14, align 8
  %173 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %171, i8* %172, %29* %173)
  br label %182

174:                                              ; preds = %167
  %175 = load i32, i32* %17, align 4
  %176 = icmp eq i32 %175, 4
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %10, align 4
  %179 = load i32, i32* %13, align 4
  %180 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %178, i32 %179, %29* %180)
  br label %181

181:                                              ; preds = %177, %174
  br label %182

182:                                              ; preds = %181, %170
  br label %183

183:                                              ; preds = %182, %164
  br label %184

184:                                              ; preds = %183
  %185 = load %29*, %29** %4, align 8
  %186 = getelementptr inbounds %29, %29* %185, i32 0, i32 1
  %187 = bitcast %31* %186 to i32*
  store i32 2, i32* %187, align 8
  br label %188

188:                                              ; preds = %184
  br label %189

189:                                              ; preds = %188
  store i32 1, i32* %18, align 4
  br label %191

190:                                              ; preds = %152
  store i32 0, i32* %18, align 4
  br label %191

191:                                              ; preds = %190, %189
  %192 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %15) #13
  %193 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  %194 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %195) #13
  %196 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = load i32, i32* %18, align 4
  switch i32 %202, label %229 [
    i32 0, label %203
  ]

203:                                              ; preds = %191
  br label %204

204:                                              ; preds = %203
  br label %205

205:                                              ; preds = %204
  %206 = load i64, i64* %5, align 8
  %207 = icmp slt i64 %206, 0
  br i1 %207, label %208, label %215

208:                                              ; preds = %205
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @1111, i32 0, i32 0))
  br label %209

209:                                              ; preds = %208
  %210 = load %29*, %29** %4, align 8
  %211 = getelementptr inbounds %29, %29* %210, i32 0, i32 1
  %212 = bitcast %31* %211 to i32*
  store i32 2, i32* %212, align 8
  br label %213

213:                                              ; preds = %209
  br label %214

214:                                              ; preds = %213
  store i32 1, i32* %18, align 4
  br label %229

215:                                              ; preds = %205
  %216 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %216) #13
  %217 = load %29*, %29** %4, align 8
  store %29* %217, %29** %19, align 8
  %218 = load i64, i64* %5, align 8
  %219 = trunc i64 %218 to i32
  %220 = call i32 @sleep(i32 %219)
  %221 = zext i32 %220 to i64
  %222 = load %29*, %29** %19, align 8
  %223 = getelementptr inbounds %29, %29* %222, i32 0, i32 0
  %224 = bitcast %30* %223 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load %29*, %29** %19, align 8
  %226 = getelementptr inbounds %29, %29* %225, i32 0, i32 1
  %227 = bitcast %31* %226 to i32*
  store i32 4, i32* %227, align 8
  %228 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %228) #13
  store i32 1, i32* %18, align 4
  br label %229

229:                                              ; preds = %215, %214, %191
  %230 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %230) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_usleep(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %29*, align 8
  %12 = alloca %29*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %19 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #13
  br label %20

20:                                               ; preds = %2
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #13
  store i32 0, i32* %6, align 4
  %22 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #13
  store i32 1, i32* %7, align 4
  %23 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #13
  store i32 1, i32* %8, align 4
  %24 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #13
  %25 = load %1*, %1** %3, align 8
  %26 = getelementptr inbounds %1, %1* %25, i32 0, i32 4
  %27 = getelementptr inbounds %29, %29* %26, i32 0, i32 2
  %28 = bitcast %32* %27 to i32*
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  %32 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  store %29* null, %29** %12, align 8
  %33 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %13, align 4
  %34 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  store i8* null, i8** %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %15) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  store i8 0, i8* %16, align 1
  %35 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 0, i32* %17, align 4
  %36 = load i32, i32* %10, align 4
  %37 = load %29*, %29** %11, align 8
  %38 = load %29*, %29** %12, align 8
  %39 = load i32, i32* %13, align 4
  %40 = load i8*, i8** %14, align 8
  %41 = load i8, i8* %15, align 1
  %42 = load i8, i8* %16, align 1
  br label %43

43:                                               ; preds = %20
  %44 = load i32, i32* %9, align 4
  %45 = load i32, i32* %7, align 4
  %46 = icmp slt i32 %44, %45
  %47 = xor i1 %46, true
  %48 = xor i1 %47, true
  %49 = zext i1 %48 to i32
  %50 = sext i32 %49 to i64
  %51 = call i64 @llvm.expect.i64(i64 %50, i64 0)
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %72, label %53

53:                                               ; preds = %43
  %54 = load i32, i32* %9, align 4
  %55 = load i32, i32* %8, align 4
  %56 = icmp sgt i32 %54, %55
  %57 = xor i1 %56, true
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = call i64 @llvm.expect.i64(i64 %60, i64 0)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %53
  %64 = load i32, i32* %8, align 4
  %65 = icmp sge i32 %64, 0
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 1)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %63, %43
  %73 = load i32, i32* %9, align 4
  %74 = load i32, i32* %7, align 4
  %75 = load i32, i32* %8, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %73, i32 %74, i32 %75)
  store i32 1, i32* %17, align 4
  br label %151

76:                                               ; preds = %63, %53
  store i32 0, i32* %10, align 4
  %77 = load %1*, %1** %3, align 8
  %78 = bitcast %1* %77 to %29*
  %79 = getelementptr inbounds %29, %29* %78, i64 4
  store %29* %79, %29** %11, align 8
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %10, align 4
  br label %82

82:                                               ; preds = %76
  %83 = load i32, i32* %10, align 4
  %84 = load i32, i32* %7, align 4
  %85 = icmp sle i32 %83, %84
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = load i8, i8* %16, align 1
  %88 = zext i8 %87 to i32
  %89 = icmp eq i32 %88, 1
  br label %90

90:                                               ; preds = %86, %82
  %91 = phi i1 [ true, %82 ], [ %89, %86 ]
  %92 = xor i1 %91, true
  %93 = zext i1 %92 to i32
  %94 = sext i32 %93 to i64
  %95 = call i64 @llvm.expect.i64(i64 %94, i64 0)
  %96 = icmp ne i64 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  unreachable

98:                                               ; preds = %90
  br label %99

99:                                               ; preds = %98
  br label %100

100:                                              ; preds = %99
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* %10, align 4
  %103 = load i32, i32* %7, align 4
  %104 = icmp sgt i32 %102, %103
  br i1 %104, label %109, label %105

105:                                              ; preds = %101
  %106 = load i8, i8* %16, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp eq i32 %107, 0
  br label %109

109:                                              ; preds = %105, %101
  %110 = phi i1 [ true, %101 ], [ %108, %105 ]
  %111 = xor i1 %110, true
  %112 = zext i1 %111 to i32
  %113 = sext i32 %112 to i64
  %114 = call i64 @llvm.expect.i64(i64 %113, i64 0)
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %109
  unreachable

117:                                              ; preds = %109
  br label %118

118:                                              ; preds = %117
  br label %119

119:                                              ; preds = %118
  %120 = load i8, i8* %16, align 1
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %122, label %134

122:                                              ; preds = %119
  %123 = load i32, i32* %10, align 4
  %124 = load i32, i32* %9, align 4
  %125 = icmp sgt i32 %123, %124
  %126 = xor i1 %125, true
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  %129 = sext i32 %128 to i64
  %130 = call i64 @llvm.expect.i64(i64 %129, i64 0)
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %122
  br label %151

133:                                              ; preds = %122
  br label %134

134:                                              ; preds = %133, %119
  %135 = load %29*, %29** %11, align 8
  %136 = getelementptr inbounds %29, %29* %135, i32 1
  store %29* %136, %29** %11, align 8
  %137 = load %29*, %29** %11, align 8
  store %29* %137, %29** %12, align 8
  %138 = load %29*, %29** %12, align 8
  %139 = call i32 @1464(%29* %138, i64* %5, i8* %15, i32 0, i32 0)
  %140 = icmp ne i32 %139, 0
  %141 = xor i1 %140, true
  %142 = xor i1 %141, true
  %143 = xor i1 %142, true
  %144 = zext i1 %143 to i32
  %145 = sext i32 %144 to i64
  %146 = call i64 @llvm.expect.i64(i64 %145, i64 0)
  %147 = icmp ne i64 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %134
  store i32 0, i32* %13, align 4
  store i32 4, i32* %17, align 4
  br label %151

149:                                              ; preds = %134
  br label %150

150:                                              ; preds = %149
  br label %151

151:                                              ; preds = %150, %148, %132, %72
  %152 = load i32, i32* %17, align 4
  %153 = icmp ne i32 %152, 0
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %183

160:                                              ; preds = %151
  %161 = load i32, i32* %17, align 4
  %162 = icmp eq i32 %161, 2
  br i1 %162, label %163, label %166

163:                                              ; preds = %160
  %164 = load i32, i32* %10, align 4
  %165 = load i8*, i8** %14, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %164, i8* %165)
  br label %182

166:                                              ; preds = %160
  %167 = load i32, i32* %17, align 4
  %168 = icmp eq i32 %167, 3
  br i1 %168, label %169, label %173

169:                                              ; preds = %166
  %170 = load i32, i32* %10, align 4
  %171 = load i8*, i8** %14, align 8
  %172 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %170, i8* %171, %29* %172)
  br label %181

173:                                              ; preds = %166
  %174 = load i32, i32* %17, align 4
  %175 = icmp eq i32 %174, 4
  br i1 %175, label %176, label %180

176:                                              ; preds = %173
  %177 = load i32, i32* %10, align 4
  %178 = load i32, i32* %13, align 4
  %179 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %177, i32 %178, %29* %179)
  br label %180

180:                                              ; preds = %176, %173
  br label %181

181:                                              ; preds = %180, %169
  br label %182

182:                                              ; preds = %181, %163
  store i32 1, i32* %18, align 4
  br label %184

183:                                              ; preds = %151
  store i32 0, i32* %18, align 4
  br label %184

184:                                              ; preds = %183, %182
  %185 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %185) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %15) #13
  %186 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %186) #13
  %187 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %187) #13
  %188 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %188) #13
  %189 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %189) #13
  %190 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %190) #13
  %191 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %191) #13
  %192 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  %193 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  %194 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = load i32, i32* %18, align 4
  switch i32 %195, label %212 [
    i32 0, label %196
  ]

196:                                              ; preds = %184
  br label %197

197:                                              ; preds = %196
  br label %198

198:                                              ; preds = %197
  %199 = load i64, i64* %5, align 8
  %200 = icmp slt i64 %199, 0
  br i1 %200, label %201, label %208

201:                                              ; preds = %198
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @1112, i32 0, i32 0))
  br label %202

202:                                              ; preds = %201
  %203 = load %29*, %29** %4, align 8
  %204 = getelementptr inbounds %29, %29* %203, i32 0, i32 1
  %205 = bitcast %31* %204 to i32*
  store i32 2, i32* %205, align 8
  br label %206

206:                                              ; preds = %202
  br label %207

207:                                              ; preds = %206
  store i32 1, i32* %18, align 4
  br label %212

208:                                              ; preds = %198
  %209 = load i64, i64* %5, align 8
  %210 = trunc i64 %209 to i32
  %211 = call i32 @usleep(i32 %210)
  store i32 0, i32* %18, align 4
  br label %212

212:                                              ; preds = %208, %207, %184
  %213 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %213) #13
  %214 = load i32, i32* %18, align 4
  switch i32 %214, label %216 [
    i32 0, label %215
    i32 1, label %215
  ]

215:                                              ; preds = %212, %212
  ret void

216:                                              ; preds = %212
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_time_nanosleep(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %44, align 8
  %8 = alloca %44, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %22 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %23 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %44* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %24) #13
  %25 = bitcast %44* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %25) #13
  br label %26

26:                                               ; preds = %2
  %27 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  store i32 0, i32* %9, align 4
  %28 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 2, i32* %10, align 4
  %29 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 2, i32* %11, align 4
  %30 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = load %1*, %1** %3, align 8
  %32 = getelementptr inbounds %1, %1* %31, i32 0, i32 4
  %33 = getelementptr inbounds %29, %29* %32, i32 0, i32 2
  %34 = bitcast %32* %33 to i32*
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %12, align 4
  %36 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  %38 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  store %29* null, %29** %15, align 8
  %39 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  store i32 0, i32* %16, align 4
  %40 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %41 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %20, align 4
  %42 = load i32, i32* %13, align 4
  %43 = load %29*, %29** %14, align 8
  %44 = load %29*, %29** %15, align 8
  %45 = load i32, i32* %16, align 4
  %46 = load i8*, i8** %17, align 8
  %47 = load i8, i8* %18, align 1
  %48 = load i8, i8* %19, align 1
  br label %49

49:                                               ; preds = %26
  %50 = load i32, i32* %12, align 4
  %51 = load i32, i32* %10, align 4
  %52 = icmp slt i32 %50, %51
  %53 = xor i1 %52, true
  %54 = xor i1 %53, true
  %55 = zext i1 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = call i64 @llvm.expect.i64(i64 %56, i64 0)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %78, label %59

59:                                               ; preds = %49
  %60 = load i32, i32* %12, align 4
  %61 = load i32, i32* %11, align 4
  %62 = icmp sgt i32 %60, %61
  %63 = xor i1 %62, true
  %64 = xor i1 %63, true
  %65 = zext i1 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = call i64 @llvm.expect.i64(i64 %66, i64 0)
  %68 = icmp ne i64 %67, 0
  br i1 %68, label %69, label %82

69:                                               ; preds = %59
  %70 = load i32, i32* %11, align 4
  %71 = icmp sge i32 %70, 0
  %72 = xor i1 %71, true
  %73 = xor i1 %72, true
  %74 = zext i1 %73 to i32
  %75 = sext i32 %74 to i64
  %76 = call i64 @llvm.expect.i64(i64 %75, i64 1)
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %69, %49
  %79 = load i32, i32* %12, align 4
  %80 = load i32, i32* %10, align 4
  %81 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %79, i32 %80, i32 %81)
  store i32 1, i32* %20, align 4
  br label %227

82:                                               ; preds = %69, %59
  store i32 0, i32* %13, align 4
  %83 = load %1*, %1** %3, align 8
  %84 = bitcast %1* %83 to %29*
  %85 = getelementptr inbounds %29, %29* %84, i64 4
  store %29* %85, %29** %14, align 8
  %86 = load i32, i32* %13, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %13, align 4
  br label %88

88:                                               ; preds = %82
  %89 = load i32, i32* %13, align 4
  %90 = load i32, i32* %10, align 4
  %91 = icmp sle i32 %89, %90
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load i8, i8* %19, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp eq i32 %94, 1
  br label %96

96:                                               ; preds = %92, %88
  %97 = phi i1 [ true, %88 ], [ %95, %92 ]
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = call i64 @llvm.expect.i64(i64 %100, i64 0)
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %96
  unreachable

104:                                              ; preds = %96
  br label %105

105:                                              ; preds = %104
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  %108 = load i32, i32* %13, align 4
  %109 = load i32, i32* %10, align 4
  %110 = icmp sgt i32 %108, %109
  br i1 %110, label %115, label %111

111:                                              ; preds = %107
  %112 = load i8, i8* %19, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp eq i32 %113, 0
  br label %115

115:                                              ; preds = %111, %107
  %116 = phi i1 [ true, %107 ], [ %114, %111 ]
  %117 = xor i1 %116, true
  %118 = zext i1 %117 to i32
  %119 = sext i32 %118 to i64
  %120 = call i64 @llvm.expect.i64(i64 %119, i64 0)
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %115
  unreachable

123:                                              ; preds = %115
  br label %124

124:                                              ; preds = %123
  br label %125

125:                                              ; preds = %124
  %126 = load i8, i8* %19, align 1
  %127 = icmp ne i8 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %125
  %129 = load i32, i32* %13, align 4
  %130 = load i32, i32* %12, align 4
  %131 = icmp sgt i32 %129, %130
  %132 = xor i1 %131, true
  %133 = xor i1 %132, true
  %134 = zext i1 %133 to i32
  %135 = sext i32 %134 to i64
  %136 = call i64 @llvm.expect.i64(i64 %135, i64 0)
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %128
  br label %227

139:                                              ; preds = %128
  br label %140

140:                                              ; preds = %139, %125
  %141 = load %29*, %29** %14, align 8
  %142 = getelementptr inbounds %29, %29* %141, i32 1
  store %29* %142, %29** %14, align 8
  %143 = load %29*, %29** %14, align 8
  store %29* %143, %29** %15, align 8
  %144 = load %29*, %29** %15, align 8
  %145 = call i32 @1464(%29* %144, i64* %5, i8* %18, i32 0, i32 0)
  %146 = icmp ne i32 %145, 0
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = zext i1 %149 to i32
  %151 = sext i32 %150 to i64
  %152 = call i64 @llvm.expect.i64(i64 %151, i64 0)
  %153 = icmp ne i64 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %140
  store i32 0, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %227

155:                                              ; preds = %140
  %156 = load i32, i32* %13, align 4
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %13, align 4
  br label %158

158:                                              ; preds = %155
  %159 = load i32, i32* %13, align 4
  %160 = load i32, i32* %10, align 4
  %161 = icmp sle i32 %159, %160
  br i1 %161, label %166, label %162

162:                                              ; preds = %158
  %163 = load i8, i8* %19, align 1
  %164 = zext i8 %163 to i32
  %165 = icmp eq i32 %164, 1
  br label %166

166:                                              ; preds = %162, %158
  %167 = phi i1 [ true, %158 ], [ %165, %162 ]
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  %170 = sext i32 %169 to i64
  %171 = call i64 @llvm.expect.i64(i64 %170, i64 0)
  %172 = icmp ne i64 %171, 0
  br i1 %172, label %173, label %174

173:                                              ; preds = %166
  unreachable

174:                                              ; preds = %166
  br label %175

175:                                              ; preds = %174
  br label %176

176:                                              ; preds = %175
  br label %177

177:                                              ; preds = %176
  %178 = load i32, i32* %13, align 4
  %179 = load i32, i32* %10, align 4
  %180 = icmp sgt i32 %178, %179
  br i1 %180, label %185, label %181

181:                                              ; preds = %177
  %182 = load i8, i8* %19, align 1
  %183 = zext i8 %182 to i32
  %184 = icmp eq i32 %183, 0
  br label %185

185:                                              ; preds = %181, %177
  %186 = phi i1 [ true, %177 ], [ %184, %181 ]
  %187 = xor i1 %186, true
  %188 = zext i1 %187 to i32
  %189 = sext i32 %188 to i64
  %190 = call i64 @llvm.expect.i64(i64 %189, i64 0)
  %191 = icmp ne i64 %190, 0
  br i1 %191, label %192, label %193

192:                                              ; preds = %185
  unreachable

193:                                              ; preds = %185
  br label %194

194:                                              ; preds = %193
  br label %195

195:                                              ; preds = %194
  %196 = load i8, i8* %19, align 1
  %197 = icmp ne i8 %196, 0
  br i1 %197, label %198, label %210

198:                                              ; preds = %195
  %199 = load i32, i32* %13, align 4
  %200 = load i32, i32* %12, align 4
  %201 = icmp sgt i32 %199, %200
  %202 = xor i1 %201, true
  %203 = xor i1 %202, true
  %204 = zext i1 %203 to i32
  %205 = sext i32 %204 to i64
  %206 = call i64 @llvm.expect.i64(i64 %205, i64 0)
  %207 = icmp ne i64 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %198
  br label %227

209:                                              ; preds = %198
  br label %210

210:                                              ; preds = %209, %195
  %211 = load %29*, %29** %14, align 8
  %212 = getelementptr inbounds %29, %29* %211, i32 1
  store %29* %212, %29** %14, align 8
  %213 = load %29*, %29** %14, align 8
  store %29* %213, %29** %15, align 8
  %214 = load %29*, %29** %15, align 8
  %215 = call i32 @1464(%29* %214, i64* %6, i8* %18, i32 0, i32 0)
  %216 = icmp ne i32 %215, 0
  %217 = xor i1 %216, true
  %218 = xor i1 %217, true
  %219 = xor i1 %218, true
  %220 = zext i1 %219 to i32
  %221 = sext i32 %220 to i64
  %222 = call i64 @llvm.expect.i64(i64 %221, i64 0)
  %223 = icmp ne i64 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %210
  store i32 0, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %227

225:                                              ; preds = %210
  br label %226

226:                                              ; preds = %225
  br label %227

227:                                              ; preds = %226, %224, %208, %154, %138, %78
  %228 = load i32, i32* %20, align 4
  %229 = icmp ne i32 %228, 0
  %230 = xor i1 %229, true
  %231 = xor i1 %230, true
  %232 = zext i1 %231 to i32
  %233 = sext i32 %232 to i64
  %234 = call i64 @llvm.expect.i64(i64 %233, i64 0)
  %235 = icmp ne i64 %234, 0
  br i1 %235, label %236, label %259

236:                                              ; preds = %227
  %237 = load i32, i32* %20, align 4
  %238 = icmp eq i32 %237, 2
  br i1 %238, label %239, label %242

239:                                              ; preds = %236
  %240 = load i32, i32* %13, align 4
  %241 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %240, i8* %241)
  br label %258

242:                                              ; preds = %236
  %243 = load i32, i32* %20, align 4
  %244 = icmp eq i32 %243, 3
  br i1 %244, label %245, label %249

245:                                              ; preds = %242
  %246 = load i32, i32* %13, align 4
  %247 = load i8*, i8** %17, align 8
  %248 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %246, i8* %247, %29* %248)
  br label %257

249:                                              ; preds = %242
  %250 = load i32, i32* %20, align 4
  %251 = icmp eq i32 %250, 4
  br i1 %251, label %252, label %256

252:                                              ; preds = %249
  %253 = load i32, i32* %13, align 4
  %254 = load i32, i32* %16, align 4
  %255 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %253, i32 %254, %29* %255)
  br label %256

256:                                              ; preds = %252, %249
  br label %257

257:                                              ; preds = %256, %245
  br label %258

258:                                              ; preds = %257, %239
  store i32 1, i32* %21, align 4
  br label %260

259:                                              ; preds = %227
  store i32 0, i32* %21, align 4
  br label %260

260:                                              ; preds = %259, %258
  %261 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %261) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %262 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %262) #13
  %263 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %263) #13
  %264 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %264) #13
  %265 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %265) #13
  %266 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %266) #13
  %267 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #13
  %268 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %268) #13
  %269 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %269) #13
  %270 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %270) #13
  %271 = load i32, i32* %21, align 4
  switch i32 %271, label %337 [
    i32 0, label %272
  ]

272:                                              ; preds = %260
  br label %273

273:                                              ; preds = %272
  br label %274

274:                                              ; preds = %273
  %275 = load i64, i64* %5, align 8
  %276 = icmp slt i64 %275, 0
  br i1 %276, label %277, label %284

277:                                              ; preds = %274
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @1113, i32 0, i32 0))
  br label %278

278:                                              ; preds = %277
  %279 = load %29*, %29** %4, align 8
  %280 = getelementptr inbounds %29, %29* %279, i32 0, i32 1
  %281 = bitcast %31* %280 to i32*
  store i32 2, i32* %281, align 8
  br label %282

282:                                              ; preds = %278
  br label %283

283:                                              ; preds = %282
  store i32 1, i32* %21, align 4
  br label %337

284:                                              ; preds = %274
  %285 = load i64, i64* %6, align 8
  %286 = icmp slt i64 %285, 0
  br i1 %286, label %287, label %294

287:                                              ; preds = %284
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @1114, i32 0, i32 0))
  br label %288

288:                                              ; preds = %287
  %289 = load %29*, %29** %4, align 8
  %290 = getelementptr inbounds %29, %29* %289, i32 0, i32 1
  %291 = bitcast %31* %290 to i32*
  store i32 2, i32* %291, align 8
  br label %292

292:                                              ; preds = %288
  br label %293

293:                                              ; preds = %292
  store i32 1, i32* %21, align 4
  br label %337

294:                                              ; preds = %284
  %295 = load i64, i64* %5, align 8
  %296 = getelementptr inbounds %44, %44* %7, i32 0, i32 0
  store i64 %295, i64* %296, align 8
  %297 = load i64, i64* %6, align 8
  %298 = getelementptr inbounds %44, %44* %7, i32 0, i32 1
  store i64 %297, i64* %298, align 8
  %299 = call i32 @nanosleep(%44* %7, %44* %8)
  %300 = icmp ne i32 %299, 0
  br i1 %300, label %308, label %301

301:                                              ; preds = %294
  br label %302

302:                                              ; preds = %301
  %303 = load %29*, %29** %4, align 8
  %304 = getelementptr inbounds %29, %29* %303, i32 0, i32 1
  %305 = bitcast %31* %304 to i32*
  store i32 3, i32* %305, align 8
  br label %306

306:                                              ; preds = %302
  br label %307

307:                                              ; preds = %306
  store i32 1, i32* %21, align 4
  br label %337

308:                                              ; preds = %294
  %309 = call i32* @__errno_location() #14
  %310 = load i32, i32* %309, align 4
  %311 = icmp eq i32 %310, 4
  br i1 %311, label %312, label %323

312:                                              ; preds = %308
  %313 = load %29*, %29** %4, align 8
  %314 = call i32 @_array_init(%29* %313, i32 0)
  %315 = load %29*, %29** %4, align 8
  %316 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  %317 = load i64, i64* %316, align 8
  %318 = call i32 @add_assoc_long_ex(%29* %315, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1115, i32 0, i32 0), i64 7, i64 %317)
  %319 = load %29*, %29** %4, align 8
  %320 = getelementptr inbounds %44, %44* %8, i32 0, i32 1
  %321 = load i64, i64* %320, align 8
  %322 = call i32 @add_assoc_long_ex(%29* %319, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1116, i32 0, i32 0), i64 11, i64 %321)
  store i32 1, i32* %21, align 4
  br label %337

323:                                              ; preds = %308
  %324 = call i32* @__errno_location() #14
  %325 = load i32, i32* %324, align 4
  %326 = icmp eq i32 %325, 22
  br i1 %326, label %327, label %328

327:                                              ; preds = %323
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @1117, i32 0, i32 0))
  br label %328

328:                                              ; preds = %327, %323
  br label %329

329:                                              ; preds = %328
  br label %330

330:                                              ; preds = %329
  br label %331

331:                                              ; preds = %330
  %332 = load %29*, %29** %4, align 8
  %333 = getelementptr inbounds %29, %29* %332, i32 0, i32 1
  %334 = bitcast %31* %333 to i32*
  store i32 2, i32* %334, align 8
  br label %335

335:                                              ; preds = %331
  br label %336

336:                                              ; preds = %335
  store i32 1, i32* %21, align 4
  br label %337

337:                                              ; preds = %336, %312, %307, %293, %283, %260
  %338 = bitcast %44* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %338) #13
  %339 = bitcast %44* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %339) #13
  %340 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %340) #13
  %341 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %341) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_time_sleep_until(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca %84, align 8
  %8 = alloca %44, align 8
  %9 = alloca %44, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast %84* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %25) #13
  %26 = bitcast %44* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26) #13
  %27 = bitcast %44* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %27) #13
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %10, align 4
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %11, align 4
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %12, align 4
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %13, align 4
  %38 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %16, align 8
  %41 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %17, align 4
  %42 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %43 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %21, align 4
  %44 = load i32, i32* %14, align 4
  %45 = load %29*, %29** %15, align 8
  %46 = load %29*, %29** %16, align 8
  %47 = load i32, i32* %17, align 4
  %48 = load i8*, i8** %18, align 8
  %49 = load i8, i8* %19, align 1
  %50 = load i8, i8* %20, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %13, align 4
  %53 = load i32, i32* %11, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %13, align 4
  %63 = load i32, i32* %12, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %12, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %13, align 4
  %82 = load i32, i32* %11, align 4
  %83 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %21, align 4
  br label %159

84:                                               ; preds = %71, %61
  store i32 0, i32* %14, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %15, align 8
  %88 = load i32, i32* %14, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %14, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %14, align 4
  %92 = load i32, i32* %11, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %20, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %14, align 4
  %111 = load i32, i32* %11, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %20, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %20, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %14, align 4
  %132 = load i32, i32* %13, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %159

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %15, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %15, align 8
  %145 = load %29*, %29** %15, align 8
  store %29* %145, %29** %16, align 8
  %146 = load %29*, %29** %16, align 8
  %147 = call i32 @1476(%29* %146, double* %5, i8* %19, i32 0)
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = call i64 @llvm.expect.i64(i64 %153, i64 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  store i32 8, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %159

157:                                              ; preds = %142
  br label %158

158:                                              ; preds = %157
  br label %159

159:                                              ; preds = %158, %156, %140, %80
  %160 = load i32, i32* %21, align 4
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = call i64 @llvm.expect.i64(i64 %165, i64 0)
  %167 = icmp ne i64 %166, 0
  br i1 %167, label %168, label %191

168:                                              ; preds = %159
  %169 = load i32, i32* %21, align 4
  %170 = icmp eq i32 %169, 2
  br i1 %170, label %171, label %174

171:                                              ; preds = %168
  %172 = load i32, i32* %14, align 4
  %173 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %172, i8* %173)
  br label %190

174:                                              ; preds = %168
  %175 = load i32, i32* %21, align 4
  %176 = icmp eq i32 %175, 3
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %14, align 4
  %179 = load i8*, i8** %18, align 8
  %180 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %178, i8* %179, %29* %180)
  br label %189

181:                                              ; preds = %174
  %182 = load i32, i32* %21, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %181
  %185 = load i32, i32* %14, align 4
  %186 = load i32, i32* %17, align 4
  %187 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %185, i32 %186, %29* %187)
  br label %188

188:                                              ; preds = %184, %181
  br label %189

189:                                              ; preds = %188, %177
  br label %190

190:                                              ; preds = %189, %171
  store i32 1, i32* %22, align 4
  br label %192

191:                                              ; preds = %159
  store i32 0, i32* %22, align 4
  br label %192

192:                                              ; preds = %191, %190
  %193 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %194 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %197) #13
  %198 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = load i32, i32* %22, align 4
  switch i32 %203, label %287 [
    i32 0, label %204
  ]

204:                                              ; preds = %192
  br label %205

205:                                              ; preds = %204
  br label %206

206:                                              ; preds = %205
  %207 = call i32 @gettimeofday(%84* %7, %85* null) #13
  %208 = icmp ne i32 %207, 0
  br i1 %208, label %209, label %216

209:                                              ; preds = %206
  br label %210

210:                                              ; preds = %209
  %211 = load %29*, %29** %4, align 8
  %212 = getelementptr inbounds %29, %29* %211, i32 0, i32 1
  %213 = bitcast %31* %212 to i32*
  store i32 2, i32* %213, align 8
  br label %214

214:                                              ; preds = %210
  br label %215

215:                                              ; preds = %214
  store i32 1, i32* %22, align 4
  br label %287

216:                                              ; preds = %206
  %217 = load double, double* %5, align 8
  %218 = getelementptr inbounds %84, %84* %7, i32 0, i32 0
  %219 = load i64, i64* %218, align 8
  %220 = sitofp i64 %219 to double
  %221 = fsub double %217, %220
  %222 = getelementptr inbounds %84, %84* %7, i32 0, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = sitofp i64 %223 to double
  %225 = fdiv double %224, 1.000000e+06
  %226 = fsub double %221, %225
  store double %226, double* %6, align 8
  %227 = load double, double* %6, align 8
  %228 = fcmp olt double %227, 0.000000e+00
  br i1 %228, label %229, label %236

229:                                              ; preds = %216
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @1118, i32 0, i32 0))
  br label %230

230:                                              ; preds = %229
  %231 = load %29*, %29** %4, align 8
  %232 = getelementptr inbounds %29, %29* %231, i32 0, i32 1
  %233 = bitcast %31* %232 to i32*
  store i32 2, i32* %233, align 8
  br label %234

234:                                              ; preds = %230
  br label %235

235:                                              ; preds = %234
  store i32 1, i32* %22, align 4
  br label %287

236:                                              ; preds = %216
  %237 = load double, double* %6, align 8
  %238 = fptosi double %237 to i64
  %239 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  store i64 %238, i64* %239, align 8
  %240 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  %241 = load i64, i64* %240, align 8
  %242 = sitofp i64 %241 to double
  %243 = load double, double* %6, align 8
  %244 = fcmp ogt double %242, %243
  br i1 %244, label %245, label %249

245:                                              ; preds = %236
  %246 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  %247 = load i64, i64* %246, align 8
  %248 = add nsw i64 %247, -1
  store i64 %248, i64* %246, align 8
  br label %249

249:                                              ; preds = %245, %236
  %250 = load double, double* %6, align 8
  %251 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = sitofp i64 %252 to double
  %254 = fsub double %250, %253
  %255 = fmul double %254, 1.000000e+09
  %256 = fptosi double %255 to i64
  %257 = getelementptr inbounds %44, %44* %8, i32 0, i32 1
  store i64 %256, i64* %257, align 8
  br label %258

258:                                              ; preds = %279, %249
  %259 = call i32 @nanosleep(%44* %8, %44* %9)
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %280

261:                                              ; preds = %258
  %262 = call i32* @__errno_location() #14
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 4
  br i1 %264, label %265, label %272

265:                                              ; preds = %261
  %266 = getelementptr inbounds %44, %44* %9, i32 0, i32 0
  %267 = load i64, i64* %266, align 8
  %268 = getelementptr inbounds %44, %44* %8, i32 0, i32 0
  store i64 %267, i64* %268, align 8
  %269 = getelementptr inbounds %44, %44* %9, i32 0, i32 1
  %270 = load i64, i64* %269, align 8
  %271 = getelementptr inbounds %44, %44* %8, i32 0, i32 1
  store i64 %270, i64* %271, align 8
  br label %279

272:                                              ; preds = %261
  br label %273

273:                                              ; preds = %272
  %274 = load %29*, %29** %4, align 8
  %275 = getelementptr inbounds %29, %29* %274, i32 0, i32 1
  %276 = bitcast %31* %275 to i32*
  store i32 2, i32* %276, align 8
  br label %277

277:                                              ; preds = %273
  br label %278

278:                                              ; preds = %277
  store i32 1, i32* %22, align 4
  br label %287

279:                                              ; preds = %265
  br label %258

280:                                              ; preds = %258
  br label %281

281:                                              ; preds = %280
  %282 = load %29*, %29** %4, align 8
  %283 = getelementptr inbounds %29, %29* %282, i32 0, i32 1
  %284 = bitcast %31* %283 to i32*
  store i32 3, i32* %284, align 8
  br label %285

285:                                              ; preds = %281
  br label %286

286:                                              ; preds = %285
  store i32 1, i32* %22, align 4
  br label %287

287:                                              ; preds = %286, %278, %235, %215, %192
  %288 = bitcast %44* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %288) #13
  %289 = bitcast %44* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %289) #13
  %290 = bitcast %84* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %290) #13
  %291 = bitcast double* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %291) #13
  %292 = bitcast double* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %292) #13
  ret void
}

declare dso_local void @zif_strptime(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_flush(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %5 = load %1*, %1** %3, align 8
  %6 = getelementptr inbounds %1, %1* %5, i32 0, i32 4
  %7 = getelementptr inbounds %29, %29* %6, i32 0, i32 2
  %8 = bitcast %32* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 1)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %25

18:                                               ; preds = %2
  %19 = load %1*, %1** %3, align 8
  %20 = getelementptr inbounds %1, %1* %19, i32 0, i32 4
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 2
  %22 = bitcast %32* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %25

25:                                               ; preds = %18, %17
  %26 = phi i32 [ 0, %17 ], [ %24, %18 ]
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  br label %31

29:                                               ; preds = %25
  %30 = call i32 @sapi_flush()
  br label %31

31:                                               ; preds = %29, %28
  ret void
}

declare dso_local void @zif_wordwrap(%1*, %29*) #1

declare dso_local void @zif_htmlspecialchars(%1*, %29*) #1

declare dso_local void @zif_htmlentities(%1*, %29*) #1

declare dso_local void @zif_html_entity_decode(%1*, %29*) #1

declare dso_local void @zif_htmlspecialchars_decode(%1*, %29*) #1

declare dso_local void @zif_get_html_translation_table(%1*, %29*) #1

declare dso_local void @zif_sha1(%1*, %29*) #1

declare dso_local void @zif_sha1_file(%1*, %29*) #1

declare dso_local void @php_if_md5(%1*, %29*) #1

declare dso_local void @php_if_md5_file(%1*, %29*) #1

declare dso_local void @php_if_crc32(%1*, %29*) #1

declare dso_local void @zif_iptcparse(%1*, %29*) #1

declare dso_local void @zif_iptcembed(%1*, %29*) #1

declare dso_local void @zif_getimagesize(%1*, %29*) #1

declare dso_local void @zif_getimagesizefromstring(%1*, %29*) #1

declare dso_local void @zif_image_type_to_mime_type(%1*, %29*) #1

declare dso_local void @zif_image_type_to_extension(%1*, %29*) #1

declare dso_local void @zif_phpinfo(%1*, %29*) #1

declare dso_local void @zif_phpversion(%1*, %29*) #1

declare dso_local void @zif_phpcredits(%1*, %29*) #1

declare dso_local void @zif_php_sapi_name(%1*, %29*) #1

declare dso_local void @zif_php_uname(%1*, %29*) #1

declare dso_local void @zif_php_ini_scanned_files(%1*, %29*) #1

declare dso_local void @zif_php_ini_loaded_file(%1*, %29*) #1

declare dso_local void @zif_strnatcmp(%1*, %29*) #1

declare dso_local void @zif_strnatcasecmp(%1*, %29*) #1

declare dso_local void @zif_substr_count(%1*, %29*) #1

declare dso_local void @zif_strspn(%1*, %29*) #1

declare dso_local void @zif_strcspn(%1*, %29*) #1

declare dso_local void @zif_strtok(%1*, %29*) #1

declare dso_local void @zif_strtoupper(%1*, %29*) #1

declare dso_local void @zif_strtolower(%1*, %29*) #1

declare dso_local void @zif_strpos(%1*, %29*) #1

declare dso_local void @zif_stripos(%1*, %29*) #1

declare dso_local void @zif_strrpos(%1*, %29*) #1

declare dso_local void @zif_strripos(%1*, %29*) #1

declare dso_local void @zif_strrev(%1*, %29*) #1

declare dso_local void @zif_hebrev(%1*, %29*) #1

declare dso_local void @zif_hebrevc(%1*, %29*) #1

declare dso_local void @zif_nl2br(%1*, %29*) #1

declare dso_local void @zif_basename(%1*, %29*) #1

declare dso_local void @zif_dirname(%1*, %29*) #1

declare dso_local void @zif_pathinfo(%1*, %29*) #1

declare dso_local void @zif_stripslashes(%1*, %29*) #1

declare dso_local void @zif_stripcslashes(%1*, %29*) #1

declare dso_local void @zif_strstr(%1*, %29*) #1

declare dso_local void @zif_stristr(%1*, %29*) #1

declare dso_local void @zif_strrchr(%1*, %29*) #1

declare dso_local void @zif_str_shuffle(%1*, %29*) #1

declare dso_local void @zif_str_word_count(%1*, %29*) #1

declare dso_local void @zif_str_split(%1*, %29*) #1

declare dso_local void @zif_strpbrk(%1*, %29*) #1

declare dso_local void @zif_substr_compare(%1*, %29*) #1

declare dso_local void @zif_utf8_encode(%1*, %29*) #1

declare dso_local void @zif_utf8_decode(%1*, %29*) #1

declare dso_local void @zif_strcoll(%1*, %29*) #1

declare dso_local void @zif_money_format(%1*, %29*) #1

declare dso_local void @zif_substr(%1*, %29*) #1

declare dso_local void @zif_substr_replace(%1*, %29*) #1

declare dso_local void @zif_quotemeta(%1*, %29*) #1

declare dso_local void @zif_ucfirst(%1*, %29*) #1

declare dso_local void @zif_lcfirst(%1*, %29*) #1

declare dso_local void @zif_ucwords(%1*, %29*) #1

declare dso_local void @zif_strtr(%1*, %29*) #1

declare dso_local void @zif_addslashes(%1*, %29*) #1

declare dso_local void @zif_addcslashes(%1*, %29*) #1

declare dso_local void @zif_rtrim(%1*, %29*) #1

declare dso_local void @zif_str_replace(%1*, %29*) #1

declare dso_local void @zif_str_ireplace(%1*, %29*) #1

declare dso_local void @zif_str_repeat(%1*, %29*) #1

declare dso_local void @zif_count_chars(%1*, %29*) #1

declare dso_local void @zif_chunk_split(%1*, %29*) #1

declare dso_local void @zif_trim(%1*, %29*) #1

declare dso_local void @zif_ltrim(%1*, %29*) #1

declare dso_local void @zif_strip_tags(%1*, %29*) #1

declare dso_local void @zif_similar_text(%1*, %29*) #1

declare dso_local void @zif_explode(%1*, %29*) #1

declare dso_local void @zif_implode(%1*, %29*) #1

declare dso_local void @zif_setlocale(%1*, %29*) #1

declare dso_local void @zif_localeconv(%1*, %29*) #1

declare dso_local void @zif_nl_langinfo(%1*, %29*) #1

declare dso_local void @zif_soundex(%1*, %29*) #1

declare dso_local void @zif_levenshtein(%1*, %29*) #1

declare dso_local void @zif_chr(%1*, %29*) #1

declare dso_local void @zif_ord(%1*, %29*) #1

declare dso_local void @zif_parse_str(%1*, %29*) #1

declare dso_local void @zif_str_getcsv(%1*, %29*) #1

declare dso_local void @zif_str_pad(%1*, %29*) #1

declare dso_local void @zif_user_sprintf(%1*, %29*) #1

declare dso_local void @zif_user_printf(%1*, %29*) #1

declare dso_local void @zif_vprintf(%1*, %29*) #1

declare dso_local void @zif_vsprintf(%1*, %29*) #1

declare dso_local void @zif_fprintf(%1*, %29*) #1

declare dso_local void @zif_vfprintf(%1*, %29*) #1

declare dso_local void @zif_sscanf(%1*, %29*) #1

declare dso_local void @zif_fscanf(%1*, %29*) #1

declare dso_local void @zif_parse_url(%1*, %29*) #1

declare dso_local void @zif_urlencode(%1*, %29*) #1

declare dso_local void @zif_urldecode(%1*, %29*) #1

declare dso_local void @zif_rawurlencode(%1*, %29*) #1

declare dso_local void @zif_rawurldecode(%1*, %29*) #1

declare dso_local void @zif_http_build_query(%1*, %29*) #1

declare dso_local void @zif_readlink(%1*, %29*) #1

declare dso_local void @zif_linkinfo(%1*, %29*) #1

declare dso_local void @zif_symlink(%1*, %29*) #1

declare dso_local void @zif_link(%1*, %29*) #1

declare dso_local void @zif_unlink(%1*, %29*) #1

declare dso_local void @zif_exec(%1*, %29*) #1

declare dso_local void @zif_system(%1*, %29*) #1

declare dso_local void @zif_escapeshellcmd(%1*, %29*) #1

declare dso_local void @zif_escapeshellarg(%1*, %29*) #1

declare dso_local void @zif_passthru(%1*, %29*) #1

declare dso_local void @zif_shell_exec(%1*, %29*) #1

declare dso_local void @zif_proc_open(%1*, %29*) #1

declare dso_local void @zif_proc_close(%1*, %29*) #1

declare dso_local void @zif_proc_terminate(%1*, %29*) #1

declare dso_local void @zif_proc_get_status(%1*, %29*) #1

declare dso_local void @zif_proc_nice(%1*, %29*) #1

declare dso_local void @zif_rand(%1*, %29*) #1

declare dso_local void @zif_mt_srand(%1*, %29*) #1

declare dso_local void @zif_mt_getrandmax(%1*, %29*) #1

declare dso_local void @zif_mt_rand(%1*, %29*) #1

declare dso_local void @zif_random_bytes(%1*, %29*) #1

declare dso_local void @zif_random_int(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_getservbyname(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %86*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %29*, align 8
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i16, align 2
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %27 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %31 = bitcast %86** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  br label %32

32:                                               ; preds = %2
  %33 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %10, align 4
  %34 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 2, i32* %11, align 4
  %35 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 2, i32* %12, align 4
  %36 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = load %1*, %1** %3, align 8
  %38 = getelementptr inbounds %1, %1* %37, i32 0, i32 4
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 2
  %40 = bitcast %32* %39 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %13, align 4
  %42 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  %43 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store %29* null, %29** %16, align 8
  %45 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %17, align 4
  %46 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %47 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #13
  store i32 0, i32* %21, align 4
  %48 = load i32, i32* %14, align 4
  %49 = load %29*, %29** %15, align 8
  %50 = load %29*, %29** %16, align 8
  %51 = load i32, i32* %17, align 4
  %52 = load i8*, i8** %18, align 8
  %53 = load i8, i8* %19, align 1
  %54 = load i8, i8* %20, align 1
  br label %55

55:                                               ; preds = %32
  %56 = load i32, i32* %13, align 4
  %57 = load i32, i32* %11, align 4
  %58 = icmp slt i32 %56, %57
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i64 @llvm.expect.i64(i64 %62, i64 0)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %84, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %13, align 4
  %67 = load i32, i32* %12, align 4
  %68 = icmp sgt i32 %66, %67
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = load i32, i32* %12, align 4
  %77 = icmp sge i32 %76, 0
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 1)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %75, %55
  %85 = load i32, i32* %13, align 4
  %86 = load i32, i32* %11, align 4
  %87 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %85, i32 %86, i32 %87)
  store i32 1, i32* %21, align 4
  br label %233

88:                                               ; preds = %75, %65
  store i32 0, i32* %14, align 4
  %89 = load %1*, %1** %3, align 8
  %90 = bitcast %1* %89 to %29*
  %91 = getelementptr inbounds %29, %29* %90, i64 4
  store %29* %91, %29** %15, align 8
  %92 = load i32, i32* %14, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %14, align 4
  br label %94

94:                                               ; preds = %88
  %95 = load i32, i32* %14, align 4
  %96 = load i32, i32* %11, align 4
  %97 = icmp sle i32 %95, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %20, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 1
  br label %102

102:                                              ; preds = %98, %94
  %103 = phi i1 [ true, %94 ], [ %101, %98 ]
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = call i64 @llvm.expect.i64(i64 %106, i64 0)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %14, align 4
  %115 = load i32, i32* %11, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %121, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %20, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br label %121

121:                                              ; preds = %117, %113
  %122 = phi i1 [ true, %113 ], [ %120, %117 ]
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  %125 = sext i32 %124 to i64
  %126 = call i64 @llvm.expect.i64(i64 %125, i64 0)
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  unreachable

129:                                              ; preds = %121
  br label %130

130:                                              ; preds = %129
  br label %131

131:                                              ; preds = %130
  %132 = load i8, i8* %20, align 1
  %133 = icmp ne i8 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %131
  %135 = load i32, i32* %14, align 4
  %136 = load i32, i32* %13, align 4
  %137 = icmp sgt i32 %135, %136
  %138 = xor i1 %137, true
  %139 = xor i1 %138, true
  %140 = zext i1 %139 to i32
  %141 = sext i32 %140 to i64
  %142 = call i64 @llvm.expect.i64(i64 %141, i64 0)
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  br label %233

145:                                              ; preds = %134
  br label %146

146:                                              ; preds = %145, %131
  %147 = load %29*, %29** %15, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 1
  store %29* %148, %29** %15, align 8
  %149 = load %29*, %29** %15, align 8
  store %29* %149, %29** %16, align 8
  %150 = load %29*, %29** %16, align 8
  %151 = call i32 @1462(%29* %150, i8** %5, i64* %7, i32 0)
  %152 = icmp ne i32 %151, 0
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %146
  store i32 2, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %233

161:                                              ; preds = %146
  %162 = load i32, i32* %14, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %14, align 4
  br label %164

164:                                              ; preds = %161
  %165 = load i32, i32* %14, align 4
  %166 = load i32, i32* %11, align 4
  %167 = icmp sle i32 %165, %166
  br i1 %167, label %172, label %168

168:                                              ; preds = %164
  %169 = load i8, i8* %20, align 1
  %170 = zext i8 %169 to i32
  %171 = icmp eq i32 %170, 1
  br label %172

172:                                              ; preds = %168, %164
  %173 = phi i1 [ true, %164 ], [ %171, %168 ]
  %174 = xor i1 %173, true
  %175 = zext i1 %174 to i32
  %176 = sext i32 %175 to i64
  %177 = call i64 @llvm.expect.i64(i64 %176, i64 0)
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %172
  unreachable

180:                                              ; preds = %172
  br label %181

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181
  br label %183

183:                                              ; preds = %182
  %184 = load i32, i32* %14, align 4
  %185 = load i32, i32* %11, align 4
  %186 = icmp sgt i32 %184, %185
  br i1 %186, label %191, label %187

187:                                              ; preds = %183
  %188 = load i8, i8* %20, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %189, 0
  br label %191

191:                                              ; preds = %187, %183
  %192 = phi i1 [ true, %183 ], [ %190, %187 ]
  %193 = xor i1 %192, true
  %194 = zext i1 %193 to i32
  %195 = sext i32 %194 to i64
  %196 = call i64 @llvm.expect.i64(i64 %195, i64 0)
  %197 = icmp ne i64 %196, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %191
  unreachable

199:                                              ; preds = %191
  br label %200

200:                                              ; preds = %199
  br label %201

201:                                              ; preds = %200
  %202 = load i8, i8* %20, align 1
  %203 = icmp ne i8 %202, 0
  br i1 %203, label %204, label %216

204:                                              ; preds = %201
  %205 = load i32, i32* %14, align 4
  %206 = load i32, i32* %13, align 4
  %207 = icmp sgt i32 %205, %206
  %208 = xor i1 %207, true
  %209 = xor i1 %208, true
  %210 = zext i1 %209 to i32
  %211 = sext i32 %210 to i64
  %212 = call i64 @llvm.expect.i64(i64 %211, i64 0)
  %213 = icmp ne i64 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %204
  br label %233

215:                                              ; preds = %204
  br label %216

216:                                              ; preds = %215, %201
  %217 = load %29*, %29** %15, align 8
  %218 = getelementptr inbounds %29, %29* %217, i32 1
  store %29* %218, %29** %15, align 8
  %219 = load %29*, %29** %15, align 8
  store %29* %219, %29** %16, align 8
  %220 = load %29*, %29** %16, align 8
  %221 = call i32 @1462(%29* %220, i8** %6, i64* %8, i32 0)
  %222 = icmp ne i32 %221, 0
  %223 = xor i1 %222, true
  %224 = xor i1 %223, true
  %225 = xor i1 %224, true
  %226 = zext i1 %225 to i32
  %227 = sext i32 %226 to i64
  %228 = call i64 @llvm.expect.i64(i64 %227, i64 0)
  %229 = icmp ne i64 %228, 0
  br i1 %229, label %230, label %231

230:                                              ; preds = %216
  store i32 2, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %233

231:                                              ; preds = %216
  br label %232

232:                                              ; preds = %231
  br label %233

233:                                              ; preds = %232, %230, %214, %160, %144, %84
  %234 = load i32, i32* %21, align 4
  %235 = icmp ne i32 %234, 0
  %236 = xor i1 %235, true
  %237 = xor i1 %236, true
  %238 = zext i1 %237 to i32
  %239 = sext i32 %238 to i64
  %240 = call i64 @llvm.expect.i64(i64 %239, i64 0)
  %241 = icmp ne i64 %240, 0
  br i1 %241, label %242, label %265

242:                                              ; preds = %233
  %243 = load i32, i32* %21, align 4
  %244 = icmp eq i32 %243, 2
  br i1 %244, label %245, label %248

245:                                              ; preds = %242
  %246 = load i32, i32* %14, align 4
  %247 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %246, i8* %247)
  br label %264

248:                                              ; preds = %242
  %249 = load i32, i32* %21, align 4
  %250 = icmp eq i32 %249, 3
  br i1 %250, label %251, label %255

251:                                              ; preds = %248
  %252 = load i32, i32* %14, align 4
  %253 = load i8*, i8** %18, align 8
  %254 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %252, i8* %253, %29* %254)
  br label %263

255:                                              ; preds = %248
  %256 = load i32, i32* %21, align 4
  %257 = icmp eq i32 %256, 4
  br i1 %257, label %258, label %262

258:                                              ; preds = %255
  %259 = load i32, i32* %14, align 4
  %260 = load i32, i32* %17, align 4
  %261 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %259, i32 %260, %29* %261)
  br label %262

262:                                              ; preds = %258, %255
  br label %263

263:                                              ; preds = %262, %251
  br label %264

264:                                              ; preds = %263, %245
  store i32 1, i32* %22, align 4
  br label %266

265:                                              ; preds = %233
  store i32 0, i32* %22, align 4
  br label %266

266:                                              ; preds = %265, %264
  %267 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %268 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %268) #13
  %269 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %269) #13
  %270 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %270) #13
  %271 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %271) #13
  %272 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #13
  %273 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #13
  %274 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #13
  %275 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %275) #13
  %276 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #13
  %277 = load i32, i32* %22, align 4
  switch i32 %277, label %316 [
    i32 0, label %278
  ]

278:                                              ; preds = %266
  br label %279

279:                                              ; preds = %278
  br label %280

280:                                              ; preds = %279
  %281 = load i8*, i8** %5, align 8
  %282 = load i8*, i8** %6, align 8
  %283 = call %86* @getservbyname(i8* %281, i8* %282)
  store %86* %283, %86** %9, align 8
  %284 = load %86*, %86** %9, align 8
  %285 = icmp eq %86* %284, null
  br i1 %285, label %286, label %293

286:                                              ; preds = %280
  br label %287

287:                                              ; preds = %286
  %288 = load %29*, %29** %4, align 8
  %289 = getelementptr inbounds %29, %29* %288, i32 0, i32 1
  %290 = bitcast %31* %289 to i32*
  store i32 2, i32* %290, align 8
  br label %291

291:                                              ; preds = %287
  br label %292

292:                                              ; preds = %291
  store i32 1, i32* %22, align 4
  br label %316

293:                                              ; preds = %280
  %294 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %294) #13
  %295 = load %29*, %29** %4, align 8
  store %29* %295, %29** %23, align 8
  %296 = bitcast i16* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %296) #13
  %297 = bitcast i16* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %297) #13
  %298 = load %86*, %86** %9, align 8
  %299 = getelementptr inbounds %86, %86* %298, i32 0, i32 2
  %300 = load i32, i32* %299, align 8
  %301 = trunc i32 %300 to i16
  store i16 %301, i16* %25, align 2
  %302 = load i16, i16* %25, align 2
  %303 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %302) #14
  store i16 %303, i16* %24, align 2
  %304 = load i16, i16* %24, align 2
  store i16 %304, i16* %26, align 2
  %305 = bitcast i16* %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %305) #13
  %306 = bitcast i16* %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %306) #13
  %307 = load i16, i16* %26, align 2
  %308 = zext i16 %307 to i64
  %309 = load %29*, %29** %23, align 8
  %310 = getelementptr inbounds %29, %29* %309, i32 0, i32 0
  %311 = bitcast %30* %310 to i64*
  store i64 %308, i64* %311, align 8
  %312 = load %29*, %29** %23, align 8
  %313 = getelementptr inbounds %29, %29* %312, i32 0, i32 1
  %314 = bitcast %31* %313 to i32*
  store i32 4, i32* %314, align 8
  %315 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %315) #13
  store i32 1, i32* %22, align 4
  br label %316

316:                                              ; preds = %293, %292, %266
  %317 = bitcast %86** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %317) #13
  %318 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %318) #13
  %319 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %319) #13
  %320 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %320) #13
  %321 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %321) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_getservbyport(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %86*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i16, align 2
  %23 = alloca i16, align 2
  %24 = alloca i16, align 2
  %25 = alloca i8*, align 8
  %26 = alloca %29*, align 8
  %27 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %31 = bitcast %86** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  br label %32

32:                                               ; preds = %2
  %33 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %9, align 4
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 2, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 2, i32* %11, align 4
  %36 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = load %1*, %1** %3, align 8
  %38 = getelementptr inbounds %1, %1* %37, i32 0, i32 4
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 2
  %40 = bitcast %32* %39 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %12, align 4
  %42 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  %43 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store %29* null, %29** %15, align 8
  %45 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %16, align 4
  %46 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %47 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #13
  store i32 0, i32* %20, align 4
  %48 = load i32, i32* %13, align 4
  %49 = load %29*, %29** %14, align 8
  %50 = load %29*, %29** %15, align 8
  %51 = load i32, i32* %16, align 4
  %52 = load i8*, i8** %17, align 8
  %53 = load i8, i8* %18, align 1
  %54 = load i8, i8* %19, align 1
  br label %55

55:                                               ; preds = %32
  %56 = load i32, i32* %12, align 4
  %57 = load i32, i32* %10, align 4
  %58 = icmp slt i32 %56, %57
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i64 @llvm.expect.i64(i64 %62, i64 0)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %84, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %12, align 4
  %67 = load i32, i32* %11, align 4
  %68 = icmp sgt i32 %66, %67
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = load i32, i32* %11, align 4
  %77 = icmp sge i32 %76, 0
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 1)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %75, %55
  %85 = load i32, i32* %12, align 4
  %86 = load i32, i32* %10, align 4
  %87 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %85, i32 %86, i32 %87)
  store i32 1, i32* %20, align 4
  br label %233

88:                                               ; preds = %75, %65
  store i32 0, i32* %13, align 4
  %89 = load %1*, %1** %3, align 8
  %90 = bitcast %1* %89 to %29*
  %91 = getelementptr inbounds %29, %29* %90, i64 4
  store %29* %91, %29** %14, align 8
  %92 = load i32, i32* %13, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %13, align 4
  br label %94

94:                                               ; preds = %88
  %95 = load i32, i32* %13, align 4
  %96 = load i32, i32* %10, align 4
  %97 = icmp sle i32 %95, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %19, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 1
  br label %102

102:                                              ; preds = %98, %94
  %103 = phi i1 [ true, %94 ], [ %101, %98 ]
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = call i64 @llvm.expect.i64(i64 %106, i64 0)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %13, align 4
  %115 = load i32, i32* %10, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %121, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %19, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br label %121

121:                                              ; preds = %117, %113
  %122 = phi i1 [ true, %113 ], [ %120, %117 ]
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  %125 = sext i32 %124 to i64
  %126 = call i64 @llvm.expect.i64(i64 %125, i64 0)
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  unreachable

129:                                              ; preds = %121
  br label %130

130:                                              ; preds = %129
  br label %131

131:                                              ; preds = %130
  %132 = load i8, i8* %19, align 1
  %133 = icmp ne i8 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %131
  %135 = load i32, i32* %13, align 4
  %136 = load i32, i32* %12, align 4
  %137 = icmp sgt i32 %135, %136
  %138 = xor i1 %137, true
  %139 = xor i1 %138, true
  %140 = zext i1 %139 to i32
  %141 = sext i32 %140 to i64
  %142 = call i64 @llvm.expect.i64(i64 %141, i64 0)
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  br label %233

145:                                              ; preds = %134
  br label %146

146:                                              ; preds = %145, %131
  %147 = load %29*, %29** %14, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 1
  store %29* %148, %29** %14, align 8
  %149 = load %29*, %29** %14, align 8
  store %29* %149, %29** %15, align 8
  %150 = load %29*, %29** %15, align 8
  %151 = call i32 @1464(%29* %150, i64* %7, i8* %18, i32 0, i32 0)
  %152 = icmp ne i32 %151, 0
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %146
  store i32 0, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %233

161:                                              ; preds = %146
  %162 = load i32, i32* %13, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %13, align 4
  br label %164

164:                                              ; preds = %161
  %165 = load i32, i32* %13, align 4
  %166 = load i32, i32* %10, align 4
  %167 = icmp sle i32 %165, %166
  br i1 %167, label %172, label %168

168:                                              ; preds = %164
  %169 = load i8, i8* %19, align 1
  %170 = zext i8 %169 to i32
  %171 = icmp eq i32 %170, 1
  br label %172

172:                                              ; preds = %168, %164
  %173 = phi i1 [ true, %164 ], [ %171, %168 ]
  %174 = xor i1 %173, true
  %175 = zext i1 %174 to i32
  %176 = sext i32 %175 to i64
  %177 = call i64 @llvm.expect.i64(i64 %176, i64 0)
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %172
  unreachable

180:                                              ; preds = %172
  br label %181

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181
  br label %183

183:                                              ; preds = %182
  %184 = load i32, i32* %13, align 4
  %185 = load i32, i32* %10, align 4
  %186 = icmp sgt i32 %184, %185
  br i1 %186, label %191, label %187

187:                                              ; preds = %183
  %188 = load i8, i8* %19, align 1
  %189 = zext i8 %188 to i32
  %190 = icmp eq i32 %189, 0
  br label %191

191:                                              ; preds = %187, %183
  %192 = phi i1 [ true, %183 ], [ %190, %187 ]
  %193 = xor i1 %192, true
  %194 = zext i1 %193 to i32
  %195 = sext i32 %194 to i64
  %196 = call i64 @llvm.expect.i64(i64 %195, i64 0)
  %197 = icmp ne i64 %196, 0
  br i1 %197, label %198, label %199

198:                                              ; preds = %191
  unreachable

199:                                              ; preds = %191
  br label %200

200:                                              ; preds = %199
  br label %201

201:                                              ; preds = %200
  %202 = load i8, i8* %19, align 1
  %203 = icmp ne i8 %202, 0
  br i1 %203, label %204, label %216

204:                                              ; preds = %201
  %205 = load i32, i32* %13, align 4
  %206 = load i32, i32* %12, align 4
  %207 = icmp sgt i32 %205, %206
  %208 = xor i1 %207, true
  %209 = xor i1 %208, true
  %210 = zext i1 %209 to i32
  %211 = sext i32 %210 to i64
  %212 = call i64 @llvm.expect.i64(i64 %211, i64 0)
  %213 = icmp ne i64 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %204
  br label %233

215:                                              ; preds = %204
  br label %216

216:                                              ; preds = %215, %201
  %217 = load %29*, %29** %14, align 8
  %218 = getelementptr inbounds %29, %29* %217, i32 1
  store %29* %218, %29** %14, align 8
  %219 = load %29*, %29** %14, align 8
  store %29* %219, %29** %15, align 8
  %220 = load %29*, %29** %15, align 8
  %221 = call i32 @1462(%29* %220, i8** %5, i64* %6, i32 0)
  %222 = icmp ne i32 %221, 0
  %223 = xor i1 %222, true
  %224 = xor i1 %223, true
  %225 = xor i1 %224, true
  %226 = zext i1 %225 to i32
  %227 = sext i32 %226 to i64
  %228 = call i64 @llvm.expect.i64(i64 %227, i64 0)
  %229 = icmp ne i64 %228, 0
  br i1 %229, label %230, label %231

230:                                              ; preds = %216
  store i32 2, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %233

231:                                              ; preds = %216
  br label %232

232:                                              ; preds = %231
  br label %233

233:                                              ; preds = %232, %230, %214, %160, %144, %84
  %234 = load i32, i32* %20, align 4
  %235 = icmp ne i32 %234, 0
  %236 = xor i1 %235, true
  %237 = xor i1 %236, true
  %238 = zext i1 %237 to i32
  %239 = sext i32 %238 to i64
  %240 = call i64 @llvm.expect.i64(i64 %239, i64 0)
  %241 = icmp ne i64 %240, 0
  br i1 %241, label %242, label %265

242:                                              ; preds = %233
  %243 = load i32, i32* %20, align 4
  %244 = icmp eq i32 %243, 2
  br i1 %244, label %245, label %248

245:                                              ; preds = %242
  %246 = load i32, i32* %13, align 4
  %247 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %246, i8* %247)
  br label %264

248:                                              ; preds = %242
  %249 = load i32, i32* %20, align 4
  %250 = icmp eq i32 %249, 3
  br i1 %250, label %251, label %255

251:                                              ; preds = %248
  %252 = load i32, i32* %13, align 4
  %253 = load i8*, i8** %17, align 8
  %254 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %252, i8* %253, %29* %254)
  br label %263

255:                                              ; preds = %248
  %256 = load i32, i32* %20, align 4
  %257 = icmp eq i32 %256, 4
  br i1 %257, label %258, label %262

258:                                              ; preds = %255
  %259 = load i32, i32* %13, align 4
  %260 = load i32, i32* %16, align 4
  %261 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %259, i32 %260, %29* %261)
  br label %262

262:                                              ; preds = %258, %255
  br label %263

263:                                              ; preds = %262, %251
  br label %264

264:                                              ; preds = %263, %245
  store i32 1, i32* %21, align 4
  br label %266

265:                                              ; preds = %233
  store i32 0, i32* %21, align 4
  br label %266

266:                                              ; preds = %265, %264
  %267 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %268 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %268) #13
  %269 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %269) #13
  %270 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %270) #13
  %271 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %271) #13
  %272 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #13
  %273 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #13
  %274 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #13
  %275 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %275) #13
  %276 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #13
  %277 = load i32, i32* %21, align 4
  switch i32 %277, label %334 [
    i32 0, label %278
  ]

278:                                              ; preds = %266
  br label %279

279:                                              ; preds = %278
  br label %280

280:                                              ; preds = %279
  %281 = bitcast i16* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %281) #13
  %282 = bitcast i16* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %282) #13
  %283 = load i64, i64* %7, align 8
  %284 = trunc i64 %283 to i16
  store i16 %284, i16* %23, align 2
  %285 = load i16, i16* %23, align 2
  %286 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %285) #14
  store i16 %286, i16* %22, align 2
  %287 = load i16, i16* %22, align 2
  store i16 %287, i16* %24, align 2
  %288 = bitcast i16* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %288) #13
  %289 = bitcast i16* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %289) #13
  %290 = load i16, i16* %24, align 2
  %291 = zext i16 %290 to i32
  %292 = load i8*, i8** %5, align 8
  %293 = call %86* @getservbyport(i32 %291, i8* %292)
  store %86* %293, %86** %8, align 8
  %294 = load %86*, %86** %8, align 8
  %295 = icmp eq %86* %294, null
  br i1 %295, label %296, label %303

296:                                              ; preds = %280
  br label %297

297:                                              ; preds = %296
  %298 = load %29*, %29** %4, align 8
  %299 = getelementptr inbounds %29, %29* %298, i32 0, i32 1
  %300 = bitcast %31* %299 to i32*
  store i32 2, i32* %300, align 8
  br label %301

301:                                              ; preds = %297
  br label %302

302:                                              ; preds = %301
  store i32 1, i32* %21, align 4
  br label %334

303:                                              ; preds = %280
  br label %304

304:                                              ; preds = %303
  %305 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %305) #13
  %306 = load %86*, %86** %8, align 8
  %307 = getelementptr inbounds %86, %86* %306, i32 0, i32 0
  %308 = load i8*, i8** %307, align 8
  store i8* %308, i8** %25, align 8
  br label %309

309:                                              ; preds = %304
  br label %310

310:                                              ; preds = %309
  %311 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %311) #13
  %312 = load %29*, %29** %4, align 8
  store %29* %312, %29** %26, align 8
  %313 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %313) #13
  %314 = load i8*, i8** %25, align 8
  %315 = load i8*, i8** %25, align 8
  %316 = call i64 @strlen(i8* %315) #15
  %317 = call %28* @1463(i8* %314, i64 %316, i32 0)
  store %28* %317, %28** %27, align 8
  %318 = load %28*, %28** %27, align 8
  %319 = load %29*, %29** %26, align 8
  %320 = getelementptr inbounds %29, %29* %319, i32 0, i32 0
  %321 = bitcast %30* %320 to %28**
  store %28* %318, %28** %321, align 8
  %322 = load %29*, %29** %26, align 8
  %323 = getelementptr inbounds %29, %29* %322, i32 0, i32 1
  %324 = bitcast %31* %323 to i32*
  store i32 5126, i32* %324, align 8
  %325 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %325) #13
  %326 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %326) #13
  br label %327

327:                                              ; preds = %310
  br label %328

328:                                              ; preds = %327
  br label %329

329:                                              ; preds = %328
  br label %330

330:                                              ; preds = %329
  %331 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %331) #13
  br label %332

332:                                              ; preds = %330
  br label %333

333:                                              ; preds = %332
  store i32 1, i32* %21, align 4
  br label %334

334:                                              ; preds = %333, %302, %266
  %335 = bitcast %86** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %335) #13
  %336 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %336) #13
  %337 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %337) #13
  %338 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %338) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_getprotobyname(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %87*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %22 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %23 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %87** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  br label %25

25:                                               ; preds = %2
  %26 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  store i32 0, i32* %8, align 4
  %27 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  store i32 1, i32* %9, align 4
  %28 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 1, i32* %10, align 4
  %29 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  %30 = load %1*, %1** %3, align 8
  %31 = getelementptr inbounds %1, %1* %30, i32 0, i32 4
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 2
  %33 = bitcast %32* %32 to i32*
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %11, align 4
  %35 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %36) #13
  %37 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  store %29* null, %29** %14, align 8
  %38 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  store i32 0, i32* %15, align 4
  %39 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %40 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %19, align 4
  %41 = load i32, i32* %12, align 4
  %42 = load %29*, %29** %13, align 8
  %43 = load %29*, %29** %14, align 8
  %44 = load i32, i32* %15, align 4
  %45 = load i8*, i8** %16, align 8
  %46 = load i8, i8* %17, align 1
  %47 = load i8, i8* %18, align 1
  br label %48

48:                                               ; preds = %25
  %49 = load i32, i32* %11, align 4
  %50 = load i32, i32* %9, align 4
  %51 = icmp slt i32 %49, %50
  %52 = xor i1 %51, true
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i32
  %55 = sext i32 %54 to i64
  %56 = call i64 @llvm.expect.i64(i64 %55, i64 0)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %77, label %58

58:                                               ; preds = %48
  %59 = load i32, i32* %11, align 4
  %60 = load i32, i32* %10, align 4
  %61 = icmp sgt i32 %59, %60
  %62 = xor i1 %61, true
  %63 = xor i1 %62, true
  %64 = zext i1 %63 to i32
  %65 = sext i32 %64 to i64
  %66 = call i64 @llvm.expect.i64(i64 %65, i64 0)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %81

68:                                               ; preds = %58
  %69 = load i32, i32* %10, align 4
  %70 = icmp sge i32 %69, 0
  %71 = xor i1 %70, true
  %72 = xor i1 %71, true
  %73 = zext i1 %72 to i32
  %74 = sext i32 %73 to i64
  %75 = call i64 @llvm.expect.i64(i64 %74, i64 1)
  %76 = icmp ne i64 %75, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %68, %48
  %78 = load i32, i32* %11, align 4
  %79 = load i32, i32* %9, align 4
  %80 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %78, i32 %79, i32 %80)
  store i32 1, i32* %19, align 4
  br label %156

81:                                               ; preds = %68, %58
  store i32 0, i32* %12, align 4
  %82 = load %1*, %1** %3, align 8
  %83 = bitcast %1* %82 to %29*
  %84 = getelementptr inbounds %29, %29* %83, i64 4
  store %29* %84, %29** %13, align 8
  %85 = load i32, i32* %12, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %12, align 4
  br label %87

87:                                               ; preds = %81
  %88 = load i32, i32* %12, align 4
  %89 = load i32, i32* %9, align 4
  %90 = icmp sle i32 %88, %89
  br i1 %90, label %95, label %91

91:                                               ; preds = %87
  %92 = load i8, i8* %18, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp eq i32 %93, 1
  br label %95

95:                                               ; preds = %91, %87
  %96 = phi i1 [ true, %87 ], [ %94, %91 ]
  %97 = xor i1 %96, true
  %98 = zext i1 %97 to i32
  %99 = sext i32 %98 to i64
  %100 = call i64 @llvm.expect.i64(i64 %99, i64 0)
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %95
  unreachable

103:                                              ; preds = %95
  br label %104

104:                                              ; preds = %103
  br label %105

105:                                              ; preds = %104
  br label %106

106:                                              ; preds = %105
  %107 = load i32, i32* %12, align 4
  %108 = load i32, i32* %9, align 4
  %109 = icmp sgt i32 %107, %108
  br i1 %109, label %114, label %110

110:                                              ; preds = %106
  %111 = load i8, i8* %18, align 1
  %112 = zext i8 %111 to i32
  %113 = icmp eq i32 %112, 0
  br label %114

114:                                              ; preds = %110, %106
  %115 = phi i1 [ true, %106 ], [ %113, %110 ]
  %116 = xor i1 %115, true
  %117 = zext i1 %116 to i32
  %118 = sext i32 %117 to i64
  %119 = call i64 @llvm.expect.i64(i64 %118, i64 0)
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %114
  unreachable

122:                                              ; preds = %114
  br label %123

123:                                              ; preds = %122
  br label %124

124:                                              ; preds = %123
  %125 = load i8, i8* %18, align 1
  %126 = icmp ne i8 %125, 0
  br i1 %126, label %127, label %139

127:                                              ; preds = %124
  %128 = load i32, i32* %12, align 4
  %129 = load i32, i32* %11, align 4
  %130 = icmp sgt i32 %128, %129
  %131 = xor i1 %130, true
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  %134 = sext i32 %133 to i64
  %135 = call i64 @llvm.expect.i64(i64 %134, i64 0)
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %127
  br label %156

138:                                              ; preds = %127
  br label %139

139:                                              ; preds = %138, %124
  %140 = load %29*, %29** %13, align 8
  %141 = getelementptr inbounds %29, %29* %140, i32 1
  store %29* %141, %29** %13, align 8
  %142 = load %29*, %29** %13, align 8
  store %29* %142, %29** %14, align 8
  %143 = load %29*, %29** %14, align 8
  %144 = call i32 @1462(%29* %143, i8** %5, i64* %6, i32 0)
  %145 = icmp ne i32 %144, 0
  %146 = xor i1 %145, true
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = zext i1 %148 to i32
  %150 = sext i32 %149 to i64
  %151 = call i64 @llvm.expect.i64(i64 %150, i64 0)
  %152 = icmp ne i64 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %139
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %156

154:                                              ; preds = %139
  br label %155

155:                                              ; preds = %154
  br label %156

156:                                              ; preds = %155, %153, %137, %77
  %157 = load i32, i32* %19, align 4
  %158 = icmp ne i32 %157, 0
  %159 = xor i1 %158, true
  %160 = xor i1 %159, true
  %161 = zext i1 %160 to i32
  %162 = sext i32 %161 to i64
  %163 = call i64 @llvm.expect.i64(i64 %162, i64 0)
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %165, label %188

165:                                              ; preds = %156
  %166 = load i32, i32* %19, align 4
  %167 = icmp eq i32 %166, 2
  br i1 %167, label %168, label %171

168:                                              ; preds = %165
  %169 = load i32, i32* %12, align 4
  %170 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %169, i8* %170)
  br label %187

171:                                              ; preds = %165
  %172 = load i32, i32* %19, align 4
  %173 = icmp eq i32 %172, 3
  br i1 %173, label %174, label %178

174:                                              ; preds = %171
  %175 = load i32, i32* %12, align 4
  %176 = load i8*, i8** %16, align 8
  %177 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %175, i8* %176, %29* %177)
  br label %186

178:                                              ; preds = %171
  %179 = load i32, i32* %19, align 4
  %180 = icmp eq i32 %179, 4
  br i1 %180, label %181, label %185

181:                                              ; preds = %178
  %182 = load i32, i32* %12, align 4
  %183 = load i32, i32* %15, align 4
  %184 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %182, i32 %183, %29* %184)
  br label %185

185:                                              ; preds = %181, %178
  br label %186

186:                                              ; preds = %185, %174
  br label %187

187:                                              ; preds = %186, %168
  store i32 1, i32* %20, align 4
  br label %189

188:                                              ; preds = %156
  store i32 0, i32* %20, align 4
  br label %189

189:                                              ; preds = %188, %187
  %190 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %190) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %191 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %191) #13
  %192 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  %193 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  %194 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %196) #13
  %197 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = load i32, i32* %20, align 4
  switch i32 %200, label %229 [
    i32 0, label %201
  ]

201:                                              ; preds = %189
  br label %202

202:                                              ; preds = %201
  br label %203

203:                                              ; preds = %202
  %204 = load i8*, i8** %5, align 8
  %205 = call %87* @getprotobyname(i8* %204)
  store %87* %205, %87** %7, align 8
  %206 = load %87*, %87** %7, align 8
  %207 = icmp eq %87* %206, null
  br i1 %207, label %208, label %215

208:                                              ; preds = %203
  br label %209

209:                                              ; preds = %208
  %210 = load %29*, %29** %4, align 8
  %211 = getelementptr inbounds %29, %29* %210, i32 0, i32 1
  %212 = bitcast %31* %211 to i32*
  store i32 2, i32* %212, align 8
  br label %213

213:                                              ; preds = %209
  br label %214

214:                                              ; preds = %213
  store i32 1, i32* %20, align 4
  br label %229

215:                                              ; preds = %203
  %216 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %216) #13
  %217 = load %29*, %29** %4, align 8
  store %29* %217, %29** %21, align 8
  %218 = load %87*, %87** %7, align 8
  %219 = getelementptr inbounds %87, %87* %218, i32 0, i32 2
  %220 = load i32, i32* %219, align 8
  %221 = sext i32 %220 to i64
  %222 = load %29*, %29** %21, align 8
  %223 = getelementptr inbounds %29, %29* %222, i32 0, i32 0
  %224 = bitcast %30* %223 to i64*
  store i64 %221, i64* %224, align 8
  %225 = load %29*, %29** %21, align 8
  %226 = getelementptr inbounds %29, %29* %225, i32 0, i32 1
  %227 = bitcast %31* %226 to i32*
  store i32 4, i32* %227, align 8
  %228 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %228) #13
  store i32 1, i32* %20, align 4
  br label %229

229:                                              ; preds = %215, %214, %189
  %230 = bitcast %87** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %230) #13
  %231 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %231) #13
  %232 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %232) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_getprotobynumber(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %87*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %29*, align 8
  %13 = alloca %29*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca %29*, align 8
  %22 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %87** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  br label %25

25:                                               ; preds = %2
  %26 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  store i32 0, i32* %7, align 4
  %27 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  store i32 1, i32* %8, align 4
  %28 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 1, i32* %9, align 4
  %29 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  %30 = load %1*, %1** %3, align 8
  %31 = getelementptr inbounds %1, %1* %30, i32 0, i32 4
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 2
  %33 = bitcast %32* %32 to i32*
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %36) #13
  %37 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  store %29* null, %29** %13, align 8
  %38 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  store i32 0, i32* %14, align 4
  %39 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store i8* null, i8** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  store i8 0, i8* %17, align 1
  %40 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %18, align 4
  %41 = load i32, i32* %11, align 4
  %42 = load %29*, %29** %12, align 8
  %43 = load %29*, %29** %13, align 8
  %44 = load i32, i32* %14, align 4
  %45 = load i8*, i8** %15, align 8
  %46 = load i8, i8* %16, align 1
  %47 = load i8, i8* %17, align 1
  br label %48

48:                                               ; preds = %25
  %49 = load i32, i32* %10, align 4
  %50 = load i32, i32* %8, align 4
  %51 = icmp slt i32 %49, %50
  %52 = xor i1 %51, true
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i32
  %55 = sext i32 %54 to i64
  %56 = call i64 @llvm.expect.i64(i64 %55, i64 0)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %77, label %58

58:                                               ; preds = %48
  %59 = load i32, i32* %10, align 4
  %60 = load i32, i32* %9, align 4
  %61 = icmp sgt i32 %59, %60
  %62 = xor i1 %61, true
  %63 = xor i1 %62, true
  %64 = zext i1 %63 to i32
  %65 = sext i32 %64 to i64
  %66 = call i64 @llvm.expect.i64(i64 %65, i64 0)
  %67 = icmp ne i64 %66, 0
  br i1 %67, label %68, label %81

68:                                               ; preds = %58
  %69 = load i32, i32* %9, align 4
  %70 = icmp sge i32 %69, 0
  %71 = xor i1 %70, true
  %72 = xor i1 %71, true
  %73 = zext i1 %72 to i32
  %74 = sext i32 %73 to i64
  %75 = call i64 @llvm.expect.i64(i64 %74, i64 1)
  %76 = icmp ne i64 %75, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %68, %48
  %78 = load i32, i32* %10, align 4
  %79 = load i32, i32* %8, align 4
  %80 = load i32, i32* %9, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %78, i32 %79, i32 %80)
  store i32 1, i32* %18, align 4
  br label %156

81:                                               ; preds = %68, %58
  store i32 0, i32* %11, align 4
  %82 = load %1*, %1** %3, align 8
  %83 = bitcast %1* %82 to %29*
  %84 = getelementptr inbounds %29, %29* %83, i64 4
  store %29* %84, %29** %12, align 8
  %85 = load i32, i32* %11, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %11, align 4
  br label %87

87:                                               ; preds = %81
  %88 = load i32, i32* %11, align 4
  %89 = load i32, i32* %8, align 4
  %90 = icmp sle i32 %88, %89
  br i1 %90, label %95, label %91

91:                                               ; preds = %87
  %92 = load i8, i8* %17, align 1
  %93 = zext i8 %92 to i32
  %94 = icmp eq i32 %93, 1
  br label %95

95:                                               ; preds = %91, %87
  %96 = phi i1 [ true, %87 ], [ %94, %91 ]
  %97 = xor i1 %96, true
  %98 = zext i1 %97 to i32
  %99 = sext i32 %98 to i64
  %100 = call i64 @llvm.expect.i64(i64 %99, i64 0)
  %101 = icmp ne i64 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %95
  unreachable

103:                                              ; preds = %95
  br label %104

104:                                              ; preds = %103
  br label %105

105:                                              ; preds = %104
  br label %106

106:                                              ; preds = %105
  %107 = load i32, i32* %11, align 4
  %108 = load i32, i32* %8, align 4
  %109 = icmp sgt i32 %107, %108
  br i1 %109, label %114, label %110

110:                                              ; preds = %106
  %111 = load i8, i8* %17, align 1
  %112 = zext i8 %111 to i32
  %113 = icmp eq i32 %112, 0
  br label %114

114:                                              ; preds = %110, %106
  %115 = phi i1 [ true, %106 ], [ %113, %110 ]
  %116 = xor i1 %115, true
  %117 = zext i1 %116 to i32
  %118 = sext i32 %117 to i64
  %119 = call i64 @llvm.expect.i64(i64 %118, i64 0)
  %120 = icmp ne i64 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %114
  unreachable

122:                                              ; preds = %114
  br label %123

123:                                              ; preds = %122
  br label %124

124:                                              ; preds = %123
  %125 = load i8, i8* %17, align 1
  %126 = icmp ne i8 %125, 0
  br i1 %126, label %127, label %139

127:                                              ; preds = %124
  %128 = load i32, i32* %11, align 4
  %129 = load i32, i32* %10, align 4
  %130 = icmp sgt i32 %128, %129
  %131 = xor i1 %130, true
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  %134 = sext i32 %133 to i64
  %135 = call i64 @llvm.expect.i64(i64 %134, i64 0)
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %127
  br label %156

138:                                              ; preds = %127
  br label %139

139:                                              ; preds = %138, %124
  %140 = load %29*, %29** %12, align 8
  %141 = getelementptr inbounds %29, %29* %140, i32 1
  store %29* %141, %29** %12, align 8
  %142 = load %29*, %29** %12, align 8
  store %29* %142, %29** %13, align 8
  %143 = load %29*, %29** %13, align 8
  %144 = call i32 @1464(%29* %143, i64* %5, i8* %16, i32 0, i32 0)
  %145 = icmp ne i32 %144, 0
  %146 = xor i1 %145, true
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = zext i1 %148 to i32
  %150 = sext i32 %149 to i64
  %151 = call i64 @llvm.expect.i64(i64 %150, i64 0)
  %152 = icmp ne i64 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %139
  store i32 0, i32* %14, align 4
  store i32 4, i32* %18, align 4
  br label %156

154:                                              ; preds = %139
  br label %155

155:                                              ; preds = %154
  br label %156

156:                                              ; preds = %155, %153, %137, %77
  %157 = load i32, i32* %18, align 4
  %158 = icmp ne i32 %157, 0
  %159 = xor i1 %158, true
  %160 = xor i1 %159, true
  %161 = zext i1 %160 to i32
  %162 = sext i32 %161 to i64
  %163 = call i64 @llvm.expect.i64(i64 %162, i64 0)
  %164 = icmp ne i64 %163, 0
  br i1 %164, label %165, label %188

165:                                              ; preds = %156
  %166 = load i32, i32* %18, align 4
  %167 = icmp eq i32 %166, 2
  br i1 %167, label %168, label %171

168:                                              ; preds = %165
  %169 = load i32, i32* %11, align 4
  %170 = load i8*, i8** %15, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %169, i8* %170)
  br label %187

171:                                              ; preds = %165
  %172 = load i32, i32* %18, align 4
  %173 = icmp eq i32 %172, 3
  br i1 %173, label %174, label %178

174:                                              ; preds = %171
  %175 = load i32, i32* %11, align 4
  %176 = load i8*, i8** %15, align 8
  %177 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %175, i8* %176, %29* %177)
  br label %186

178:                                              ; preds = %171
  %179 = load i32, i32* %18, align 4
  %180 = icmp eq i32 %179, 4
  br i1 %180, label %181, label %185

181:                                              ; preds = %178
  %182 = load i32, i32* %11, align 4
  %183 = load i32, i32* %14, align 4
  %184 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %182, i32 %183, %29* %184)
  br label %185

185:                                              ; preds = %181, %178
  br label %186

186:                                              ; preds = %185, %174
  br label %187

187:                                              ; preds = %186, %168
  store i32 1, i32* %19, align 4
  br label %189

188:                                              ; preds = %156
  store i32 0, i32* %19, align 4
  br label %189

189:                                              ; preds = %188, %187
  %190 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %190) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  %191 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %191) #13
  %192 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  %193 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  %194 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %196) #13
  %197 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = load i32, i32* %19, align 4
  switch i32 %200, label %247 [
    i32 0, label %201
  ]

201:                                              ; preds = %189
  br label %202

202:                                              ; preds = %201
  br label %203

203:                                              ; preds = %202
  %204 = load i64, i64* %5, align 8
  %205 = trunc i64 %204 to i32
  %206 = call %87* @getprotobynumber(i32 %205)
  store %87* %206, %87** %6, align 8
  %207 = load %87*, %87** %6, align 8
  %208 = icmp eq %87* %207, null
  br i1 %208, label %209, label %216

209:                                              ; preds = %203
  br label %210

210:                                              ; preds = %209
  %211 = load %29*, %29** %4, align 8
  %212 = getelementptr inbounds %29, %29* %211, i32 0, i32 1
  %213 = bitcast %31* %212 to i32*
  store i32 2, i32* %213, align 8
  br label %214

214:                                              ; preds = %210
  br label %215

215:                                              ; preds = %214
  store i32 1, i32* %19, align 4
  br label %247

216:                                              ; preds = %203
  br label %217

217:                                              ; preds = %216
  %218 = bitcast i8** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %218) #13
  %219 = load %87*, %87** %6, align 8
  %220 = getelementptr inbounds %87, %87* %219, i32 0, i32 0
  %221 = load i8*, i8** %220, align 8
  store i8* %221, i8** %20, align 8
  br label %222

222:                                              ; preds = %217
  br label %223

223:                                              ; preds = %222
  %224 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %224) #13
  %225 = load %29*, %29** %4, align 8
  store %29* %225, %29** %21, align 8
  %226 = bitcast %28** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %226) #13
  %227 = load i8*, i8** %20, align 8
  %228 = load i8*, i8** %20, align 8
  %229 = call i64 @strlen(i8* %228) #15
  %230 = call %28* @1463(i8* %227, i64 %229, i32 0)
  store %28* %230, %28** %22, align 8
  %231 = load %28*, %28** %22, align 8
  %232 = load %29*, %29** %21, align 8
  %233 = getelementptr inbounds %29, %29* %232, i32 0, i32 0
  %234 = bitcast %30* %233 to %28**
  store %28* %231, %28** %234, align 8
  %235 = load %29*, %29** %21, align 8
  %236 = getelementptr inbounds %29, %29* %235, i32 0, i32 1
  %237 = bitcast %31* %236 to i32*
  store i32 5126, i32* %237, align 8
  %238 = bitcast %28** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %238) #13
  %239 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %239) #13
  br label %240

240:                                              ; preds = %223
  br label %241

241:                                              ; preds = %240
  br label %242

242:                                              ; preds = %241
  br label %243

243:                                              ; preds = %242
  %244 = bitcast i8** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %244) #13
  br label %245

245:                                              ; preds = %243
  br label %246

246:                                              ; preds = %245
  store i32 1, i32* %19, align 4
  br label %247

247:                                              ; preds = %246, %215, %189
  %248 = bitcast %87** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #13
  %249 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #13
  ret void
}

declare dso_local void @zif_getmyuid(%1*, %29*) #1

declare dso_local void @zif_getmygid(%1*, %29*) #1

declare dso_local void @zif_getmypid(%1*, %29*) #1

declare dso_local void @zif_getmyinode(%1*, %29*) #1

declare dso_local void @zif_getlastmod(%1*, %29*) #1

declare dso_local void @zif_base64_decode(%1*, %29*) #1

declare dso_local void @zif_base64_encode(%1*, %29*) #1

declare dso_local void @zif_password_hash(%1*, %29*) #1

declare dso_local void @zif_password_get_info(%1*, %29*) #1

declare dso_local void @zif_password_needs_rehash(%1*, %29*) #1

declare dso_local void @zif_password_verify(%1*, %29*) #1

declare dso_local void @zif_convert_uuencode(%1*, %29*) #1

declare dso_local void @zif_convert_uudecode(%1*, %29*) #1

declare dso_local void @zif_abs(%1*, %29*) #1

declare dso_local void @zif_ceil(%1*, %29*) #1

declare dso_local void @zif_floor(%1*, %29*) #1

declare dso_local void @zif_round(%1*, %29*) #1

declare dso_local void @zif_sin(%1*, %29*) #1

declare dso_local void @zif_cos(%1*, %29*) #1

declare dso_local void @zif_tan(%1*, %29*) #1

declare dso_local void @zif_asin(%1*, %29*) #1

declare dso_local void @zif_acos(%1*, %29*) #1

declare dso_local void @zif_atan(%1*, %29*) #1

declare dso_local void @zif_atanh(%1*, %29*) #1

declare dso_local void @zif_atan2(%1*, %29*) #1

declare dso_local void @zif_sinh(%1*, %29*) #1

declare dso_local void @zif_cosh(%1*, %29*) #1

declare dso_local void @zif_tanh(%1*, %29*) #1

declare dso_local void @zif_asinh(%1*, %29*) #1

declare dso_local void @zif_acosh(%1*, %29*) #1

declare dso_local void @zif_expm1(%1*, %29*) #1

declare dso_local void @zif_log1p(%1*, %29*) #1

declare dso_local void @zif_pi(%1*, %29*) #1

declare dso_local void @zif_is_finite(%1*, %29*) #1

declare dso_local void @zif_is_nan(%1*, %29*) #1

declare dso_local void @zif_is_infinite(%1*, %29*) #1

declare dso_local void @zif_pow(%1*, %29*) #1

declare dso_local void @zif_exp(%1*, %29*) #1

declare dso_local void @zif_log(%1*, %29*) #1

declare dso_local void @zif_log10(%1*, %29*) #1

declare dso_local void @zif_sqrt(%1*, %29*) #1

declare dso_local void @zif_hypot(%1*, %29*) #1

declare dso_local void @zif_deg2rad(%1*, %29*) #1

declare dso_local void @zif_rad2deg(%1*, %29*) #1

declare dso_local void @zif_bindec(%1*, %29*) #1

declare dso_local void @zif_hexdec(%1*, %29*) #1

declare dso_local void @zif_octdec(%1*, %29*) #1

declare dso_local void @zif_decbin(%1*, %29*) #1

declare dso_local void @zif_decoct(%1*, %29*) #1

declare dso_local void @zif_dechex(%1*, %29*) #1

declare dso_local void @zif_base_convert(%1*, %29*) #1

declare dso_local void @zif_number_format(%1*, %29*) #1

declare dso_local void @zif_fmod(%1*, %29*) #1

declare dso_local void @zif_intdiv(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @php_inet_ntop(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca [40 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  %23 = alloca %29*, align 8
  %24 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %25 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  store i32 2, i32* %7, align 4
  %28 = bitcast [40 x i8]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %28) #13
  br label %29

29:                                               ; preds = %2
  %30 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 0, i32* %9, align 4
  %31 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %10, align 4
  %32 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 1, i32* %11, align 4
  %33 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = load %1*, %1** %3, align 8
  %35 = getelementptr inbounds %1, %1* %34, i32 0, i32 4
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 2
  %37 = bitcast %32* %36 to i32*
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %12, align 4
  %39 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  %40 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store %29* null, %29** %15, align 8
  %42 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %16, align 4
  %43 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %44 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %20, align 4
  %45 = load i32, i32* %13, align 4
  %46 = load %29*, %29** %14, align 8
  %47 = load %29*, %29** %15, align 8
  %48 = load i32, i32* %16, align 4
  %49 = load i8*, i8** %17, align 8
  %50 = load i8, i8* %18, align 1
  %51 = load i8, i8* %19, align 1
  br label %52

52:                                               ; preds = %29
  %53 = load i32, i32* %12, align 4
  %54 = load i32, i32* %10, align 4
  %55 = icmp slt i32 %53, %54
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = call i64 @llvm.expect.i64(i64 %59, i64 0)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %81, label %62

62:                                               ; preds = %52
  %63 = load i32, i32* %12, align 4
  %64 = load i32, i32* %11, align 4
  %65 = icmp sgt i32 %63, %64
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 0)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %85

72:                                               ; preds = %62
  %73 = load i32, i32* %11, align 4
  %74 = icmp sge i32 %73, 0
  %75 = xor i1 %74, true
  %76 = xor i1 %75, true
  %77 = zext i1 %76 to i32
  %78 = sext i32 %77 to i64
  %79 = call i64 @llvm.expect.i64(i64 %78, i64 1)
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %72, %52
  %82 = load i32, i32* %12, align 4
  %83 = load i32, i32* %10, align 4
  %84 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %82, i32 %83, i32 %84)
  store i32 1, i32* %20, align 4
  br label %160

85:                                               ; preds = %72, %62
  store i32 0, i32* %13, align 4
  %86 = load %1*, %1** %3, align 8
  %87 = bitcast %1* %86 to %29*
  %88 = getelementptr inbounds %29, %29* %87, i64 4
  store %29* %88, %29** %14, align 8
  %89 = load i32, i32* %13, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %13, align 4
  br label %91

91:                                               ; preds = %85
  %92 = load i32, i32* %13, align 4
  %93 = load i32, i32* %10, align 4
  %94 = icmp sle i32 %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i8, i8* %19, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp eq i32 %97, 1
  br label %99

99:                                               ; preds = %95, %91
  %100 = phi i1 [ true, %91 ], [ %98, %95 ]
  %101 = xor i1 %100, true
  %102 = zext i1 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = call i64 @llvm.expect.i64(i64 %103, i64 0)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %99
  unreachable

107:                                              ; preds = %99
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  br label %110

110:                                              ; preds = %109
  %111 = load i32, i32* %13, align 4
  %112 = load i32, i32* %10, align 4
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = load i8, i8* %19, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %116, 0
  br label %118

118:                                              ; preds = %114, %110
  %119 = phi i1 [ true, %110 ], [ %117, %114 ]
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = call i64 @llvm.expect.i64(i64 %122, i64 0)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %118
  unreachable

126:                                              ; preds = %118
  br label %127

127:                                              ; preds = %126
  br label %128

128:                                              ; preds = %127
  %129 = load i8, i8* %19, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %128
  %132 = load i32, i32* %13, align 4
  %133 = load i32, i32* %12, align 4
  %134 = icmp sgt i32 %132, %133
  %135 = xor i1 %134, true
  %136 = xor i1 %135, true
  %137 = zext i1 %136 to i32
  %138 = sext i32 %137 to i64
  %139 = call i64 @llvm.expect.i64(i64 %138, i64 0)
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %131
  br label %160

142:                                              ; preds = %131
  br label %143

143:                                              ; preds = %142, %128
  %144 = load %29*, %29** %14, align 8
  %145 = getelementptr inbounds %29, %29* %144, i32 1
  store %29* %145, %29** %14, align 8
  %146 = load %29*, %29** %14, align 8
  store %29* %146, %29** %15, align 8
  %147 = load %29*, %29** %15, align 8
  %148 = call i32 @1462(%29* %147, i8** %5, i64* %6, i32 0)
  %149 = icmp ne i32 %148, 0
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i32
  %154 = sext i32 %153 to i64
  %155 = call i64 @llvm.expect.i64(i64 %154, i64 0)
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %143
  store i32 2, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %160

158:                                              ; preds = %143
  br label %159

159:                                              ; preds = %158
  br label %160

160:                                              ; preds = %159, %157, %141, %81
  %161 = load i32, i32* %20, align 4
  %162 = icmp ne i32 %161, 0
  %163 = xor i1 %162, true
  %164 = xor i1 %163, true
  %165 = zext i1 %164 to i32
  %166 = sext i32 %165 to i64
  %167 = call i64 @llvm.expect.i64(i64 %166, i64 0)
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %169, label %198

169:                                              ; preds = %160
  %170 = load i32, i32* %20, align 4
  %171 = icmp eq i32 %170, 2
  br i1 %171, label %172, label %175

172:                                              ; preds = %169
  %173 = load i32, i32* %13, align 4
  %174 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %173, i8* %174)
  br label %191

175:                                              ; preds = %169
  %176 = load i32, i32* %20, align 4
  %177 = icmp eq i32 %176, 3
  br i1 %177, label %178, label %182

178:                                              ; preds = %175
  %179 = load i32, i32* %13, align 4
  %180 = load i8*, i8** %17, align 8
  %181 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %179, i8* %180, %29* %181)
  br label %190

182:                                              ; preds = %175
  %183 = load i32, i32* %20, align 4
  %184 = icmp eq i32 %183, 4
  br i1 %184, label %185, label %189

185:                                              ; preds = %182
  %186 = load i32, i32* %13, align 4
  %187 = load i32, i32* %16, align 4
  %188 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %186, i32 %187, %29* %188)
  br label %189

189:                                              ; preds = %185, %182
  br label %190

190:                                              ; preds = %189, %178
  br label %191

191:                                              ; preds = %190, %172
  br label %192

192:                                              ; preds = %191
  %193 = load %29*, %29** %4, align 8
  %194 = getelementptr inbounds %29, %29* %193, i32 0, i32 1
  %195 = bitcast %31* %194 to i32*
  store i32 2, i32* %195, align 8
  br label %196

196:                                              ; preds = %192
  br label %197

197:                                              ; preds = %196
  store i32 1, i32* %21, align 4
  br label %199

198:                                              ; preds = %160
  store i32 0, i32* %21, align 4
  br label %199

199:                                              ; preds = %198, %197
  %200 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %201 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %201) #13
  %202 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %203) #13
  %204 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %204) #13
  %205 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #13
  %206 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %207) #13
  %208 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %208) #13
  %209 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %209) #13
  %210 = load i32, i32* %21, align 4
  switch i32 %210, label %270 [
    i32 0, label %211
  ]

211:                                              ; preds = %199
  br label %212

212:                                              ; preds = %211
  br label %213

213:                                              ; preds = %212
  %214 = load i64, i64* %6, align 8
  %215 = icmp eq i64 %214, 16
  br i1 %215, label %216, label %217

216:                                              ; preds = %213
  store i32 10, i32* %7, align 4
  br label %228

217:                                              ; preds = %213
  %218 = load i64, i64* %6, align 8
  %219 = icmp ne i64 %218, 4
  br i1 %219, label %220, label %227

220:                                              ; preds = %217
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1104, i32 0, i32 0))
  br label %221

221:                                              ; preds = %220
  %222 = load %29*, %29** %4, align 8
  %223 = getelementptr inbounds %29, %29* %222, i32 0, i32 1
  %224 = bitcast %31* %223 to i32*
  store i32 2, i32* %224, align 8
  br label %225

225:                                              ; preds = %221
  br label %226

226:                                              ; preds = %225
  store i32 1, i32* %21, align 4
  br label %270

227:                                              ; preds = %217
  br label %228

228:                                              ; preds = %227, %216
  %229 = load i32, i32* %7, align 4
  %230 = load i8*, i8** %5, align 8
  %231 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i32 0, i32 0
  %232 = call i8* @inet_ntop(i32 %229, i8* %230, i8* %231, i32 40) #13
  %233 = icmp ne i8* %232, null
  br i1 %233, label %241, label %234

234:                                              ; preds = %228
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1105, i32 0, i32 0))
  br label %235

235:                                              ; preds = %234
  %236 = load %29*, %29** %4, align 8
  %237 = getelementptr inbounds %29, %29* %236, i32 0, i32 1
  %238 = bitcast %31* %237 to i32*
  store i32 2, i32* %238, align 8
  br label %239

239:                                              ; preds = %235
  br label %240

240:                                              ; preds = %239
  store i32 1, i32* %21, align 4
  br label %270

241:                                              ; preds = %228
  br label %242

242:                                              ; preds = %241
  %243 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %243) #13
  %244 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i32 0, i32 0
  store i8* %244, i8** %22, align 8
  br label %245

245:                                              ; preds = %242
  br label %246

246:                                              ; preds = %245
  %247 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %247) #13
  %248 = load %29*, %29** %4, align 8
  store %29* %248, %29** %23, align 8
  %249 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %249) #13
  %250 = load i8*, i8** %22, align 8
  %251 = load i8*, i8** %22, align 8
  %252 = call i64 @strlen(i8* %251) #15
  %253 = call %28* @1463(i8* %250, i64 %252, i32 0)
  store %28* %253, %28** %24, align 8
  %254 = load %28*, %28** %24, align 8
  %255 = load %29*, %29** %23, align 8
  %256 = getelementptr inbounds %29, %29* %255, i32 0, i32 0
  %257 = bitcast %30* %256 to %28**
  store %28* %254, %28** %257, align 8
  %258 = load %29*, %29** %23, align 8
  %259 = getelementptr inbounds %29, %29* %258, i32 0, i32 1
  %260 = bitcast %31* %259 to i32*
  store i32 5126, i32* %260, align 8
  %261 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %261) #13
  %262 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %262) #13
  br label %263

263:                                              ; preds = %246
  br label %264

264:                                              ; preds = %263
  br label %265

265:                                              ; preds = %264
  br label %266

266:                                              ; preds = %265
  %267 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %267) #13
  br label %268

268:                                              ; preds = %266
  br label %269

269:                                              ; preds = %268
  store i32 1, i32* %21, align 4
  br label %270

270:                                              ; preds = %269, %240, %226, %199
  %271 = bitcast [40 x i8]* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %271) #13
  %272 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #13
  %273 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %273) #13
  %274 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %274) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @php_inet_pton(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca [17 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %29*, align 8
  %24 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %25 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #13
  %26 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  store i32 2, i32* %6, align 4
  %27 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast [17 x i8]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 17, i8* %29) #13
  br label %30

30:                                               ; preds = %2
  %31 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 0, i32* %10, align 4
  %32 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 1, i32* %11, align 4
  %33 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 1, i32* %12, align 4
  %34 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  %35 = load %1*, %1** %3, align 8
  %36 = getelementptr inbounds %1, %1* %35, i32 0, i32 4
  %37 = getelementptr inbounds %29, %29* %36, i32 0, i32 2
  %38 = bitcast %32* %37 to i32*
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %13, align 4
  %40 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  %41 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  %42 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store %29* null, %29** %16, align 8
  %43 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %17, align 4
  %44 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %45 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %21, align 4
  %46 = load i32, i32* %14, align 4
  %47 = load %29*, %29** %15, align 8
  %48 = load %29*, %29** %16, align 8
  %49 = load i32, i32* %17, align 4
  %50 = load i8*, i8** %18, align 8
  %51 = load i8, i8* %19, align 1
  %52 = load i8, i8* %20, align 1
  br label %53

53:                                               ; preds = %30
  %54 = load i32, i32* %13, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp slt i32 %54, %55
  %57 = xor i1 %56, true
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = call i64 @llvm.expect.i64(i64 %60, i64 0)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %82, label %63

63:                                               ; preds = %53
  %64 = load i32, i32* %13, align 4
  %65 = load i32, i32* %12, align 4
  %66 = icmp sgt i32 %64, %65
  %67 = xor i1 %66, true
  %68 = xor i1 %67, true
  %69 = zext i1 %68 to i32
  %70 = sext i32 %69 to i64
  %71 = call i64 @llvm.expect.i64(i64 %70, i64 0)
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %86

73:                                               ; preds = %63
  %74 = load i32, i32* %12, align 4
  %75 = icmp sge i32 %74, 0
  %76 = xor i1 %75, true
  %77 = xor i1 %76, true
  %78 = zext i1 %77 to i32
  %79 = sext i32 %78 to i64
  %80 = call i64 @llvm.expect.i64(i64 %79, i64 1)
  %81 = icmp ne i64 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %73, %53
  %83 = load i32, i32* %13, align 4
  %84 = load i32, i32* %11, align 4
  %85 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %83, i32 %84, i32 %85)
  store i32 1, i32* %21, align 4
  br label %161

86:                                               ; preds = %73, %63
  store i32 0, i32* %14, align 4
  %87 = load %1*, %1** %3, align 8
  %88 = bitcast %1* %87 to %29*
  %89 = getelementptr inbounds %29, %29* %88, i64 4
  store %29* %89, %29** %15, align 8
  %90 = load i32, i32* %14, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %14, align 4
  br label %92

92:                                               ; preds = %86
  %93 = load i32, i32* %14, align 4
  %94 = load i32, i32* %11, align 4
  %95 = icmp sle i32 %93, %94
  br i1 %95, label %100, label %96

96:                                               ; preds = %92
  %97 = load i8, i8* %20, align 1
  %98 = zext i8 %97 to i32
  %99 = icmp eq i32 %98, 1
  br label %100

100:                                              ; preds = %96, %92
  %101 = phi i1 [ true, %92 ], [ %99, %96 ]
  %102 = xor i1 %101, true
  %103 = zext i1 %102 to i32
  %104 = sext i32 %103 to i64
  %105 = call i64 @llvm.expect.i64(i64 %104, i64 0)
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %100
  unreachable

108:                                              ; preds = %100
  br label %109

109:                                              ; preds = %108
  br label %110

110:                                              ; preds = %109
  br label %111

111:                                              ; preds = %110
  %112 = load i32, i32* %14, align 4
  %113 = load i32, i32* %11, align 4
  %114 = icmp sgt i32 %112, %113
  br i1 %114, label %119, label %115

115:                                              ; preds = %111
  %116 = load i8, i8* %20, align 1
  %117 = zext i8 %116 to i32
  %118 = icmp eq i32 %117, 0
  br label %119

119:                                              ; preds = %115, %111
  %120 = phi i1 [ true, %111 ], [ %118, %115 ]
  %121 = xor i1 %120, true
  %122 = zext i1 %121 to i32
  %123 = sext i32 %122 to i64
  %124 = call i64 @llvm.expect.i64(i64 %123, i64 0)
  %125 = icmp ne i64 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %119
  unreachable

127:                                              ; preds = %119
  br label %128

128:                                              ; preds = %127
  br label %129

129:                                              ; preds = %128
  %130 = load i8, i8* %20, align 1
  %131 = icmp ne i8 %130, 0
  br i1 %131, label %132, label %144

132:                                              ; preds = %129
  %133 = load i32, i32* %14, align 4
  %134 = load i32, i32* %13, align 4
  %135 = icmp sgt i32 %133, %134
  %136 = xor i1 %135, true
  %137 = xor i1 %136, true
  %138 = zext i1 %137 to i32
  %139 = sext i32 %138 to i64
  %140 = call i64 @llvm.expect.i64(i64 %139, i64 0)
  %141 = icmp ne i64 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %132
  br label %161

143:                                              ; preds = %132
  br label %144

144:                                              ; preds = %143, %129
  %145 = load %29*, %29** %15, align 8
  %146 = getelementptr inbounds %29, %29* %145, i32 1
  store %29* %146, %29** %15, align 8
  %147 = load %29*, %29** %15, align 8
  store %29* %147, %29** %16, align 8
  %148 = load %29*, %29** %16, align 8
  %149 = call i32 @1462(%29* %148, i8** %7, i64* %8, i32 0)
  %150 = icmp ne i32 %149, 0
  %151 = xor i1 %150, true
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = zext i1 %153 to i32
  %155 = sext i32 %154 to i64
  %156 = call i64 @llvm.expect.i64(i64 %155, i64 0)
  %157 = icmp ne i64 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %144
  store i32 2, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %161

159:                                              ; preds = %144
  br label %160

160:                                              ; preds = %159
  br label %161

161:                                              ; preds = %160, %158, %142, %82
  %162 = load i32, i32* %21, align 4
  %163 = icmp ne i32 %162, 0
  %164 = xor i1 %163, true
  %165 = xor i1 %164, true
  %166 = zext i1 %165 to i32
  %167 = sext i32 %166 to i64
  %168 = call i64 @llvm.expect.i64(i64 %167, i64 0)
  %169 = icmp ne i64 %168, 0
  br i1 %169, label %170, label %199

170:                                              ; preds = %161
  %171 = load i32, i32* %21, align 4
  %172 = icmp eq i32 %171, 2
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = load i32, i32* %14, align 4
  %175 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %174, i8* %175)
  br label %192

176:                                              ; preds = %170
  %177 = load i32, i32* %21, align 4
  %178 = icmp eq i32 %177, 3
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = load i32, i32* %14, align 4
  %181 = load i8*, i8** %18, align 8
  %182 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %180, i8* %181, %29* %182)
  br label %191

183:                                              ; preds = %176
  %184 = load i32, i32* %21, align 4
  %185 = icmp eq i32 %184, 4
  br i1 %185, label %186, label %190

186:                                              ; preds = %183
  %187 = load i32, i32* %14, align 4
  %188 = load i32, i32* %17, align 4
  %189 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %187, i32 %188, %29* %189)
  br label %190

190:                                              ; preds = %186, %183
  br label %191

191:                                              ; preds = %190, %179
  br label %192

192:                                              ; preds = %191, %173
  br label %193

193:                                              ; preds = %192
  %194 = load %29*, %29** %4, align 8
  %195 = getelementptr inbounds %29, %29* %194, i32 0, i32 1
  %196 = bitcast %31* %195 to i32*
  store i32 2, i32* %196, align 8
  br label %197

197:                                              ; preds = %193
  br label %198

198:                                              ; preds = %197
  store i32 1, i32* %22, align 4
  br label %200

199:                                              ; preds = %161
  store i32 0, i32* %22, align 4
  br label %200

200:                                              ; preds = %199, %198
  %201 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %202 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202) #13
  %203 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %203) #13
  %204 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %204) #13
  %205 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %205) #13
  %206 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %207) #13
  %208 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %208) #13
  %209 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %209) #13
  %210 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %210) #13
  %211 = load i32, i32* %22, align 4
  switch i32 %211, label %274 [
    i32 0, label %212
  ]

212:                                              ; preds = %200
  br label %213

213:                                              ; preds = %212
  br label %214

214:                                              ; preds = %213
  %215 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %215, i8 0, i64 17, i1 false)
  %216 = load i8*, i8** %7, align 8
  %217 = call i8* @strchr(i8* %216, i32 58) #15
  %218 = icmp ne i8* %217, null
  br i1 %218, label %219, label %220

219:                                              ; preds = %214
  store i32 10, i32* %6, align 4
  br label %233

220:                                              ; preds = %214
  %221 = load i8*, i8** %7, align 8
  %222 = call i8* @strchr(i8* %221, i32 46) #15
  %223 = icmp ne i8* %222, null
  br i1 %223, label %232, label %224

224:                                              ; preds = %220
  %225 = load i8*, i8** %7, align 8
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1106, i32 0, i32 0), i8* %225)
  br label %226

226:                                              ; preds = %224
  %227 = load %29*, %29** %4, align 8
  %228 = getelementptr inbounds %29, %29* %227, i32 0, i32 1
  %229 = bitcast %31* %228 to i32*
  store i32 2, i32* %229, align 8
  br label %230

230:                                              ; preds = %226
  br label %231

231:                                              ; preds = %230
  store i32 1, i32* %22, align 4
  br label %274

232:                                              ; preds = %220
  br label %233

233:                                              ; preds = %232, %219
  %234 = load i32, i32* %6, align 4
  %235 = load i8*, i8** %7, align 8
  %236 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i32 0, i32 0
  %237 = call i32 @inet_pton(i32 %234, i8* %235, i8* %236) #13
  store i32 %237, i32* %5, align 4
  %238 = load i32, i32* %5, align 4
  %239 = icmp sle i32 %238, 0
  br i1 %239, label %240, label %248

240:                                              ; preds = %233
  %241 = load i8*, i8** %7, align 8
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @1106, i32 0, i32 0), i8* %241)
  br label %242

242:                                              ; preds = %240
  %243 = load %29*, %29** %4, align 8
  %244 = getelementptr inbounds %29, %29* %243, i32 0, i32 1
  %245 = bitcast %31* %244 to i32*
  store i32 2, i32* %245, align 8
  br label %246

246:                                              ; preds = %242
  br label %247

247:                                              ; preds = %246
  store i32 1, i32* %22, align 4
  br label %274

248:                                              ; preds = %233
  br label %249

249:                                              ; preds = %248
  br label %250

250:                                              ; preds = %249
  %251 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %251) #13
  %252 = load %29*, %29** %4, align 8
  store %29* %252, %29** %23, align 8
  %253 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %253) #13
  %254 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i32 0, i32 0
  %255 = load i32, i32* %6, align 4
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i64
  %258 = select i1 %256, i32 4, i32 16
  %259 = sext i32 %258 to i64
  %260 = call %28* @1463(i8* %254, i64 %259, i32 0)
  store %28* %260, %28** %24, align 8
  %261 = load %28*, %28** %24, align 8
  %262 = load %29*, %29** %23, align 8
  %263 = getelementptr inbounds %29, %29* %262, i32 0, i32 0
  %264 = bitcast %30* %263 to %28**
  store %28* %261, %28** %264, align 8
  %265 = load %29*, %29** %23, align 8
  %266 = getelementptr inbounds %29, %29* %265, i32 0, i32 1
  %267 = bitcast %31* %266 to i32*
  store i32 5126, i32* %267, align 8
  %268 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %268) #13
  %269 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %269) #13
  br label %270

270:                                              ; preds = %250
  br label %271

271:                                              ; preds = %270
  br label %272

272:                                              ; preds = %271
  br label %273

273:                                              ; preds = %272
  store i32 1, i32* %22, align 4
  br label %274

274:                                              ; preds = %273, %247, %231, %200
  %275 = bitcast [17 x i8]* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 17, i8* %275) #13
  %276 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %276) #13
  %277 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %277) #13
  %278 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %278) #13
  %279 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %279) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ip2long(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %88, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %29*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %25 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = bitcast %88* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %8, align 4
  %30 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %9, align 4
  %31 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %10, align 4
  %32 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %11, align 4
  %38 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %14, align 8
  %41 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %15, align 4
  %42 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %43 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %19, align 4
  %44 = load i32, i32* %12, align 4
  %45 = load %29*, %29** %13, align 8
  %46 = load %29*, %29** %14, align 8
  %47 = load i32, i32* %15, align 4
  %48 = load i8*, i8** %16, align 8
  %49 = load i8, i8* %17, align 1
  %50 = load i8, i8* %18, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %11, align 4
  %53 = load i32, i32* %9, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %11, align 4
  %63 = load i32, i32* %10, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %10, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %11, align 4
  %82 = load i32, i32* %9, align 4
  %83 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %19, align 4
  br label %159

84:                                               ; preds = %71, %61
  store i32 0, i32* %12, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %13, align 8
  %88 = load i32, i32* %12, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %12, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %12, align 4
  %92 = load i32, i32* %9, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %18, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %12, align 4
  %111 = load i32, i32* %9, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %18, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %18, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %12, align 4
  %132 = load i32, i32* %11, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %159

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %13, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %13, align 8
  %145 = load %29*, %29** %13, align 8
  store %29* %145, %29** %14, align 8
  %146 = load %29*, %29** %14, align 8
  %147 = call i32 @1462(%29* %146, i8** %5, i64* %6, i32 0)
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = call i64 @llvm.expect.i64(i64 %153, i64 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %159

157:                                              ; preds = %142
  br label %158

158:                                              ; preds = %157
  br label %159

159:                                              ; preds = %158, %156, %140, %80
  %160 = load i32, i32* %19, align 4
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = call i64 @llvm.expect.i64(i64 %165, i64 0)
  %167 = icmp ne i64 %166, 0
  br i1 %167, label %168, label %191

168:                                              ; preds = %159
  %169 = load i32, i32* %19, align 4
  %170 = icmp eq i32 %169, 2
  br i1 %170, label %171, label %174

171:                                              ; preds = %168
  %172 = load i32, i32* %12, align 4
  %173 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %172, i8* %173)
  br label %190

174:                                              ; preds = %168
  %175 = load i32, i32* %19, align 4
  %176 = icmp eq i32 %175, 3
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %12, align 4
  %179 = load i8*, i8** %16, align 8
  %180 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %178, i8* %179, %29* %180)
  br label %189

181:                                              ; preds = %174
  %182 = load i32, i32* %19, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %181
  %185 = load i32, i32* %12, align 4
  %186 = load i32, i32* %15, align 4
  %187 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %185, i32 %186, %29* %187)
  br label %188

188:                                              ; preds = %184, %181
  br label %189

189:                                              ; preds = %188, %177
  br label %190

190:                                              ; preds = %189, %171
  store i32 1, i32* %20, align 4
  br label %192

191:                                              ; preds = %159
  store i32 0, i32* %20, align 4
  br label %192

192:                                              ; preds = %191, %190
  %193 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %194 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %197) #13
  %198 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = load i32, i32* %20, align 4
  switch i32 %203, label %242 [
    i32 0, label %204
  ]

204:                                              ; preds = %192
  br label %205

205:                                              ; preds = %204
  br label %206

206:                                              ; preds = %205
  %207 = load i64, i64* %6, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %214, label %209

209:                                              ; preds = %206
  %210 = load i8*, i8** %5, align 8
  %211 = bitcast %88* %7 to i8*
  %212 = call i32 @inet_pton(i32 2, i8* %210, i8* %211) #13
  %213 = icmp ne i32 %212, 1
  br i1 %213, label %214, label %221

214:                                              ; preds = %209, %206
  br label %215

215:                                              ; preds = %214
  %216 = load %29*, %29** %4, align 8
  %217 = getelementptr inbounds %29, %29* %216, i32 0, i32 1
  %218 = bitcast %31* %217 to i32*
  store i32 2, i32* %218, align 8
  br label %219

219:                                              ; preds = %215
  br label %220

220:                                              ; preds = %219
  store i32 1, i32* %20, align 4
  br label %242

221:                                              ; preds = %209
  %222 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %222) #13
  %223 = load %29*, %29** %4, align 8
  store %29* %223, %29** %21, align 8
  %224 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %224) #13
  %225 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %225) #13
  %226 = getelementptr inbounds %88, %88* %7, i32 0, i32 0
  %227 = load i32, i32* %226, align 4
  store i32 %227, i32* %23, align 4
  %228 = load i32, i32* %23, align 4
  %229 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %228) #14
  store i32 %229, i32* %22, align 4
  %230 = load i32, i32* %22, align 4
  store i32 %230, i32* %24, align 4
  %231 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %231) #13
  %232 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %232) #13
  %233 = load i32, i32* %24, align 4
  %234 = zext i32 %233 to i64
  %235 = load %29*, %29** %21, align 8
  %236 = getelementptr inbounds %29, %29* %235, i32 0, i32 0
  %237 = bitcast %30* %236 to i64*
  store i64 %234, i64* %237, align 8
  %238 = load %29*, %29** %21, align 8
  %239 = getelementptr inbounds %29, %29* %238, i32 0, i32 1
  %240 = bitcast %31* %239 to i32*
  store i32 4, i32* %240, align 8
  %241 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %241) #13
  store i32 1, i32* %20, align 4
  br label %242

242:                                              ; preds = %221, %220, %192
  %243 = bitcast %88* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %243) #13
  %244 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %244) #13
  %245 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %245) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_long2ip(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %88, align 4
  %8 = alloca [40 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  %26 = alloca %29*, align 8
  %27 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = bitcast %88* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = bitcast [40 x i8]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %31) #13
  br label %32

32:                                               ; preds = %2
  %33 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %9, align 4
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 1, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 1, i32* %11, align 4
  %36 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = load %1*, %1** %3, align 8
  %38 = getelementptr inbounds %1, %1* %37, i32 0, i32 4
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 2
  %40 = bitcast %32* %39 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %12, align 4
  %42 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  %43 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store %29* null, %29** %15, align 8
  %45 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %16, align 4
  %46 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %47 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #13
  store i32 0, i32* %20, align 4
  %48 = load i32, i32* %13, align 4
  %49 = load %29*, %29** %14, align 8
  %50 = load %29*, %29** %15, align 8
  %51 = load i32, i32* %16, align 4
  %52 = load i8*, i8** %17, align 8
  %53 = load i8, i8* %18, align 1
  %54 = load i8, i8* %19, align 1
  br label %55

55:                                               ; preds = %32
  %56 = load i32, i32* %12, align 4
  %57 = load i32, i32* %10, align 4
  %58 = icmp slt i32 %56, %57
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i64 @llvm.expect.i64(i64 %62, i64 0)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %84, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %12, align 4
  %67 = load i32, i32* %11, align 4
  %68 = icmp sgt i32 %66, %67
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = load i32, i32* %11, align 4
  %77 = icmp sge i32 %76, 0
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 1)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %75, %55
  %85 = load i32, i32* %12, align 4
  %86 = load i32, i32* %10, align 4
  %87 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %85, i32 %86, i32 %87)
  store i32 1, i32* %20, align 4
  br label %163

88:                                               ; preds = %75, %65
  store i32 0, i32* %13, align 4
  %89 = load %1*, %1** %3, align 8
  %90 = bitcast %1* %89 to %29*
  %91 = getelementptr inbounds %29, %29* %90, i64 4
  store %29* %91, %29** %14, align 8
  %92 = load i32, i32* %13, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %13, align 4
  br label %94

94:                                               ; preds = %88
  %95 = load i32, i32* %13, align 4
  %96 = load i32, i32* %10, align 4
  %97 = icmp sle i32 %95, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %19, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 1
  br label %102

102:                                              ; preds = %98, %94
  %103 = phi i1 [ true, %94 ], [ %101, %98 ]
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = call i64 @llvm.expect.i64(i64 %106, i64 0)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %13, align 4
  %115 = load i32, i32* %10, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %121, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %19, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br label %121

121:                                              ; preds = %117, %113
  %122 = phi i1 [ true, %113 ], [ %120, %117 ]
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  %125 = sext i32 %124 to i64
  %126 = call i64 @llvm.expect.i64(i64 %125, i64 0)
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  unreachable

129:                                              ; preds = %121
  br label %130

130:                                              ; preds = %129
  br label %131

131:                                              ; preds = %130
  %132 = load i8, i8* %19, align 1
  %133 = icmp ne i8 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %131
  %135 = load i32, i32* %13, align 4
  %136 = load i32, i32* %12, align 4
  %137 = icmp sgt i32 %135, %136
  %138 = xor i1 %137, true
  %139 = xor i1 %138, true
  %140 = zext i1 %139 to i32
  %141 = sext i32 %140 to i64
  %142 = call i64 @llvm.expect.i64(i64 %141, i64 0)
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  br label %163

145:                                              ; preds = %134
  br label %146

146:                                              ; preds = %145, %131
  %147 = load %29*, %29** %14, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 1
  store %29* %148, %29** %14, align 8
  %149 = load %29*, %29** %14, align 8
  store %29* %149, %29** %15, align 8
  %150 = load %29*, %29** %15, align 8
  %151 = call i32 @1464(%29* %150, i64* %6, i8* %18, i32 0, i32 0)
  %152 = icmp ne i32 %151, 0
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %146
  store i32 0, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %163

161:                                              ; preds = %146
  br label %162

162:                                              ; preds = %161
  br label %163

163:                                              ; preds = %162, %160, %144, %84
  %164 = load i32, i32* %20, align 4
  %165 = icmp ne i32 %164, 0
  %166 = xor i1 %165, true
  %167 = xor i1 %166, true
  %168 = zext i1 %167 to i32
  %169 = sext i32 %168 to i64
  %170 = call i64 @llvm.expect.i64(i64 %169, i64 0)
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %195

172:                                              ; preds = %163
  %173 = load i32, i32* %20, align 4
  %174 = icmp eq i32 %173, 2
  br i1 %174, label %175, label %178

175:                                              ; preds = %172
  %176 = load i32, i32* %13, align 4
  %177 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %176, i8* %177)
  br label %194

178:                                              ; preds = %172
  %179 = load i32, i32* %20, align 4
  %180 = icmp eq i32 %179, 3
  br i1 %180, label %181, label %185

181:                                              ; preds = %178
  %182 = load i32, i32* %13, align 4
  %183 = load i8*, i8** %17, align 8
  %184 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %182, i8* %183, %29* %184)
  br label %193

185:                                              ; preds = %178
  %186 = load i32, i32* %20, align 4
  %187 = icmp eq i32 %186, 4
  br i1 %187, label %188, label %192

188:                                              ; preds = %185
  %189 = load i32, i32* %13, align 4
  %190 = load i32, i32* %16, align 4
  %191 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %189, i32 %190, %29* %191)
  br label %192

192:                                              ; preds = %188, %185
  br label %193

193:                                              ; preds = %192, %181
  br label %194

194:                                              ; preds = %193, %175
  store i32 1, i32* %21, align 4
  br label %196

195:                                              ; preds = %163
  store i32 0, i32* %21, align 4
  br label %196

196:                                              ; preds = %195, %194
  %197 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %198 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %198) #13
  %199 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %200) #13
  %201 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %201) #13
  %202 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %203) #13
  %204 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %204) #13
  %205 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #13
  %206 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = load i32, i32* %21, align 4
  switch i32 %207, label %263 [
    i32 0, label %208
  ]

208:                                              ; preds = %196
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  %211 = load i64, i64* %6, align 8
  store i64 %211, i64* %5, align 8
  %212 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %212) #13
  %213 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %213) #13
  %214 = load i64, i64* %5, align 8
  %215 = trunc i64 %214 to i32
  store i32 %215, i32* %23, align 4
  %216 = load i32, i32* %23, align 4
  %217 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %216) #14
  store i32 %217, i32* %22, align 4
  %218 = load i32, i32* %22, align 4
  store i32 %218, i32* %24, align 4
  %219 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %219) #13
  %220 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %220) #13
  %221 = load i32, i32* %24, align 4
  %222 = getelementptr inbounds %88, %88* %7, i32 0, i32 0
  store i32 %221, i32* %222, align 4
  %223 = bitcast %88* %7 to i8*
  %224 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i32 0, i32 0
  %225 = call i8* @inet_ntop(i32 2, i8* %223, i8* %224, i32 40) #13
  %226 = icmp ne i8* %225, null
  br i1 %226, label %227, label %256

227:                                              ; preds = %210
  br label %228

228:                                              ; preds = %227
  %229 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %229) #13
  %230 = getelementptr inbounds [40 x i8], [40 x i8]* %8, i32 0, i32 0
  store i8* %230, i8** %25, align 8
  br label %231

231:                                              ; preds = %228
  br label %232

232:                                              ; preds = %231
  %233 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %233) #13
  %234 = load %29*, %29** %4, align 8
  store %29* %234, %29** %26, align 8
  %235 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %235) #13
  %236 = load i8*, i8** %25, align 8
  %237 = load i8*, i8** %25, align 8
  %238 = call i64 @strlen(i8* %237) #15
  %239 = call %28* @1463(i8* %236, i64 %238, i32 0)
  store %28* %239, %28** %27, align 8
  %240 = load %28*, %28** %27, align 8
  %241 = load %29*, %29** %26, align 8
  %242 = getelementptr inbounds %29, %29* %241, i32 0, i32 0
  %243 = bitcast %30* %242 to %28**
  store %28* %240, %28** %243, align 8
  %244 = load %29*, %29** %26, align 8
  %245 = getelementptr inbounds %29, %29* %244, i32 0, i32 1
  %246 = bitcast %31* %245 to i32*
  store i32 5126, i32* %246, align 8
  %247 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %247) #13
  %248 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #13
  br label %249

249:                                              ; preds = %232
  br label %250

250:                                              ; preds = %249
  br label %251

251:                                              ; preds = %250
  br label %252

252:                                              ; preds = %251
  %253 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %253) #13
  br label %254

254:                                              ; preds = %252
  br label %255

255:                                              ; preds = %254
  store i32 1, i32* %21, align 4
  br label %263

256:                                              ; preds = %210
  br label %257

257:                                              ; preds = %256
  %258 = load %29*, %29** %4, align 8
  %259 = getelementptr inbounds %29, %29* %258, i32 0, i32 1
  %260 = bitcast %31* %259 to i32*
  store i32 2, i32* %260, align 8
  br label %261

261:                                              ; preds = %257
  br label %262

262:                                              ; preds = %261
  store i32 1, i32* %21, align 4
  br label %263

263:                                              ; preds = %262, %255, %196
  %264 = bitcast [40 x i8]* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %264) #13
  %265 = bitcast %88* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %265) #13
  %266 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %266) #13
  %267 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %267) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_getenv(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  %23 = alloca %29*, align 8
  %24 = alloca %28*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca %29*, align 8
  %27 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  store i8* null, i8** %6, align 8
  %30 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %8) #13
  store i8 0, i8* %8, align 1
  br label %31

31:                                               ; preds = %2
  %32 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 0, i32* %9, align 4
  %33 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %10, align 4
  %34 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 2, i32* %11, align 4
  %35 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = load %1*, %1** %3, align 8
  %37 = getelementptr inbounds %1, %1* %36, i32 0, i32 4
  %38 = getelementptr inbounds %29, %29* %37, i32 0, i32 2
  %39 = bitcast %32* %38 to i32*
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %12, align 4
  %41 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %42 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  %43 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store %29* null, %29** %15, align 8
  %44 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %16, align 4
  %45 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %46 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #13
  store i32 0, i32* %20, align 4
  %47 = load i32, i32* %13, align 4
  %48 = load %29*, %29** %14, align 8
  %49 = load %29*, %29** %15, align 8
  %50 = load i32, i32* %16, align 4
  %51 = load i8*, i8** %17, align 8
  %52 = load i8, i8* %18, align 1
  %53 = load i8, i8* %19, align 1
  br label %54

54:                                               ; preds = %31
  %55 = load i32, i32* %12, align 4
  %56 = load i32, i32* %10, align 4
  %57 = icmp slt i32 %55, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = call i64 @llvm.expect.i64(i64 %61, i64 0)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %54
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* %11, align 4
  %67 = icmp sgt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = load i32, i32* %11, align 4
  %76 = icmp sge i32 %75, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = call i64 @llvm.expect.i64(i64 %80, i64 1)
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %74, %54
  %84 = load i32, i32* %12, align 4
  %85 = load i32, i32* %10, align 4
  %86 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %84, i32 %85, i32 %86)
  store i32 1, i32* %20, align 4
  br label %232

87:                                               ; preds = %74, %64
  store i32 0, i32* %13, align 4
  %88 = load %1*, %1** %3, align 8
  %89 = bitcast %1* %88 to %29*
  %90 = getelementptr inbounds %29, %29* %89, i64 4
  store %29* %90, %29** %14, align 8
  store i8 1, i8* %19, align 1
  %91 = load i32, i32* %13, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %13, align 4
  br label %93

93:                                               ; preds = %87
  %94 = load i32, i32* %13, align 4
  %95 = load i32, i32* %10, align 4
  %96 = icmp sle i32 %94, %95
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = load i8, i8* %19, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp eq i32 %99, 1
  br label %101

101:                                              ; preds = %97, %93
  %102 = phi i1 [ true, %93 ], [ %100, %97 ]
  %103 = xor i1 %102, true
  %104 = zext i1 %103 to i32
  %105 = sext i32 %104 to i64
  %106 = call i64 @llvm.expect.i64(i64 %105, i64 0)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %101
  unreachable

109:                                              ; preds = %101
  br label %110

110:                                              ; preds = %109
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %10, align 4
  %115 = icmp sgt i32 %113, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = load i8, i8* %19, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp eq i32 %118, 0
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i1 [ true, %112 ], [ %119, %116 ]
  %122 = xor i1 %121, true
  %123 = zext i1 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = call i64 @llvm.expect.i64(i64 %124, i64 0)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %120
  unreachable

128:                                              ; preds = %120
  br label %129

129:                                              ; preds = %128
  br label %130

130:                                              ; preds = %129
  %131 = load i8, i8* %19, align 1
  %132 = icmp ne i8 %131, 0
  br i1 %132, label %133, label %145

133:                                              ; preds = %130
  %134 = load i32, i32* %13, align 4
  %135 = load i32, i32* %12, align 4
  %136 = icmp sgt i32 %134, %135
  %137 = xor i1 %136, true
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = sext i32 %139 to i64
  %141 = call i64 @llvm.expect.i64(i64 %140, i64 0)
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %133
  br label %232

144:                                              ; preds = %133
  br label %145

145:                                              ; preds = %144, %130
  %146 = load %29*, %29** %14, align 8
  %147 = getelementptr inbounds %29, %29* %146, i32 1
  store %29* %147, %29** %14, align 8
  %148 = load %29*, %29** %14, align 8
  store %29* %148, %29** %15, align 8
  %149 = load %29*, %29** %15, align 8
  %150 = call i32 @1462(%29* %149, i8** %6, i64* %7, i32 0)
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  %156 = sext i32 %155 to i64
  %157 = call i64 @llvm.expect.i64(i64 %156, i64 0)
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %145
  store i32 2, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %232

160:                                              ; preds = %145
  %161 = load i32, i32* %13, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %13, align 4
  br label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %13, align 4
  %165 = load i32, i32* %10, align 4
  %166 = icmp sle i32 %164, %165
  br i1 %166, label %171, label %167

167:                                              ; preds = %163
  %168 = load i8, i8* %19, align 1
  %169 = zext i8 %168 to i32
  %170 = icmp eq i32 %169, 1
  br label %171

171:                                              ; preds = %167, %163
  %172 = phi i1 [ true, %163 ], [ %170, %167 ]
  %173 = xor i1 %172, true
  %174 = zext i1 %173 to i32
  %175 = sext i32 %174 to i64
  %176 = call i64 @llvm.expect.i64(i64 %175, i64 0)
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %171
  unreachable

179:                                              ; preds = %171
  br label %180

180:                                              ; preds = %179
  br label %181

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181
  %183 = load i32, i32* %13, align 4
  %184 = load i32, i32* %10, align 4
  %185 = icmp sgt i32 %183, %184
  br i1 %185, label %190, label %186

186:                                              ; preds = %182
  %187 = load i8, i8* %19, align 1
  %188 = zext i8 %187 to i32
  %189 = icmp eq i32 %188, 0
  br label %190

190:                                              ; preds = %186, %182
  %191 = phi i1 [ true, %182 ], [ %189, %186 ]
  %192 = xor i1 %191, true
  %193 = zext i1 %192 to i32
  %194 = sext i32 %193 to i64
  %195 = call i64 @llvm.expect.i64(i64 %194, i64 0)
  %196 = icmp ne i64 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %190
  unreachable

198:                                              ; preds = %190
  br label %199

199:                                              ; preds = %198
  br label %200

200:                                              ; preds = %199
  %201 = load i8, i8* %19, align 1
  %202 = icmp ne i8 %201, 0
  br i1 %202, label %203, label %215

203:                                              ; preds = %200
  %204 = load i32, i32* %13, align 4
  %205 = load i32, i32* %12, align 4
  %206 = icmp sgt i32 %204, %205
  %207 = xor i1 %206, true
  %208 = xor i1 %207, true
  %209 = zext i1 %208 to i32
  %210 = sext i32 %209 to i64
  %211 = call i64 @llvm.expect.i64(i64 %210, i64 0)
  %212 = icmp ne i64 %211, 0
  br i1 %212, label %213, label %214

213:                                              ; preds = %203
  br label %232

214:                                              ; preds = %203
  br label %215

215:                                              ; preds = %214, %200
  %216 = load %29*, %29** %14, align 8
  %217 = getelementptr inbounds %29, %29* %216, i32 1
  store %29* %217, %29** %14, align 8
  %218 = load %29*, %29** %14, align 8
  store %29* %218, %29** %15, align 8
  %219 = load %29*, %29** %15, align 8
  %220 = call i32 @1465(%29* %219, i8* %8, i8* %18, i32 0)
  %221 = icmp ne i32 %220, 0
  %222 = xor i1 %221, true
  %223 = xor i1 %222, true
  %224 = xor i1 %223, true
  %225 = zext i1 %224 to i32
  %226 = sext i32 %225 to i64
  %227 = call i64 @llvm.expect.i64(i64 %226, i64 0)
  %228 = icmp ne i64 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %215
  store i32 1, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %232

230:                                              ; preds = %215
  br label %231

231:                                              ; preds = %230
  br label %232

232:                                              ; preds = %231, %229, %213, %159, %143, %83
  %233 = load i32, i32* %20, align 4
  %234 = icmp ne i32 %233, 0
  %235 = xor i1 %234, true
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i32
  %238 = sext i32 %237 to i64
  %239 = call i64 @llvm.expect.i64(i64 %238, i64 0)
  %240 = icmp ne i64 %239, 0
  br i1 %240, label %241, label %270

241:                                              ; preds = %232
  %242 = load i32, i32* %20, align 4
  %243 = icmp eq i32 %242, 2
  br i1 %243, label %244, label %247

244:                                              ; preds = %241
  %245 = load i32, i32* %13, align 4
  %246 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %245, i8* %246)
  br label %263

247:                                              ; preds = %241
  %248 = load i32, i32* %20, align 4
  %249 = icmp eq i32 %248, 3
  br i1 %249, label %250, label %254

250:                                              ; preds = %247
  %251 = load i32, i32* %13, align 4
  %252 = load i8*, i8** %17, align 8
  %253 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %251, i8* %252, %29* %253)
  br label %262

254:                                              ; preds = %247
  %255 = load i32, i32* %20, align 4
  %256 = icmp eq i32 %255, 4
  br i1 %256, label %257, label %261

257:                                              ; preds = %254
  %258 = load i32, i32* %13, align 4
  %259 = load i32, i32* %16, align 4
  %260 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %258, i32 %259, %29* %260)
  br label %261

261:                                              ; preds = %257, %254
  br label %262

262:                                              ; preds = %261, %250
  br label %263

263:                                              ; preds = %262, %244
  br label %264

264:                                              ; preds = %263
  %265 = load %29*, %29** %4, align 8
  %266 = getelementptr inbounds %29, %29* %265, i32 0, i32 1
  %267 = bitcast %31* %266 to i32*
  store i32 2, i32* %267, align 8
  br label %268

268:                                              ; preds = %264
  br label %269

269:                                              ; preds = %268
  store i32 1, i32* %21, align 4
  br label %271

270:                                              ; preds = %232
  store i32 0, i32* %21, align 4
  br label %271

271:                                              ; preds = %270, %269
  %272 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %273 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %273) #13
  %274 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #13
  %275 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %275) #13
  %276 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %276) #13
  %277 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %277) #13
  %278 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %278) #13
  %279 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %279) #13
  %280 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %280) #13
  %281 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %281) #13
  %282 = load i32, i32* %21, align 4
  switch i32 %282, label %374 [
    i32 0, label %283
  ]

283:                                              ; preds = %271
  br label %284

284:                                              ; preds = %283
  br label %285

285:                                              ; preds = %284
  %286 = load i8*, i8** %6, align 8
  %287 = icmp ne i8* %286, null
  br i1 %287, label %293, label %288

288:                                              ; preds = %285
  %289 = load %29*, %29** %4, align 8
  %290 = call i32 @_array_init(%29* %289, i32 0)
  %291 = load void (%29*)*, void (%29*)** @php_import_environment_variables, align 8
  %292 = load %29*, %29** %4, align 8
  call void %291(%29* %292)
  store i32 1, i32* %21, align 4
  br label %374

293:                                              ; preds = %285
  %294 = load i8, i8* %8, align 1
  %295 = icmp ne i8 %294, 0
  br i1 %295, label %333, label %296

296:                                              ; preds = %293
  %297 = load i8*, i8** %6, align 8
  %298 = load i64, i64* %7, align 8
  %299 = call i8* @sapi_getenv(i8* %297, i64 %298)
  store i8* %299, i8** %5, align 8
  %300 = load i8*, i8** %5, align 8
  %301 = icmp ne i8* %300, null
  br i1 %301, label %302, label %332

302:                                              ; preds = %296
  br label %303

303:                                              ; preds = %302
  %304 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %304) #13
  %305 = load i8*, i8** %5, align 8
  store i8* %305, i8** %22, align 8
  br label %306

306:                                              ; preds = %303
  br label %307

307:                                              ; preds = %306
  %308 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %308) #13
  %309 = load %29*, %29** %4, align 8
  store %29* %309, %29** %23, align 8
  %310 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %310) #13
  %311 = load i8*, i8** %22, align 8
  %312 = load i8*, i8** %22, align 8
  %313 = call i64 @strlen(i8* %312) #15
  %314 = call %28* @1463(i8* %311, i64 %313, i32 0)
  store %28* %314, %28** %24, align 8
  %315 = load %28*, %28** %24, align 8
  %316 = load %29*, %29** %23, align 8
  %317 = getelementptr inbounds %29, %29* %316, i32 0, i32 0
  %318 = bitcast %30* %317 to %28**
  store %28* %315, %28** %318, align 8
  %319 = load %29*, %29** %23, align 8
  %320 = getelementptr inbounds %29, %29* %319, i32 0, i32 1
  %321 = bitcast %31* %320 to i32*
  store i32 5126, i32* %321, align 8
  %322 = bitcast %28** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %322) #13
  %323 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %323) #13
  br label %324

324:                                              ; preds = %307
  br label %325

325:                                              ; preds = %324
  br label %326

326:                                              ; preds = %325
  br label %327

327:                                              ; preds = %326
  %328 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %328) #13
  br label %329

329:                                              ; preds = %327
  br label %330

330:                                              ; preds = %329
  %331 = load i8*, i8** %5, align 8
  call void @_efree(i8* %331)
  store i32 1, i32* %21, align 4
  br label %374

332:                                              ; preds = %296
  br label %333

333:                                              ; preds = %332, %293
  %334 = load i8*, i8** %6, align 8
  %335 = call i8* @getenv(i8* %334) #13
  store i8* %335, i8** %5, align 8
  %336 = load i8*, i8** %5, align 8
  %337 = icmp ne i8* %336, null
  br i1 %337, label %338, label %367

338:                                              ; preds = %333
  br label %339

339:                                              ; preds = %338
  %340 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %340) #13
  %341 = load i8*, i8** %5, align 8
  store i8* %341, i8** %25, align 8
  br label %342

342:                                              ; preds = %339
  br label %343

343:                                              ; preds = %342
  %344 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %344) #13
  %345 = load %29*, %29** %4, align 8
  store %29* %345, %29** %26, align 8
  %346 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %346) #13
  %347 = load i8*, i8** %25, align 8
  %348 = load i8*, i8** %25, align 8
  %349 = call i64 @strlen(i8* %348) #15
  %350 = call %28* @1463(i8* %347, i64 %349, i32 0)
  store %28* %350, %28** %27, align 8
  %351 = load %28*, %28** %27, align 8
  %352 = load %29*, %29** %26, align 8
  %353 = getelementptr inbounds %29, %29* %352, i32 0, i32 0
  %354 = bitcast %30* %353 to %28**
  store %28* %351, %28** %354, align 8
  %355 = load %29*, %29** %26, align 8
  %356 = getelementptr inbounds %29, %29* %355, i32 0, i32 1
  %357 = bitcast %31* %356 to i32*
  store i32 5126, i32* %357, align 8
  %358 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %358) #13
  %359 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %359) #13
  br label %360

360:                                              ; preds = %343
  br label %361

361:                                              ; preds = %360
  br label %362

362:                                              ; preds = %361
  br label %363

363:                                              ; preds = %362
  %364 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %364) #13
  br label %365

365:                                              ; preds = %363
  br label %366

366:                                              ; preds = %365
  store i32 1, i32* %21, align 4
  br label %374

367:                                              ; preds = %333
  br label %368

368:                                              ; preds = %367
  %369 = load %29*, %29** %4, align 8
  %370 = getelementptr inbounds %29, %29* %369, i32 0, i32 1
  %371 = bitcast %31* %370 to i32*
  store i32 2, i32* %371, align 8
  br label %372

372:                                              ; preds = %368
  br label %373

373:                                              ; preds = %372
  store i32 1, i32* %21, align 4
  br label %374

374:                                              ; preds = %373, %366, %330, %288, %271
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %8) #13
  %375 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %375) #13
  %376 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %376) #13
  %377 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %377) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_putenv(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8**, align 8
  %9 = alloca %89, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i8*** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = bitcast %89* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %27) #13
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %10, align 4
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %11, align 4
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %12, align 4
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %13, align 4
  %38 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %16, align 8
  %41 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %17, align 4
  %42 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %43 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %21, align 4
  %44 = load i32, i32* %14, align 4
  %45 = load %29*, %29** %15, align 8
  %46 = load %29*, %29** %16, align 8
  %47 = load i32, i32* %17, align 4
  %48 = load i8*, i8** %18, align 8
  %49 = load i8, i8* %19, align 1
  %50 = load i8, i8* %20, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %13, align 4
  %53 = load i32, i32* %11, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %13, align 4
  %63 = load i32, i32* %12, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %12, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %13, align 4
  %82 = load i32, i32* %11, align 4
  %83 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %21, align 4
  br label %159

84:                                               ; preds = %71, %61
  store i32 0, i32* %14, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %15, align 8
  %88 = load i32, i32* %14, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %14, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %14, align 4
  %92 = load i32, i32* %11, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %20, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %14, align 4
  %111 = load i32, i32* %11, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %20, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %20, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %14, align 4
  %132 = load i32, i32* %13, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %159

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %15, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %15, align 8
  %145 = load %29*, %29** %15, align 8
  store %29* %145, %29** %16, align 8
  %146 = load %29*, %29** %16, align 8
  %147 = call i32 @1462(%29* %146, i8** %5, i64* %6, i32 0)
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = call i64 @llvm.expect.i64(i64 %153, i64 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  store i32 2, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %159

157:                                              ; preds = %142
  br label %158

158:                                              ; preds = %157
  br label %159

159:                                              ; preds = %158, %156, %140, %80
  %160 = load i32, i32* %21, align 4
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = call i64 @llvm.expect.i64(i64 %165, i64 0)
  %167 = icmp ne i64 %166, 0
  br i1 %167, label %168, label %191

168:                                              ; preds = %159
  %169 = load i32, i32* %21, align 4
  %170 = icmp eq i32 %169, 2
  br i1 %170, label %171, label %174

171:                                              ; preds = %168
  %172 = load i32, i32* %14, align 4
  %173 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %172, i8* %173)
  br label %190

174:                                              ; preds = %168
  %175 = load i32, i32* %21, align 4
  %176 = icmp eq i32 %175, 3
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %14, align 4
  %179 = load i8*, i8** %18, align 8
  %180 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %178, i8* %179, %29* %180)
  br label %189

181:                                              ; preds = %174
  %182 = load i32, i32* %21, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %181
  %185 = load i32, i32* %14, align 4
  %186 = load i32, i32* %17, align 4
  %187 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %185, i32 %186, %29* %187)
  br label %188

188:                                              ; preds = %184, %181
  br label %189

189:                                              ; preds = %188, %177
  br label %190

190:                                              ; preds = %189, %171
  store i32 1, i32* %22, align 4
  br label %192

191:                                              ; preds = %159
  store i32 0, i32* %22, align 4
  br label %192

192:                                              ; preds = %191, %190
  %193 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %194 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %194) #13
  %195 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %197) #13
  %198 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = load i32, i32* %22, align 4
  switch i32 %203, label %337 [
    i32 0, label %204
  ]

204:                                              ; preds = %192
  br label %205

205:                                              ; preds = %204
  br label %206

206:                                              ; preds = %205
  %207 = load i64, i64* %6, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %215, label %209

209:                                              ; preds = %206
  %210 = load i8*, i8** %5, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 0
  %212 = load i8, i8* %211, align 1
  %213 = sext i8 %212 to i32
  %214 = icmp eq i32 %213, 61
  br i1 %214, label %215, label %222

215:                                              ; preds = %209, %206
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @1107, i32 0, i32 0))
  br label %216

216:                                              ; preds = %215
  %217 = load %29*, %29** %4, align 8
  %218 = getelementptr inbounds %29, %29* %217, i32 0, i32 1
  %219 = bitcast %31* %218 to i32*
  store i32 2, i32* %219, align 8
  br label %220

220:                                              ; preds = %216
  br label %221

221:                                              ; preds = %220
  store i32 1, i32* %22, align 4
  br label %337

222:                                              ; preds = %209
  %223 = load i8*, i8** %5, align 8
  %224 = load i64, i64* %6, align 8
  %225 = call noalias i8* @_estrndup(i8* %223, i64 %224)
  %226 = getelementptr inbounds %89, %89* %9, i32 0, i32 0
  store i8* %225, i8** %226, align 8
  %227 = load i8*, i8** %5, align 8
  %228 = load i64, i64* %6, align 8
  %229 = call noalias i8* @_estrndup(i8* %227, i64 %228)
  %230 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  store i8* %229, i8** %230, align 8
  %231 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %232 = load i8*, i8** %231, align 8
  %233 = call i8* @strchr(i8* %232, i32 61) #15
  store i8* %233, i8** %7, align 8
  %234 = icmp ne i8* %233, null
  br i1 %234, label %235, label %237

235:                                              ; preds = %222
  %236 = load i8*, i8** %7, align 8
  store i8 0, i8* %236, align 1
  br label %237

237:                                              ; preds = %235, %222
  %238 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %239 = load i8*, i8** %238, align 8
  %240 = call i64 @strlen(i8* %239) #15
  %241 = trunc i64 %240 to i32
  %242 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  store i32 %241, i32* %242, align 8
  %243 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  %246 = load i32, i32* %245, align 8
  %247 = sext i32 %246 to i64
  %248 = call i32 @zend_hash_str_del(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 1), i8* %244, i64 %247)
  %249 = getelementptr inbounds %89, %89* %9, i32 0, i32 1
  store i8* null, i8** %249, align 8
  %250 = load i8**, i8*** @environ, align 8
  store i8** %250, i8*** %8, align 8
  br label %251

251:                                              ; preds = %285, %237
  %252 = load i8**, i8*** %8, align 8
  %253 = icmp ne i8** %252, null
  br i1 %253, label %254, label %258

254:                                              ; preds = %251
  %255 = load i8**, i8*** %8, align 8
  %256 = load i8*, i8** %255, align 8
  %257 = icmp ne i8* %256, null
  br label %258

258:                                              ; preds = %254, %251
  %259 = phi i1 [ false, %251 ], [ %257, %254 ]
  br i1 %259, label %260, label %288

260:                                              ; preds = %258
  %261 = load i8**, i8*** %8, align 8
  %262 = load i8*, i8** %261, align 8
  %263 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  %266 = load i32, i32* %265, align 8
  %267 = sext i32 %266 to i64
  %268 = call i32 @strncmp(i8* %262, i8* %264, i64 %267) #15
  %269 = icmp ne i32 %268, 0
  br i1 %269, label %284, label %270

270:                                              ; preds = %260
  %271 = load i8**, i8*** %8, align 8
  %272 = load i8*, i8** %271, align 8
  %273 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  %274 = load i32, i32* %273, align 8
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %272, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = sext i8 %277 to i32
  %279 = icmp eq i32 %278, 61
  br i1 %279, label %280, label %284

280:                                              ; preds = %270
  %281 = load i8**, i8*** %8, align 8
  %282 = load i8*, i8** %281, align 8
  %283 = getelementptr inbounds %89, %89* %9, i32 0, i32 1
  store i8* %282, i8** %283, align 8
  br label %288

284:                                              ; preds = %270, %260
  br label %285

285:                                              ; preds = %284
  %286 = load i8**, i8*** %8, align 8
  %287 = getelementptr inbounds i8*, i8** %286, i32 1
  store i8** %287, i8*** %8, align 8
  br label %251

288:                                              ; preds = %280, %258
  %289 = load i8*, i8** %7, align 8
  %290 = icmp ne i8* %289, null
  br i1 %290, label %295, label %291

291:                                              ; preds = %288
  %292 = getelementptr inbounds %89, %89* %9, i32 0, i32 0
  %293 = load i8*, i8** %292, align 8
  %294 = call i32 @unsetenv(i8* %293) #13
  br label %295

295:                                              ; preds = %291, %288
  %296 = load i8*, i8** %7, align 8
  %297 = icmp ne i8* %296, null
  br i1 %297, label %298, label %303

298:                                              ; preds = %295
  %299 = getelementptr inbounds %89, %89* %9, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  %301 = call i32 @putenv(i8* %300) #13
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %326

303:                                              ; preds = %298, %295
  %304 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %305 = load i8*, i8** %304, align 8
  %306 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  %307 = load i32, i32* %306, align 8
  %308 = sext i32 %307 to i64
  %309 = bitcast %89* %9 to i8*
  %310 = call i8* @1466(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 1), i8* %305, i64 %308, i8* %309, i64 32)
  %311 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %312 = load i8*, i8** %311, align 8
  %313 = getelementptr inbounds %89, %89* %9, i32 0, i32 3
  %314 = load i32, i32* %313, align 8
  %315 = sext i32 %314 to i64
  %316 = call i32 @strncmp(i8* %312, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1108, i32 0, i32 0), i64 %315) #15
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %319, label %318

318:                                              ; preds = %303
  call void @tzset() #13
  br label %319

319:                                              ; preds = %318, %303
  br label %320

320:                                              ; preds = %319
  %321 = load %29*, %29** %4, align 8
  %322 = getelementptr inbounds %29, %29* %321, i32 0, i32 1
  %323 = bitcast %31* %322 to i32*
  store i32 3, i32* %323, align 8
  br label %324

324:                                              ; preds = %320
  br label %325

325:                                              ; preds = %324
  store i32 1, i32* %22, align 4
  br label %337

326:                                              ; preds = %298
  %327 = getelementptr inbounds %89, %89* %9, i32 0, i32 0
  %328 = load i8*, i8** %327, align 8
  call void @_efree(i8* %328)
  %329 = getelementptr inbounds %89, %89* %9, i32 0, i32 2
  %330 = load i8*, i8** %329, align 8
  call void @_efree(i8* %330)
  br label %331

331:                                              ; preds = %326
  %332 = load %29*, %29** %4, align 8
  %333 = getelementptr inbounds %29, %29* %332, i32 0, i32 1
  %334 = bitcast %31* %333 to i32*
  store i32 2, i32* %334, align 8
  br label %335

335:                                              ; preds = %331
  br label %336

336:                                              ; preds = %335
  store i32 1, i32* %22, align 4
  br label %337

337:                                              ; preds = %336, %325, %221, %192
  %338 = bitcast %89* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %338) #13
  %339 = bitcast i8*** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %339) #13
  %340 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %340) #13
  %341 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %341) #13
  %342 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %342) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_getopt(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8**, align 8
  %7 = alloca [2 x i8], align 1
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %29, align 8
  %16 = alloca %29*, align 8
  %17 = alloca %29*, align 8
  %18 = alloca %29*, align 8
  %19 = alloca i32, align 4
  %20 = alloca %90*, align 8
  %21 = alloca %90*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca %29*, align 8
  %28 = alloca %29*, align 8
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca %29*, align 8
  %36 = alloca i32, align 4
  %37 = alloca %29*, align 8
  %38 = alloca %7*, align 8
  %39 = alloca %11*, align 8
  %40 = alloca %11*, align 8
  %41 = alloca %29*, align 8
  %42 = alloca %28*, align 8
  %43 = alloca i32, align 4
  %44 = alloca %29*, align 8
  %45 = alloca %7*, align 8
  %46 = alloca %11*, align 8
  %47 = alloca %11*, align 8
  %48 = alloca %29*, align 8
  %49 = alloca %28*, align 8
  %50 = alloca i8*, align 8
  %51 = alloca %29*, align 8
  %52 = alloca %28*, align 8
  %53 = alloca i32, align 4
  %54 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %55 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #13
  store i8* null, i8** %5, align 8
  %56 = bitcast i8*** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %56) #13
  store i8** null, i8*** %6, align 8
  %57 = bitcast [2 x i8]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %57) #13
  %58 = bitcast [2 x i8]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %58, i8 0, i64 2, i1 false)
  %59 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %59) #13
  %60 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %60) #13
  store i32 0, i32* %9, align 4
  %61 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %61) #13
  %62 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %62) #13
  %63 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %63) #13
  store i64 0, i64* %12, align 8
  %64 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %64) #13
  store i8* null, i8** %13, align 8
  %65 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %65) #13
  store i32 1, i32* %14, align 4
  %66 = bitcast %29* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %66) #13
  %67 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %67) #13
  store %29* null, %29** %16, align 8
  %68 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %68) #13
  store %29* null, %29** %17, align 8
  %69 = bitcast %29** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %69) #13
  store %29* null, %29** %18, align 8
  %70 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %70) #13
  store i32 0, i32* %19, align 4
  %71 = bitcast %90** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %71) #13
  %72 = bitcast %90** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %72) #13
  br label %73

73:                                               ; preds = %2
  %74 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %74) #13
  store i32 0, i32* %22, align 4
  %75 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %75) #13
  store i32 1, i32* %23, align 4
  %76 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %76) #13
  store i32 3, i32* %24, align 4
  %77 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %77) #13
  %78 = load %1*, %1** %3, align 8
  %79 = getelementptr inbounds %1, %1* %78, i32 0, i32 4
  %80 = getelementptr inbounds %29, %29* %79, i32 0, i32 2
  %81 = bitcast %32* %80 to i32*
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %25, align 4
  %83 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %83) #13
  %84 = bitcast %29** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %84) #13
  %85 = bitcast %29** %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %85) #13
  store %29* null, %29** %28, align 8
  %86 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %86) #13
  store i32 0, i32* %29, align 4
  %87 = bitcast i8** %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %87) #13
  store i8* null, i8** %30, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %31) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %32) #13
  store i8 0, i8* %32, align 1
  %88 = bitcast i32* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %88) #13
  store i32 0, i32* %33, align 4
  %89 = load i32, i32* %26, align 4
  %90 = load %29*, %29** %27, align 8
  %91 = load %29*, %29** %28, align 8
  %92 = load i32, i32* %29, align 4
  %93 = load i8*, i8** %30, align 8
  %94 = load i8, i8* %31, align 1
  %95 = load i8, i8* %32, align 1
  br label %96

96:                                               ; preds = %73
  %97 = load i32, i32* %25, align 4
  %98 = load i32, i32* %23, align 4
  %99 = icmp slt i32 %97, %98
  %100 = xor i1 %99, true
  %101 = xor i1 %100, true
  %102 = zext i1 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = call i64 @llvm.expect.i64(i64 %103, i64 0)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %125, label %106

106:                                              ; preds = %96
  %107 = load i32, i32* %25, align 4
  %108 = load i32, i32* %24, align 4
  %109 = icmp sgt i32 %107, %108
  %110 = xor i1 %109, true
  %111 = xor i1 %110, true
  %112 = zext i1 %111 to i32
  %113 = sext i32 %112 to i64
  %114 = call i64 @llvm.expect.i64(i64 %113, i64 0)
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %129

116:                                              ; preds = %106
  %117 = load i32, i32* %24, align 4
  %118 = icmp sge i32 %117, 0
  %119 = xor i1 %118, true
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = call i64 @llvm.expect.i64(i64 %122, i64 1)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %129

125:                                              ; preds = %116, %96
  %126 = load i32, i32* %25, align 4
  %127 = load i32, i32* %23, align 4
  %128 = load i32, i32* %24, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %126, i32 %127, i32 %128)
  store i32 1, i32* %33, align 4
  br label %353

129:                                              ; preds = %116, %106
  store i32 0, i32* %26, align 4
  %130 = load %1*, %1** %3, align 8
  %131 = bitcast %1* %130 to %29*
  %132 = getelementptr inbounds %29, %29* %131, i64 4
  store %29* %132, %29** %27, align 8
  %133 = load i32, i32* %26, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %26, align 4
  br label %135

135:                                              ; preds = %129
  %136 = load i32, i32* %26, align 4
  %137 = load i32, i32* %23, align 4
  %138 = icmp sle i32 %136, %137
  br i1 %138, label %143, label %139

139:                                              ; preds = %135
  %140 = load i8, i8* %32, align 1
  %141 = zext i8 %140 to i32
  %142 = icmp eq i32 %141, 1
  br label %143

143:                                              ; preds = %139, %135
  %144 = phi i1 [ true, %135 ], [ %142, %139 ]
  %145 = xor i1 %144, true
  %146 = zext i1 %145 to i32
  %147 = sext i32 %146 to i64
  %148 = call i64 @llvm.expect.i64(i64 %147, i64 0)
  %149 = icmp ne i64 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %143
  unreachable

151:                                              ; preds = %143
  br label %152

152:                                              ; preds = %151
  br label %153

153:                                              ; preds = %152
  br label %154

154:                                              ; preds = %153
  %155 = load i32, i32* %26, align 4
  %156 = load i32, i32* %23, align 4
  %157 = icmp sgt i32 %155, %156
  br i1 %157, label %162, label %158

158:                                              ; preds = %154
  %159 = load i8, i8* %32, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp eq i32 %160, 0
  br label %162

162:                                              ; preds = %158, %154
  %163 = phi i1 [ true, %154 ], [ %161, %158 ]
  %164 = xor i1 %163, true
  %165 = zext i1 %164 to i32
  %166 = sext i32 %165 to i64
  %167 = call i64 @llvm.expect.i64(i64 %166, i64 0)
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %162
  unreachable

170:                                              ; preds = %162
  br label %171

171:                                              ; preds = %170
  br label %172

172:                                              ; preds = %171
  %173 = load i8, i8* %32, align 1
  %174 = icmp ne i8 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %172
  %176 = load i32, i32* %26, align 4
  %177 = load i32, i32* %25, align 4
  %178 = icmp sgt i32 %176, %177
  %179 = xor i1 %178, true
  %180 = xor i1 %179, true
  %181 = zext i1 %180 to i32
  %182 = sext i32 %181 to i64
  %183 = call i64 @llvm.expect.i64(i64 %182, i64 0)
  %184 = icmp ne i64 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %175
  br label %353

186:                                              ; preds = %175
  br label %187

187:                                              ; preds = %186, %172
  %188 = load %29*, %29** %27, align 8
  %189 = getelementptr inbounds %29, %29* %188, i32 1
  store %29* %189, %29** %27, align 8
  %190 = load %29*, %29** %27, align 8
  store %29* %190, %29** %28, align 8
  %191 = load %29*, %29** %28, align 8
  %192 = call i32 @1462(%29* %191, i8** %5, i64* %12, i32 0)
  %193 = icmp ne i32 %192, 0
  %194 = xor i1 %193, true
  %195 = xor i1 %194, true
  %196 = xor i1 %195, true
  %197 = zext i1 %196 to i32
  %198 = sext i32 %197 to i64
  %199 = call i64 @llvm.expect.i64(i64 %198, i64 0)
  %200 = icmp ne i64 %199, 0
  br i1 %200, label %201, label %202

201:                                              ; preds = %187
  store i32 2, i32* %29, align 4
  store i32 4, i32* %33, align 4
  br label %353

202:                                              ; preds = %187
  store i8 1, i8* %32, align 1
  %203 = load i32, i32* %26, align 4
  %204 = add nsw i32 %203, 1
  store i32 %204, i32* %26, align 4
  br label %205

205:                                              ; preds = %202
  %206 = load i32, i32* %26, align 4
  %207 = load i32, i32* %23, align 4
  %208 = icmp sle i32 %206, %207
  br i1 %208, label %213, label %209

209:                                              ; preds = %205
  %210 = load i8, i8* %32, align 1
  %211 = zext i8 %210 to i32
  %212 = icmp eq i32 %211, 1
  br label %213

213:                                              ; preds = %209, %205
  %214 = phi i1 [ true, %205 ], [ %212, %209 ]
  %215 = xor i1 %214, true
  %216 = zext i1 %215 to i32
  %217 = sext i32 %216 to i64
  %218 = call i64 @llvm.expect.i64(i64 %217, i64 0)
  %219 = icmp ne i64 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %213
  unreachable

221:                                              ; preds = %213
  br label %222

222:                                              ; preds = %221
  br label %223

223:                                              ; preds = %222
  br label %224

224:                                              ; preds = %223
  %225 = load i32, i32* %26, align 4
  %226 = load i32, i32* %23, align 4
  %227 = icmp sgt i32 %225, %226
  br i1 %227, label %232, label %228

228:                                              ; preds = %224
  %229 = load i8, i8* %32, align 1
  %230 = zext i8 %229 to i32
  %231 = icmp eq i32 %230, 0
  br label %232

232:                                              ; preds = %228, %224
  %233 = phi i1 [ true, %224 ], [ %231, %228 ]
  %234 = xor i1 %233, true
  %235 = zext i1 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = call i64 @llvm.expect.i64(i64 %236, i64 0)
  %238 = icmp ne i64 %237, 0
  br i1 %238, label %239, label %240

239:                                              ; preds = %232
  unreachable

240:                                              ; preds = %232
  br label %241

241:                                              ; preds = %240
  br label %242

242:                                              ; preds = %241
  %243 = load i8, i8* %32, align 1
  %244 = icmp ne i8 %243, 0
  br i1 %244, label %245, label %257

245:                                              ; preds = %242
  %246 = load i32, i32* %26, align 4
  %247 = load i32, i32* %25, align 4
  %248 = icmp sgt i32 %246, %247
  %249 = xor i1 %248, true
  %250 = xor i1 %249, true
  %251 = zext i1 %250 to i32
  %252 = sext i32 %251 to i64
  %253 = call i64 @llvm.expect.i64(i64 %252, i64 0)
  %254 = icmp ne i64 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %245
  br label %353

256:                                              ; preds = %245
  br label %257

257:                                              ; preds = %256, %242
  %258 = load %29*, %29** %27, align 8
  %259 = getelementptr inbounds %29, %29* %258, i32 1
  store %29* %259, %29** %27, align 8
  %260 = load %29*, %29** %27, align 8
  store %29* %260, %29** %28, align 8
  %261 = load %29*, %29** %28, align 8
  %262 = call i32 @1467(%29* %261, %29** %17, i32 0, i32 0)
  %263 = icmp ne i32 %262, 0
  %264 = xor i1 %263, true
  %265 = xor i1 %264, true
  %266 = xor i1 %265, true
  %267 = zext i1 %266 to i32
  %268 = sext i32 %267 to i64
  %269 = call i64 @llvm.expect.i64(i64 %268, i64 0)
  %270 = icmp ne i64 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %257
  store i32 3, i32* %29, align 4
  store i32 4, i32* %33, align 4
  br label %353

272:                                              ; preds = %257
  %273 = load i32, i32* %26, align 4
  %274 = add nsw i32 %273, 1
  store i32 %274, i32* %26, align 4
  br label %275

275:                                              ; preds = %272
  %276 = load i32, i32* %26, align 4
  %277 = load i32, i32* %23, align 4
  %278 = icmp sle i32 %276, %277
  br i1 %278, label %283, label %279

279:                                              ; preds = %275
  %280 = load i8, i8* %32, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp eq i32 %281, 1
  br label %283

283:                                              ; preds = %279, %275
  %284 = phi i1 [ true, %275 ], [ %282, %279 ]
  %285 = xor i1 %284, true
  %286 = zext i1 %285 to i32
  %287 = sext i32 %286 to i64
  %288 = call i64 @llvm.expect.i64(i64 %287, i64 0)
  %289 = icmp ne i64 %288, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %283
  unreachable

291:                                              ; preds = %283
  br label %292

292:                                              ; preds = %291
  br label %293

293:                                              ; preds = %292
  br label %294

294:                                              ; preds = %293
  %295 = load i32, i32* %26, align 4
  %296 = load i32, i32* %23, align 4
  %297 = icmp sgt i32 %295, %296
  br i1 %297, label %302, label %298

298:                                              ; preds = %294
  %299 = load i8, i8* %32, align 1
  %300 = zext i8 %299 to i32
  %301 = icmp eq i32 %300, 0
  br label %302

302:                                              ; preds = %298, %294
  %303 = phi i1 [ true, %294 ], [ %301, %298 ]
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = call i64 @llvm.expect.i64(i64 %306, i64 0)
  %308 = icmp ne i64 %307, 0
  br i1 %308, label %309, label %310

309:                                              ; preds = %302
  unreachable

310:                                              ; preds = %302
  br label %311

311:                                              ; preds = %310
  br label %312

312:                                              ; preds = %311
  %313 = load i8, i8* %32, align 1
  %314 = icmp ne i8 %313, 0
  br i1 %314, label %315, label %327

315:                                              ; preds = %312
  %316 = load i32, i32* %26, align 4
  %317 = load i32, i32* %25, align 4
  %318 = icmp sgt i32 %316, %317
  %319 = xor i1 %318, true
  %320 = xor i1 %319, true
  %321 = zext i1 %320 to i32
  %322 = sext i32 %321 to i64
  %323 = call i64 @llvm.expect.i64(i64 %322, i64 0)
  %324 = icmp ne i64 %323, 0
  br i1 %324, label %325, label %326

325:                                              ; preds = %315
  br label %353

326:                                              ; preds = %315
  br label %327

327:                                              ; preds = %326, %312
  %328 = load %29*, %29** %27, align 8
  %329 = getelementptr inbounds %29, %29* %328, i32 1
  store %29* %329, %29** %27, align 8
  %330 = load %29*, %29** %27, align 8
  store %29* %330, %29** %28, align 8
  br label %331

331:                                              ; preds = %327
  %332 = load %29*, %29** %28, align 8
  %333 = call zeroext i8 @1468(%29* %332)
  %334 = zext i8 %333 to i32
  %335 = icmp eq i32 %334, 10
  %336 = xor i1 %335, true
  %337 = xor i1 %336, true
  %338 = zext i1 %337 to i32
  %339 = sext i32 %338 to i64
  %340 = call i64 @llvm.expect.i64(i64 %339, i64 0)
  %341 = icmp ne i64 %340, 0
  br i1 %341, label %342, label %348

342:                                              ; preds = %331
  %343 = load %29*, %29** %28, align 8
  %344 = getelementptr inbounds %29, %29* %343, i32 0, i32 0
  %345 = bitcast %30* %344 to %91**
  %346 = load %91*, %91** %345, align 8
  %347 = getelementptr inbounds %91, %91* %346, i32 0, i32 1
  store %29* %347, %29** %28, align 8
  br label %348

348:                                              ; preds = %342, %331
  br label %349

349:                                              ; preds = %348
  br label %350

350:                                              ; preds = %349
  %351 = load %29*, %29** %28, align 8
  call void @1469(%29* %351, %29** %18, i32 0)
  br label %352

352:                                              ; preds = %350
  br label %353

353:                                              ; preds = %352, %325, %271, %255, %201, %185, %125
  %354 = load i32, i32* %33, align 4
  %355 = icmp ne i32 %354, 0
  %356 = xor i1 %355, true
  %357 = xor i1 %356, true
  %358 = zext i1 %357 to i32
  %359 = sext i32 %358 to i64
  %360 = call i64 @llvm.expect.i64(i64 %359, i64 0)
  %361 = icmp ne i64 %360, 0
  br i1 %361, label %362, label %391

362:                                              ; preds = %353
  %363 = load i32, i32* %33, align 4
  %364 = icmp eq i32 %363, 2
  br i1 %364, label %365, label %368

365:                                              ; preds = %362
  %366 = load i32, i32* %26, align 4
  %367 = load i8*, i8** %30, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %366, i8* %367)
  br label %384

368:                                              ; preds = %362
  %369 = load i32, i32* %33, align 4
  %370 = icmp eq i32 %369, 3
  br i1 %370, label %371, label %375

371:                                              ; preds = %368
  %372 = load i32, i32* %26, align 4
  %373 = load i8*, i8** %30, align 8
  %374 = load %29*, %29** %28, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %372, i8* %373, %29* %374)
  br label %383

375:                                              ; preds = %368
  %376 = load i32, i32* %33, align 4
  %377 = icmp eq i32 %376, 4
  br i1 %377, label %378, label %382

378:                                              ; preds = %375
  %379 = load i32, i32* %26, align 4
  %380 = load i32, i32* %29, align 4
  %381 = load %29*, %29** %28, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %379, i32 %380, %29* %381)
  br label %382

382:                                              ; preds = %378, %375
  br label %383

383:                                              ; preds = %382, %371
  br label %384

384:                                              ; preds = %383, %365
  br label %385

385:                                              ; preds = %384
  %386 = load %29*, %29** %4, align 8
  %387 = getelementptr inbounds %29, %29* %386, i32 0, i32 1
  %388 = bitcast %31* %387 to i32*
  store i32 2, i32* %388, align 8
  br label %389

389:                                              ; preds = %385
  br label %390

390:                                              ; preds = %389
  store i32 1, i32* %34, align 4
  br label %392

391:                                              ; preds = %353
  store i32 0, i32* %34, align 4
  br label %392

392:                                              ; preds = %391, %390
  %393 = bitcast i32* %33 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %393) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %32) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %31) #13
  %394 = bitcast i8** %30 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %394) #13
  %395 = bitcast i32* %29 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %395) #13
  %396 = bitcast %29** %28 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %396) #13
  %397 = bitcast %29** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %397) #13
  %398 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %398) #13
  %399 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %399) #13
  %400 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %400) #13
  %401 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %401) #13
  %402 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %402) #13
  %403 = load i32, i32* %34, align 4
  switch i32 %403, label %914 [
    i32 0, label %404
  ]

404:                                              ; preds = %392
  br label %405

405:                                              ; preds = %404
  br label %406

406:                                              ; preds = %405
  %407 = load %29*, %29** %18, align 8
  %408 = icmp ne %29* %407, null
  br i1 %408, label %409, label %420

409:                                              ; preds = %406
  %410 = load %29*, %29** %18, align 8
  call void @_zval_ptr_dtor(%29* %410)
  %411 = bitcast %29** %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %411) #13
  %412 = load %29*, %29** %18, align 8
  store %29* %412, %29** %35, align 8
  %413 = load %29*, %29** %35, align 8
  %414 = getelementptr inbounds %29, %29* %413, i32 0, i32 0
  %415 = bitcast %30* %414 to i64*
  store i64 1, i64* %415, align 8
  %416 = load %29*, %29** %35, align 8
  %417 = getelementptr inbounds %29, %29* %416, i32 0, i32 1
  %418 = bitcast %31* %417 to i32*
  store i32 4, i32* %418, align 8
  %419 = bitcast %29** %35 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %419) #13
  br label %420

420:                                              ; preds = %409, %406
  %421 = call zeroext i8 @1468(%29* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 41, i64 3))
  %422 = zext i8 %421 to i32
  %423 = icmp eq i32 %422, 7
  br i1 %423, label %428, label %424

424:                                              ; preds = %420
  %425 = call zeroext i8 @zend_is_auto_global_str(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1109, i32 0, i32 0), i64 7)
  %426 = zext i8 %425 to i32
  %427 = icmp ne i32 %426, 0
  br i1 %427, label %428, label %535

428:                                              ; preds = %424, %420
  %429 = load %7*, %7** bitcast (%30* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 41, i64 3, i32 0) to %7**), align 8
  %430 = call %29* @1470(%7* %429, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1110, i32 0, i32 0), i64 4)
  store %29* %430, %29** %16, align 8
  %431 = icmp ne %29* %430, null
  br i1 %431, label %435, label %432

432:                                              ; preds = %428
  %433 = call %29* @1470(%7* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 5), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1110, i32 0, i32 0), i64 4)
  store %29* %433, %29** %16, align 8
  %434 = icmp ne %29* %433, null
  br i1 %434, label %435, label %535

435:                                              ; preds = %432, %428
  %436 = bitcast i32* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %436) #13
  store i32 0, i32* %36, align 4
  %437 = bitcast %29** %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %437) #13
  %438 = load %29*, %29** %16, align 8
  %439 = call zeroext i8 @1468(%29* %438)
  %440 = zext i8 %439 to i32
  %441 = icmp ne i32 %440, 7
  br i1 %441, label %442, label %449

442:                                              ; preds = %435
  br label %443

443:                                              ; preds = %442
  %444 = load %29*, %29** %4, align 8
  %445 = getelementptr inbounds %29, %29* %444, i32 0, i32 1
  %446 = bitcast %31* %445 to i32*
  store i32 2, i32* %446, align 8
  br label %447

447:                                              ; preds = %443
  br label %448

448:                                              ; preds = %447
  store i32 1, i32* %34, align 4
  br label %530

449:                                              ; preds = %435
  %450 = load %29*, %29** %16, align 8
  %451 = getelementptr inbounds %29, %29* %450, i32 0, i32 0
  %452 = bitcast %30* %451 to %7**
  %453 = load %7*, %7** %452, align 8
  %454 = getelementptr inbounds %7, %7* %453, i32 0, i32 5
  %455 = load i32, i32* %454, align 4
  store i32 %455, i32* %9, align 4
  %456 = load i32, i32* %9, align 4
  %457 = add nsw i32 %456, 1
  %458 = sext i32 %457 to i64
  %459 = call noalias i8* @_safe_emalloc(i64 8, i64 %458, i64 0)
  %460 = bitcast i8* %459 to i8**
  store i8** %460, i8*** %6, align 8
  br label %461

461:                                              ; preds = %449
  %462 = bitcast %7** %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %462) #13
  %463 = load %29*, %29** %16, align 8
  %464 = getelementptr inbounds %29, %29* %463, i32 0, i32 0
  %465 = bitcast %30* %464 to %7**
  %466 = load %7*, %7** %465, align 8
  store %7* %466, %7** %38, align 8
  %467 = bitcast %11** %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %467) #13
  %468 = load %7*, %7** %38, align 8
  %469 = getelementptr inbounds %7, %7* %468, i32 0, i32 3
  %470 = load %11*, %11** %469, align 8
  store %11* %470, %11** %39, align 8
  %471 = bitcast %11** %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %471) #13
  %472 = load %11*, %11** %39, align 8
  %473 = load %7*, %7** %38, align 8
  %474 = getelementptr inbounds %7, %7* %473, i32 0, i32 4
  %475 = load i32, i32* %474, align 8
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds %11, %11* %472, i64 %476
  store %11* %477, %11** %40, align 8
  br label %478

478:                                              ; preds = %517, %461
  %479 = load %11*, %11** %39, align 8
  %480 = load %11*, %11** %40, align 8
  %481 = icmp ne %11* %479, %480
  br i1 %481, label %482, label %520

482:                                              ; preds = %478
  %483 = bitcast %29** %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %483) #13
  %484 = load %11*, %11** %39, align 8
  %485 = getelementptr inbounds %11, %11* %484, i32 0, i32 0
  store %29* %485, %29** %41, align 8
  %486 = load %29*, %29** %41, align 8
  %487 = call zeroext i8 @1468(%29* %486)
  %488 = zext i8 %487 to i32
  %489 = icmp eq i32 %488, 0
  %490 = xor i1 %489, true
  %491 = xor i1 %490, true
  %492 = zext i1 %491 to i32
  %493 = sext i32 %492 to i64
  %494 = call i64 @llvm.expect.i64(i64 %493, i64 0)
  %495 = icmp ne i64 %494, 0
  br i1 %495, label %496, label %497

496:                                              ; preds = %482
  store i32 28, i32* %34, align 4
  br label %513

497:                                              ; preds = %482
  %498 = load %29*, %29** %41, align 8
  store %29* %498, %29** %37, align 8
  %499 = bitcast %28** %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %499) #13
  %500 = load %29*, %29** %37, align 8
  %501 = call %28* @1471(%29* %500)
  store %28* %501, %28** %42, align 8
  %502 = load %28*, %28** %42, align 8
  %503 = getelementptr inbounds %28, %28* %502, i32 0, i32 3
  %504 = getelementptr inbounds [1 x i8], [1 x i8]* %503, i32 0, i32 0
  %505 = call noalias i8* @_estrdup(i8* %504)
  %506 = load i8**, i8*** %6, align 8
  %507 = load i32, i32* %36, align 4
  %508 = add nsw i32 %507, 1
  store i32 %508, i32* %36, align 4
  %509 = sext i32 %507 to i64
  %510 = getelementptr inbounds i8*, i8** %506, i64 %509
  store i8* %505, i8** %510, align 8
  %511 = load %28*, %28** %42, align 8
  call void @1460(%28* %511)
  %512 = bitcast %28** %42 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %512) #13
  store i32 0, i32* %34, align 4
  br label %513

513:                                              ; preds = %497, %496
  %514 = bitcast %29** %41 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %514) #13
  %515 = load i32, i32* %34, align 4
  switch i32 %515, label %934 [
    i32 0, label %516
    i32 28, label %517
  ]

516:                                              ; preds = %513
  br label %517

517:                                              ; preds = %516, %513
  %518 = load %11*, %11** %39, align 8
  %519 = getelementptr inbounds %11, %11* %518, i32 1
  store %11* %519, %11** %39, align 8
  br label %478

520:                                              ; preds = %478
  %521 = bitcast %11** %40 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %521) #13
  %522 = bitcast %11** %39 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %522) #13
  %523 = bitcast %7** %38 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %523) #13
  br label %524

524:                                              ; preds = %520
  br label %525

525:                                              ; preds = %524
  %526 = load i8**, i8*** %6, align 8
  %527 = load i32, i32* %9, align 4
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds i8*, i8** %526, i64 %528
  store i8* null, i8** %529, align 8
  store i32 0, i32* %34, align 4
  br label %530

530:                                              ; preds = %525, %448
  %531 = bitcast %29** %37 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %531) #13
  %532 = bitcast i32* %36 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %532) #13
  %533 = load i32, i32* %34, align 4
  switch i32 %533, label %914 [
    i32 0, label %534
  ]

534:                                              ; preds = %530
  br label %542

535:                                              ; preds = %432, %424
  br label %536

536:                                              ; preds = %535
  %537 = load %29*, %29** %4, align 8
  %538 = getelementptr inbounds %29, %29* %537, i32 0, i32 1
  %539 = bitcast %31* %538 to i32*
  store i32 2, i32* %539, align 8
  br label %540

540:                                              ; preds = %536
  br label %541

541:                                              ; preds = %540
  store i32 1, i32* %34, align 4
  br label %914

542:                                              ; preds = %534
  %543 = load i8*, i8** %5, align 8
  %544 = call i32 @1472(i8* %543, %90** %20)
  store i32 %544, i32* %10, align 4
  %545 = load %29*, %29** %17, align 8
  %546 = icmp ne %29* %545, null
  br i1 %546, label %547, label %703

547:                                              ; preds = %542
  %548 = bitcast i32* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %548) #13
  %549 = bitcast %29** %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %549) #13
  %550 = load %29*, %29** %17, align 8
  %551 = getelementptr inbounds %29, %29* %550, i32 0, i32 0
  %552 = bitcast %30* %551 to %7**
  %553 = load %7*, %7** %552, align 8
  %554 = getelementptr inbounds %7, %7* %553, i32 0, i32 5
  %555 = load i32, i32* %554, align 4
  store i32 %555, i32* %43, align 4
  %556 = load %90*, %90** %20, align 8
  %557 = bitcast %90* %556 to i8*
  %558 = load i32, i32* %10, align 4
  %559 = load i32, i32* %43, align 4
  %560 = add nsw i32 %558, %559
  %561 = add nsw i32 %560, 1
  %562 = sext i32 %561 to i64
  %563 = mul i64 16, %562
  %564 = call i8* @_erealloc(i8* %557, i64 %563) #16
  %565 = bitcast i8* %564 to %90*
  store %90* %565, %90** %20, align 8
  %566 = load %90*, %90** %20, align 8
  store %90* %566, %90** %21, align 8
  %567 = load i32, i32* %10, align 4
  %568 = load %90*, %90** %20, align 8
  %569 = sext i32 %567 to i64
  %570 = getelementptr inbounds %90, %90* %568, i64 %569
  store %90* %570, %90** %20, align 8
  %571 = load %90*, %90** %20, align 8
  %572 = bitcast %90* %571 to i8*
  %573 = load i32, i32* %43, align 4
  %574 = sext i32 %573 to i64
  %575 = mul i64 %574, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %572, i8 0, i64 %575, i1 false)
  br label %576

576:                                              ; preds = %547
  %577 = bitcast %7** %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %577) #13
  %578 = load %29*, %29** %17, align 8
  %579 = getelementptr inbounds %29, %29* %578, i32 0, i32 0
  %580 = bitcast %30* %579 to %7**
  %581 = load %7*, %7** %580, align 8
  store %7* %581, %7** %45, align 8
  %582 = bitcast %11** %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %582) #13
  %583 = load %7*, %7** %45, align 8
  %584 = getelementptr inbounds %7, %7* %583, i32 0, i32 3
  %585 = load %11*, %11** %584, align 8
  store %11* %585, %11** %46, align 8
  %586 = bitcast %11** %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %586) #13
  %587 = load %11*, %11** %46, align 8
  %588 = load %7*, %7** %45, align 8
  %589 = getelementptr inbounds %7, %7* %588, i32 0, i32 4
  %590 = load i32, i32* %589, align 8
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds %11, %11* %587, i64 %591
  store %11* %592, %11** %47, align 8
  br label %593

593:                                              ; preds = %692, %576
  %594 = load %11*, %11** %46, align 8
  %595 = load %11*, %11** %47, align 8
  %596 = icmp ne %11* %594, %595
  br i1 %596, label %597, label %695

597:                                              ; preds = %593
  %598 = bitcast %29** %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %598) #13
  %599 = load %11*, %11** %46, align 8
  %600 = getelementptr inbounds %11, %11* %599, i32 0, i32 0
  store %29* %600, %29** %48, align 8
  %601 = load %29*, %29** %48, align 8
  %602 = call zeroext i8 @1468(%29* %601)
  %603 = zext i8 %602 to i32
  %604 = icmp eq i32 %603, 0
  %605 = xor i1 %604, true
  %606 = xor i1 %605, true
  %607 = zext i1 %606 to i32
  %608 = sext i32 %607 to i64
  %609 = call i64 @llvm.expect.i64(i64 %608, i64 0)
  %610 = icmp ne i64 %609, 0
  br i1 %610, label %611, label %612

611:                                              ; preds = %597
  store i32 35, i32* %34, align 4
  br label %688

612:                                              ; preds = %597
  %613 = load %29*, %29** %48, align 8
  store %29* %613, %29** %44, align 8
  %614 = bitcast %28** %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %614) #13
  %615 = load %29*, %29** %44, align 8
  %616 = call %28* @1471(%29* %615)
  store %28* %616, %28** %49, align 8
  %617 = load %90*, %90** %20, align 8
  %618 = getelementptr inbounds %90, %90* %617, i32 0, i32 1
  store i32 0, i32* %618, align 4
  %619 = load %28*, %28** %49, align 8
  %620 = getelementptr inbounds %28, %28* %619, i32 0, i32 3
  %621 = getelementptr inbounds [1 x i8], [1 x i8]* %620, i32 0, i32 0
  %622 = call noalias i8* @_estrdup(i8* %621)
  %623 = load %90*, %90** %20, align 8
  %624 = getelementptr inbounds %90, %90* %623, i32 0, i32 2
  store i8* %622, i8** %624, align 8
  %625 = load %90*, %90** %20, align 8
  %626 = getelementptr inbounds %90, %90* %625, i32 0, i32 2
  %627 = load i8*, i8** %626, align 8
  %628 = call i64 @strlen(i8* %627) #15
  %629 = trunc i64 %628 to i32
  store i32 %629, i32* %10, align 4
  %630 = load i32, i32* %10, align 4
  %631 = icmp sgt i32 %630, 0
  br i1 %631, label %632, label %681

632:                                              ; preds = %612
  %633 = load %90*, %90** %20, align 8
  %634 = getelementptr inbounds %90, %90* %633, i32 0, i32 2
  %635 = load i8*, i8** %634, align 8
  %636 = load i32, i32* %10, align 4
  %637 = sub nsw i32 %636, 1
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds i8, i8* %635, i64 %638
  %640 = load i8, i8* %639, align 1
  %641 = sext i8 %640 to i32
  %642 = icmp eq i32 %641, 58
  br i1 %642, label %643, label %681

643:                                              ; preds = %632
  %644 = load %90*, %90** %20, align 8
  %645 = getelementptr inbounds %90, %90* %644, i32 0, i32 1
  %646 = load i32, i32* %645, align 4
  %647 = add nsw i32 %646, 1
  store i32 %647, i32* %645, align 4
  %648 = load %90*, %90** %20, align 8
  %649 = getelementptr inbounds %90, %90* %648, i32 0, i32 2
  %650 = load i8*, i8** %649, align 8
  %651 = load i32, i32* %10, align 4
  %652 = sub nsw i32 %651, 1
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i8, i8* %650, i64 %653
  store i8 0, i8* %654, align 1
  %655 = load i32, i32* %10, align 4
  %656 = icmp sgt i32 %655, 1
  br i1 %656, label %657, label %680

657:                                              ; preds = %643
  %658 = load %90*, %90** %20, align 8
  %659 = getelementptr inbounds %90, %90* %658, i32 0, i32 2
  %660 = load i8*, i8** %659, align 8
  %661 = load i32, i32* %10, align 4
  %662 = sub nsw i32 %661, 2
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i8, i8* %660, i64 %663
  %665 = load i8, i8* %664, align 1
  %666 = sext i8 %665 to i32
  %667 = icmp eq i32 %666, 58
  br i1 %667, label %668, label %680

668:                                              ; preds = %657
  %669 = load %90*, %90** %20, align 8
  %670 = getelementptr inbounds %90, %90* %669, i32 0, i32 1
  %671 = load i32, i32* %670, align 4
  %672 = add nsw i32 %671, 1
  store i32 %672, i32* %670, align 4
  %673 = load %90*, %90** %20, align 8
  %674 = getelementptr inbounds %90, %90* %673, i32 0, i32 2
  %675 = load i8*, i8** %674, align 8
  %676 = load i32, i32* %10, align 4
  %677 = sub nsw i32 %676, 2
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i8, i8* %675, i64 %678
  store i8 0, i8* %679, align 1
  br label %680

680:                                              ; preds = %668, %657, %643
  br label %681

681:                                              ; preds = %680, %632, %612
  %682 = load %90*, %90** %20, align 8
  %683 = getelementptr inbounds %90, %90* %682, i32 0, i32 0
  store i8 0, i8* %683, align 8
  %684 = load %90*, %90** %20, align 8
  %685 = getelementptr inbounds %90, %90* %684, i32 1
  store %90* %685, %90** %20, align 8
  %686 = load %28*, %28** %49, align 8
  call void @1460(%28* %686)
  %687 = bitcast %28** %49 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %687) #13
  store i32 0, i32* %34, align 4
  br label %688

688:                                              ; preds = %681, %611
  %689 = bitcast %29** %48 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %689) #13
  %690 = load i32, i32* %34, align 4
  switch i32 %690, label %934 [
    i32 0, label %691
    i32 35, label %692
  ]

691:                                              ; preds = %688
  br label %692

692:                                              ; preds = %691, %688
  %693 = load %11*, %11** %46, align 8
  %694 = getelementptr inbounds %11, %11* %693, i32 1
  store %11* %694, %11** %46, align 8
  br label %593

695:                                              ; preds = %593
  %696 = bitcast %11** %47 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %696) #13
  %697 = bitcast %11** %46 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %697) #13
  %698 = bitcast %7** %45 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %698) #13
  br label %699

699:                                              ; preds = %695
  br label %700

700:                                              ; preds = %699
  %701 = bitcast %29** %44 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %701) #13
  %702 = bitcast i32* %43 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %702) #13
  br label %717

703:                                              ; preds = %542
  %704 = load %90*, %90** %20, align 8
  %705 = bitcast %90* %704 to i8*
  %706 = load i32, i32* %10, align 4
  %707 = add nsw i32 %706, 1
  %708 = sext i32 %707 to i64
  %709 = mul i64 16, %708
  %710 = call i8* @_erealloc(i8* %705, i64 %709) #16
  %711 = bitcast i8* %710 to %90*
  store %90* %711, %90** %20, align 8
  %712 = load %90*, %90** %20, align 8
  store %90* %712, %90** %21, align 8
  %713 = load i32, i32* %10, align 4
  %714 = load %90*, %90** %20, align 8
  %715 = sext i32 %713 to i64
  %716 = getelementptr inbounds %90, %90* %714, i64 %715
  store %90* %716, %90** %20, align 8
  br label %717

717:                                              ; preds = %703, %700
  %718 = load %90*, %90** %20, align 8
  %719 = getelementptr inbounds %90, %90* %718, i32 0, i32 0
  store i8 45, i8* %719, align 8
  %720 = load %90*, %90** %20, align 8
  %721 = getelementptr inbounds %90, %90* %720, i32 0, i32 1
  store i32 0, i32* %721, align 4
  %722 = load %90*, %90** %20, align 8
  %723 = getelementptr inbounds %90, %90* %722, i32 0, i32 2
  store i8* null, i8** %723, align 8
  %724 = load %29*, %29** %4, align 8
  %725 = call i32 @_array_init(%29* %724, i32 0)
  %726 = load %90*, %90** %21, align 8
  store %90* %726, %90** %20, align 8
  br label %727

727:                                              ; preds = %892, %736, %717
  %728 = load i32, i32* %9, align 4
  %729 = load i8**, i8*** %6, align 8
  %730 = load %90*, %90** %20, align 8
  %731 = call i32 @php_getopt(i32 %728, i8** %729, %90* %730, i8** %13, i32* %14, i32 0, i32 1)
  store i32 %731, i32* %11, align 4
  %732 = icmp ne i32 %731, -1
  br i1 %732, label %733, label %893

733:                                              ; preds = %727
  %734 = load i32, i32* %11, align 4
  %735 = icmp eq i32 %734, 63
  br i1 %735, label %736, label %737

736:                                              ; preds = %733
  br label %727

737:                                              ; preds = %733
  %738 = load i32, i32* %11, align 4
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %747

740:                                              ; preds = %737
  %741 = load %90*, %90** %20, align 8
  %742 = load i32, i32* @php_optidx, align 4
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds %90, %90* %741, i64 %743
  %745 = getelementptr inbounds %90, %90* %744, i32 0, i32 2
  %746 = load i8*, i8** %745, align 8
  store i8* %746, i8** %8, align 8
  br label %756

747:                                              ; preds = %737
  %748 = load i32, i32* %11, align 4
  %749 = icmp eq i32 %748, 1
  br i1 %749, label %750, label %751

750:                                              ; preds = %747
  store i32 45, i32* %11, align 4
  br label %751

751:                                              ; preds = %750, %747
  %752 = load i32, i32* %11, align 4
  %753 = trunc i32 %752 to i8
  %754 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  store i8 %753, i8* %754, align 1
  %755 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i32 0, i32 0
  store i8* %755, i8** %8, align 8
  br label %756

756:                                              ; preds = %751, %740
  %757 = load i8*, i8** %13, align 8
  %758 = icmp ne i8* %757, null
  br i1 %758, label %759, label %787

759:                                              ; preds = %756
  br label %760

760:                                              ; preds = %759
  %761 = bitcast i8** %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %761) #13
  %762 = load i8*, i8** %13, align 8
  store i8* %762, i8** %50, align 8
  br label %763

763:                                              ; preds = %760
  br label %764

764:                                              ; preds = %763
  %765 = bitcast %29** %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %765) #13
  store %29* %15, %29** %51, align 8
  %766 = bitcast %28** %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %766) #13
  %767 = load i8*, i8** %50, align 8
  %768 = load i8*, i8** %50, align 8
  %769 = call i64 @strlen(i8* %768) #15
  %770 = call %28* @1463(i8* %767, i64 %769, i32 0)
  store %28* %770, %28** %52, align 8
  %771 = load %28*, %28** %52, align 8
  %772 = load %29*, %29** %51, align 8
  %773 = getelementptr inbounds %29, %29* %772, i32 0, i32 0
  %774 = bitcast %30* %773 to %28**
  store %28* %771, %28** %774, align 8
  %775 = load %29*, %29** %51, align 8
  %776 = getelementptr inbounds %29, %29* %775, i32 0, i32 1
  %777 = bitcast %31* %776 to i32*
  store i32 5126, i32* %777, align 8
  %778 = bitcast %28** %52 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %778) #13
  %779 = bitcast %29** %51 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %779) #13
  br label %780

780:                                              ; preds = %764
  br label %781

781:                                              ; preds = %780
  br label %782

782:                                              ; preds = %781
  br label %783

783:                                              ; preds = %782
  %784 = bitcast i8** %50 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %784) #13
  br label %785

785:                                              ; preds = %783
  br label %786

786:                                              ; preds = %785
  br label %793

787:                                              ; preds = %756
  br label %788

788:                                              ; preds = %787
  %789 = getelementptr inbounds %29, %29* %15, i32 0, i32 1
  %790 = bitcast %31* %789 to i32*
  store i32 2, i32* %790, align 8
  br label %791

791:                                              ; preds = %788
  br label %792

792:                                              ; preds = %791
  br label %793

793:                                              ; preds = %792, %786
  %794 = load i8*, i8** %8, align 8
  %795 = call i64 @strlen(i8* %794) #15
  %796 = trunc i64 %795 to i32
  store i32 %796, i32* %19, align 4
  %797 = load i32, i32* %19, align 4
  %798 = icmp sgt i32 %797, 1
  br i1 %798, label %799, label %805

799:                                              ; preds = %793
  %800 = load i8*, i8** %8, align 8
  %801 = getelementptr inbounds i8, i8* %800, i64 0
  %802 = load i8, i8* %801, align 1
  %803 = sext i8 %802 to i32
  %804 = icmp eq i32 %803, 48
  br i1 %804, label %853, label %805

805:                                              ; preds = %799, %793
  %806 = load i8*, i8** %8, align 8
  %807 = load i32, i32* %19, align 4
  %808 = sext i32 %807 to i64
  %809 = call zeroext i8 @1473(i8* %806, i64 %808, i64* null, double* null, i32 0)
  %810 = zext i8 %809 to i32
  %811 = icmp eq i32 %810, 4
  br i1 %811, label %812, label %853

812:                                              ; preds = %805
  %813 = bitcast i32* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %813) #13
  %814 = load i8*, i8** %8, align 8
  %815 = call i32 @atoi(i8* %814) #15
  store i32 %815, i32* %53, align 4
  %816 = load %29*, %29** %4, align 8
  %817 = getelementptr inbounds %29, %29* %816, i32 0, i32 0
  %818 = bitcast %30* %817 to %7**
  %819 = load %7*, %7** %818, align 8
  %820 = load i32, i32* %53, align 4
  %821 = sext i32 %820 to i64
  %822 = call %29* @zend_hash_index_find(%7* %819, i64 %821)
  store %29* %822, %29** %16, align 8
  %823 = icmp ne %29* %822, null
  br i1 %823, label %824, label %843

824:                                              ; preds = %812
  %825 = load %29*, %29** %16, align 8
  %826 = call zeroext i8 @1468(%29* %825)
  %827 = zext i8 %826 to i32
  %828 = icmp ne i32 %827, 7
  br i1 %828, label %829, label %837

829:                                              ; preds = %824
  %830 = load %29*, %29** %16, align 8
  %831 = call zeroext i8 @1468(%29* %830)
  %832 = zext i8 %831 to i32
  %833 = icmp ne i32 %832, 7
  br i1 %833, label %834, label %836

834:                                              ; preds = %829
  %835 = load %29*, %29** %16, align 8
  call void @convert_to_array(%29* %835)
  br label %836

836:                                              ; preds = %834, %829
  br label %837

837:                                              ; preds = %836, %824
  %838 = load %29*, %29** %16, align 8
  %839 = getelementptr inbounds %29, %29* %838, i32 0, i32 0
  %840 = bitcast %30* %839 to %7**
  %841 = load %7*, %7** %840, align 8
  %842 = call %29* @_zend_hash_next_index_insert(%7* %841, %29* %15)
  br label %851

843:                                              ; preds = %812
  %844 = load %29*, %29** %4, align 8
  %845 = getelementptr inbounds %29, %29* %844, i32 0, i32 0
  %846 = bitcast %30* %845 to %7**
  %847 = load %7*, %7** %846, align 8
  %848 = load i32, i32* %53, align 4
  %849 = sext i32 %848 to i64
  %850 = call %29* @_zend_hash_index_update(%7* %847, i64 %849, %29* %15)
  br label %851

851:                                              ; preds = %843, %837
  %852 = bitcast i32* %53 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %852) #13
  br label %892

853:                                              ; preds = %805, %799
  %854 = load %29*, %29** %4, align 8
  %855 = getelementptr inbounds %29, %29* %854, i32 0, i32 0
  %856 = bitcast %30* %855 to %7**
  %857 = load %7*, %7** %856, align 8
  %858 = load i8*, i8** %8, align 8
  %859 = load i8*, i8** %8, align 8
  %860 = call i64 @strlen(i8* %859) #15
  %861 = call %29* @zend_hash_str_find(%7* %857, i8* %858, i64 %860)
  store %29* %861, %29** %16, align 8
  %862 = icmp ne %29* %861, null
  br i1 %862, label %863, label %882

863:                                              ; preds = %853
  %864 = load %29*, %29** %16, align 8
  %865 = call zeroext i8 @1468(%29* %864)
  %866 = zext i8 %865 to i32
  %867 = icmp ne i32 %866, 7
  br i1 %867, label %868, label %876

868:                                              ; preds = %863
  %869 = load %29*, %29** %16, align 8
  %870 = call zeroext i8 @1468(%29* %869)
  %871 = zext i8 %870 to i32
  %872 = icmp ne i32 %871, 7
  br i1 %872, label %873, label %875

873:                                              ; preds = %868
  %874 = load %29*, %29** %16, align 8
  call void @convert_to_array(%29* %874)
  br label %875

875:                                              ; preds = %873, %868
  br label %876

876:                                              ; preds = %875, %863
  %877 = load %29*, %29** %16, align 8
  %878 = getelementptr inbounds %29, %29* %877, i32 0, i32 0
  %879 = bitcast %30* %878 to %7**
  %880 = load %7*, %7** %879, align 8
  %881 = call %29* @_zend_hash_next_index_insert(%7* %880, %29* %15)
  br label %891

882:                                              ; preds = %853
  %883 = load %29*, %29** %4, align 8
  %884 = getelementptr inbounds %29, %29* %883, i32 0, i32 0
  %885 = bitcast %30* %884 to %7**
  %886 = load %7*, %7** %885, align 8
  %887 = load i8*, i8** %8, align 8
  %888 = load i8*, i8** %8, align 8
  %889 = call i64 @strlen(i8* %888) #15
  %890 = call %29* @_zend_hash_str_add(%7* %886, i8* %887, i64 %889, %29* %15)
  br label %891

891:                                              ; preds = %882, %876
  br label %892

892:                                              ; preds = %891, %851
  store i8* null, i8** %13, align 8
  br label %727

893:                                              ; preds = %727
  %894 = load %29*, %29** %18, align 8
  %895 = icmp ne %29* %894, null
  br i1 %895, label %896, label %908

896:                                              ; preds = %893
  %897 = bitcast %29** %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %897) #13
  %898 = load %29*, %29** %18, align 8
  store %29* %898, %29** %54, align 8
  %899 = load i32, i32* %14, align 4
  %900 = sext i32 %899 to i64
  %901 = load %29*, %29** %54, align 8
  %902 = getelementptr inbounds %29, %29* %901, i32 0, i32 0
  %903 = bitcast %30* %902 to i64*
  store i64 %900, i64* %903, align 8
  %904 = load %29*, %29** %54, align 8
  %905 = getelementptr inbounds %29, %29* %904, i32 0, i32 1
  %906 = bitcast %31* %905 to i32*
  store i32 4, i32* %906, align 8
  %907 = bitcast %29** %54 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %907) #13
  br label %908

908:                                              ; preds = %896, %893
  %909 = load %90*, %90** %21, align 8
  call void @1474(%90* %909)
  %910 = load %90*, %90** %21, align 8
  %911 = bitcast %90* %910 to i8*
  call void @_efree(i8* %911)
  %912 = load i8**, i8*** %6, align 8
  %913 = load i32, i32* %9, align 4
  call void @1475(i8** %912, i32 %913)
  store i32 0, i32* %34, align 4
  br label %914

914:                                              ; preds = %908, %541, %530, %392
  %915 = bitcast %90** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %915) #13
  %916 = bitcast %90** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %916) #13
  %917 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %917) #13
  %918 = bitcast %29** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %918) #13
  %919 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %919) #13
  %920 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %920) #13
  %921 = bitcast %29* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %921) #13
  %922 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %922) #13
  %923 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %923) #13
  %924 = bitcast i64* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %924) #13
  %925 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %925) #13
  %926 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %926) #13
  %927 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %927) #13
  %928 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %928) #13
  %929 = bitcast [2 x i8]* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %929) #13
  %930 = bitcast i8*** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %930) #13
  %931 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %931) #13
  %932 = load i32, i32* %34, align 4
  switch i32 %932, label %934 [
    i32 0, label %933
    i32 1, label %933
  ]

933:                                              ; preds = %914, %914
  ret void

934:                                              ; preds = %914, %688, %513
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_sys_getloadavg(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca [3 x double], align 16
  %6 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %7 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %7) #13
  %8 = load %1*, %1** %3, align 8
  %9 = getelementptr inbounds %1, %1* %8, i32 0, i32 4
  %10 = getelementptr inbounds %29, %29* %9, i32 0, i32 2
  %11 = bitcast %32* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 1)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  br label %28

21:                                               ; preds = %2
  %22 = load %1*, %1** %3, align 8
  %23 = getelementptr inbounds %1, %1* %22, i32 0, i32 4
  %24 = getelementptr inbounds %29, %29* %23, i32 0, i32 2
  %25 = bitcast %32* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %28

28:                                               ; preds = %21, %20
  %29 = phi i32 [ 0, %20 ], [ %27, %21 ]
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  store i32 1, i32* %6, align 4
  br label %59

32:                                               ; preds = %28
  %33 = getelementptr inbounds [3 x double], [3 x double]* %5, i32 0, i32 0
  %34 = call i32 @getloadavg(double* %33, i32 3) #13
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %43

36:                                               ; preds = %32
  br label %37

37:                                               ; preds = %36
  %38 = load %29*, %29** %4, align 8
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 1
  %40 = bitcast %31* %39 to i32*
  store i32 2, i32* %40, align 8
  br label %41

41:                                               ; preds = %37
  br label %42

42:                                               ; preds = %41
  store i32 1, i32* %6, align 4
  br label %59

43:                                               ; preds = %32
  %44 = load %29*, %29** %4, align 8
  %45 = call i32 @_array_init(%29* %44, i32 0)
  %46 = load %29*, %29** %4, align 8
  %47 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 0
  %48 = load double, double* %47, align 16
  %49 = call i32 @add_index_double(%29* %46, i64 0, double %48)
  %50 = load %29*, %29** %4, align 8
  %51 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 1
  %52 = load double, double* %51, align 8
  %53 = call i32 @add_index_double(%29* %50, i64 1, double %52)
  %54 = load %29*, %29** %4, align 8
  %55 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 2
  %56 = load double, double* %55, align 16
  %57 = call i32 @add_index_double(%29* %54, i64 2, double %56)
  br label %58

58:                                               ; preds = %43
  store i32 0, i32* %6, align 4
  br label %59

59:                                               ; preds = %58, %42, %31
  %60 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %60) #13
  %61 = load i32, i32* %6, align 4
  switch i32 %61, label %63 [
    i32 0, label %62
    i32 1, label %62
  ]

62:                                               ; preds = %59, %59
  ret void

63:                                               ; preds = %59
  unreachable
}

declare dso_local void @zif_microtime(%1*, %29*) #1

declare dso_local void @zif_gettimeofday(%1*, %29*) #1

declare dso_local void @zif_getrusage(%1*, %29*) #1

declare dso_local void @zif_uniqid(%1*, %29*) #1

declare dso_local void @zif_quoted_printable_decode(%1*, %29*) #1

declare dso_local void @zif_quoted_printable_encode(%1*, %29*) #1

declare dso_local void @zif_convert_cyr_string(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_get_current_user(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %29*, align 8
  %7 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %8 = load %1*, %1** %3, align 8
  %9 = getelementptr inbounds %1, %1* %8, i32 0, i32 4
  %10 = getelementptr inbounds %29, %29* %9, i32 0, i32 2
  %11 = bitcast %32* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 1)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  br label %28

21:                                               ; preds = %2
  %22 = load %1*, %1** %3, align 8
  %23 = getelementptr inbounds %1, %1* %22, i32 0, i32 4
  %24 = getelementptr inbounds %29, %29* %23, i32 0, i32 2
  %25 = bitcast %32* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %28

28:                                               ; preds = %21, %20
  %29 = phi i32 [ 0, %20 ], [ %27, %21 ]
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  br label %60

32:                                               ; preds = %28
  br label %33

33:                                               ; preds = %32
  %34 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = call i8* @php_get_current_user()
  store i8* %35, i8** %5, align 8
  br label %36

36:                                               ; preds = %33
  br label %37

37:                                               ; preds = %36
  %38 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = load %29*, %29** %4, align 8
  store %29* %39, %29** %6, align 8
  %40 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = load i8*, i8** %5, align 8
  %42 = load i8*, i8** %5, align 8
  %43 = call i64 @strlen(i8* %42) #15
  %44 = call %28* @1463(i8* %41, i64 %43, i32 0)
  store %28* %44, %28** %7, align 8
  %45 = load %28*, %28** %7, align 8
  %46 = load %29*, %29** %6, align 8
  %47 = getelementptr inbounds %29, %29* %46, i32 0, i32 0
  %48 = bitcast %30* %47 to %28**
  store %28* %45, %28** %48, align 8
  %49 = load %29*, %29** %6, align 8
  %50 = getelementptr inbounds %29, %29* %49, i32 0, i32 1
  %51 = bitcast %31* %50 to i32*
  store i32 5126, i32* %51, align 8
  %52 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #13
  %53 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #13
  br label %54

54:                                               ; preds = %37
  br label %55

55:                                               ; preds = %54
  br label %56

56:                                               ; preds = %55
  br label %57

57:                                               ; preds = %56
  %58 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #13
  br label %59

59:                                               ; preds = %57
  br label %60

60:                                               ; preds = %59, %31
  ret void
}

declare dso_local void @zif_set_time_limit(%1*, %29*) #1

declare dso_local void @zif_header_register_callback(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_get_cfg_var(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %29*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca %29*, align 8
  %23 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  br label %27

27:                                               ; preds = %2
  %28 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 0, i32* %8, align 4
  %29 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 1, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %10, align 4
  %31 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  %32 = load %1*, %1** %3, align 8
  %33 = getelementptr inbounds %1, %1* %32, i32 0, i32 4
  %34 = getelementptr inbounds %29, %29* %33, i32 0, i32 2
  %35 = bitcast %32* %34 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %11, align 4
  %37 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store %29* null, %29** %14, align 8
  %40 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %15, align 4
  %41 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %42 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %19, align 4
  %43 = load i32, i32* %12, align 4
  %44 = load %29*, %29** %13, align 8
  %45 = load %29*, %29** %14, align 8
  %46 = load i32, i32* %15, align 4
  %47 = load i8*, i8** %16, align 8
  %48 = load i8, i8* %17, align 1
  %49 = load i8, i8* %18, align 1
  br label %50

50:                                               ; preds = %27
  %51 = load i32, i32* %11, align 4
  %52 = load i32, i32* %9, align 4
  %53 = icmp slt i32 %51, %52
  %54 = xor i1 %53, true
  %55 = xor i1 %54, true
  %56 = zext i1 %55 to i32
  %57 = sext i32 %56 to i64
  %58 = call i64 @llvm.expect.i64(i64 %57, i64 0)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %50
  %61 = load i32, i32* %11, align 4
  %62 = load i32, i32* %10, align 4
  %63 = icmp sgt i32 %61, %62
  %64 = xor i1 %63, true
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = call i64 @llvm.expect.i64(i64 %67, i64 0)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %83

70:                                               ; preds = %60
  %71 = load i32, i32* %10, align 4
  %72 = icmp sge i32 %71, 0
  %73 = xor i1 %72, true
  %74 = xor i1 %73, true
  %75 = zext i1 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = call i64 @llvm.expect.i64(i64 %76, i64 1)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %70, %50
  %80 = load i32, i32* %11, align 4
  %81 = load i32, i32* %9, align 4
  %82 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %80, i32 %81, i32 %82)
  store i32 1, i32* %19, align 4
  br label %158

83:                                               ; preds = %70, %60
  store i32 0, i32* %12, align 4
  %84 = load %1*, %1** %3, align 8
  %85 = bitcast %1* %84 to %29*
  %86 = getelementptr inbounds %29, %29* %85, i64 4
  store %29* %86, %29** %13, align 8
  %87 = load i32, i32* %12, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %12, align 4
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %12, align 4
  %91 = load i32, i32* %9, align 4
  %92 = icmp sle i32 %90, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = load i8, i8* %18, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %95, 1
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i1 [ true, %89 ], [ %96, %93 ]
  %99 = xor i1 %98, true
  %100 = zext i1 %99 to i32
  %101 = sext i32 %100 to i64
  %102 = call i64 @llvm.expect.i64(i64 %101, i64 0)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  unreachable

105:                                              ; preds = %97
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %12, align 4
  %110 = load i32, i32* %9, align 4
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %18, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, 0
  br label %116

116:                                              ; preds = %112, %108
  %117 = phi i1 [ true, %108 ], [ %115, %112 ]
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = call i64 @llvm.expect.i64(i64 %120, i64 0)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  unreachable

124:                                              ; preds = %116
  br label %125

125:                                              ; preds = %124
  br label %126

126:                                              ; preds = %125
  %127 = load i8, i8* %18, align 1
  %128 = icmp ne i8 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %126
  %130 = load i32, i32* %12, align 4
  %131 = load i32, i32* %11, align 4
  %132 = icmp sgt i32 %130, %131
  %133 = xor i1 %132, true
  %134 = xor i1 %133, true
  %135 = zext i1 %134 to i32
  %136 = sext i32 %135 to i64
  %137 = call i64 @llvm.expect.i64(i64 %136, i64 0)
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %129
  br label %158

140:                                              ; preds = %129
  br label %141

141:                                              ; preds = %140, %126
  %142 = load %29*, %29** %13, align 8
  %143 = getelementptr inbounds %29, %29* %142, i32 1
  store %29* %143, %29** %13, align 8
  %144 = load %29*, %29** %13, align 8
  store %29* %144, %29** %14, align 8
  %145 = load %29*, %29** %14, align 8
  %146 = call i32 @1462(%29* %145, i8** %5, i64* %6, i32 0)
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = call i64 @llvm.expect.i64(i64 %152, i64 0)
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %141
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %158

156:                                              ; preds = %141
  br label %157

157:                                              ; preds = %156
  br label %158

158:                                              ; preds = %157, %155, %139, %79
  %159 = load i32, i32* %19, align 4
  %160 = icmp ne i32 %159, 0
  %161 = xor i1 %160, true
  %162 = xor i1 %161, true
  %163 = zext i1 %162 to i32
  %164 = sext i32 %163 to i64
  %165 = call i64 @llvm.expect.i64(i64 %164, i64 0)
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %190

167:                                              ; preds = %158
  %168 = load i32, i32* %19, align 4
  %169 = icmp eq i32 %168, 2
  br i1 %169, label %170, label %173

170:                                              ; preds = %167
  %171 = load i32, i32* %12, align 4
  %172 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %171, i8* %172)
  br label %189

173:                                              ; preds = %167
  %174 = load i32, i32* %19, align 4
  %175 = icmp eq i32 %174, 3
  br i1 %175, label %176, label %180

176:                                              ; preds = %173
  %177 = load i32, i32* %12, align 4
  %178 = load i8*, i8** %16, align 8
  %179 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %177, i8* %178, %29* %179)
  br label %188

180:                                              ; preds = %173
  %181 = load i32, i32* %19, align 4
  %182 = icmp eq i32 %181, 4
  br i1 %182, label %183, label %187

183:                                              ; preds = %180
  %184 = load i32, i32* %12, align 4
  %185 = load i32, i32* %15, align 4
  %186 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %184, i32 %185, %29* %186)
  br label %187

187:                                              ; preds = %183, %180
  br label %188

188:                                              ; preds = %187, %176
  br label %189

189:                                              ; preds = %188, %170
  store i32 1, i32* %20, align 4
  br label %191

190:                                              ; preds = %158
  store i32 0, i32* %20, align 4
  br label %191

191:                                              ; preds = %190, %189
  %192 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %193 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  %194 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %195) #13
  %196 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = load i32, i32* %20, align 4
  switch i32 %202, label %267 [
    i32 0, label %203
  ]

203:                                              ; preds = %191
  br label %204

204:                                              ; preds = %203
  br label %205

205:                                              ; preds = %204
  %206 = load i8*, i8** %5, align 8
  %207 = load i64, i64* %6, align 8
  %208 = trunc i64 %207 to i32
  %209 = zext i32 %208 to i64
  %210 = call %29* @cfg_get_entry(i8* %206, i64 %209)
  store %29* %210, %29** %7, align 8
  %211 = load %29*, %29** %7, align 8
  %212 = icmp ne %29* %211, null
  br i1 %212, label %213, label %260

213:                                              ; preds = %205
  %214 = load %29*, %29** %7, align 8
  %215 = call zeroext i8 @1468(%29* %214)
  %216 = zext i8 %215 to i32
  %217 = icmp eq i32 %216, 7
  br i1 %217, label %218, label %226

218:                                              ; preds = %213
  %219 = load %29*, %29** %4, align 8
  %220 = call i32 @_array_init(%29* %219, i32 0)
  %221 = load %29*, %29** %7, align 8
  %222 = getelementptr inbounds %29, %29* %221, i32 0, i32 0
  %223 = bitcast %30* %222 to %7**
  %224 = load %7*, %7** %223, align 8
  %225 = load %29*, %29** %4, align 8
  call void (%7*, i32 (%29*, i32, %106*, %107*)*, i32, ...) @zend_hash_apply_with_arguments(%7* %224, i32 (%29*, i32, %106*, %107*)* @1477, i32 1, %29* %225)
  store i32 1, i32* %20, align 4
  br label %267

226:                                              ; preds = %213
  br label %227

227:                                              ; preds = %226
  %228 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %228) #13
  %229 = load %29*, %29** %7, align 8
  %230 = getelementptr inbounds %29, %29* %229, i32 0, i32 0
  %231 = bitcast %30* %230 to %28**
  %232 = load %28*, %28** %231, align 8
  %233 = getelementptr inbounds %28, %28* %232, i32 0, i32 3
  %234 = getelementptr inbounds [1 x i8], [1 x i8]* %233, i32 0, i32 0
  store i8* %234, i8** %21, align 8
  br label %235

235:                                              ; preds = %227
  br label %236

236:                                              ; preds = %235
  %237 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %237) #13
  %238 = load %29*, %29** %4, align 8
  store %29* %238, %29** %22, align 8
  %239 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %239) #13
  %240 = load i8*, i8** %21, align 8
  %241 = load i8*, i8** %21, align 8
  %242 = call i64 @strlen(i8* %241) #15
  %243 = call %28* @1463(i8* %240, i64 %242, i32 0)
  store %28* %243, %28** %23, align 8
  %244 = load %28*, %28** %23, align 8
  %245 = load %29*, %29** %22, align 8
  %246 = getelementptr inbounds %29, %29* %245, i32 0, i32 0
  %247 = bitcast %30* %246 to %28**
  store %28* %244, %28** %247, align 8
  %248 = load %29*, %29** %22, align 8
  %249 = getelementptr inbounds %29, %29* %248, i32 0, i32 1
  %250 = bitcast %31* %249 to i32*
  store i32 5126, i32* %250, align 8
  %251 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %251) #13
  %252 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %252) #13
  br label %253

253:                                              ; preds = %236
  br label %254

254:                                              ; preds = %253
  br label %255

255:                                              ; preds = %254
  br label %256

256:                                              ; preds = %255
  %257 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %257) #13
  br label %258

258:                                              ; preds = %256
  br label %259

259:                                              ; preds = %258
  store i32 1, i32* %20, align 4
  br label %267

260:                                              ; preds = %205
  br label %261

261:                                              ; preds = %260
  %262 = load %29*, %29** %4, align 8
  %263 = getelementptr inbounds %29, %29* %262, i32 0, i32 1
  %264 = bitcast %31* %263 to i32*
  store i32 2, i32* %264, align 8
  br label %265

265:                                              ; preds = %261
  br label %266

266:                                              ; preds = %265
  store i32 1, i32* %20, align 4
  br label %267

267:                                              ; preds = %266, %259, %218, %191
  %268 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %268) #13
  %269 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %269) #13
  %270 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %270) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_get_magic_quotes_gpc(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %5 = load %1*, %1** %3, align 8
  %6 = getelementptr inbounds %1, %1* %5, i32 0, i32 4
  %7 = getelementptr inbounds %29, %29* %6, i32 0, i32 2
  %8 = bitcast %32* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 1)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %25

18:                                               ; preds = %2
  %19 = load %1*, %1** %3, align 8
  %20 = getelementptr inbounds %1, %1* %19, i32 0, i32 4
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 2
  %22 = bitcast %32* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %25

25:                                               ; preds = %18, %17
  %26 = phi i32 [ 0, %17 ], [ %24, %18 ]
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  br label %35

29:                                               ; preds = %25
  br label %30

30:                                               ; preds = %29
  %31 = load %29*, %29** %4, align 8
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 1
  %33 = bitcast %31* %32 to i32*
  store i32 2, i32* %33, align 8
  br label %34

34:                                               ; preds = %30
  br label %35

35:                                               ; preds = %34, %28
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_get_magic_quotes_runtime(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %5 = load %1*, %1** %3, align 8
  %6 = getelementptr inbounds %1, %1* %5, i32 0, i32 4
  %7 = getelementptr inbounds %29, %29* %6, i32 0, i32 2
  %8 = bitcast %32* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 1)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %25

18:                                               ; preds = %2
  %19 = load %1*, %1** %3, align 8
  %20 = getelementptr inbounds %1, %1* %19, i32 0, i32 4
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 2
  %22 = bitcast %32* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %25

25:                                               ; preds = %18, %17
  %26 = phi i32 [ 0, %17 ], [ %24, %18 ]
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  br label %35

29:                                               ; preds = %25
  br label %30

30:                                               ; preds = %29
  %31 = load %29*, %29** %4, align 8
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 1
  %33 = bitcast %31* %32 to i32*
  store i32 2, i32* %33, align 8
  br label %34

34:                                               ; preds = %30
  br label %35

35:                                               ; preds = %34, %28
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_error_log(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %29*, align 8
  %20 = alloca %29*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  %23 = alloca i8, align 1
  %24 = alloca i8, align 1
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %27 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  store i8* null, i8** %6, align 8
  %29 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  store i8* null, i8** %7, align 8
  %30 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %31 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  store i64 0, i64* %9, align 8
  %32 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  store i64 0, i64* %10, align 8
  %33 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %11, align 4
  %34 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  %35 = load %1*, %1** %3, align 8
  %36 = getelementptr inbounds %1, %1* %35, i32 0, i32 4
  %37 = getelementptr inbounds %29, %29* %36, i32 0, i32 2
  %38 = bitcast %32* %37 to i32*
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %12, align 4
  %40 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store i64 0, i64* %13, align 8
  br label %41

41:                                               ; preds = %2
  %42 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %14, align 4
  %43 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 1, i32* %15, align 4
  %44 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 4, i32* %16, align 4
  %45 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  %46 = load %1*, %1** %3, align 8
  %47 = getelementptr inbounds %1, %1* %46, i32 0, i32 4
  %48 = getelementptr inbounds %29, %29* %47, i32 0, i32 2
  %49 = bitcast %32* %48 to i32*
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %17, align 4
  %51 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %51) #13
  %52 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %52) #13
  %53 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %53) #13
  store %29* null, %29** %20, align 8
  %54 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %54) #13
  store i32 0, i32* %21, align 4
  %55 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #13
  store i8* null, i8** %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %23) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %24) #13
  store i8 0, i8* %24, align 1
  %56 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %56) #13
  store i32 0, i32* %25, align 4
  %57 = load i32, i32* %18, align 4
  %58 = load %29*, %29** %19, align 8
  %59 = load %29*, %29** %20, align 8
  %60 = load i32, i32* %21, align 4
  %61 = load i8*, i8** %22, align 8
  %62 = load i8, i8* %23, align 1
  %63 = load i8, i8* %24, align 1
  br label %64

64:                                               ; preds = %41
  %65 = load i32, i32* %17, align 4
  %66 = load i32, i32* %15, align 4
  %67 = icmp slt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %93, label %74

74:                                               ; preds = %64
  %75 = load i32, i32* %17, align 4
  %76 = load i32, i32* %16, align 4
  %77 = icmp sgt i32 %75, %76
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 0)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %97

84:                                               ; preds = %74
  %85 = load i32, i32* %16, align 4
  %86 = icmp sge i32 %85, 0
  %87 = xor i1 %86, true
  %88 = xor i1 %87, true
  %89 = zext i1 %88 to i32
  %90 = sext i32 %89 to i64
  %91 = call i64 @llvm.expect.i64(i64 %90, i64 1)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %84, %64
  %94 = load i32, i32* %17, align 4
  %95 = load i32, i32* %15, align 4
  %96 = load i32, i32* %16, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %94, i32 %95, i32 %96)
  store i32 1, i32* %25, align 4
  br label %382

97:                                               ; preds = %84, %74
  store i32 0, i32* %18, align 4
  %98 = load %1*, %1** %3, align 8
  %99 = bitcast %1* %98 to %29*
  %100 = getelementptr inbounds %29, %29* %99, i64 4
  store %29* %100, %29** %19, align 8
  %101 = load i32, i32* %18, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %18, align 4
  br label %103

103:                                              ; preds = %97
  %104 = load i32, i32* %18, align 4
  %105 = load i32, i32* %15, align 4
  %106 = icmp sle i32 %104, %105
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = load i8, i8* %24, align 1
  %109 = zext i8 %108 to i32
  %110 = icmp eq i32 %109, 1
  br label %111

111:                                              ; preds = %107, %103
  %112 = phi i1 [ true, %103 ], [ %110, %107 ]
  %113 = xor i1 %112, true
  %114 = zext i1 %113 to i32
  %115 = sext i32 %114 to i64
  %116 = call i64 @llvm.expect.i64(i64 %115, i64 0)
  %117 = icmp ne i64 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %111
  unreachable

119:                                              ; preds = %111
  br label %120

120:                                              ; preds = %119
  br label %121

121:                                              ; preds = %120
  br label %122

122:                                              ; preds = %121
  %123 = load i32, i32* %18, align 4
  %124 = load i32, i32* %15, align 4
  %125 = icmp sgt i32 %123, %124
  br i1 %125, label %130, label %126

126:                                              ; preds = %122
  %127 = load i8, i8* %24, align 1
  %128 = zext i8 %127 to i32
  %129 = icmp eq i32 %128, 0
  br label %130

130:                                              ; preds = %126, %122
  %131 = phi i1 [ true, %122 ], [ %129, %126 ]
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  %134 = sext i32 %133 to i64
  %135 = call i64 @llvm.expect.i64(i64 %134, i64 0)
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %130
  unreachable

138:                                              ; preds = %130
  br label %139

139:                                              ; preds = %138
  br label %140

140:                                              ; preds = %139
  %141 = load i8, i8* %24, align 1
  %142 = icmp ne i8 %141, 0
  br i1 %142, label %143, label %155

143:                                              ; preds = %140
  %144 = load i32, i32* %18, align 4
  %145 = load i32, i32* %17, align 4
  %146 = icmp sgt i32 %144, %145
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = zext i1 %148 to i32
  %150 = sext i32 %149 to i64
  %151 = call i64 @llvm.expect.i64(i64 %150, i64 0)
  %152 = icmp ne i64 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %143
  br label %382

154:                                              ; preds = %143
  br label %155

155:                                              ; preds = %154, %140
  %156 = load %29*, %29** %19, align 8
  %157 = getelementptr inbounds %29, %29* %156, i32 1
  store %29* %157, %29** %19, align 8
  %158 = load %29*, %29** %19, align 8
  store %29* %158, %29** %20, align 8
  %159 = load %29*, %29** %20, align 8
  %160 = call i32 @1462(%29* %159, i8** %5, i64* %8, i32 0)
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = xor i1 %163, true
  %165 = zext i1 %164 to i32
  %166 = sext i32 %165 to i64
  %167 = call i64 @llvm.expect.i64(i64 %166, i64 0)
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %155
  store i32 2, i32* %21, align 4
  store i32 4, i32* %25, align 4
  br label %382

170:                                              ; preds = %155
  store i8 1, i8* %24, align 1
  %171 = load i32, i32* %18, align 4
  %172 = add nsw i32 %171, 1
  store i32 %172, i32* %18, align 4
  br label %173

173:                                              ; preds = %170
  %174 = load i32, i32* %18, align 4
  %175 = load i32, i32* %15, align 4
  %176 = icmp sle i32 %174, %175
  br i1 %176, label %181, label %177

177:                                              ; preds = %173
  %178 = load i8, i8* %24, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp eq i32 %179, 1
  br label %181

181:                                              ; preds = %177, %173
  %182 = phi i1 [ true, %173 ], [ %180, %177 ]
  %183 = xor i1 %182, true
  %184 = zext i1 %183 to i32
  %185 = sext i32 %184 to i64
  %186 = call i64 @llvm.expect.i64(i64 %185, i64 0)
  %187 = icmp ne i64 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %181
  unreachable

189:                                              ; preds = %181
  br label %190

190:                                              ; preds = %189
  br label %191

191:                                              ; preds = %190
  br label %192

192:                                              ; preds = %191
  %193 = load i32, i32* %18, align 4
  %194 = load i32, i32* %15, align 4
  %195 = icmp sgt i32 %193, %194
  br i1 %195, label %200, label %196

196:                                              ; preds = %192
  %197 = load i8, i8* %24, align 1
  %198 = zext i8 %197 to i32
  %199 = icmp eq i32 %198, 0
  br label %200

200:                                              ; preds = %196, %192
  %201 = phi i1 [ true, %192 ], [ %199, %196 ]
  %202 = xor i1 %201, true
  %203 = zext i1 %202 to i32
  %204 = sext i32 %203 to i64
  %205 = call i64 @llvm.expect.i64(i64 %204, i64 0)
  %206 = icmp ne i64 %205, 0
  br i1 %206, label %207, label %208

207:                                              ; preds = %200
  unreachable

208:                                              ; preds = %200
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  %211 = load i8, i8* %24, align 1
  %212 = icmp ne i8 %211, 0
  br i1 %212, label %213, label %225

213:                                              ; preds = %210
  %214 = load i32, i32* %18, align 4
  %215 = load i32, i32* %17, align 4
  %216 = icmp sgt i32 %214, %215
  %217 = xor i1 %216, true
  %218 = xor i1 %217, true
  %219 = zext i1 %218 to i32
  %220 = sext i32 %219 to i64
  %221 = call i64 @llvm.expect.i64(i64 %220, i64 0)
  %222 = icmp ne i64 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %213
  br label %382

224:                                              ; preds = %213
  br label %225

225:                                              ; preds = %224, %210
  %226 = load %29*, %29** %19, align 8
  %227 = getelementptr inbounds %29, %29* %226, i32 1
  store %29* %227, %29** %19, align 8
  %228 = load %29*, %29** %19, align 8
  store %29* %228, %29** %20, align 8
  %229 = load %29*, %29** %20, align 8
  %230 = call i32 @1464(%29* %229, i64* %13, i8* %23, i32 0, i32 0)
  %231 = icmp ne i32 %230, 0
  %232 = xor i1 %231, true
  %233 = xor i1 %232, true
  %234 = xor i1 %233, true
  %235 = zext i1 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = call i64 @llvm.expect.i64(i64 %236, i64 0)
  %238 = icmp ne i64 %237, 0
  br i1 %238, label %239, label %240

239:                                              ; preds = %225
  store i32 0, i32* %21, align 4
  store i32 4, i32* %25, align 4
  br label %382

240:                                              ; preds = %225
  %241 = load i32, i32* %18, align 4
  %242 = add nsw i32 %241, 1
  store i32 %242, i32* %18, align 4
  br label %243

243:                                              ; preds = %240
  %244 = load i32, i32* %18, align 4
  %245 = load i32, i32* %15, align 4
  %246 = icmp sle i32 %244, %245
  br i1 %246, label %251, label %247

247:                                              ; preds = %243
  %248 = load i8, i8* %24, align 1
  %249 = zext i8 %248 to i32
  %250 = icmp eq i32 %249, 1
  br label %251

251:                                              ; preds = %247, %243
  %252 = phi i1 [ true, %243 ], [ %250, %247 ]
  %253 = xor i1 %252, true
  %254 = zext i1 %253 to i32
  %255 = sext i32 %254 to i64
  %256 = call i64 @llvm.expect.i64(i64 %255, i64 0)
  %257 = icmp ne i64 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %251
  unreachable

259:                                              ; preds = %251
  br label %260

260:                                              ; preds = %259
  br label %261

261:                                              ; preds = %260
  br label %262

262:                                              ; preds = %261
  %263 = load i32, i32* %18, align 4
  %264 = load i32, i32* %15, align 4
  %265 = icmp sgt i32 %263, %264
  br i1 %265, label %270, label %266

266:                                              ; preds = %262
  %267 = load i8, i8* %24, align 1
  %268 = zext i8 %267 to i32
  %269 = icmp eq i32 %268, 0
  br label %270

270:                                              ; preds = %266, %262
  %271 = phi i1 [ true, %262 ], [ %269, %266 ]
  %272 = xor i1 %271, true
  %273 = zext i1 %272 to i32
  %274 = sext i32 %273 to i64
  %275 = call i64 @llvm.expect.i64(i64 %274, i64 0)
  %276 = icmp ne i64 %275, 0
  br i1 %276, label %277, label %278

277:                                              ; preds = %270
  unreachable

278:                                              ; preds = %270
  br label %279

279:                                              ; preds = %278
  br label %280

280:                                              ; preds = %279
  %281 = load i8, i8* %24, align 1
  %282 = icmp ne i8 %281, 0
  br i1 %282, label %283, label %295

283:                                              ; preds = %280
  %284 = load i32, i32* %18, align 4
  %285 = load i32, i32* %17, align 4
  %286 = icmp sgt i32 %284, %285
  %287 = xor i1 %286, true
  %288 = xor i1 %287, true
  %289 = zext i1 %288 to i32
  %290 = sext i32 %289 to i64
  %291 = call i64 @llvm.expect.i64(i64 %290, i64 0)
  %292 = icmp ne i64 %291, 0
  br i1 %292, label %293, label %294

293:                                              ; preds = %283
  br label %382

294:                                              ; preds = %283
  br label %295

295:                                              ; preds = %294, %280
  %296 = load %29*, %29** %19, align 8
  %297 = getelementptr inbounds %29, %29* %296, i32 1
  store %29* %297, %29** %19, align 8
  %298 = load %29*, %29** %19, align 8
  store %29* %298, %29** %20, align 8
  %299 = load %29*, %29** %20, align 8
  %300 = call i32 @1478(%29* %299, i8** %6, i64* %9, i32 0)
  %301 = icmp ne i32 %300, 0
  %302 = xor i1 %301, true
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = call i64 @llvm.expect.i64(i64 %306, i64 0)
  %308 = icmp ne i64 %307, 0
  br i1 %308, label %309, label %310

309:                                              ; preds = %295
  store i32 6, i32* %21, align 4
  store i32 4, i32* %25, align 4
  br label %382

310:                                              ; preds = %295
  %311 = load i32, i32* %18, align 4
  %312 = add nsw i32 %311, 1
  store i32 %312, i32* %18, align 4
  br label %313

313:                                              ; preds = %310
  %314 = load i32, i32* %18, align 4
  %315 = load i32, i32* %15, align 4
  %316 = icmp sle i32 %314, %315
  br i1 %316, label %321, label %317

317:                                              ; preds = %313
  %318 = load i8, i8* %24, align 1
  %319 = zext i8 %318 to i32
  %320 = icmp eq i32 %319, 1
  br label %321

321:                                              ; preds = %317, %313
  %322 = phi i1 [ true, %313 ], [ %320, %317 ]
  %323 = xor i1 %322, true
  %324 = zext i1 %323 to i32
  %325 = sext i32 %324 to i64
  %326 = call i64 @llvm.expect.i64(i64 %325, i64 0)
  %327 = icmp ne i64 %326, 0
  br i1 %327, label %328, label %329

328:                                              ; preds = %321
  unreachable

329:                                              ; preds = %321
  br label %330

330:                                              ; preds = %329
  br label %331

331:                                              ; preds = %330
  br label %332

332:                                              ; preds = %331
  %333 = load i32, i32* %18, align 4
  %334 = load i32, i32* %15, align 4
  %335 = icmp sgt i32 %333, %334
  br i1 %335, label %340, label %336

336:                                              ; preds = %332
  %337 = load i8, i8* %24, align 1
  %338 = zext i8 %337 to i32
  %339 = icmp eq i32 %338, 0
  br label %340

340:                                              ; preds = %336, %332
  %341 = phi i1 [ true, %332 ], [ %339, %336 ]
  %342 = xor i1 %341, true
  %343 = zext i1 %342 to i32
  %344 = sext i32 %343 to i64
  %345 = call i64 @llvm.expect.i64(i64 %344, i64 0)
  %346 = icmp ne i64 %345, 0
  br i1 %346, label %347, label %348

347:                                              ; preds = %340
  unreachable

348:                                              ; preds = %340
  br label %349

349:                                              ; preds = %348
  br label %350

350:                                              ; preds = %349
  %351 = load i8, i8* %24, align 1
  %352 = icmp ne i8 %351, 0
  br i1 %352, label %353, label %365

353:                                              ; preds = %350
  %354 = load i32, i32* %18, align 4
  %355 = load i32, i32* %17, align 4
  %356 = icmp sgt i32 %354, %355
  %357 = xor i1 %356, true
  %358 = xor i1 %357, true
  %359 = zext i1 %358 to i32
  %360 = sext i32 %359 to i64
  %361 = call i64 @llvm.expect.i64(i64 %360, i64 0)
  %362 = icmp ne i64 %361, 0
  br i1 %362, label %363, label %364

363:                                              ; preds = %353
  br label %382

364:                                              ; preds = %353
  br label %365

365:                                              ; preds = %364, %350
  %366 = load %29*, %29** %19, align 8
  %367 = getelementptr inbounds %29, %29* %366, i32 1
  store %29* %367, %29** %19, align 8
  %368 = load %29*, %29** %19, align 8
  store %29* %368, %29** %20, align 8
  %369 = load %29*, %29** %20, align 8
  %370 = call i32 @1462(%29* %369, i8** %7, i64* %10, i32 0)
  %371 = icmp ne i32 %370, 0
  %372 = xor i1 %371, true
  %373 = xor i1 %372, true
  %374 = xor i1 %373, true
  %375 = zext i1 %374 to i32
  %376 = sext i32 %375 to i64
  %377 = call i64 @llvm.expect.i64(i64 %376, i64 0)
  %378 = icmp ne i64 %377, 0
  br i1 %378, label %379, label %380

379:                                              ; preds = %365
  store i32 2, i32* %21, align 4
  store i32 4, i32* %25, align 4
  br label %382

380:                                              ; preds = %365
  br label %381

381:                                              ; preds = %380
  br label %382

382:                                              ; preds = %381, %379, %363, %309, %293, %239, %223, %169, %153, %93
  %383 = load i32, i32* %25, align 4
  %384 = icmp ne i32 %383, 0
  %385 = xor i1 %384, true
  %386 = xor i1 %385, true
  %387 = zext i1 %386 to i32
  %388 = sext i32 %387 to i64
  %389 = call i64 @llvm.expect.i64(i64 %388, i64 0)
  %390 = icmp ne i64 %389, 0
  br i1 %390, label %391, label %414

391:                                              ; preds = %382
  %392 = load i32, i32* %25, align 4
  %393 = icmp eq i32 %392, 2
  br i1 %393, label %394, label %397

394:                                              ; preds = %391
  %395 = load i32, i32* %18, align 4
  %396 = load i8*, i8** %22, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %395, i8* %396)
  br label %413

397:                                              ; preds = %391
  %398 = load i32, i32* %25, align 4
  %399 = icmp eq i32 %398, 3
  br i1 %399, label %400, label %404

400:                                              ; preds = %397
  %401 = load i32, i32* %18, align 4
  %402 = load i8*, i8** %22, align 8
  %403 = load %29*, %29** %20, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %401, i8* %402, %29* %403)
  br label %412

404:                                              ; preds = %397
  %405 = load i32, i32* %25, align 4
  %406 = icmp eq i32 %405, 4
  br i1 %406, label %407, label %411

407:                                              ; preds = %404
  %408 = load i32, i32* %18, align 4
  %409 = load i32, i32* %21, align 4
  %410 = load %29*, %29** %20, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %408, i32 %409, %29* %410)
  br label %411

411:                                              ; preds = %407, %404
  br label %412

412:                                              ; preds = %411, %400
  br label %413

413:                                              ; preds = %412, %394
  store i32 1, i32* %26, align 4
  br label %415

414:                                              ; preds = %382
  store i32 0, i32* %26, align 4
  br label %415

415:                                              ; preds = %414, %413
  %416 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %416) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %24) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %23) #13
  %417 = bitcast i8** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %417) #13
  %418 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %418) #13
  %419 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %419) #13
  %420 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %420) #13
  %421 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %421) #13
  %422 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %422) #13
  %423 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %423) #13
  %424 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %424) #13
  %425 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %425) #13
  %426 = load i32, i32* %26, align 4
  switch i32 %426, label %457 [
    i32 0, label %427
  ]

427:                                              ; preds = %415
  br label %428

428:                                              ; preds = %427
  br label %429

429:                                              ; preds = %428
  %430 = load i32, i32* %12, align 4
  %431 = icmp sgt i32 %430, 1
  br i1 %431, label %432, label %435

432:                                              ; preds = %429
  %433 = load i64, i64* %13, align 8
  %434 = trunc i64 %433 to i32
  store i32 %434, i32* %11, align 4
  br label %435

435:                                              ; preds = %432, %429
  %436 = load i32, i32* %11, align 4
  %437 = load i8*, i8** %5, align 8
  %438 = load i64, i64* %8, align 8
  %439 = load i8*, i8** %6, align 8
  %440 = load i8*, i8** %7, align 8
  %441 = call i32 @_php_error_log_ex(i32 %436, i8* %437, i64 %438, i8* %439, i8* %440)
  %442 = icmp eq i32 %441, -1
  br i1 %442, label %443, label %450

443:                                              ; preds = %435
  br label %444

444:                                              ; preds = %443
  %445 = load %29*, %29** %4, align 8
  %446 = getelementptr inbounds %29, %29* %445, i32 0, i32 1
  %447 = bitcast %31* %446 to i32*
  store i32 2, i32* %447, align 8
  br label %448

448:                                              ; preds = %444
  br label %449

449:                                              ; preds = %448
  store i32 1, i32* %26, align 4
  br label %457

450:                                              ; preds = %435
  br label %451

451:                                              ; preds = %450
  %452 = load %29*, %29** %4, align 8
  %453 = getelementptr inbounds %29, %29* %452, i32 0, i32 1
  %454 = bitcast %31* %453 to i32*
  store i32 3, i32* %454, align 8
  br label %455

455:                                              ; preds = %451
  br label %456

456:                                              ; preds = %455
  store i32 1, i32* %26, align 4
  br label %457

457:                                              ; preds = %456, %449, %415
  %458 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %458) #13
  %459 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %459) #13
  %460 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %460) #13
  %461 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %461) #13
  %462 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %462) #13
  %463 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %463) #13
  %464 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %464) #13
  %465 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %465) #13
  %466 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %466) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_error_get_last(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %5 = load %1*, %1** %3, align 8
  %6 = getelementptr inbounds %1, %1* %5, i32 0, i32 4
  %7 = getelementptr inbounds %29, %29* %6, i32 0, i32 2
  %8 = bitcast %32* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 1)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %25

18:                                               ; preds = %2
  %19 = load %1*, %1** %3, align 8
  %20 = getelementptr inbounds %1, %1* %19, i32 0, i32 4
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 2
  %22 = bitcast %32* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %25

25:                                               ; preds = %18, %17
  %26 = phi i32 [ 0, %17 ], [ %24, %18 ]
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  br label %55

29:                                               ; preds = %25
  %30 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 58), align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %32, label %55

32:                                               ; preds = %29
  %33 = load %29*, %29** %4, align 8
  %34 = call i32 @_array_init(%29* %33, i32 0)
  %35 = load %29*, %29** %4, align 8
  %36 = load i32, i32* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 57), align 8
  %37 = sext i32 %36 to i64
  %38 = call i32 @add_assoc_long_ex(%29* %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1122, i32 0, i32 0), i64 4, i64 %37)
  %39 = load %29*, %29** %4, align 8
  %40 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 58), align 8
  %41 = call i32 @add_assoc_string_ex(%29* %39, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1123, i32 0, i32 0), i64 7, i8* %40)
  %42 = load %29*, %29** %4, align 8
  %43 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 59), align 8
  %44 = icmp ne i8* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %32
  %46 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 59), align 8
  br label %48

47:                                               ; preds = %32
  br label %48

48:                                               ; preds = %47, %45
  %49 = phi i8* [ %46, %45 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @1124, i32 0, i32 0), %47 ]
  %50 = call i32 @add_assoc_string_ex(%29* %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), i64 4, i8* %49)
  %51 = load %29*, %29** %4, align 8
  %52 = load i32, i32* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 60), align 8
  %53 = sext i32 %52 to i64
  %54 = call i32 @add_assoc_long_ex(%29* %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1125, i32 0, i32 0), i64 4, i64 %53)
  br label %55

55:                                               ; preds = %28, %48, %29
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_error_clear_last(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %5 = load %1*, %1** %3, align 8
  %6 = getelementptr inbounds %1, %1* %5, i32 0, i32 4
  %7 = getelementptr inbounds %29, %29* %6, i32 0, i32 2
  %8 = bitcast %32* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = xor i1 %10, true
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 1)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %25

18:                                               ; preds = %2
  %19 = load %1*, %1** %3, align 8
  %20 = getelementptr inbounds %1, %1* %19, i32 0, i32 4
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 2
  %22 = bitcast %32* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %25

25:                                               ; preds = %18, %17
  %26 = phi i32 [ 0, %17 ], [ %24, %18 ]
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  br label %39

29:                                               ; preds = %25
  %30 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 58), align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %32, label %39

32:                                               ; preds = %29
  store i32 0, i32* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 57), align 8
  store i32 0, i32* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 60), align 8
  %33 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 58), align 8
  call void @free(i8* %33) #13
  store i8* null, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 58), align 8
  %34 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 59), align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 59), align 8
  call void @free(i8* %37) #13
  store i8* null, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 59), align 8
  br label %38

38:                                               ; preds = %36, %32
  br label %39

39:                                               ; preds = %28, %38, %29
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_call_user_func(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29, align 8
  %6 = alloca %38, align 8
  %7 = alloca %39, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %29*, align 8
  %23 = alloca %29*, align 8
  %24 = alloca %82*, align 8
  %25 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %26 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %26) #13
  %27 = bitcast %38* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %27) #13
  %28 = bitcast %39* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %28) #13
  br label %29

29:                                               ; preds = %2
  %30 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 0, i32* %8, align 4
  %31 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %9, align 4
  %32 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 -1, i32* %10, align 4
  %33 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = load %1*, %1** %3, align 8
  %35 = getelementptr inbounds %1, %1* %34, i32 0, i32 4
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 2
  %37 = bitcast %32* %36 to i32*
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %11, align 4
  %39 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  %40 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store %29* null, %29** %14, align 8
  %42 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %15, align 4
  %43 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %44 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %19, align 4
  %45 = load i32, i32* %12, align 4
  %46 = load %29*, %29** %13, align 8
  %47 = load %29*, %29** %14, align 8
  %48 = load i32, i32* %15, align 4
  %49 = load i8*, i8** %16, align 8
  %50 = load i8, i8* %17, align 1
  %51 = load i8, i8* %18, align 1
  br label %52

52:                                               ; preds = %29
  %53 = load i32, i32* %11, align 4
  %54 = load i32, i32* %9, align 4
  %55 = icmp slt i32 %53, %54
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = call i64 @llvm.expect.i64(i64 %59, i64 0)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %81, label %62

62:                                               ; preds = %52
  %63 = load i32, i32* %11, align 4
  %64 = load i32, i32* %10, align 4
  %65 = icmp sgt i32 %63, %64
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 0)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %85

72:                                               ; preds = %62
  %73 = load i32, i32* %10, align 4
  %74 = icmp sge i32 %73, 0
  %75 = xor i1 %74, true
  %76 = xor i1 %75, true
  %77 = zext i1 %76 to i32
  %78 = sext i32 %77 to i64
  %79 = call i64 @llvm.expect.i64(i64 %78, i64 1)
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %72, %52
  %82 = load i32, i32* %11, align 4
  %83 = load i32, i32* %9, align 4
  %84 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %82, i32 %83, i32 %84)
  store i32 1, i32* %19, align 4
  br label %211

85:                                               ; preds = %72, %62
  store i32 0, i32* %12, align 4
  %86 = load %1*, %1** %3, align 8
  %87 = bitcast %1* %86 to %29*
  %88 = getelementptr inbounds %29, %29* %87, i64 4
  store %29* %88, %29** %13, align 8
  %89 = load i32, i32* %12, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %12, align 4
  br label %91

91:                                               ; preds = %85
  %92 = load i32, i32* %12, align 4
  %93 = load i32, i32* %9, align 4
  %94 = icmp sle i32 %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i8, i8* %18, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp eq i32 %97, 1
  br label %99

99:                                               ; preds = %95, %91
  %100 = phi i1 [ true, %91 ], [ %98, %95 ]
  %101 = xor i1 %100, true
  %102 = zext i1 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = call i64 @llvm.expect.i64(i64 %103, i64 0)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %99
  unreachable

107:                                              ; preds = %99
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  br label %110

110:                                              ; preds = %109
  %111 = load i32, i32* %12, align 4
  %112 = load i32, i32* %9, align 4
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = load i8, i8* %18, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %116, 0
  br label %118

118:                                              ; preds = %114, %110
  %119 = phi i1 [ true, %110 ], [ %117, %114 ]
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = call i64 @llvm.expect.i64(i64 %122, i64 0)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %118
  unreachable

126:                                              ; preds = %118
  br label %127

127:                                              ; preds = %126
  br label %128

128:                                              ; preds = %127
  %129 = load i8, i8* %18, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %128
  %132 = load i32, i32* %12, align 4
  %133 = load i32, i32* %11, align 4
  %134 = icmp sgt i32 %132, %133
  %135 = xor i1 %134, true
  %136 = xor i1 %135, true
  %137 = zext i1 %136 to i32
  %138 = sext i32 %137 to i64
  %139 = call i64 @llvm.expect.i64(i64 %138, i64 0)
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %131
  br label %211

142:                                              ; preds = %131
  br label %143

143:                                              ; preds = %142, %128
  %144 = load %29*, %29** %13, align 8
  %145 = getelementptr inbounds %29, %29* %144, i32 1
  store %29* %145, %29** %13, align 8
  %146 = load %29*, %29** %13, align 8
  store %29* %146, %29** %14, align 8
  %147 = load %29*, %29** %14, align 8
  %148 = call i32 @1479(%29* %147, %38* %6, %39* %7, i32 0, i8** %16)
  %149 = icmp ne i32 %148, 0
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i32
  %154 = sext i32 %153 to i64
  %155 = call i64 @llvm.expect.i64(i64 %154, i64 0)
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %162

157:                                              ; preds = %143
  %158 = load i8*, i8** %16, align 8
  %159 = icmp ne i8* %158, null
  br i1 %159, label %161, label %160

160:                                              ; preds = %157
  store i32 4, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %211

161:                                              ; preds = %157
  store i32 2, i32* %19, align 4
  br label %211

162:                                              ; preds = %143
  %163 = load i8*, i8** %16, align 8
  %164 = icmp ne i8* %163, null
  %165 = xor i1 %164, true
  %166 = xor i1 %165, true
  %167 = zext i1 %166 to i32
  %168 = sext i32 %167 to i64
  %169 = call i64 @llvm.expect.i64(i64 %168, i64 0)
  %170 = icmp ne i64 %169, 0
  br i1 %170, label %171, label %174

171:                                              ; preds = %162
  %172 = load i32, i32* %12, align 4
  %173 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 8192, i32 %172, i8* %173)
  br label %174

174:                                              ; preds = %171, %162
  br label %175

175:                                              ; preds = %174
  br label %176

176:                                              ; preds = %175
  %177 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %177) #13
  %178 = load i32, i32* %11, align 4
  %179 = load i32, i32* %12, align 4
  %180 = sub nsw i32 %178, %179
  %181 = sub nsw i32 %180, 0
  store i32 %181, i32* %20, align 4
  %182 = load i32, i32* %20, align 4
  %183 = icmp sgt i32 %182, 0
  %184 = xor i1 %183, true
  %185 = xor i1 %184, true
  %186 = zext i1 %185 to i32
  %187 = sext i32 %186 to i64
  %188 = call i64 @llvm.expect.i64(i64 %187, i64 1)
  %189 = icmp ne i64 %188, 0
  br i1 %189, label %190, label %203

190:                                              ; preds = %176
  %191 = load %29*, %29** %13, align 8
  %192 = getelementptr inbounds %29, %29* %191, i64 1
  %193 = getelementptr inbounds %38, %38* %6, i32 0, i32 3
  store %29* %192, %29** %193, align 8
  %194 = load i32, i32* %20, align 4
  %195 = getelementptr inbounds %38, %38* %6, i32 0, i32 6
  store i32 %194, i32* %195, align 4
  %196 = load i32, i32* %20, align 4
  %197 = load i32, i32* %12, align 4
  %198 = add nsw i32 %197, %196
  store i32 %198, i32* %12, align 4
  %199 = load i32, i32* %20, align 4
  %200 = load %29*, %29** %13, align 8
  %201 = sext i32 %199 to i64
  %202 = getelementptr inbounds %29, %29* %200, i64 %201
  store %29* %202, %29** %13, align 8
  br label %206

203:                                              ; preds = %176
  %204 = getelementptr inbounds %38, %38* %6, i32 0, i32 3
  store %29* null, %29** %204, align 8
  %205 = getelementptr inbounds %38, %38* %6, i32 0, i32 6
  store i32 0, i32* %205, align 4
  br label %206

206:                                              ; preds = %203, %190
  %207 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %207) #13
  br label %208

208:                                              ; preds = %206
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  br label %211

211:                                              ; preds = %210, %161, %160, %141, %81
  %212 = load i32, i32* %19, align 4
  %213 = icmp ne i32 %212, 0
  %214 = xor i1 %213, true
  %215 = xor i1 %214, true
  %216 = zext i1 %215 to i32
  %217 = sext i32 %216 to i64
  %218 = call i64 @llvm.expect.i64(i64 %217, i64 0)
  %219 = icmp ne i64 %218, 0
  br i1 %219, label %220, label %243

220:                                              ; preds = %211
  %221 = load i32, i32* %19, align 4
  %222 = icmp eq i32 %221, 2
  br i1 %222, label %223, label %226

223:                                              ; preds = %220
  %224 = load i32, i32* %12, align 4
  %225 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %224, i8* %225)
  br label %242

226:                                              ; preds = %220
  %227 = load i32, i32* %19, align 4
  %228 = icmp eq i32 %227, 3
  br i1 %228, label %229, label %233

229:                                              ; preds = %226
  %230 = load i32, i32* %12, align 4
  %231 = load i8*, i8** %16, align 8
  %232 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %230, i8* %231, %29* %232)
  br label %241

233:                                              ; preds = %226
  %234 = load i32, i32* %19, align 4
  %235 = icmp eq i32 %234, 4
  br i1 %235, label %236, label %240

236:                                              ; preds = %233
  %237 = load i32, i32* %12, align 4
  %238 = load i32, i32* %15, align 4
  %239 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %237, i32 %238, %29* %239)
  br label %240

240:                                              ; preds = %236, %233
  br label %241

241:                                              ; preds = %240, %229
  br label %242

242:                                              ; preds = %241, %223
  store i32 1, i32* %21, align 4
  br label %244

243:                                              ; preds = %211
  store i32 0, i32* %21, align 4
  br label %244

244:                                              ; preds = %243, %242
  %245 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %245) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %246 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %246) #13
  %247 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #13
  %248 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #13
  %249 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #13
  %250 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %250) #13
  %251 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %251) #13
  %252 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %252) #13
  %253 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %253) #13
  %254 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %254) #13
  %255 = load i32, i32* %21, align 4
  switch i32 %255, label %304 [
    i32 0, label %256
  ]

256:                                              ; preds = %244
  br label %257

257:                                              ; preds = %256
  br label %258

258:                                              ; preds = %257
  %259 = getelementptr inbounds %38, %38* %6, i32 0, i32 2
  store %29* %5, %29** %259, align 8
  %260 = call i32 @zend_call_function(%38* %6, %39* %7)
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %303

262:                                              ; preds = %258
  %263 = call zeroext i8 @1468(%29* %5)
  %264 = zext i8 %263 to i32
  %265 = icmp ne i32 %264, 0
  br i1 %265, label %266, label %303

266:                                              ; preds = %262
  %267 = call zeroext i8 @1468(%29* %5)
  %268 = zext i8 %267 to i32
  %269 = icmp eq i32 %268, 10
  br i1 %269, label %270, label %271

270:                                              ; preds = %266
  call void @1480(%29* %5)
  br label %271

271:                                              ; preds = %270, %266
  br label %272

272:                                              ; preds = %271
  %273 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %273) #13
  %274 = load %29*, %29** %4, align 8
  store %29* %274, %29** %22, align 8
  %275 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %275) #13
  store %29* %5, %29** %23, align 8
  %276 = bitcast %82** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %276) #13
  %277 = load %29*, %29** %23, align 8
  %278 = getelementptr inbounds %29, %29* %277, i32 0, i32 0
  %279 = bitcast %30* %278 to %82**
  %280 = load %82*, %82** %279, align 8
  store %82* %280, %82** %24, align 8
  %281 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %281) #13
  %282 = load %29*, %29** %23, align 8
  %283 = getelementptr inbounds %29, %29* %282, i32 0, i32 1
  %284 = bitcast %31* %283 to i32*
  %285 = load i32, i32* %284, align 8
  store i32 %285, i32* %25, align 4
  br label %286

286:                                              ; preds = %272
  %287 = load %82*, %82** %24, align 8
  %288 = load %29*, %29** %22, align 8
  %289 = getelementptr inbounds %29, %29* %288, i32 0, i32 0
  %290 = bitcast %30* %289 to %82**
  store %82* %287, %82** %290, align 8
  %291 = load i32, i32* %25, align 4
  %292 = load %29*, %29** %22, align 8
  %293 = getelementptr inbounds %29, %29* %292, i32 0, i32 1
  %294 = bitcast %31* %293 to i32*
  store i32 %291, i32* %294, align 8
  br label %295

295:                                              ; preds = %286
  br label %296

296:                                              ; preds = %295
  %297 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %297) #13
  %298 = bitcast %82** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %298) #13
  %299 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %299) #13
  %300 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %300) #13
  br label %301

301:                                              ; preds = %296
  br label %302

302:                                              ; preds = %301
  br label %303

303:                                              ; preds = %302, %262, %258
  store i32 0, i32* %21, align 4
  br label %304

304:                                              ; preds = %303, %244
  %305 = bitcast %39* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %305) #13
  %306 = bitcast %38* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %306) #13
  %307 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %307) #13
  %308 = load i32, i32* %21, align 4
  switch i32 %308, label %310 [
    i32 0, label %309
    i32 1, label %309
  ]

309:                                              ; preds = %304, %304
  ret void

310:                                              ; preds = %304
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_call_user_func_array(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %29, align 8
  %7 = alloca %38, align 8
  %8 = alloca %39, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca %29*, align 8
  %22 = alloca i32, align 4
  %23 = alloca %29*, align 8
  %24 = alloca %29*, align 8
  %25 = alloca %82*, align 8
  %26 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %27 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  %28 = bitcast %29* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %28) #13
  %29 = bitcast %38* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %29) #13
  %30 = bitcast %39* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %30) #13
  br label %31

31:                                               ; preds = %2
  %32 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 0, i32* %9, align 4
  %33 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 2, i32* %10, align 4
  %34 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 2, i32* %11, align 4
  %35 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = load %1*, %1** %3, align 8
  %37 = getelementptr inbounds %1, %1* %36, i32 0, i32 4
  %38 = getelementptr inbounds %29, %29* %37, i32 0, i32 2
  %39 = bitcast %32* %38 to i32*
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %12, align 4
  %41 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %42 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  %43 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store %29* null, %29** %15, align 8
  %44 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %16, align 4
  %45 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %46 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #13
  store i32 0, i32* %20, align 4
  %47 = load i32, i32* %13, align 4
  %48 = load %29*, %29** %14, align 8
  %49 = load %29*, %29** %15, align 8
  %50 = load i32, i32* %16, align 4
  %51 = load i8*, i8** %17, align 8
  %52 = load i8, i8* %18, align 1
  %53 = load i8, i8* %19, align 1
  br label %54

54:                                               ; preds = %31
  %55 = load i32, i32* %12, align 4
  %56 = load i32, i32* %10, align 4
  %57 = icmp slt i32 %55, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = call i64 @llvm.expect.i64(i64 %61, i64 0)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %54
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* %11, align 4
  %67 = icmp sgt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = load i32, i32* %11, align 4
  %76 = icmp sge i32 %75, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = call i64 @llvm.expect.i64(i64 %80, i64 1)
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %74, %54
  %84 = load i32, i32* %12, align 4
  %85 = load i32, i32* %10, align 4
  %86 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %84, i32 %85, i32 %86)
  store i32 1, i32* %20, align 4
  br label %317

87:                                               ; preds = %74, %64
  store i32 0, i32* %13, align 4
  %88 = load %1*, %1** %3, align 8
  %89 = bitcast %1* %88 to %29*
  %90 = getelementptr inbounds %29, %29* %89, i64 4
  store %29* %90, %29** %14, align 8
  %91 = load i32, i32* %13, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %13, align 4
  br label %93

93:                                               ; preds = %87
  %94 = load i32, i32* %13, align 4
  %95 = load i32, i32* %10, align 4
  %96 = icmp sle i32 %94, %95
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = load i8, i8* %19, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp eq i32 %99, 1
  br label %101

101:                                              ; preds = %97, %93
  %102 = phi i1 [ true, %93 ], [ %100, %97 ]
  %103 = xor i1 %102, true
  %104 = zext i1 %103 to i32
  %105 = sext i32 %104 to i64
  %106 = call i64 @llvm.expect.i64(i64 %105, i64 0)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %101
  unreachable

109:                                              ; preds = %101
  br label %110

110:                                              ; preds = %109
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %10, align 4
  %115 = icmp sgt i32 %113, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = load i8, i8* %19, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp eq i32 %118, 0
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i1 [ true, %112 ], [ %119, %116 ]
  %122 = xor i1 %121, true
  %123 = zext i1 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = call i64 @llvm.expect.i64(i64 %124, i64 0)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %120
  unreachable

128:                                              ; preds = %120
  br label %129

129:                                              ; preds = %128
  br label %130

130:                                              ; preds = %129
  %131 = load i8, i8* %19, align 1
  %132 = icmp ne i8 %131, 0
  br i1 %132, label %133, label %145

133:                                              ; preds = %130
  %134 = load i32, i32* %13, align 4
  %135 = load i32, i32* %12, align 4
  %136 = icmp sgt i32 %134, %135
  %137 = xor i1 %136, true
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = sext i32 %139 to i64
  %141 = call i64 @llvm.expect.i64(i64 %140, i64 0)
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %133
  br label %317

144:                                              ; preds = %133
  br label %145

145:                                              ; preds = %144, %130
  %146 = load %29*, %29** %14, align 8
  %147 = getelementptr inbounds %29, %29* %146, i32 1
  store %29* %147, %29** %14, align 8
  %148 = load %29*, %29** %14, align 8
  store %29* %148, %29** %15, align 8
  %149 = load %29*, %29** %15, align 8
  %150 = call i32 @1479(%29* %149, %38* %7, %39* %8, i32 0, i8** %17)
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  %156 = sext i32 %155 to i64
  %157 = call i64 @llvm.expect.i64(i64 %156, i64 0)
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %164

159:                                              ; preds = %145
  %160 = load i8*, i8** %17, align 8
  %161 = icmp ne i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %159
  store i32 4, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %317

163:                                              ; preds = %159
  store i32 2, i32* %20, align 4
  br label %317

164:                                              ; preds = %145
  %165 = load i8*, i8** %17, align 8
  %166 = icmp ne i8* %165, null
  %167 = xor i1 %166, true
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  %170 = sext i32 %169 to i64
  %171 = call i64 @llvm.expect.i64(i64 %170, i64 0)
  %172 = icmp ne i64 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %164
  %174 = load i32, i32* %13, align 4
  %175 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 8192, i32 %174, i8* %175)
  br label %176

176:                                              ; preds = %173, %164
  br label %177

177:                                              ; preds = %176
  %178 = load i32, i32* %13, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %13, align 4
  br label %180

180:                                              ; preds = %177
  %181 = load i32, i32* %13, align 4
  %182 = load i32, i32* %10, align 4
  %183 = icmp sle i32 %181, %182
  br i1 %183, label %188, label %184

184:                                              ; preds = %180
  %185 = load i8, i8* %19, align 1
  %186 = zext i8 %185 to i32
  %187 = icmp eq i32 %186, 1
  br label %188

188:                                              ; preds = %184, %180
  %189 = phi i1 [ true, %180 ], [ %187, %184 ]
  %190 = xor i1 %189, true
  %191 = zext i1 %190 to i32
  %192 = sext i32 %191 to i64
  %193 = call i64 @llvm.expect.i64(i64 %192, i64 0)
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %195, label %196

195:                                              ; preds = %188
  unreachable

196:                                              ; preds = %188
  br label %197

197:                                              ; preds = %196
  br label %198

198:                                              ; preds = %197
  br label %199

199:                                              ; preds = %198
  %200 = load i32, i32* %13, align 4
  %201 = load i32, i32* %10, align 4
  %202 = icmp sgt i32 %200, %201
  br i1 %202, label %207, label %203

203:                                              ; preds = %199
  %204 = load i8, i8* %19, align 1
  %205 = zext i8 %204 to i32
  %206 = icmp eq i32 %205, 0
  br label %207

207:                                              ; preds = %203, %199
  %208 = phi i1 [ true, %199 ], [ %206, %203 ]
  %209 = xor i1 %208, true
  %210 = zext i1 %209 to i32
  %211 = sext i32 %210 to i64
  %212 = call i64 @llvm.expect.i64(i64 %211, i64 0)
  %213 = icmp ne i64 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %207
  unreachable

215:                                              ; preds = %207
  br label %216

216:                                              ; preds = %215
  br label %217

217:                                              ; preds = %216
  %218 = load i8, i8* %19, align 1
  %219 = icmp ne i8 %218, 0
  br i1 %219, label %220, label %232

220:                                              ; preds = %217
  %221 = load i32, i32* %13, align 4
  %222 = load i32, i32* %12, align 4
  %223 = icmp sgt i32 %221, %222
  %224 = xor i1 %223, true
  %225 = xor i1 %224, true
  %226 = zext i1 %225 to i32
  %227 = sext i32 %226 to i64
  %228 = call i64 @llvm.expect.i64(i64 %227, i64 0)
  %229 = icmp ne i64 %228, 0
  br i1 %229, label %230, label %231

230:                                              ; preds = %220
  br label %317

231:                                              ; preds = %220
  br label %232

232:                                              ; preds = %231, %217
  %233 = load %29*, %29** %14, align 8
  %234 = getelementptr inbounds %29, %29* %233, i32 1
  store %29* %234, %29** %14, align 8
  %235 = load %29*, %29** %14, align 8
  store %29* %235, %29** %15, align 8
  br label %236

236:                                              ; preds = %232
  %237 = load %29*, %29** %15, align 8
  %238 = call zeroext i8 @1468(%29* %237)
  %239 = zext i8 %238 to i32
  %240 = icmp eq i32 %239, 10
  %241 = xor i1 %240, true
  %242 = xor i1 %241, true
  %243 = zext i1 %242 to i32
  %244 = sext i32 %243 to i64
  %245 = call i64 @llvm.expect.i64(i64 %244, i64 0)
  %246 = icmp ne i64 %245, 0
  br i1 %246, label %247, label %253

247:                                              ; preds = %236
  %248 = load %29*, %29** %15, align 8
  %249 = getelementptr inbounds %29, %29* %248, i32 0, i32 0
  %250 = bitcast %30* %249 to %91**
  %251 = load %91*, %91** %250, align 8
  %252 = getelementptr inbounds %91, %91* %251, i32 0, i32 1
  store %29* %252, %29** %15, align 8
  br label %253

253:                                              ; preds = %247, %236
  br label %254

254:                                              ; preds = %253
  br label %255

255:                                              ; preds = %254
  br label %256

256:                                              ; preds = %255
  %257 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %257) #13
  %258 = load %29*, %29** %15, align 8
  store %29* %258, %29** %21, align 8
  br label %259

259:                                              ; preds = %256
  %260 = load %29*, %29** %21, align 8
  %261 = call zeroext i8 @1468(%29* %260)
  %262 = zext i8 %261 to i32
  %263 = icmp ne i32 %262, 10
  %264 = xor i1 %263, true
  %265 = zext i1 %264 to i32
  %266 = sext i32 %265 to i64
  %267 = call i64 @llvm.expect.i64(i64 %266, i64 0)
  %268 = icmp ne i64 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %259
  unreachable

270:                                              ; preds = %259
  br label %271

271:                                              ; preds = %270
  br label %272

272:                                              ; preds = %271
  %273 = load %29*, %29** %21, align 8
  %274 = getelementptr inbounds %29, %29* %273, i32 0, i32 1
  %275 = bitcast %31* %274 to %83*
  %276 = getelementptr inbounds %83, %83* %275, i32 0, i32 1
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = and i32 %278, 16
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %300

281:                                              ; preds = %272
  %282 = load %29*, %29** %21, align 8
  %283 = call i32 @1481(%29* %282)
  %284 = icmp ugt i32 %283, 1
  br i1 %284, label %285, label %299

285:                                              ; preds = %281
  %286 = load %29*, %29** %21, align 8
  %287 = getelementptr inbounds %29, %29* %286, i32 0, i32 1
  %288 = bitcast %31* %287 to %83*
  %289 = getelementptr inbounds %83, %83* %288, i32 0, i32 1
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i32
  %292 = and i32 %291, 4
  %293 = icmp ne i32 %292, 0
  br i1 %293, label %294, label %297

294:                                              ; preds = %285
  %295 = load %29*, %29** %21, align 8
  %296 = call i32 @1482(%29* %295)
  br label %297

297:                                              ; preds = %294, %285
  %298 = load %29*, %29** %21, align 8
  call void @_zval_copy_ctor_func(%29* %298)
  br label %299

299:                                              ; preds = %297, %281
  br label %300

300:                                              ; preds = %299, %272
  %301 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %301) #13
  br label %302

302:                                              ; preds = %300
  br label %303

303:                                              ; preds = %302
  %304 = load %29*, %29** %15, align 8
  %305 = call i32 @1467(%29* %304, %29** %5, i32 0, i32 0)
  %306 = icmp ne i32 %305, 0
  %307 = xor i1 %306, true
  %308 = xor i1 %307, true
  %309 = xor i1 %308, true
  %310 = zext i1 %309 to i32
  %311 = sext i32 %310 to i64
  %312 = call i64 @llvm.expect.i64(i64 %311, i64 0)
  %313 = icmp ne i64 %312, 0
  br i1 %313, label %314, label %315

314:                                              ; preds = %303
  store i32 3, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %317

315:                                              ; preds = %303
  br label %316

316:                                              ; preds = %315
  br label %317

317:                                              ; preds = %316, %314, %230, %163, %162, %143, %83
  %318 = load i32, i32* %20, align 4
  %319 = icmp ne i32 %318, 0
  %320 = xor i1 %319, true
  %321 = xor i1 %320, true
  %322 = zext i1 %321 to i32
  %323 = sext i32 %322 to i64
  %324 = call i64 @llvm.expect.i64(i64 %323, i64 0)
  %325 = icmp ne i64 %324, 0
  br i1 %325, label %326, label %349

326:                                              ; preds = %317
  %327 = load i32, i32* %20, align 4
  %328 = icmp eq i32 %327, 2
  br i1 %328, label %329, label %332

329:                                              ; preds = %326
  %330 = load i32, i32* %13, align 4
  %331 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %330, i8* %331)
  br label %348

332:                                              ; preds = %326
  %333 = load i32, i32* %20, align 4
  %334 = icmp eq i32 %333, 3
  br i1 %334, label %335, label %339

335:                                              ; preds = %332
  %336 = load i32, i32* %13, align 4
  %337 = load i8*, i8** %17, align 8
  %338 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %336, i8* %337, %29* %338)
  br label %347

339:                                              ; preds = %332
  %340 = load i32, i32* %20, align 4
  %341 = icmp eq i32 %340, 4
  br i1 %341, label %342, label %346

342:                                              ; preds = %339
  %343 = load i32, i32* %13, align 4
  %344 = load i32, i32* %16, align 4
  %345 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %343, i32 %344, %29* %345)
  br label %346

346:                                              ; preds = %342, %339
  br label %347

347:                                              ; preds = %346, %335
  br label %348

348:                                              ; preds = %347, %329
  store i32 1, i32* %22, align 4
  br label %350

349:                                              ; preds = %317
  store i32 0, i32* %22, align 4
  br label %350

350:                                              ; preds = %349, %348
  %351 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %351) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %352 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %352) #13
  %353 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %353) #13
  %354 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %354) #13
  %355 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %355) #13
  %356 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %356) #13
  %357 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %357) #13
  %358 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %358) #13
  %359 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %359) #13
  %360 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %360) #13
  %361 = load i32, i32* %22, align 4
  switch i32 %361, label %412 [
    i32 0, label %362
  ]

362:                                              ; preds = %350
  br label %363

363:                                              ; preds = %362
  br label %364

364:                                              ; preds = %363
  %365 = load %29*, %29** %5, align 8
  %366 = call i32 @zend_fcall_info_args(%38* %7, %29* %365)
  %367 = getelementptr inbounds %38, %38* %7, i32 0, i32 2
  store %29* %6, %29** %367, align 8
  %368 = call i32 @zend_call_function(%38* %7, %39* %8)
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %411

370:                                              ; preds = %364
  %371 = call zeroext i8 @1468(%29* %6)
  %372 = zext i8 %371 to i32
  %373 = icmp ne i32 %372, 0
  br i1 %373, label %374, label %411

374:                                              ; preds = %370
  %375 = call zeroext i8 @1468(%29* %6)
  %376 = zext i8 %375 to i32
  %377 = icmp eq i32 %376, 10
  br i1 %377, label %378, label %379

378:                                              ; preds = %374
  call void @1480(%29* %6)
  br label %379

379:                                              ; preds = %378, %374
  br label %380

380:                                              ; preds = %379
  %381 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %381) #13
  %382 = load %29*, %29** %4, align 8
  store %29* %382, %29** %23, align 8
  %383 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %383) #13
  store %29* %6, %29** %24, align 8
  %384 = bitcast %82** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %384) #13
  %385 = load %29*, %29** %24, align 8
  %386 = getelementptr inbounds %29, %29* %385, i32 0, i32 0
  %387 = bitcast %30* %386 to %82**
  %388 = load %82*, %82** %387, align 8
  store %82* %388, %82** %25, align 8
  %389 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %389) #13
  %390 = load %29*, %29** %24, align 8
  %391 = getelementptr inbounds %29, %29* %390, i32 0, i32 1
  %392 = bitcast %31* %391 to i32*
  %393 = load i32, i32* %392, align 8
  store i32 %393, i32* %26, align 4
  br label %394

394:                                              ; preds = %380
  %395 = load %82*, %82** %25, align 8
  %396 = load %29*, %29** %23, align 8
  %397 = getelementptr inbounds %29, %29* %396, i32 0, i32 0
  %398 = bitcast %30* %397 to %82**
  store %82* %395, %82** %398, align 8
  %399 = load i32, i32* %26, align 4
  %400 = load %29*, %29** %23, align 8
  %401 = getelementptr inbounds %29, %29* %400, i32 0, i32 1
  %402 = bitcast %31* %401 to i32*
  store i32 %399, i32* %402, align 8
  br label %403

403:                                              ; preds = %394
  br label %404

404:                                              ; preds = %403
  %405 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %405) #13
  %406 = bitcast %82** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %406) #13
  %407 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %407) #13
  %408 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %408) #13
  br label %409

409:                                              ; preds = %404
  br label %410

410:                                              ; preds = %409
  br label %411

411:                                              ; preds = %410, %370, %364
  call void @zend_fcall_info_args_clear(%38* %7, i32 1)
  store i32 0, i32* %22, align 4
  br label %412

412:                                              ; preds = %411, %350
  %413 = bitcast %39* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %413) #13
  %414 = bitcast %38* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %414) #13
  %415 = bitcast %29* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %415) #13
  %416 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %416) #13
  %417 = load i32, i32* %22, align 4
  switch i32 %417, label %419 [
    i32 0, label %418
    i32 1, label %418
  ]

418:                                              ; preds = %412, %412
  ret void

419:                                              ; preds = %412
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_forward_static_call(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29, align 8
  %6 = alloca %38, align 8
  %7 = alloca %39, align 8
  %8 = alloca %6*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %29*, align 8
  %24 = alloca %29*, align 8
  %25 = alloca %82*, align 8
  %26 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %27 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %27) #13
  %28 = bitcast %38* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %28) #13
  %29 = bitcast %39* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %29) #13
  %30 = bitcast %6** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  br label %31

31:                                               ; preds = %2
  %32 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 0, i32* %9, align 4
  %33 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 1, i32* %10, align 4
  %34 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 -1, i32* %11, align 4
  %35 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = load %1*, %1** %3, align 8
  %37 = getelementptr inbounds %1, %1* %36, i32 0, i32 4
  %38 = getelementptr inbounds %29, %29* %37, i32 0, i32 2
  %39 = bitcast %32* %38 to i32*
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %12, align 4
  %41 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %42 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  %43 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store %29* null, %29** %15, align 8
  %44 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %16, align 4
  %45 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %46 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #13
  store i32 0, i32* %20, align 4
  %47 = load i32, i32* %13, align 4
  %48 = load %29*, %29** %14, align 8
  %49 = load %29*, %29** %15, align 8
  %50 = load i32, i32* %16, align 4
  %51 = load i8*, i8** %17, align 8
  %52 = load i8, i8* %18, align 1
  %53 = load i8, i8* %19, align 1
  br label %54

54:                                               ; preds = %31
  %55 = load i32, i32* %12, align 4
  %56 = load i32, i32* %10, align 4
  %57 = icmp slt i32 %55, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = call i64 @llvm.expect.i64(i64 %61, i64 0)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %54
  %65 = load i32, i32* %12, align 4
  %66 = load i32, i32* %11, align 4
  %67 = icmp sgt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = load i32, i32* %11, align 4
  %76 = icmp sge i32 %75, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = call i64 @llvm.expect.i64(i64 %80, i64 1)
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %74, %54
  %84 = load i32, i32* %12, align 4
  %85 = load i32, i32* %10, align 4
  %86 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %84, i32 %85, i32 %86)
  store i32 1, i32* %20, align 4
  br label %213

87:                                               ; preds = %74, %64
  store i32 0, i32* %13, align 4
  %88 = load %1*, %1** %3, align 8
  %89 = bitcast %1* %88 to %29*
  %90 = getelementptr inbounds %29, %29* %89, i64 4
  store %29* %90, %29** %14, align 8
  %91 = load i32, i32* %13, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %13, align 4
  br label %93

93:                                               ; preds = %87
  %94 = load i32, i32* %13, align 4
  %95 = load i32, i32* %10, align 4
  %96 = icmp sle i32 %94, %95
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = load i8, i8* %19, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp eq i32 %99, 1
  br label %101

101:                                              ; preds = %97, %93
  %102 = phi i1 [ true, %93 ], [ %100, %97 ]
  %103 = xor i1 %102, true
  %104 = zext i1 %103 to i32
  %105 = sext i32 %104 to i64
  %106 = call i64 @llvm.expect.i64(i64 %105, i64 0)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %101
  unreachable

109:                                              ; preds = %101
  br label %110

110:                                              ; preds = %109
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %10, align 4
  %115 = icmp sgt i32 %113, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = load i8, i8* %19, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp eq i32 %118, 0
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i1 [ true, %112 ], [ %119, %116 ]
  %122 = xor i1 %121, true
  %123 = zext i1 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = call i64 @llvm.expect.i64(i64 %124, i64 0)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %120
  unreachable

128:                                              ; preds = %120
  br label %129

129:                                              ; preds = %128
  br label %130

130:                                              ; preds = %129
  %131 = load i8, i8* %19, align 1
  %132 = icmp ne i8 %131, 0
  br i1 %132, label %133, label %145

133:                                              ; preds = %130
  %134 = load i32, i32* %13, align 4
  %135 = load i32, i32* %12, align 4
  %136 = icmp sgt i32 %134, %135
  %137 = xor i1 %136, true
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = sext i32 %139 to i64
  %141 = call i64 @llvm.expect.i64(i64 %140, i64 0)
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %133
  br label %213

144:                                              ; preds = %133
  br label %145

145:                                              ; preds = %144, %130
  %146 = load %29*, %29** %14, align 8
  %147 = getelementptr inbounds %29, %29* %146, i32 1
  store %29* %147, %29** %14, align 8
  %148 = load %29*, %29** %14, align 8
  store %29* %148, %29** %15, align 8
  %149 = load %29*, %29** %15, align 8
  %150 = call i32 @1479(%29* %149, %38* %6, %39* %7, i32 0, i8** %17)
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  %156 = sext i32 %155 to i64
  %157 = call i64 @llvm.expect.i64(i64 %156, i64 0)
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %164

159:                                              ; preds = %145
  %160 = load i8*, i8** %17, align 8
  %161 = icmp ne i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %159
  store i32 4, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %213

163:                                              ; preds = %159
  store i32 2, i32* %20, align 4
  br label %213

164:                                              ; preds = %145
  %165 = load i8*, i8** %17, align 8
  %166 = icmp ne i8* %165, null
  %167 = xor i1 %166, true
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  %170 = sext i32 %169 to i64
  %171 = call i64 @llvm.expect.i64(i64 %170, i64 0)
  %172 = icmp ne i64 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %164
  %174 = load i32, i32* %13, align 4
  %175 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 8192, i32 %174, i8* %175)
  br label %176

176:                                              ; preds = %173, %164
  br label %177

177:                                              ; preds = %176
  br label %178

178:                                              ; preds = %177
  %179 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %179) #13
  %180 = load i32, i32* %12, align 4
  %181 = load i32, i32* %13, align 4
  %182 = sub nsw i32 %180, %181
  %183 = sub nsw i32 %182, 0
  store i32 %183, i32* %21, align 4
  %184 = load i32, i32* %21, align 4
  %185 = icmp sgt i32 %184, 0
  %186 = xor i1 %185, true
  %187 = xor i1 %186, true
  %188 = zext i1 %187 to i32
  %189 = sext i32 %188 to i64
  %190 = call i64 @llvm.expect.i64(i64 %189, i64 1)
  %191 = icmp ne i64 %190, 0
  br i1 %191, label %192, label %205

192:                                              ; preds = %178
  %193 = load %29*, %29** %14, align 8
  %194 = getelementptr inbounds %29, %29* %193, i64 1
  %195 = getelementptr inbounds %38, %38* %6, i32 0, i32 3
  store %29* %194, %29** %195, align 8
  %196 = load i32, i32* %21, align 4
  %197 = getelementptr inbounds %38, %38* %6, i32 0, i32 6
  store i32 %196, i32* %197, align 4
  %198 = load i32, i32* %21, align 4
  %199 = load i32, i32* %13, align 4
  %200 = add nsw i32 %199, %198
  store i32 %200, i32* %13, align 4
  %201 = load i32, i32* %21, align 4
  %202 = load %29*, %29** %14, align 8
  %203 = sext i32 %201 to i64
  %204 = getelementptr inbounds %29, %29* %202, i64 %203
  store %29* %204, %29** %14, align 8
  br label %208

205:                                              ; preds = %178
  %206 = getelementptr inbounds %38, %38* %6, i32 0, i32 3
  store %29* null, %29** %206, align 8
  %207 = getelementptr inbounds %38, %38* %6, i32 0, i32 6
  store i32 0, i32* %207, align 4
  br label %208

208:                                              ; preds = %205, %192
  %209 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %209) #13
  br label %210

210:                                              ; preds = %208
  br label %211

211:                                              ; preds = %210
  br label %212

212:                                              ; preds = %211
  br label %213

213:                                              ; preds = %212, %163, %162, %143, %83
  %214 = load i32, i32* %20, align 4
  %215 = icmp ne i32 %214, 0
  %216 = xor i1 %215, true
  %217 = xor i1 %216, true
  %218 = zext i1 %217 to i32
  %219 = sext i32 %218 to i64
  %220 = call i64 @llvm.expect.i64(i64 %219, i64 0)
  %221 = icmp ne i64 %220, 0
  br i1 %221, label %222, label %245

222:                                              ; preds = %213
  %223 = load i32, i32* %20, align 4
  %224 = icmp eq i32 %223, 2
  br i1 %224, label %225, label %228

225:                                              ; preds = %222
  %226 = load i32, i32* %13, align 4
  %227 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %226, i8* %227)
  br label %244

228:                                              ; preds = %222
  %229 = load i32, i32* %20, align 4
  %230 = icmp eq i32 %229, 3
  br i1 %230, label %231, label %235

231:                                              ; preds = %228
  %232 = load i32, i32* %13, align 4
  %233 = load i8*, i8** %17, align 8
  %234 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %232, i8* %233, %29* %234)
  br label %243

235:                                              ; preds = %228
  %236 = load i32, i32* %20, align 4
  %237 = icmp eq i32 %236, 4
  br i1 %237, label %238, label %242

238:                                              ; preds = %235
  %239 = load i32, i32* %13, align 4
  %240 = load i32, i32* %16, align 4
  %241 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %239, i32 %240, %29* %241)
  br label %242

242:                                              ; preds = %238, %235
  br label %243

243:                                              ; preds = %242, %231
  br label %244

244:                                              ; preds = %243, %225
  store i32 1, i32* %22, align 4
  br label %246

245:                                              ; preds = %213
  store i32 0, i32* %22, align 4
  br label %246

246:                                              ; preds = %245, %244
  %247 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %248 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #13
  %249 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %249) #13
  %250 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %250) #13
  %251 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %251) #13
  %252 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %252) #13
  %253 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %253) #13
  %254 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %254) #13
  %255 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %255) #13
  %256 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %256) #13
  %257 = load i32, i32* %22, align 4
  switch i32 %257, label %336 [
    i32 0, label %258
  ]

258:                                              ; preds = %246
  br label %259

259:                                              ; preds = %258
  br label %260

260:                                              ; preds = %259
  %261 = load %1*, %1** %3, align 8
  %262 = getelementptr inbounds %1, %1* %261, i32 0, i32 5
  %263 = load %1*, %1** %262, align 8
  %264 = getelementptr inbounds %1, %1* %263, i32 0, i32 3
  %265 = load %4*, %4** %264, align 8
  %266 = bitcast %4* %265 to %92*
  %267 = getelementptr inbounds %92, %92* %266, i32 0, i32 4
  %268 = load %6*, %6** %267, align 8
  %269 = icmp ne %6* %268, null
  br i1 %269, label %271, label %270

270:                                              ; preds = %260
  call void (%6*, i8*, ...) @zend_throw_error(%6* null, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @1126, i32 0, i32 0))
  store i32 1, i32* %22, align 4
  br label %336

271:                                              ; preds = %260
  %272 = getelementptr inbounds %38, %38* %6, i32 0, i32 2
  store %29* %5, %29** %272, align 8
  %273 = load %1*, %1** %3, align 8
  %274 = call %6* @zend_get_called_scope(%1* %273)
  store %6* %274, %6** %8, align 8
  %275 = load %6*, %6** %8, align 8
  %276 = icmp ne %6* %275, null
  br i1 %276, label %277, label %291

277:                                              ; preds = %271
  %278 = getelementptr inbounds %39, %39* %7, i32 0, i32 2
  %279 = load %6*, %6** %278, align 8
  %280 = icmp ne %6* %279, null
  br i1 %280, label %281, label %291

281:                                              ; preds = %277
  %282 = load %6*, %6** %8, align 8
  %283 = getelementptr inbounds %39, %39* %7, i32 0, i32 2
  %284 = load %6*, %6** %283, align 8
  %285 = call zeroext i8 @instanceof_function(%6* %282, %6* %284)
  %286 = zext i8 %285 to i32
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %281
  %289 = load %6*, %6** %8, align 8
  %290 = getelementptr inbounds %39, %39* %7, i32 0, i32 3
  store %6* %289, %6** %290, align 8
  br label %291

291:                                              ; preds = %288, %281, %277, %271
  %292 = call i32 @zend_call_function(%38* %6, %39* %7)
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %335

294:                                              ; preds = %291
  %295 = call zeroext i8 @1468(%29* %5)
  %296 = zext i8 %295 to i32
  %297 = icmp ne i32 %296, 0
  br i1 %297, label %298, label %335

298:                                              ; preds = %294
  %299 = call zeroext i8 @1468(%29* %5)
  %300 = zext i8 %299 to i32
  %301 = icmp eq i32 %300, 10
  br i1 %301, label %302, label %303

302:                                              ; preds = %298
  call void @1480(%29* %5)
  br label %303

303:                                              ; preds = %302, %298
  br label %304

304:                                              ; preds = %303
  %305 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %305) #13
  %306 = load %29*, %29** %4, align 8
  store %29* %306, %29** %23, align 8
  %307 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %307) #13
  store %29* %5, %29** %24, align 8
  %308 = bitcast %82** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %308) #13
  %309 = load %29*, %29** %24, align 8
  %310 = getelementptr inbounds %29, %29* %309, i32 0, i32 0
  %311 = bitcast %30* %310 to %82**
  %312 = load %82*, %82** %311, align 8
  store %82* %312, %82** %25, align 8
  %313 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %313) #13
  %314 = load %29*, %29** %24, align 8
  %315 = getelementptr inbounds %29, %29* %314, i32 0, i32 1
  %316 = bitcast %31* %315 to i32*
  %317 = load i32, i32* %316, align 8
  store i32 %317, i32* %26, align 4
  br label %318

318:                                              ; preds = %304
  %319 = load %82*, %82** %25, align 8
  %320 = load %29*, %29** %23, align 8
  %321 = getelementptr inbounds %29, %29* %320, i32 0, i32 0
  %322 = bitcast %30* %321 to %82**
  store %82* %319, %82** %322, align 8
  %323 = load i32, i32* %26, align 4
  %324 = load %29*, %29** %23, align 8
  %325 = getelementptr inbounds %29, %29* %324, i32 0, i32 1
  %326 = bitcast %31* %325 to i32*
  store i32 %323, i32* %326, align 8
  br label %327

327:                                              ; preds = %318
  br label %328

328:                                              ; preds = %327
  %329 = bitcast i32* %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %329) #13
  %330 = bitcast %82** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %330) #13
  %331 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %331) #13
  %332 = bitcast %29** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %332) #13
  br label %333

333:                                              ; preds = %328
  br label %334

334:                                              ; preds = %333
  br label %335

335:                                              ; preds = %334, %294, %291
  store i32 0, i32* %22, align 4
  br label %336

336:                                              ; preds = %335, %270, %246
  %337 = bitcast %6** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %337) #13
  %338 = bitcast %39* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %338) #13
  %339 = bitcast %38* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %339) #13
  %340 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %340) #13
  %341 = load i32, i32* %22, align 4
  switch i32 %341, label %343 [
    i32 0, label %342
    i32 1, label %342
  ]

342:                                              ; preds = %336, %336
  ret void

343:                                              ; preds = %336
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_forward_static_call_array(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %29, align 8
  %7 = alloca %38, align 8
  %8 = alloca %39, align 8
  %9 = alloca %6*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca %29*, align 8
  %23 = alloca i32, align 4
  %24 = alloca %29*, align 8
  %25 = alloca %29*, align 8
  %26 = alloca %82*, align 8
  %27 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast %29* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %29) #13
  %30 = bitcast %38* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %30) #13
  %31 = bitcast %39* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %31) #13
  %32 = bitcast %6** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  br label %33

33:                                               ; preds = %2
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 0, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 2, i32* %11, align 4
  %36 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  store i32 2, i32* %12, align 4
  %37 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = load %1*, %1** %3, align 8
  %39 = getelementptr inbounds %1, %1* %38, i32 0, i32 4
  %40 = getelementptr inbounds %29, %29* %39, i32 0, i32 2
  %41 = bitcast %32* %40 to i32*
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %13, align 4
  %43 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  %44 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  %45 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  store %29* null, %29** %16, align 8
  %46 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #13
  store i32 0, i32* %17, align 4
  %47 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %48 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %48) #13
  store i32 0, i32* %21, align 4
  %49 = load i32, i32* %14, align 4
  %50 = load %29*, %29** %15, align 8
  %51 = load %29*, %29** %16, align 8
  %52 = load i32, i32* %17, align 4
  %53 = load i8*, i8** %18, align 8
  %54 = load i8, i8* %19, align 1
  %55 = load i8, i8* %20, align 1
  br label %56

56:                                               ; preds = %33
  %57 = load i32, i32* %13, align 4
  %58 = load i32, i32* %11, align 4
  %59 = icmp slt i32 %57, %58
  %60 = xor i1 %59, true
  %61 = xor i1 %60, true
  %62 = zext i1 %61 to i32
  %63 = sext i32 %62 to i64
  %64 = call i64 @llvm.expect.i64(i64 %63, i64 0)
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %85, label %66

66:                                               ; preds = %56
  %67 = load i32, i32* %13, align 4
  %68 = load i32, i32* %12, align 4
  %69 = icmp sgt i32 %67, %68
  %70 = xor i1 %69, true
  %71 = xor i1 %70, true
  %72 = zext i1 %71 to i32
  %73 = sext i32 %72 to i64
  %74 = call i64 @llvm.expect.i64(i64 %73, i64 0)
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %76, label %89

76:                                               ; preds = %66
  %77 = load i32, i32* %12, align 4
  %78 = icmp sge i32 %77, 0
  %79 = xor i1 %78, true
  %80 = xor i1 %79, true
  %81 = zext i1 %80 to i32
  %82 = sext i32 %81 to i64
  %83 = call i64 @llvm.expect.i64(i64 %82, i64 1)
  %84 = icmp ne i64 %83, 0
  br i1 %84, label %85, label %89

85:                                               ; preds = %76, %56
  %86 = load i32, i32* %13, align 4
  %87 = load i32, i32* %11, align 4
  %88 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %86, i32 %87, i32 %88)
  store i32 1, i32* %21, align 4
  br label %319

89:                                               ; preds = %76, %66
  store i32 0, i32* %14, align 4
  %90 = load %1*, %1** %3, align 8
  %91 = bitcast %1* %90 to %29*
  %92 = getelementptr inbounds %29, %29* %91, i64 4
  store %29* %92, %29** %15, align 8
  %93 = load i32, i32* %14, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %14, align 4
  br label %95

95:                                               ; preds = %89
  %96 = load i32, i32* %14, align 4
  %97 = load i32, i32* %11, align 4
  %98 = icmp sle i32 %96, %97
  br i1 %98, label %103, label %99

99:                                               ; preds = %95
  %100 = load i8, i8* %20, align 1
  %101 = zext i8 %100 to i32
  %102 = icmp eq i32 %101, 1
  br label %103

103:                                              ; preds = %99, %95
  %104 = phi i1 [ true, %95 ], [ %102, %99 ]
  %105 = xor i1 %104, true
  %106 = zext i1 %105 to i32
  %107 = sext i32 %106 to i64
  %108 = call i64 @llvm.expect.i64(i64 %107, i64 0)
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %103
  unreachable

111:                                              ; preds = %103
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  br label %114

114:                                              ; preds = %113
  %115 = load i32, i32* %14, align 4
  %116 = load i32, i32* %11, align 4
  %117 = icmp sgt i32 %115, %116
  br i1 %117, label %122, label %118

118:                                              ; preds = %114
  %119 = load i8, i8* %20, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp eq i32 %120, 0
  br label %122

122:                                              ; preds = %118, %114
  %123 = phi i1 [ true, %114 ], [ %121, %118 ]
  %124 = xor i1 %123, true
  %125 = zext i1 %124 to i32
  %126 = sext i32 %125 to i64
  %127 = call i64 @llvm.expect.i64(i64 %126, i64 0)
  %128 = icmp ne i64 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %122
  unreachable

130:                                              ; preds = %122
  br label %131

131:                                              ; preds = %130
  br label %132

132:                                              ; preds = %131
  %133 = load i8, i8* %20, align 1
  %134 = icmp ne i8 %133, 0
  br i1 %134, label %135, label %147

135:                                              ; preds = %132
  %136 = load i32, i32* %14, align 4
  %137 = load i32, i32* %13, align 4
  %138 = icmp sgt i32 %136, %137
  %139 = xor i1 %138, true
  %140 = xor i1 %139, true
  %141 = zext i1 %140 to i32
  %142 = sext i32 %141 to i64
  %143 = call i64 @llvm.expect.i64(i64 %142, i64 0)
  %144 = icmp ne i64 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %135
  br label %319

146:                                              ; preds = %135
  br label %147

147:                                              ; preds = %146, %132
  %148 = load %29*, %29** %15, align 8
  %149 = getelementptr inbounds %29, %29* %148, i32 1
  store %29* %149, %29** %15, align 8
  %150 = load %29*, %29** %15, align 8
  store %29* %150, %29** %16, align 8
  %151 = load %29*, %29** %16, align 8
  %152 = call i32 @1479(%29* %151, %38* %7, %39* %8, i32 0, i8** %18)
  %153 = icmp ne i32 %152, 0
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = xor i1 %155, true
  %157 = zext i1 %156 to i32
  %158 = sext i32 %157 to i64
  %159 = call i64 @llvm.expect.i64(i64 %158, i64 0)
  %160 = icmp ne i64 %159, 0
  br i1 %160, label %161, label %166

161:                                              ; preds = %147
  %162 = load i8*, i8** %18, align 8
  %163 = icmp ne i8* %162, null
  br i1 %163, label %165, label %164

164:                                              ; preds = %161
  store i32 4, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %319

165:                                              ; preds = %161
  store i32 2, i32* %21, align 4
  br label %319

166:                                              ; preds = %147
  %167 = load i8*, i8** %18, align 8
  %168 = icmp ne i8* %167, null
  %169 = xor i1 %168, true
  %170 = xor i1 %169, true
  %171 = zext i1 %170 to i32
  %172 = sext i32 %171 to i64
  %173 = call i64 @llvm.expect.i64(i64 %172, i64 0)
  %174 = icmp ne i64 %173, 0
  br i1 %174, label %175, label %178

175:                                              ; preds = %166
  %176 = load i32, i32* %14, align 4
  %177 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 8192, i32 %176, i8* %177)
  br label %178

178:                                              ; preds = %175, %166
  br label %179

179:                                              ; preds = %178
  %180 = load i32, i32* %14, align 4
  %181 = add nsw i32 %180, 1
  store i32 %181, i32* %14, align 4
  br label %182

182:                                              ; preds = %179
  %183 = load i32, i32* %14, align 4
  %184 = load i32, i32* %11, align 4
  %185 = icmp sle i32 %183, %184
  br i1 %185, label %190, label %186

186:                                              ; preds = %182
  %187 = load i8, i8* %20, align 1
  %188 = zext i8 %187 to i32
  %189 = icmp eq i32 %188, 1
  br label %190

190:                                              ; preds = %186, %182
  %191 = phi i1 [ true, %182 ], [ %189, %186 ]
  %192 = xor i1 %191, true
  %193 = zext i1 %192 to i32
  %194 = sext i32 %193 to i64
  %195 = call i64 @llvm.expect.i64(i64 %194, i64 0)
  %196 = icmp ne i64 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %190
  unreachable

198:                                              ; preds = %190
  br label %199

199:                                              ; preds = %198
  br label %200

200:                                              ; preds = %199
  br label %201

201:                                              ; preds = %200
  %202 = load i32, i32* %14, align 4
  %203 = load i32, i32* %11, align 4
  %204 = icmp sgt i32 %202, %203
  br i1 %204, label %209, label %205

205:                                              ; preds = %201
  %206 = load i8, i8* %20, align 1
  %207 = zext i8 %206 to i32
  %208 = icmp eq i32 %207, 0
  br label %209

209:                                              ; preds = %205, %201
  %210 = phi i1 [ true, %201 ], [ %208, %205 ]
  %211 = xor i1 %210, true
  %212 = zext i1 %211 to i32
  %213 = sext i32 %212 to i64
  %214 = call i64 @llvm.expect.i64(i64 %213, i64 0)
  %215 = icmp ne i64 %214, 0
  br i1 %215, label %216, label %217

216:                                              ; preds = %209
  unreachable

217:                                              ; preds = %209
  br label %218

218:                                              ; preds = %217
  br label %219

219:                                              ; preds = %218
  %220 = load i8, i8* %20, align 1
  %221 = icmp ne i8 %220, 0
  br i1 %221, label %222, label %234

222:                                              ; preds = %219
  %223 = load i32, i32* %14, align 4
  %224 = load i32, i32* %13, align 4
  %225 = icmp sgt i32 %223, %224
  %226 = xor i1 %225, true
  %227 = xor i1 %226, true
  %228 = zext i1 %227 to i32
  %229 = sext i32 %228 to i64
  %230 = call i64 @llvm.expect.i64(i64 %229, i64 0)
  %231 = icmp ne i64 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %222
  br label %319

233:                                              ; preds = %222
  br label %234

234:                                              ; preds = %233, %219
  %235 = load %29*, %29** %15, align 8
  %236 = getelementptr inbounds %29, %29* %235, i32 1
  store %29* %236, %29** %15, align 8
  %237 = load %29*, %29** %15, align 8
  store %29* %237, %29** %16, align 8
  br label %238

238:                                              ; preds = %234
  %239 = load %29*, %29** %16, align 8
  %240 = call zeroext i8 @1468(%29* %239)
  %241 = zext i8 %240 to i32
  %242 = icmp eq i32 %241, 10
  %243 = xor i1 %242, true
  %244 = xor i1 %243, true
  %245 = zext i1 %244 to i32
  %246 = sext i32 %245 to i64
  %247 = call i64 @llvm.expect.i64(i64 %246, i64 0)
  %248 = icmp ne i64 %247, 0
  br i1 %248, label %249, label %255

249:                                              ; preds = %238
  %250 = load %29*, %29** %16, align 8
  %251 = getelementptr inbounds %29, %29* %250, i32 0, i32 0
  %252 = bitcast %30* %251 to %91**
  %253 = load %91*, %91** %252, align 8
  %254 = getelementptr inbounds %91, %91* %253, i32 0, i32 1
  store %29* %254, %29** %16, align 8
  br label %255

255:                                              ; preds = %249, %238
  br label %256

256:                                              ; preds = %255
  br label %257

257:                                              ; preds = %256
  br label %258

258:                                              ; preds = %257
  %259 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %259) #13
  %260 = load %29*, %29** %16, align 8
  store %29* %260, %29** %22, align 8
  br label %261

261:                                              ; preds = %258
  %262 = load %29*, %29** %22, align 8
  %263 = call zeroext i8 @1468(%29* %262)
  %264 = zext i8 %263 to i32
  %265 = icmp ne i32 %264, 10
  %266 = xor i1 %265, true
  %267 = zext i1 %266 to i32
  %268 = sext i32 %267 to i64
  %269 = call i64 @llvm.expect.i64(i64 %268, i64 0)
  %270 = icmp ne i64 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %261
  unreachable

272:                                              ; preds = %261
  br label %273

273:                                              ; preds = %272
  br label %274

274:                                              ; preds = %273
  %275 = load %29*, %29** %22, align 8
  %276 = getelementptr inbounds %29, %29* %275, i32 0, i32 1
  %277 = bitcast %31* %276 to %83*
  %278 = getelementptr inbounds %83, %83* %277, i32 0, i32 1
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = and i32 %280, 16
  %282 = icmp ne i32 %281, 0
  br i1 %282, label %283, label %302

283:                                              ; preds = %274
  %284 = load %29*, %29** %22, align 8
  %285 = call i32 @1481(%29* %284)
  %286 = icmp ugt i32 %285, 1
  br i1 %286, label %287, label %301

287:                                              ; preds = %283
  %288 = load %29*, %29** %22, align 8
  %289 = getelementptr inbounds %29, %29* %288, i32 0, i32 1
  %290 = bitcast %31* %289 to %83*
  %291 = getelementptr inbounds %83, %83* %290, i32 0, i32 1
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = and i32 %293, 4
  %295 = icmp ne i32 %294, 0
  br i1 %295, label %296, label %299

296:                                              ; preds = %287
  %297 = load %29*, %29** %22, align 8
  %298 = call i32 @1482(%29* %297)
  br label %299

299:                                              ; preds = %296, %287
  %300 = load %29*, %29** %22, align 8
  call void @_zval_copy_ctor_func(%29* %300)
  br label %301

301:                                              ; preds = %299, %283
  br label %302

302:                                              ; preds = %301, %274
  %303 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %303) #13
  br label %304

304:                                              ; preds = %302
  br label %305

305:                                              ; preds = %304
  %306 = load %29*, %29** %16, align 8
  %307 = call i32 @1467(%29* %306, %29** %5, i32 0, i32 0)
  %308 = icmp ne i32 %307, 0
  %309 = xor i1 %308, true
  %310 = xor i1 %309, true
  %311 = xor i1 %310, true
  %312 = zext i1 %311 to i32
  %313 = sext i32 %312 to i64
  %314 = call i64 @llvm.expect.i64(i64 %313, i64 0)
  %315 = icmp ne i64 %314, 0
  br i1 %315, label %316, label %317

316:                                              ; preds = %305
  store i32 3, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %319

317:                                              ; preds = %305
  br label %318

318:                                              ; preds = %317
  br label %319

319:                                              ; preds = %318, %316, %232, %165, %164, %145, %85
  %320 = load i32, i32* %21, align 4
  %321 = icmp ne i32 %320, 0
  %322 = xor i1 %321, true
  %323 = xor i1 %322, true
  %324 = zext i1 %323 to i32
  %325 = sext i32 %324 to i64
  %326 = call i64 @llvm.expect.i64(i64 %325, i64 0)
  %327 = icmp ne i64 %326, 0
  br i1 %327, label %328, label %351

328:                                              ; preds = %319
  %329 = load i32, i32* %21, align 4
  %330 = icmp eq i32 %329, 2
  br i1 %330, label %331, label %334

331:                                              ; preds = %328
  %332 = load i32, i32* %14, align 4
  %333 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %332, i8* %333)
  br label %350

334:                                              ; preds = %328
  %335 = load i32, i32* %21, align 4
  %336 = icmp eq i32 %335, 3
  br i1 %336, label %337, label %341

337:                                              ; preds = %334
  %338 = load i32, i32* %14, align 4
  %339 = load i8*, i8** %18, align 8
  %340 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %338, i8* %339, %29* %340)
  br label %349

341:                                              ; preds = %334
  %342 = load i32, i32* %21, align 4
  %343 = icmp eq i32 %342, 4
  br i1 %343, label %344, label %348

344:                                              ; preds = %341
  %345 = load i32, i32* %14, align 4
  %346 = load i32, i32* %17, align 4
  %347 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %345, i32 %346, %29* %347)
  br label %348

348:                                              ; preds = %344, %341
  br label %349

349:                                              ; preds = %348, %337
  br label %350

350:                                              ; preds = %349, %331
  store i32 1, i32* %23, align 4
  br label %352

351:                                              ; preds = %319
  store i32 0, i32* %23, align 4
  br label %352

352:                                              ; preds = %351, %350
  %353 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %353) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %354 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %354) #13
  %355 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %355) #13
  %356 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %356) #13
  %357 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %357) #13
  %358 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %358) #13
  %359 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %359) #13
  %360 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %360) #13
  %361 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %361) #13
  %362 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %362) #13
  %363 = load i32, i32* %23, align 4
  switch i32 %363, label %433 [
    i32 0, label %364
  ]

364:                                              ; preds = %352
  br label %365

365:                                              ; preds = %364
  br label %366

366:                                              ; preds = %365
  %367 = load %29*, %29** %5, align 8
  %368 = call i32 @zend_fcall_info_args(%38* %7, %29* %367)
  %369 = getelementptr inbounds %38, %38* %7, i32 0, i32 2
  store %29* %6, %29** %369, align 8
  %370 = load %1*, %1** %3, align 8
  %371 = call %6* @zend_get_called_scope(%1* %370)
  store %6* %371, %6** %9, align 8
  %372 = load %6*, %6** %9, align 8
  %373 = icmp ne %6* %372, null
  br i1 %373, label %374, label %388

374:                                              ; preds = %366
  %375 = getelementptr inbounds %39, %39* %8, i32 0, i32 2
  %376 = load %6*, %6** %375, align 8
  %377 = icmp ne %6* %376, null
  br i1 %377, label %378, label %388

378:                                              ; preds = %374
  %379 = load %6*, %6** %9, align 8
  %380 = getelementptr inbounds %39, %39* %8, i32 0, i32 2
  %381 = load %6*, %6** %380, align 8
  %382 = call zeroext i8 @instanceof_function(%6* %379, %6* %381)
  %383 = zext i8 %382 to i32
  %384 = icmp ne i32 %383, 0
  br i1 %384, label %385, label %388

385:                                              ; preds = %378
  %386 = load %6*, %6** %9, align 8
  %387 = getelementptr inbounds %39, %39* %8, i32 0, i32 3
  store %6* %386, %6** %387, align 8
  br label %388

388:                                              ; preds = %385, %378, %374, %366
  %389 = call i32 @zend_call_function(%38* %7, %39* %8)
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %432

391:                                              ; preds = %388
  %392 = call zeroext i8 @1468(%29* %6)
  %393 = zext i8 %392 to i32
  %394 = icmp ne i32 %393, 0
  br i1 %394, label %395, label %432

395:                                              ; preds = %391
  %396 = call zeroext i8 @1468(%29* %6)
  %397 = zext i8 %396 to i32
  %398 = icmp eq i32 %397, 10
  br i1 %398, label %399, label %400

399:                                              ; preds = %395
  call void @1480(%29* %6)
  br label %400

400:                                              ; preds = %399, %395
  br label %401

401:                                              ; preds = %400
  %402 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %402) #13
  %403 = load %29*, %29** %4, align 8
  store %29* %403, %29** %24, align 8
  %404 = bitcast %29** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %404) #13
  store %29* %6, %29** %25, align 8
  %405 = bitcast %82** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %405) #13
  %406 = load %29*, %29** %25, align 8
  %407 = getelementptr inbounds %29, %29* %406, i32 0, i32 0
  %408 = bitcast %30* %407 to %82**
  %409 = load %82*, %82** %408, align 8
  store %82* %409, %82** %26, align 8
  %410 = bitcast i32* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %410) #13
  %411 = load %29*, %29** %25, align 8
  %412 = getelementptr inbounds %29, %29* %411, i32 0, i32 1
  %413 = bitcast %31* %412 to i32*
  %414 = load i32, i32* %413, align 8
  store i32 %414, i32* %27, align 4
  br label %415

415:                                              ; preds = %401
  %416 = load %82*, %82** %26, align 8
  %417 = load %29*, %29** %24, align 8
  %418 = getelementptr inbounds %29, %29* %417, i32 0, i32 0
  %419 = bitcast %30* %418 to %82**
  store %82* %416, %82** %419, align 8
  %420 = load i32, i32* %27, align 4
  %421 = load %29*, %29** %24, align 8
  %422 = getelementptr inbounds %29, %29* %421, i32 0, i32 1
  %423 = bitcast %31* %422 to i32*
  store i32 %420, i32* %423, align 8
  br label %424

424:                                              ; preds = %415
  br label %425

425:                                              ; preds = %424
  %426 = bitcast i32* %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %426) #13
  %427 = bitcast %82** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %427) #13
  %428 = bitcast %29** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %428) #13
  %429 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %429) #13
  br label %430

430:                                              ; preds = %425
  br label %431

431:                                              ; preds = %430
  br label %432

432:                                              ; preds = %431, %391, %388
  call void @zend_fcall_info_args_clear(%38* %7, i32 1)
  store i32 0, i32* %23, align 4
  br label %433

433:                                              ; preds = %432, %352
  %434 = bitcast %6** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %434) #13
  %435 = bitcast %39* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %435) #13
  %436 = bitcast %38* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %436) #13
  %437 = bitcast %29* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %437) #13
  %438 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %438) #13
  %439 = load i32, i32* %23, align 4
  switch i32 %439, label %441 [
    i32 0, label %440
    i32 1, label %440
  ]

440:                                              ; preds = %433, %433
  ret void

441:                                              ; preds = %433
  unreachable
}

declare dso_local void @zif_serialize(%1*, %29*) #1

declare dso_local void @zif_unserialize(%1*, %29*) #1

declare dso_local void @zif_var_dump(%1*, %29*) #1

declare dso_local void @zif_var_export(%1*, %29*) #1

declare dso_local void @zif_debug_zval_dump(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_print_r(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %29*, align 8
  %13 = alloca %29*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %29*, align 8
  %21 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %22 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %6) #13
  store i8 0, i8* %6, align 1
  br label %23

23:                                               ; preds = %2
  %24 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #13
  store i32 0, i32* %7, align 4
  %25 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #13
  store i32 1, i32* %8, align 4
  %26 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  store i32 2, i32* %9, align 4
  %27 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  %28 = load %1*, %1** %3, align 8
  %29 = getelementptr inbounds %1, %1* %28, i32 0, i32 4
  %30 = getelementptr inbounds %29, %29* %29, i32 0, i32 2
  %31 = bitcast %32* %30 to i32*
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %10, align 4
  %33 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %35) #13
  store %29* null, %29** %13, align 8
  %36 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  store i32 0, i32* %14, align 4
  %37 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  store i8* null, i8** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  store i8 0, i8* %17, align 1
  %38 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  store i32 0, i32* %18, align 4
  %39 = load i32, i32* %11, align 4
  %40 = load %29*, %29** %12, align 8
  %41 = load %29*, %29** %13, align 8
  %42 = load i32, i32* %14, align 4
  %43 = load i8*, i8** %15, align 8
  %44 = load i8, i8* %16, align 1
  %45 = load i8, i8* %17, align 1
  br label %46

46:                                               ; preds = %23
  %47 = load i32, i32* %10, align 4
  %48 = load i32, i32* %8, align 4
  %49 = icmp slt i32 %47, %48
  %50 = xor i1 %49, true
  %51 = xor i1 %50, true
  %52 = zext i1 %51 to i32
  %53 = sext i32 %52 to i64
  %54 = call i64 @llvm.expect.i64(i64 %53, i64 0)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %75, label %56

56:                                               ; preds = %46
  %57 = load i32, i32* %10, align 4
  %58 = load i32, i32* %9, align 4
  %59 = icmp sgt i32 %57, %58
  %60 = xor i1 %59, true
  %61 = xor i1 %60, true
  %62 = zext i1 %61 to i32
  %63 = sext i32 %62 to i64
  %64 = call i64 @llvm.expect.i64(i64 %63, i64 0)
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %79

66:                                               ; preds = %56
  %67 = load i32, i32* %9, align 4
  %68 = icmp sge i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 1)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %66, %46
  %76 = load i32, i32* %10, align 4
  %77 = load i32, i32* %8, align 4
  %78 = load i32, i32* %9, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %76, i32 %77, i32 %78)
  store i32 1, i32* %18, align 4
  br label %213

79:                                               ; preds = %66, %56
  store i32 0, i32* %11, align 4
  %80 = load %1*, %1** %3, align 8
  %81 = bitcast %1* %80 to %29*
  %82 = getelementptr inbounds %29, %29* %81, i64 4
  store %29* %82, %29** %12, align 8
  %83 = load i32, i32* %11, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %11, align 4
  br label %85

85:                                               ; preds = %79
  %86 = load i32, i32* %11, align 4
  %87 = load i32, i32* %8, align 4
  %88 = icmp sle i32 %86, %87
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = load i8, i8* %17, align 1
  %91 = zext i8 %90 to i32
  %92 = icmp eq i32 %91, 1
  br label %93

93:                                               ; preds = %89, %85
  %94 = phi i1 [ true, %85 ], [ %92, %89 ]
  %95 = xor i1 %94, true
  %96 = zext i1 %95 to i32
  %97 = sext i32 %96 to i64
  %98 = call i64 @llvm.expect.i64(i64 %97, i64 0)
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %93
  unreachable

101:                                              ; preds = %93
  br label %102

102:                                              ; preds = %101
  br label %103

103:                                              ; preds = %102
  br label %104

104:                                              ; preds = %103
  %105 = load i32, i32* %11, align 4
  %106 = load i32, i32* %8, align 4
  %107 = icmp sgt i32 %105, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %104
  %109 = load i8, i8* %17, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp eq i32 %110, 0
  br label %112

112:                                              ; preds = %108, %104
  %113 = phi i1 [ true, %104 ], [ %111, %108 ]
  %114 = xor i1 %113, true
  %115 = zext i1 %114 to i32
  %116 = sext i32 %115 to i64
  %117 = call i64 @llvm.expect.i64(i64 %116, i64 0)
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %112
  unreachable

120:                                              ; preds = %112
  br label %121

121:                                              ; preds = %120
  br label %122

122:                                              ; preds = %121
  %123 = load i8, i8* %17, align 1
  %124 = icmp ne i8 %123, 0
  br i1 %124, label %125, label %137

125:                                              ; preds = %122
  %126 = load i32, i32* %11, align 4
  %127 = load i32, i32* %10, align 4
  %128 = icmp sgt i32 %126, %127
  %129 = xor i1 %128, true
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i32
  %132 = sext i32 %131 to i64
  %133 = call i64 @llvm.expect.i64(i64 %132, i64 0)
  %134 = icmp ne i64 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %125
  br label %213

136:                                              ; preds = %125
  br label %137

137:                                              ; preds = %136, %122
  %138 = load %29*, %29** %12, align 8
  %139 = getelementptr inbounds %29, %29* %138, i32 1
  store %29* %139, %29** %12, align 8
  %140 = load %29*, %29** %12, align 8
  store %29* %140, %29** %13, align 8
  %141 = load %29*, %29** %13, align 8
  call void @1469(%29* %141, %29** %5, i32 0)
  store i8 1, i8* %17, align 1
  %142 = load i32, i32* %11, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %11, align 4
  br label %144

144:                                              ; preds = %137
  %145 = load i32, i32* %11, align 4
  %146 = load i32, i32* %8, align 4
  %147 = icmp sle i32 %145, %146
  br i1 %147, label %152, label %148

148:                                              ; preds = %144
  %149 = load i8, i8* %17, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp eq i32 %150, 1
  br label %152

152:                                              ; preds = %148, %144
  %153 = phi i1 [ true, %144 ], [ %151, %148 ]
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  %156 = sext i32 %155 to i64
  %157 = call i64 @llvm.expect.i64(i64 %156, i64 0)
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %152
  unreachable

160:                                              ; preds = %152
  br label %161

161:                                              ; preds = %160
  br label %162

162:                                              ; preds = %161
  br label %163

163:                                              ; preds = %162
  %164 = load i32, i32* %11, align 4
  %165 = load i32, i32* %8, align 4
  %166 = icmp sgt i32 %164, %165
  br i1 %166, label %171, label %167

167:                                              ; preds = %163
  %168 = load i8, i8* %17, align 1
  %169 = zext i8 %168 to i32
  %170 = icmp eq i32 %169, 0
  br label %171

171:                                              ; preds = %167, %163
  %172 = phi i1 [ true, %163 ], [ %170, %167 ]
  %173 = xor i1 %172, true
  %174 = zext i1 %173 to i32
  %175 = sext i32 %174 to i64
  %176 = call i64 @llvm.expect.i64(i64 %175, i64 0)
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %171
  unreachable

179:                                              ; preds = %171
  br label %180

180:                                              ; preds = %179
  br label %181

181:                                              ; preds = %180
  %182 = load i8, i8* %17, align 1
  %183 = icmp ne i8 %182, 0
  br i1 %183, label %184, label %196

184:                                              ; preds = %181
  %185 = load i32, i32* %11, align 4
  %186 = load i32, i32* %10, align 4
  %187 = icmp sgt i32 %185, %186
  %188 = xor i1 %187, true
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i32
  %191 = sext i32 %190 to i64
  %192 = call i64 @llvm.expect.i64(i64 %191, i64 0)
  %193 = icmp ne i64 %192, 0
  br i1 %193, label %194, label %195

194:                                              ; preds = %184
  br label %213

195:                                              ; preds = %184
  br label %196

196:                                              ; preds = %195, %181
  %197 = load %29*, %29** %12, align 8
  %198 = getelementptr inbounds %29, %29* %197, i32 1
  store %29* %198, %29** %12, align 8
  %199 = load %29*, %29** %12, align 8
  store %29* %199, %29** %13, align 8
  %200 = load %29*, %29** %13, align 8
  %201 = call i32 @1465(%29* %200, i8* %6, i8* %16, i32 0)
  %202 = icmp ne i32 %201, 0
  %203 = xor i1 %202, true
  %204 = xor i1 %203, true
  %205 = xor i1 %204, true
  %206 = zext i1 %205 to i32
  %207 = sext i32 %206 to i64
  %208 = call i64 @llvm.expect.i64(i64 %207, i64 0)
  %209 = icmp ne i64 %208, 0
  br i1 %209, label %210, label %211

210:                                              ; preds = %196
  store i32 1, i32* %14, align 4
  store i32 4, i32* %18, align 4
  br label %213

211:                                              ; preds = %196
  br label %212

212:                                              ; preds = %211
  br label %213

213:                                              ; preds = %212, %210, %194, %135, %75
  %214 = load i32, i32* %18, align 4
  %215 = icmp ne i32 %214, 0
  %216 = xor i1 %215, true
  %217 = xor i1 %216, true
  %218 = zext i1 %217 to i32
  %219 = sext i32 %218 to i64
  %220 = call i64 @llvm.expect.i64(i64 %219, i64 0)
  %221 = icmp ne i64 %220, 0
  br i1 %221, label %222, label %251

222:                                              ; preds = %213
  %223 = load i32, i32* %18, align 4
  %224 = icmp eq i32 %223, 2
  br i1 %224, label %225, label %228

225:                                              ; preds = %222
  %226 = load i32, i32* %11, align 4
  %227 = load i8*, i8** %15, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %226, i8* %227)
  br label %244

228:                                              ; preds = %222
  %229 = load i32, i32* %18, align 4
  %230 = icmp eq i32 %229, 3
  br i1 %230, label %231, label %235

231:                                              ; preds = %228
  %232 = load i32, i32* %11, align 4
  %233 = load i8*, i8** %15, align 8
  %234 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %232, i8* %233, %29* %234)
  br label %243

235:                                              ; preds = %228
  %236 = load i32, i32* %18, align 4
  %237 = icmp eq i32 %236, 4
  br i1 %237, label %238, label %242

238:                                              ; preds = %235
  %239 = load i32, i32* %11, align 4
  %240 = load i32, i32* %14, align 4
  %241 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %239, i32 %240, %29* %241)
  br label %242

242:                                              ; preds = %238, %235
  br label %243

243:                                              ; preds = %242, %231
  br label %244

244:                                              ; preds = %243, %225
  br label %245

245:                                              ; preds = %244
  %246 = load %29*, %29** %4, align 8
  %247 = getelementptr inbounds %29, %29* %246, i32 0, i32 1
  %248 = bitcast %31* %247 to i32*
  store i32 2, i32* %248, align 8
  br label %249

249:                                              ; preds = %245
  br label %250

250:                                              ; preds = %249
  store i32 1, i32* %19, align 4
  br label %252

251:                                              ; preds = %213
  store i32 0, i32* %19, align 4
  br label %252

252:                                              ; preds = %251, %250
  %253 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %253) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  %254 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %254) #13
  %255 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %255) #13
  %256 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %256) #13
  %257 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %257) #13
  %258 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %258) #13
  %259 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %259) #13
  %260 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %260) #13
  %261 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %261) #13
  %262 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %262) #13
  %263 = load i32, i32* %19, align 4
  switch i32 %263, label %306 [
    i32 0, label %264
  ]

264:                                              ; preds = %252
  br label %265

265:                                              ; preds = %264
  br label %266

266:                                              ; preds = %265
  %267 = load i8, i8* %6, align 1
  %268 = icmp ne i8 %267, 0
  br i1 %268, label %269, label %298

269:                                              ; preds = %266
  br label %270

270:                                              ; preds = %269
  %271 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %271) #13
  %272 = load %29*, %29** %4, align 8
  store %29* %272, %29** %20, align 8
  %273 = bitcast %28** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %273) #13
  %274 = load %29*, %29** %5, align 8
  %275 = call %28* @zend_print_zval_r_to_str(%29* %274, i32 0)
  store %28* %275, %28** %21, align 8
  %276 = load %28*, %28** %21, align 8
  %277 = load %29*, %29** %20, align 8
  %278 = getelementptr inbounds %29, %29* %277, i32 0, i32 0
  %279 = bitcast %30* %278 to %28**
  store %28* %276, %28** %279, align 8
  %280 = load %28*, %28** %21, align 8
  %281 = getelementptr inbounds %28, %28* %280, i32 0, i32 0
  %282 = getelementptr inbounds %8, %8* %281, i32 0, i32 1
  %283 = bitcast %9* %282 to %93*
  %284 = getelementptr inbounds %93, %93* %283, i32 0, i32 1
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = and i32 %286, 2
  %288 = icmp ne i32 %287, 0
  %289 = zext i1 %288 to i64
  %290 = select i1 %288, i32 6, i32 5126
  %291 = load %29*, %29** %20, align 8
  %292 = getelementptr inbounds %29, %29* %291, i32 0, i32 1
  %293 = bitcast %31* %292 to i32*
  store i32 %290, i32* %293, align 8
  %294 = bitcast %28** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %294) #13
  %295 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %295) #13
  br label %296

296:                                              ; preds = %270
  br label %297

297:                                              ; preds = %296
  store i32 1, i32* %19, align 4
  br label %306

298:                                              ; preds = %266
  %299 = load %29*, %29** %5, align 8
  call void @zend_print_zval_r(%29* %299, i32 0)
  br label %300

300:                                              ; preds = %298
  %301 = load %29*, %29** %4, align 8
  %302 = getelementptr inbounds %29, %29* %301, i32 0, i32 1
  %303 = bitcast %31* %302 to i32*
  store i32 3, i32* %303, align 8
  br label %304

304:                                              ; preds = %300
  br label %305

305:                                              ; preds = %304
  store i32 1, i32* %19, align 4
  br label %306

306:                                              ; preds = %305, %297, %252
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %6) #13
  %307 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %307) #13
  ret void
}

declare dso_local void @zif_memory_get_usage(%1*, %29*) #1

declare dso_local void @zif_memory_get_peak_usage(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_register_shutdown_function(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %94, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %9 = bitcast %94* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #13
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #13
  %11 = load %1*, %1** %3, align 8
  %12 = getelementptr inbounds %1, %1* %11, i32 0, i32 4
  %13 = getelementptr inbounds %29, %29* %12, i32 0, i32 2
  %14 = bitcast %32* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %94, %94* %5, i32 0, i32 1
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %94, %94* %5, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, 1
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  call void @zend_wrong_param_count()
  store i32 1, i32* %7, align 4
  br label %112

21:                                               ; preds = %2
  %22 = getelementptr inbounds %94, %94* %5, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = sext i32 %23 to i64
  %25 = call noalias i8* @_safe_emalloc(i64 16, i64 %24, i64 0)
  %26 = bitcast i8* %25 to %29*
  %27 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  store %29* %26, %29** %27, align 8
  %28 = getelementptr inbounds %94, %94* %5, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %31 = load %29*, %29** %30, align 8
  %32 = call i32 @_zend_get_parameters_array_ex(i32 %29, %29* %31)
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %44

34:                                               ; preds = %21
  %35 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %36 = load %29*, %29** %35, align 8
  %37 = bitcast %29* %36 to i8*
  call void @_efree(i8* %37)
  br label %38

38:                                               ; preds = %34
  %39 = load %29*, %29** %4, align 8
  %40 = getelementptr inbounds %29, %29* %39, i32 0, i32 1
  %41 = bitcast %31* %40 to i32*
  store i32 2, i32* %41, align 8
  br label %42

42:                                               ; preds = %38
  br label %43

43:                                               ; preds = %42
  store i32 1, i32* %7, align 4
  br label %112

44:                                               ; preds = %21
  %45 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %46 = load %29*, %29** %45, align 8
  %47 = getelementptr inbounds %29, %29* %46, i64 0
  %48 = call zeroext i8 @zend_is_callable(%29* %47, i32 0, %28** null)
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %70, label %50

50:                                               ; preds = %44
  %51 = bitcast %28** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %51) #13
  %52 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %53 = load %29*, %29** %52, align 8
  %54 = getelementptr inbounds %29, %29* %53, i64 0
  %55 = call %28* @zend_get_callable_name(%29* %54)
  store %28* %55, %28** %8, align 8
  %56 = load %28*, %28** %8, align 8
  %57 = getelementptr inbounds %28, %28* %56, i32 0, i32 3
  %58 = getelementptr inbounds [1 x i8], [1 x i8]* %57, i32 0, i32 0
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @1127, i32 0, i32 0), i8* %58)
  %59 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %60 = load %29*, %29** %59, align 8
  %61 = bitcast %29* %60 to i8*
  call void @_efree(i8* %61)
  %62 = load %28*, %28** %8, align 8
  call void @1460(%28* %62)
  br label %63

63:                                               ; preds = %50
  %64 = load %29*, %29** %4, align 8
  %65 = getelementptr inbounds %29, %29* %64, i32 0, i32 1
  %66 = bitcast %31* %65 to i32*
  store i32 2, i32* %66, align 8
  br label %67

67:                                               ; preds = %63
  br label %68

68:                                               ; preds = %67
  %69 = bitcast %28** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  br label %111

70:                                               ; preds = %44
  %71 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %72 = icmp ne %7* %71, null
  br i1 %72, label %77, label %73

73:                                               ; preds = %70
  %74 = call noalias i8* @_emalloc_56()
  %75 = bitcast i8* %74 to %7*
  store %7* %75, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %76 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  call void @_zend_hash_init(%7* %76, i32 0, void (%29*)* @1484, i8 zeroext 0)
  br label %77

77:                                               ; preds = %73, %70
  store i32 0, i32* %6, align 4
  br label %78

78:                                               ; preds = %104, %77
  %79 = load i32, i32* %6, align 4
  %80 = getelementptr inbounds %94, %94* %5, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %107

83:                                               ; preds = %78
  %84 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %85 = load %29*, %29** %84, align 8
  %86 = load i32, i32* %6, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %29, %29* %85, i64 %87
  %89 = getelementptr inbounds %29, %29* %88, i32 0, i32 1
  %90 = bitcast %31* %89 to %83*
  %91 = getelementptr inbounds %83, %83* %90, i32 0, i32 1
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = and i32 %93, 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %103

96:                                               ; preds = %83
  %97 = getelementptr inbounds %94, %94* %5, i32 0, i32 0
  %98 = load %29*, %29** %97, align 8
  %99 = load i32, i32* %6, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds %29, %29* %98, i64 %100
  %102 = call i32 @1485(%29* %101)
  br label %103

103:                                              ; preds = %96, %83
  br label %104

104:                                              ; preds = %103
  %105 = load i32, i32* %6, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %6, align 4
  br label %78

107:                                              ; preds = %78
  %108 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %109 = bitcast %94* %5 to i8*
  %110 = call i8* @1486(%7* %108, i8* %109, i64 16)
  br label %111

111:                                              ; preds = %107, %68
  store i32 0, i32* %7, align 4
  br label %112

112:                                              ; preds = %111, %43, %20
  %113 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %113) #13
  %114 = bitcast %94* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %114) #13
  %115 = load i32, i32* %7, align 4
  switch i32 %115, label %117 [
    i32 0, label %116
    i32 1, label %116
  ]

116:                                              ; preds = %112, %112
  ret void

117:                                              ; preds = %112
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_register_tick_function(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %95, align 8
  %6 = alloca i32, align 4
  %7 = alloca %28*, align 8
  %8 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %9 = bitcast %95* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %9) #13
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #13
  %11 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  store %28* null, %28** %7, align 8
  %12 = getelementptr inbounds %95, %95* %5, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = load %1*, %1** %3, align 8
  %14 = getelementptr inbounds %1, %1* %13, i32 0, i32 4
  %15 = getelementptr inbounds %29, %29* %14, i32 0, i32 2
  %16 = bitcast %32* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %95, %95* %5, i32 0, i32 1
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %95, %95* %5, i32 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %22, label %23

22:                                               ; preds = %2
  call void @zend_wrong_param_count()
  store i32 1, i32* %8, align 4
  br label %152

23:                                               ; preds = %2
  %24 = getelementptr inbounds %95, %95* %5, i32 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = sext i32 %25 to i64
  %27 = call noalias i8* @_safe_emalloc(i64 16, i64 %26, i64 0)
  %28 = bitcast i8* %27 to %29*
  %29 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  store %29* %28, %29** %29, align 8
  %30 = getelementptr inbounds %95, %95* %5, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %33 = load %29*, %29** %32, align 8
  %34 = call i32 @_zend_get_parameters_array_ex(i32 %31, %29* %33)
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %46

36:                                               ; preds = %23
  %37 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %38 = load %29*, %29** %37, align 8
  %39 = bitcast %29* %38 to i8*
  call void @_efree(i8* %39)
  br label %40

40:                                               ; preds = %36
  %41 = load %29*, %29** %4, align 8
  %42 = getelementptr inbounds %29, %29* %41, i32 0, i32 1
  %43 = bitcast %31* %42 to i32*
  store i32 2, i32* %43, align 8
  br label %44

44:                                               ; preds = %40
  br label %45

45:                                               ; preds = %44
  store i32 1, i32* %8, align 4
  br label %152

46:                                               ; preds = %23
  %47 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %48 = load %29*, %29** %47, align 8
  %49 = getelementptr inbounds %29, %29* %48, i64 0
  %50 = call zeroext i8 @zend_is_callable(%29* %49, i32 0, %28** %7)
  %51 = icmp ne i8 %50, 0
  br i1 %51, label %66, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %54 = load %29*, %29** %53, align 8
  %55 = bitcast %29* %54 to i8*
  call void @_efree(i8* %55)
  %56 = load %28*, %28** %7, align 8
  %57 = getelementptr inbounds %28, %28* %56, i32 0, i32 3
  %58 = getelementptr inbounds [1 x i8], [1 x i8]* %57, i32 0, i32 0
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @1143, i32 0, i32 0), i8* %58)
  %59 = load %28*, %28** %7, align 8
  call void @1460(%28* %59)
  br label %60

60:                                               ; preds = %52
  %61 = load %29*, %29** %4, align 8
  %62 = getelementptr inbounds %29, %29* %61, i32 0, i32 1
  %63 = bitcast %31* %62 to i32*
  store i32 2, i32* %63, align 8
  br label %64

64:                                               ; preds = %60
  br label %65

65:                                               ; preds = %64
  store i32 1, i32* %8, align 4
  br label %152

66:                                               ; preds = %46
  %67 = load %28*, %28** %7, align 8
  %68 = icmp ne %28* %67, null
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = load %28*, %28** %7, align 8
  call void @1460(%28* %70)
  br label %71

71:                                               ; preds = %69, %66
  br label %72

72:                                               ; preds = %71
  %73 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %74 = load %29*, %29** %73, align 8
  %75 = getelementptr inbounds %29, %29* %74, i64 0
  %76 = call zeroext i8 @1468(%29* %75)
  %77 = zext i8 %76 to i32
  %78 = icmp ne i32 %77, 7
  br i1 %78, label %79, label %106

79:                                               ; preds = %72
  %80 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %81 = load %29*, %29** %80, align 8
  %82 = getelementptr inbounds %29, %29* %81, i64 0
  %83 = call zeroext i8 @1468(%29* %82)
  %84 = zext i8 %83 to i32
  %85 = icmp ne i32 %84, 8
  br i1 %85, label %86, label %106

86:                                               ; preds = %79
  %87 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %88 = load %29*, %29** %87, align 8
  %89 = getelementptr inbounds %29, %29* %88, i64 0
  %90 = call zeroext i8 @1468(%29* %89)
  %91 = zext i8 %90 to i32
  %92 = icmp ne i32 %91, 6
  br i1 %92, label %93, label %105

93:                                               ; preds = %86
  %94 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %95 = load %29*, %29** %94, align 8
  %96 = getelementptr inbounds %29, %29* %95, i64 0
  %97 = call zeroext i8 @1468(%29* %96)
  %98 = zext i8 %97 to i32
  %99 = icmp ne i32 %98, 6
  br i1 %99, label %100, label %104

100:                                              ; preds = %93
  %101 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %102 = load %29*, %29** %101, align 8
  %103 = getelementptr inbounds %29, %29* %102, i64 0
  call void @_convert_to_string(%29* %103)
  br label %104

104:                                              ; preds = %100, %93
  br label %105

105:                                              ; preds = %104, %86
  br label %106

106:                                              ; preds = %105, %79, %72
  %107 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %108 = icmp ne %40* %107, null
  br i1 %108, label %113, label %109

109:                                              ; preds = %106
  %110 = call noalias i8* @_emalloc_56()
  %111 = bitcast i8* %110 to %40*
  store %40* %111, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %112 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  call void @zend_llist_init(%40* %112, i64 16, void (i8*)* bitcast (void (%95*)* @1494 to void (i8*)*), i8 zeroext 0)
  call void @php_add_tick_function(void (i32, i8*)* @1495, i8* null)
  br label %113

113:                                              ; preds = %109, %106
  store i32 0, i32* %6, align 4
  br label %114

114:                                              ; preds = %140, %113
  %115 = load i32, i32* %6, align 4
  %116 = getelementptr inbounds %95, %95* %5, i32 0, i32 1
  %117 = load i32, i32* %116, align 8
  %118 = icmp slt i32 %115, %117
  br i1 %118, label %119, label %143

119:                                              ; preds = %114
  %120 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %121 = load %29*, %29** %120, align 8
  %122 = load i32, i32* %6, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %29, %29* %121, i64 %123
  %125 = getelementptr inbounds %29, %29* %124, i32 0, i32 1
  %126 = bitcast %31* %125 to %83*
  %127 = getelementptr inbounds %83, %83* %126, i32 0, i32 1
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = and i32 %129, 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %139

132:                                              ; preds = %119
  %133 = getelementptr inbounds %95, %95* %5, i32 0, i32 0
  %134 = load %29*, %29** %133, align 8
  %135 = load i32, i32* %6, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds %29, %29* %134, i64 %136
  %138 = call i32 @1485(%29* %137)
  br label %139

139:                                              ; preds = %132, %119
  br label %140

140:                                              ; preds = %139
  %141 = load i32, i32* %6, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %6, align 4
  br label %114

143:                                              ; preds = %114
  %144 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %145 = bitcast %95* %5 to i8*
  call void @zend_llist_add_element(%40* %144, i8* %145)
  br label %146

146:                                              ; preds = %143
  %147 = load %29*, %29** %4, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 0, i32 1
  %149 = bitcast %31* %148 to i32*
  store i32 3, i32* %149, align 8
  br label %150

150:                                              ; preds = %146
  br label %151

151:                                              ; preds = %150
  store i32 1, i32* %8, align 4
  br label %152

152:                                              ; preds = %151, %65, %45, %22
  %153 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %153) #13
  %154 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %154) #13
  %155 = bitcast %95* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %155) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_unregister_tick_function(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %95, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %29*, align 8
  %13 = alloca %29*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %29*, align 8
  %21 = alloca %29*, align 8
  %22 = alloca %82*, align 8
  %23 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast %95* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %25) #13
  br label %26

26:                                               ; preds = %2
  %27 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  store i32 0, i32* %7, align 4
  %28 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 1, i32* %8, align 4
  %29 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 1, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = load %1*, %1** %3, align 8
  %32 = getelementptr inbounds %1, %1* %31, i32 0, i32 4
  %33 = getelementptr inbounds %29, %29* %32, i32 0, i32 2
  %34 = bitcast %32* %33 to i32*
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %10, align 4
  %36 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  %38 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  store %29* null, %29** %13, align 8
  %39 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  store i32 0, i32* %14, align 4
  %40 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store i8* null, i8** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  store i8 0, i8* %17, align 1
  %41 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %18, align 4
  %42 = load i32, i32* %11, align 4
  %43 = load %29*, %29** %12, align 8
  %44 = load %29*, %29** %13, align 8
  %45 = load i32, i32* %14, align 4
  %46 = load i8*, i8** %15, align 8
  %47 = load i8, i8* %16, align 1
  %48 = load i8, i8* %17, align 1
  br label %49

49:                                               ; preds = %26
  %50 = load i32, i32* %10, align 4
  %51 = load i32, i32* %8, align 4
  %52 = icmp slt i32 %50, %51
  %53 = xor i1 %52, true
  %54 = xor i1 %53, true
  %55 = zext i1 %54 to i32
  %56 = sext i32 %55 to i64
  %57 = call i64 @llvm.expect.i64(i64 %56, i64 0)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %78, label %59

59:                                               ; preds = %49
  %60 = load i32, i32* %10, align 4
  %61 = load i32, i32* %9, align 4
  %62 = icmp sgt i32 %60, %61
  %63 = xor i1 %62, true
  %64 = xor i1 %63, true
  %65 = zext i1 %64 to i32
  %66 = sext i32 %65 to i64
  %67 = call i64 @llvm.expect.i64(i64 %66, i64 0)
  %68 = icmp ne i64 %67, 0
  br i1 %68, label %69, label %82

69:                                               ; preds = %59
  %70 = load i32, i32* %9, align 4
  %71 = icmp sge i32 %70, 0
  %72 = xor i1 %71, true
  %73 = xor i1 %72, true
  %74 = zext i1 %73 to i32
  %75 = sext i32 %74 to i64
  %76 = call i64 @llvm.expect.i64(i64 %75, i64 1)
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %69, %49
  %79 = load i32, i32* %10, align 4
  %80 = load i32, i32* %8, align 4
  %81 = load i32, i32* %9, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %79, i32 %80, i32 %81)
  store i32 1, i32* %18, align 4
  br label %146

82:                                               ; preds = %69, %59
  store i32 0, i32* %11, align 4
  %83 = load %1*, %1** %3, align 8
  %84 = bitcast %1* %83 to %29*
  %85 = getelementptr inbounds %29, %29* %84, i64 4
  store %29* %85, %29** %12, align 8
  %86 = load i32, i32* %11, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %11, align 4
  br label %88

88:                                               ; preds = %82
  %89 = load i32, i32* %11, align 4
  %90 = load i32, i32* %8, align 4
  %91 = icmp sle i32 %89, %90
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load i8, i8* %17, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp eq i32 %94, 1
  br label %96

96:                                               ; preds = %92, %88
  %97 = phi i1 [ true, %88 ], [ %95, %92 ]
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = sext i32 %99 to i64
  %101 = call i64 @llvm.expect.i64(i64 %100, i64 0)
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %96
  unreachable

104:                                              ; preds = %96
  br label %105

105:                                              ; preds = %104
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  %108 = load i32, i32* %11, align 4
  %109 = load i32, i32* %8, align 4
  %110 = icmp sgt i32 %108, %109
  br i1 %110, label %115, label %111

111:                                              ; preds = %107
  %112 = load i8, i8* %17, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp eq i32 %113, 0
  br label %115

115:                                              ; preds = %111, %107
  %116 = phi i1 [ true, %107 ], [ %114, %111 ]
  %117 = xor i1 %116, true
  %118 = zext i1 %117 to i32
  %119 = sext i32 %118 to i64
  %120 = call i64 @llvm.expect.i64(i64 %119, i64 0)
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %115
  unreachable

123:                                              ; preds = %115
  br label %124

124:                                              ; preds = %123
  br label %125

125:                                              ; preds = %124
  %126 = load i8, i8* %17, align 1
  %127 = icmp ne i8 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %125
  %129 = load i32, i32* %11, align 4
  %130 = load i32, i32* %10, align 4
  %131 = icmp sgt i32 %129, %130
  %132 = xor i1 %131, true
  %133 = xor i1 %132, true
  %134 = zext i1 %133 to i32
  %135 = sext i32 %134 to i64
  %136 = call i64 @llvm.expect.i64(i64 %135, i64 0)
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %128
  br label %146

139:                                              ; preds = %128
  br label %140

140:                                              ; preds = %139, %125
  %141 = load %29*, %29** %12, align 8
  %142 = getelementptr inbounds %29, %29* %141, i32 1
  store %29* %142, %29** %12, align 8
  %143 = load %29*, %29** %12, align 8
  store %29* %143, %29** %13, align 8
  %144 = load %29*, %29** %13, align 8
  call void @1469(%29* %144, %29** %5, i32 0)
  br label %145

145:                                              ; preds = %140
  br label %146

146:                                              ; preds = %145, %138, %78
  %147 = load i32, i32* %18, align 4
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = call i64 @llvm.expect.i64(i64 %152, i64 0)
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %178

155:                                              ; preds = %146
  %156 = load i32, i32* %18, align 4
  %157 = icmp eq i32 %156, 2
  br i1 %157, label %158, label %161

158:                                              ; preds = %155
  %159 = load i32, i32* %11, align 4
  %160 = load i8*, i8** %15, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %159, i8* %160)
  br label %177

161:                                              ; preds = %155
  %162 = load i32, i32* %18, align 4
  %163 = icmp eq i32 %162, 3
  br i1 %163, label %164, label %168

164:                                              ; preds = %161
  %165 = load i32, i32* %11, align 4
  %166 = load i8*, i8** %15, align 8
  %167 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %165, i8* %166, %29* %167)
  br label %176

168:                                              ; preds = %161
  %169 = load i32, i32* %18, align 4
  %170 = icmp eq i32 %169, 4
  br i1 %170, label %171, label %175

171:                                              ; preds = %168
  %172 = load i32, i32* %11, align 4
  %173 = load i32, i32* %14, align 4
  %174 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %172, i32 %173, %29* %174)
  br label %175

175:                                              ; preds = %171, %168
  br label %176

176:                                              ; preds = %175, %164
  br label %177

177:                                              ; preds = %176, %158
  store i32 1, i32* %19, align 4
  br label %179

178:                                              ; preds = %146
  store i32 0, i32* %19, align 4
  br label %179

179:                                              ; preds = %178, %177
  %180 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %180) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  %181 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %181) #13
  %182 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %182) #13
  %183 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %183) #13
  %184 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %184) #13
  %185 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %185) #13
  %186 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %186) #13
  %187 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %187) #13
  %188 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %188) #13
  %189 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %189) #13
  %190 = load i32, i32* %19, align 4
  switch i32 %190, label %259 [
    i32 0, label %191
  ]

191:                                              ; preds = %179
  br label %192

192:                                              ; preds = %191
  br label %193

193:                                              ; preds = %192
  %194 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %195 = icmp ne %40* %194, null
  br i1 %195, label %197, label %196

196:                                              ; preds = %193
  store i32 1, i32* %19, align 4
  br label %259

197:                                              ; preds = %193
  %198 = load %29*, %29** %5, align 8
  %199 = call zeroext i8 @1468(%29* %198)
  %200 = zext i8 %199 to i32
  %201 = icmp ne i32 %200, 7
  br i1 %201, label %202, label %215

202:                                              ; preds = %197
  %203 = load %29*, %29** %5, align 8
  %204 = call zeroext i8 @1468(%29* %203)
  %205 = zext i8 %204 to i32
  %206 = icmp ne i32 %205, 8
  br i1 %206, label %207, label %215

207:                                              ; preds = %202
  %208 = load %29*, %29** %5, align 8
  %209 = call zeroext i8 @1468(%29* %208)
  %210 = zext i8 %209 to i32
  %211 = icmp ne i32 %210, 6
  br i1 %211, label %212, label %214

212:                                              ; preds = %207
  %213 = load %29*, %29** %5, align 8
  call void @_convert_to_string(%29* %213)
  br label %214

214:                                              ; preds = %212, %207
  br label %215

215:                                              ; preds = %214, %202, %197
  %216 = call noalias i8* @_emalloc_16()
  %217 = bitcast i8* %216 to %29*
  %218 = getelementptr inbounds %95, %95* %6, i32 0, i32 0
  store %29* %217, %29** %218, align 8
  br label %219

219:                                              ; preds = %215
  %220 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %220) #13
  %221 = getelementptr inbounds %95, %95* %6, i32 0, i32 0
  %222 = load %29*, %29** %221, align 8
  %223 = getelementptr inbounds %29, %29* %222, i64 0
  store %29* %223, %29** %20, align 8
  %224 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %224) #13
  %225 = load %29*, %29** %5, align 8
  store %29* %225, %29** %21, align 8
  %226 = bitcast %82** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %226) #13
  %227 = load %29*, %29** %21, align 8
  %228 = getelementptr inbounds %29, %29* %227, i32 0, i32 0
  %229 = bitcast %30* %228 to %82**
  %230 = load %82*, %82** %229, align 8
  store %82* %230, %82** %22, align 8
  %231 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %231) #13
  %232 = load %29*, %29** %21, align 8
  %233 = getelementptr inbounds %29, %29* %232, i32 0, i32 1
  %234 = bitcast %31* %233 to i32*
  %235 = load i32, i32* %234, align 8
  store i32 %235, i32* %23, align 4
  br label %236

236:                                              ; preds = %219
  %237 = load %82*, %82** %22, align 8
  %238 = load %29*, %29** %20, align 8
  %239 = getelementptr inbounds %29, %29* %238, i32 0, i32 0
  %240 = bitcast %30* %239 to %82**
  store %82* %237, %82** %240, align 8
  %241 = load i32, i32* %23, align 4
  %242 = load %29*, %29** %20, align 8
  %243 = getelementptr inbounds %29, %29* %242, i32 0, i32 1
  %244 = bitcast %31* %243 to i32*
  store i32 %241, i32* %244, align 8
  br label %245

245:                                              ; preds = %236
  br label %246

246:                                              ; preds = %245
  %247 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #13
  %248 = bitcast %82** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %248) #13
  %249 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #13
  %250 = bitcast %29** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %250) #13
  br label %251

251:                                              ; preds = %246
  br label %252

252:                                              ; preds = %251
  %253 = getelementptr inbounds %95, %95* %6, i32 0, i32 1
  store i32 1, i32* %253, align 8
  %254 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %255 = bitcast %95* %6 to i8*
  call void @zend_llist_del_element(%40* %254, i8* %255, i32 (i8*, i8*)* bitcast (i32 (%95*, %95*)* @1496 to i32 (i8*, i8*)*))
  %256 = getelementptr inbounds %95, %95* %6, i32 0, i32 0
  %257 = load %29*, %29** %256, align 8
  %258 = bitcast %29* %257 to i8*
  call void @_efree(i8* %258)
  store i32 0, i32* %19, align 4
  br label %259

259:                                              ; preds = %252, %196, %179
  %260 = bitcast %95* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %260) #13
  %261 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %261) #13
  %262 = load i32, i32* %19, align 4
  switch i32 %262, label %264 [
    i32 0, label %263
    i32 1, label %263
  ]

263:                                              ; preds = %259, %259
  ret void

264:                                              ; preds = %259
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_highlight_file(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca %96, align 8
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #13
  %26 = bitcast %96* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %26) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %9) #13
  store i8 0, i8* %9, align 1
  br label %27

27:                                               ; preds = %2
  %28 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 0, i32* %10, align 4
  %29 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 1, i32* %11, align 4
  %30 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 2, i32* %12, align 4
  %31 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  %32 = load %1*, %1** %3, align 8
  %33 = getelementptr inbounds %1, %1* %32, i32 0, i32 4
  %34 = getelementptr inbounds %29, %29* %33, i32 0, i32 2
  %35 = bitcast %32* %34 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %13, align 4
  %37 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store %29* null, %29** %16, align 8
  %40 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %17, align 4
  %41 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %42 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %21, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load %29*, %29** %15, align 8
  %45 = load %29*, %29** %16, align 8
  %46 = load i32, i32* %17, align 4
  %47 = load i8*, i8** %18, align 8
  %48 = load i8, i8* %19, align 1
  %49 = load i8, i8* %20, align 1
  br label %50

50:                                               ; preds = %27
  %51 = load i32, i32* %13, align 4
  %52 = load i32, i32* %11, align 4
  %53 = icmp slt i32 %51, %52
  %54 = xor i1 %53, true
  %55 = xor i1 %54, true
  %56 = zext i1 %55 to i32
  %57 = sext i32 %56 to i64
  %58 = call i64 @llvm.expect.i64(i64 %57, i64 0)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %50
  %61 = load i32, i32* %13, align 4
  %62 = load i32, i32* %12, align 4
  %63 = icmp sgt i32 %61, %62
  %64 = xor i1 %63, true
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = call i64 @llvm.expect.i64(i64 %67, i64 0)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %83

70:                                               ; preds = %60
  %71 = load i32, i32* %12, align 4
  %72 = icmp sge i32 %71, 0
  %73 = xor i1 %72, true
  %74 = xor i1 %73, true
  %75 = zext i1 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = call i64 @llvm.expect.i64(i64 %76, i64 1)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %70, %50
  %80 = load i32, i32* %13, align 4
  %81 = load i32, i32* %11, align 4
  %82 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %80, i32 %81, i32 %82)
  store i32 1, i32* %21, align 4
  br label %228

83:                                               ; preds = %70, %60
  store i32 0, i32* %14, align 4
  %84 = load %1*, %1** %3, align 8
  %85 = bitcast %1* %84 to %29*
  %86 = getelementptr inbounds %29, %29* %85, i64 4
  store %29* %86, %29** %15, align 8
  %87 = load i32, i32* %14, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %14, align 4
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %14, align 4
  %91 = load i32, i32* %11, align 4
  %92 = icmp sle i32 %90, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = load i8, i8* %20, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %95, 1
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i1 [ true, %89 ], [ %96, %93 ]
  %99 = xor i1 %98, true
  %100 = zext i1 %99 to i32
  %101 = sext i32 %100 to i64
  %102 = call i64 @llvm.expect.i64(i64 %101, i64 0)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  unreachable

105:                                              ; preds = %97
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %14, align 4
  %110 = load i32, i32* %11, align 4
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %20, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, 0
  br label %116

116:                                              ; preds = %112, %108
  %117 = phi i1 [ true, %108 ], [ %115, %112 ]
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = call i64 @llvm.expect.i64(i64 %120, i64 0)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  unreachable

124:                                              ; preds = %116
  br label %125

125:                                              ; preds = %124
  br label %126

126:                                              ; preds = %125
  %127 = load i8, i8* %20, align 1
  %128 = icmp ne i8 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %126
  %130 = load i32, i32* %14, align 4
  %131 = load i32, i32* %13, align 4
  %132 = icmp sgt i32 %130, %131
  %133 = xor i1 %132, true
  %134 = xor i1 %133, true
  %135 = zext i1 %134 to i32
  %136 = sext i32 %135 to i64
  %137 = call i64 @llvm.expect.i64(i64 %136, i64 0)
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %129
  br label %228

140:                                              ; preds = %129
  br label %141

141:                                              ; preds = %140, %126
  %142 = load %29*, %29** %15, align 8
  %143 = getelementptr inbounds %29, %29* %142, i32 1
  store %29* %143, %29** %15, align 8
  %144 = load %29*, %29** %15, align 8
  store %29* %144, %29** %16, align 8
  %145 = load %29*, %29** %16, align 8
  %146 = call i32 @1478(%29* %145, i8** %5, i64* %6, i32 0)
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = call i64 @llvm.expect.i64(i64 %152, i64 0)
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %141
  store i32 6, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %228

156:                                              ; preds = %141
  store i8 1, i8* %20, align 1
  %157 = load i32, i32* %14, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %14, align 4
  br label %159

159:                                              ; preds = %156
  %160 = load i32, i32* %14, align 4
  %161 = load i32, i32* %11, align 4
  %162 = icmp sle i32 %160, %161
  br i1 %162, label %167, label %163

163:                                              ; preds = %159
  %164 = load i8, i8* %20, align 1
  %165 = zext i8 %164 to i32
  %166 = icmp eq i32 %165, 1
  br label %167

167:                                              ; preds = %163, %159
  %168 = phi i1 [ true, %159 ], [ %166, %163 ]
  %169 = xor i1 %168, true
  %170 = zext i1 %169 to i32
  %171 = sext i32 %170 to i64
  %172 = call i64 @llvm.expect.i64(i64 %171, i64 0)
  %173 = icmp ne i64 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %167
  unreachable

175:                                              ; preds = %167
  br label %176

176:                                              ; preds = %175
  br label %177

177:                                              ; preds = %176
  br label %178

178:                                              ; preds = %177
  %179 = load i32, i32* %14, align 4
  %180 = load i32, i32* %11, align 4
  %181 = icmp sgt i32 %179, %180
  br i1 %181, label %186, label %182

182:                                              ; preds = %178
  %183 = load i8, i8* %20, align 1
  %184 = zext i8 %183 to i32
  %185 = icmp eq i32 %184, 0
  br label %186

186:                                              ; preds = %182, %178
  %187 = phi i1 [ true, %178 ], [ %185, %182 ]
  %188 = xor i1 %187, true
  %189 = zext i1 %188 to i32
  %190 = sext i32 %189 to i64
  %191 = call i64 @llvm.expect.i64(i64 %190, i64 0)
  %192 = icmp ne i64 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %186
  unreachable

194:                                              ; preds = %186
  br label %195

195:                                              ; preds = %194
  br label %196

196:                                              ; preds = %195
  %197 = load i8, i8* %20, align 1
  %198 = icmp ne i8 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %196
  %200 = load i32, i32* %14, align 4
  %201 = load i32, i32* %13, align 4
  %202 = icmp sgt i32 %200, %201
  %203 = xor i1 %202, true
  %204 = xor i1 %203, true
  %205 = zext i1 %204 to i32
  %206 = sext i32 %205 to i64
  %207 = call i64 @llvm.expect.i64(i64 %206, i64 0)
  %208 = icmp ne i64 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %199
  br label %228

210:                                              ; preds = %199
  br label %211

211:                                              ; preds = %210, %196
  %212 = load %29*, %29** %15, align 8
  %213 = getelementptr inbounds %29, %29* %212, i32 1
  store %29* %213, %29** %15, align 8
  %214 = load %29*, %29** %15, align 8
  store %29* %214, %29** %16, align 8
  %215 = load %29*, %29** %16, align 8
  %216 = call i32 @1465(%29* %215, i8* %9, i8* %19, i32 0)
  %217 = icmp ne i32 %216, 0
  %218 = xor i1 %217, true
  %219 = xor i1 %218, true
  %220 = xor i1 %219, true
  %221 = zext i1 %220 to i32
  %222 = sext i32 %221 to i64
  %223 = call i64 @llvm.expect.i64(i64 %222, i64 0)
  %224 = icmp ne i64 %223, 0
  br i1 %224, label %225, label %226

225:                                              ; preds = %211
  store i32 1, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %228

226:                                              ; preds = %211
  br label %227

227:                                              ; preds = %226
  br label %228

228:                                              ; preds = %227, %225, %209, %155, %139, %79
  %229 = load i32, i32* %21, align 4
  %230 = icmp ne i32 %229, 0
  %231 = xor i1 %230, true
  %232 = xor i1 %231, true
  %233 = zext i1 %232 to i32
  %234 = sext i32 %233 to i64
  %235 = call i64 @llvm.expect.i64(i64 %234, i64 0)
  %236 = icmp ne i64 %235, 0
  br i1 %236, label %237, label %266

237:                                              ; preds = %228
  %238 = load i32, i32* %21, align 4
  %239 = icmp eq i32 %238, 2
  br i1 %239, label %240, label %243

240:                                              ; preds = %237
  %241 = load i32, i32* %14, align 4
  %242 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %241, i8* %242)
  br label %259

243:                                              ; preds = %237
  %244 = load i32, i32* %21, align 4
  %245 = icmp eq i32 %244, 3
  br i1 %245, label %246, label %250

246:                                              ; preds = %243
  %247 = load i32, i32* %14, align 4
  %248 = load i8*, i8** %18, align 8
  %249 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %247, i8* %248, %29* %249)
  br label %258

250:                                              ; preds = %243
  %251 = load i32, i32* %21, align 4
  %252 = icmp eq i32 %251, 4
  br i1 %252, label %253, label %257

253:                                              ; preds = %250
  %254 = load i32, i32* %14, align 4
  %255 = load i32, i32* %17, align 4
  %256 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %254, i32 %255, %29* %256)
  br label %257

257:                                              ; preds = %253, %250
  br label %258

258:                                              ; preds = %257, %246
  br label %259

259:                                              ; preds = %258, %240
  br label %260

260:                                              ; preds = %259
  %261 = load %29*, %29** %4, align 8
  %262 = getelementptr inbounds %29, %29* %261, i32 0, i32 1
  %263 = bitcast %31* %262 to i32*
  store i32 2, i32* %263, align 8
  br label %264

264:                                              ; preds = %260
  br label %265

265:                                              ; preds = %264
  store i32 1, i32* %22, align 4
  br label %267

266:                                              ; preds = %228
  store i32 0, i32* %22, align 4
  br label %267

267:                                              ; preds = %266, %265
  %268 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %268) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %269 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %269) #13
  %270 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %270) #13
  %271 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %271) #13
  %272 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %272) #13
  %273 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #13
  %274 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #13
  %275 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %275) #13
  %276 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #13
  %277 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %277) #13
  %278 = load i32, i32* %22, align 4
  switch i32 %278, label %329 [
    i32 0, label %279
  ]

279:                                              ; preds = %267
  br label %280

280:                                              ; preds = %279
  br label %281

281:                                              ; preds = %280
  %282 = load i8*, i8** %5, align 8
  %283 = call i32 @php_check_open_basedir(i8* %282)
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %292

285:                                              ; preds = %281
  br label %286

286:                                              ; preds = %285
  %287 = load %29*, %29** %4, align 8
  %288 = getelementptr inbounds %29, %29* %287, i32 0, i32 1
  %289 = bitcast %31* %288 to i32*
  store i32 2, i32* %289, align 8
  br label %290

290:                                              ; preds = %286
  br label %291

291:                                              ; preds = %290
  store i32 1, i32* %22, align 4
  br label %329

292:                                              ; preds = %281
  %293 = load i8, i8* %9, align 1
  %294 = icmp ne i8 %293, 0
  br i1 %294, label %295, label %297

295:                                              ; preds = %292
  %296 = call i32 @php_output_start_default()
  br label %297

297:                                              ; preds = %295, %292
  call void @php_get_highlight_struct(%96* %8)
  %298 = load i8*, i8** %5, align 8
  %299 = call i32 @highlight_file(i8* %298, %96* %8)
  store i32 %299, i32* %7, align 4
  %300 = load i32, i32* %7, align 4
  %301 = icmp eq i32 %300, -1
  br i1 %301, label %302, label %314

302:                                              ; preds = %297
  %303 = load i8, i8* %9, align 1
  %304 = icmp ne i8 %303, 0
  br i1 %304, label %305, label %307

305:                                              ; preds = %302
  %306 = call i32 @php_output_end()
  br label %307

307:                                              ; preds = %305, %302
  br label %308

308:                                              ; preds = %307
  %309 = load %29*, %29** %4, align 8
  %310 = getelementptr inbounds %29, %29* %309, i32 0, i32 1
  %311 = bitcast %31* %310 to i32*
  store i32 2, i32* %311, align 8
  br label %312

312:                                              ; preds = %308
  br label %313

313:                                              ; preds = %312
  store i32 1, i32* %22, align 4
  br label %329

314:                                              ; preds = %297
  %315 = load i8, i8* %9, align 1
  %316 = icmp ne i8 %315, 0
  br i1 %316, label %317, label %321

317:                                              ; preds = %314
  %318 = load %29*, %29** %4, align 8
  %319 = call i32 @php_output_get_contents(%29* %318)
  %320 = call i32 @php_output_discard()
  br label %328

321:                                              ; preds = %314
  br label %322

322:                                              ; preds = %321
  %323 = load %29*, %29** %4, align 8
  %324 = getelementptr inbounds %29, %29* %323, i32 0, i32 1
  %325 = bitcast %31* %324 to i32*
  store i32 3, i32* %325, align 8
  br label %326

326:                                              ; preds = %322
  br label %327

327:                                              ; preds = %326
  store i32 1, i32* %22, align 4
  br label %329

328:                                              ; preds = %317
  store i32 0, i32* %22, align 4
  br label %329

329:                                              ; preds = %328, %327, %313, %291, %267
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %9) #13
  %330 = bitcast %96* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %330) #13
  %331 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %331) #13
  %332 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %332) #13
  %333 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %333) #13
  %334 = load i32, i32* %22, align 4
  switch i32 %334, label %336 [
    i32 0, label %335
    i32 1, label %335
  ]

335:                                              ; preds = %329, %329
  ret void

336:                                              ; preds = %329
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_highlight_string(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %96, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  %24 = bitcast %96* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* %24) #13
  %25 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %8) #13
  store i8 0, i8* %8, align 1
  %26 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  %27 = load i32, i32* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 8), align 8
  store i32 %27, i32* %9, align 4
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %10, align 4
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %11, align 4
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 2, i32* %12, align 4
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %13, align 4
  %38 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %16, align 8
  %41 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %17, align 4
  %42 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %43 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %21, align 4
  %44 = load i32, i32* %14, align 4
  %45 = load %29*, %29** %15, align 8
  %46 = load %29*, %29** %16, align 8
  %47 = load i32, i32* %17, align 4
  %48 = load i8*, i8** %18, align 8
  %49 = load i8, i8* %19, align 1
  %50 = load i8, i8* %20, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %13, align 4
  %53 = load i32, i32* %11, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %13, align 4
  %63 = load i32, i32* %12, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %12, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %13, align 4
  %82 = load i32, i32* %11, align 4
  %83 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %21, align 4
  br label %218

84:                                               ; preds = %71, %61
  store i32 0, i32* %14, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %15, align 8
  %88 = load i32, i32* %14, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %14, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %14, align 4
  %92 = load i32, i32* %11, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %20, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %14, align 4
  %111 = load i32, i32* %11, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %20, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %20, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %14, align 4
  %132 = load i32, i32* %13, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %218

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %15, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %15, align 8
  %145 = load %29*, %29** %15, align 8
  store %29* %145, %29** %16, align 8
  %146 = load %29*, %29** %16, align 8
  call void @1469(%29* %146, %29** %5, i32 0)
  store i8 1, i8* %20, align 1
  %147 = load i32, i32* %14, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %14, align 4
  br label %149

149:                                              ; preds = %142
  %150 = load i32, i32* %14, align 4
  %151 = load i32, i32* %11, align 4
  %152 = icmp sle i32 %150, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %149
  %154 = load i8, i8* %20, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp eq i32 %155, 1
  br label %157

157:                                              ; preds = %153, %149
  %158 = phi i1 [ true, %149 ], [ %156, %153 ]
  %159 = xor i1 %158, true
  %160 = zext i1 %159 to i32
  %161 = sext i32 %160 to i64
  %162 = call i64 @llvm.expect.i64(i64 %161, i64 0)
  %163 = icmp ne i64 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %157
  unreachable

165:                                              ; preds = %157
  br label %166

166:                                              ; preds = %165
  br label %167

167:                                              ; preds = %166
  br label %168

168:                                              ; preds = %167
  %169 = load i32, i32* %14, align 4
  %170 = load i32, i32* %11, align 4
  %171 = icmp sgt i32 %169, %170
  br i1 %171, label %176, label %172

172:                                              ; preds = %168
  %173 = load i8, i8* %20, align 1
  %174 = zext i8 %173 to i32
  %175 = icmp eq i32 %174, 0
  br label %176

176:                                              ; preds = %172, %168
  %177 = phi i1 [ true, %168 ], [ %175, %172 ]
  %178 = xor i1 %177, true
  %179 = zext i1 %178 to i32
  %180 = sext i32 %179 to i64
  %181 = call i64 @llvm.expect.i64(i64 %180, i64 0)
  %182 = icmp ne i64 %181, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %176
  unreachable

184:                                              ; preds = %176
  br label %185

185:                                              ; preds = %184
  br label %186

186:                                              ; preds = %185
  %187 = load i8, i8* %20, align 1
  %188 = icmp ne i8 %187, 0
  br i1 %188, label %189, label %201

189:                                              ; preds = %186
  %190 = load i32, i32* %14, align 4
  %191 = load i32, i32* %13, align 4
  %192 = icmp sgt i32 %190, %191
  %193 = xor i1 %192, true
  %194 = xor i1 %193, true
  %195 = zext i1 %194 to i32
  %196 = sext i32 %195 to i64
  %197 = call i64 @llvm.expect.i64(i64 %196, i64 0)
  %198 = icmp ne i64 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %189
  br label %218

200:                                              ; preds = %189
  br label %201

201:                                              ; preds = %200, %186
  %202 = load %29*, %29** %15, align 8
  %203 = getelementptr inbounds %29, %29* %202, i32 1
  store %29* %203, %29** %15, align 8
  %204 = load %29*, %29** %15, align 8
  store %29* %204, %29** %16, align 8
  %205 = load %29*, %29** %16, align 8
  %206 = call i32 @1465(%29* %205, i8* %8, i8* %19, i32 0)
  %207 = icmp ne i32 %206, 0
  %208 = xor i1 %207, true
  %209 = xor i1 %208, true
  %210 = xor i1 %209, true
  %211 = zext i1 %210 to i32
  %212 = sext i32 %211 to i64
  %213 = call i64 @llvm.expect.i64(i64 %212, i64 0)
  %214 = icmp ne i64 %213, 0
  br i1 %214, label %215, label %216

215:                                              ; preds = %201
  store i32 1, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %218

216:                                              ; preds = %201
  br label %217

217:                                              ; preds = %216
  br label %218

218:                                              ; preds = %217, %215, %199, %140, %80
  %219 = load i32, i32* %21, align 4
  %220 = icmp ne i32 %219, 0
  %221 = xor i1 %220, true
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i32
  %224 = sext i32 %223 to i64
  %225 = call i64 @llvm.expect.i64(i64 %224, i64 0)
  %226 = icmp ne i64 %225, 0
  br i1 %226, label %227, label %256

227:                                              ; preds = %218
  %228 = load i32, i32* %21, align 4
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %230, label %233

230:                                              ; preds = %227
  %231 = load i32, i32* %14, align 4
  %232 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %231, i8* %232)
  br label %249

233:                                              ; preds = %227
  %234 = load i32, i32* %21, align 4
  %235 = icmp eq i32 %234, 3
  br i1 %235, label %236, label %240

236:                                              ; preds = %233
  %237 = load i32, i32* %14, align 4
  %238 = load i8*, i8** %18, align 8
  %239 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %237, i8* %238, %29* %239)
  br label %248

240:                                              ; preds = %233
  %241 = load i32, i32* %21, align 4
  %242 = icmp eq i32 %241, 4
  br i1 %242, label %243, label %247

243:                                              ; preds = %240
  %244 = load i32, i32* %14, align 4
  %245 = load i32, i32* %17, align 4
  %246 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %244, i32 %245, %29* %246)
  br label %247

247:                                              ; preds = %243, %240
  br label %248

248:                                              ; preds = %247, %236
  br label %249

249:                                              ; preds = %248, %230
  br label %250

250:                                              ; preds = %249
  %251 = load %29*, %29** %4, align 8
  %252 = getelementptr inbounds %29, %29* %251, i32 0, i32 1
  %253 = bitcast %31* %252 to i32*
  store i32 2, i32* %253, align 8
  br label %254

254:                                              ; preds = %250
  br label %255

255:                                              ; preds = %254
  store i32 1, i32* %22, align 4
  br label %257

256:                                              ; preds = %218
  store i32 0, i32* %22, align 4
  br label %257

257:                                              ; preds = %256, %255
  %258 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %258) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %259 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %259) #13
  %260 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %260) #13
  %261 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %261) #13
  %262 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %262) #13
  %263 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %263) #13
  %264 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %264) #13
  %265 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %265) #13
  %266 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %266) #13
  %267 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #13
  %268 = load i32, i32* %22, align 4
  switch i32 %268, label %326 [
    i32 0, label %269
  ]

269:                                              ; preds = %257
  br label %270

270:                                              ; preds = %269
  br label %271

271:                                              ; preds = %270
  %272 = load %29*, %29** %5, align 8
  %273 = call zeroext i8 @1468(%29* %272)
  %274 = zext i8 %273 to i32
  %275 = icmp ne i32 %274, 6
  br i1 %275, label %276, label %284

276:                                              ; preds = %271
  %277 = load %29*, %29** %5, align 8
  %278 = call zeroext i8 @1468(%29* %277)
  %279 = zext i8 %278 to i32
  %280 = icmp ne i32 %279, 6
  br i1 %280, label %281, label %283

281:                                              ; preds = %276
  %282 = load %29*, %29** %5, align 8
  call void @_convert_to_string(%29* %282)
  br label %283

283:                                              ; preds = %281, %276
  br label %284

284:                                              ; preds = %283, %271
  %285 = load i8, i8* %8, align 1
  %286 = icmp ne i8 %285, 0
  br i1 %286, label %287, label %289

287:                                              ; preds = %284
  %288 = call i32 @php_output_start_default()
  br label %289

289:                                              ; preds = %287, %284
  store i32 1, i32* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 8), align 8
  call void @php_get_highlight_struct(%96* %6)
  %290 = call i8* @zend_make_compiled_string_description(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1133, i32 0, i32 0))
  store i8* %290, i8** %7, align 8
  %291 = load %29*, %29** %5, align 8
  %292 = load i8*, i8** %7, align 8
  %293 = call i32 @highlight_string(%29* %291, %96* %6, i8* %292)
  %294 = icmp eq i32 %293, -1
  br i1 %294, label %295, label %309

295:                                              ; preds = %289
  %296 = load i8*, i8** %7, align 8
  call void @_efree(i8* %296)
  %297 = load i32, i32* %9, align 4
  store i32 %297, i32* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 8), align 8
  %298 = load i8, i8* %8, align 1
  %299 = icmp ne i8 %298, 0
  br i1 %299, label %300, label %302

300:                                              ; preds = %295
  %301 = call i32 @php_output_end()
  br label %302

302:                                              ; preds = %300, %295
  br label %303

303:                                              ; preds = %302
  %304 = load %29*, %29** %4, align 8
  %305 = getelementptr inbounds %29, %29* %304, i32 0, i32 1
  %306 = bitcast %31* %305 to i32*
  store i32 2, i32* %306, align 8
  br label %307

307:                                              ; preds = %303
  br label %308

308:                                              ; preds = %307
  store i32 1, i32* %22, align 4
  br label %326

309:                                              ; preds = %289
  %310 = load i8*, i8** %7, align 8
  call void @_efree(i8* %310)
  %311 = load i32, i32* %9, align 4
  store i32 %311, i32* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 8), align 8
  %312 = load i8, i8* %8, align 1
  %313 = icmp ne i8 %312, 0
  br i1 %313, label %314, label %318

314:                                              ; preds = %309
  %315 = load %29*, %29** %4, align 8
  %316 = call i32 @php_output_get_contents(%29* %315)
  %317 = call i32 @php_output_discard()
  br label %325

318:                                              ; preds = %309
  br label %319

319:                                              ; preds = %318
  %320 = load %29*, %29** %4, align 8
  %321 = getelementptr inbounds %29, %29* %320, i32 0, i32 1
  %322 = bitcast %31* %321 to i32*
  store i32 3, i32* %322, align 8
  br label %323

323:                                              ; preds = %319
  br label %324

324:                                              ; preds = %323
  store i32 1, i32* %22, align 4
  br label %326

325:                                              ; preds = %314
  store i32 0, i32* %22, align 4
  br label %326

326:                                              ; preds = %325, %324, %308, %257
  %327 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %327) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %8) #13
  %328 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %328) #13
  %329 = bitcast %96* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 40, i8* %329) #13
  %330 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %330) #13
  %331 = load i32, i32* %22, align 4
  switch i32 %331, label %333 [
    i32 0, label %332
    i32 1, label %332
  ]

332:                                              ; preds = %326, %326
  ret void

333:                                              ; preds = %326
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_php_strip_whitespace(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %97, align 8
  %8 = alloca %99, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %29*, align 8
  %23 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast %97* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 224, i8* %26) #13
  %27 = bitcast %99* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %27) #13
  br label %28

28:                                               ; preds = %2
  %29 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %10, align 4
  %31 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %11, align 4
  %32 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  %33 = load %1*, %1** %3, align 8
  %34 = getelementptr inbounds %1, %1* %33, i32 0, i32 4
  %35 = getelementptr inbounds %29, %29* %34, i32 0, i32 2
  %36 = bitcast %32* %35 to i32*
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %12, align 4
  %38 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  %39 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  %40 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  store %29* null, %29** %15, align 8
  %41 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  store i32 0, i32* %16, align 4
  %42 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %43 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 0, i32* %20, align 4
  %44 = load i32, i32* %13, align 4
  %45 = load %29*, %29** %14, align 8
  %46 = load %29*, %29** %15, align 8
  %47 = load i32, i32* %16, align 4
  %48 = load i8*, i8** %17, align 8
  %49 = load i8, i8* %18, align 1
  %50 = load i8, i8* %19, align 1
  br label %51

51:                                               ; preds = %28
  %52 = load i32, i32* %12, align 4
  %53 = load i32, i32* %10, align 4
  %54 = icmp slt i32 %52, %53
  %55 = xor i1 %54, true
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = call i64 @llvm.expect.i64(i64 %58, i64 0)
  %60 = icmp ne i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %51
  %62 = load i32, i32* %12, align 4
  %63 = load i32, i32* %11, align 4
  %64 = icmp sgt i32 %62, %63
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = sext i32 %67 to i64
  %69 = call i64 @llvm.expect.i64(i64 %68, i64 0)
  %70 = icmp ne i64 %69, 0
  br i1 %70, label %71, label %84

71:                                               ; preds = %61
  %72 = load i32, i32* %11, align 4
  %73 = icmp sge i32 %72, 0
  %74 = xor i1 %73, true
  %75 = xor i1 %74, true
  %76 = zext i1 %75 to i32
  %77 = sext i32 %76 to i64
  %78 = call i64 @llvm.expect.i64(i64 %77, i64 1)
  %79 = icmp ne i64 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %71, %51
  %81 = load i32, i32* %12, align 4
  %82 = load i32, i32* %10, align 4
  %83 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %81, i32 %82, i32 %83)
  store i32 1, i32* %20, align 4
  br label %159

84:                                               ; preds = %71, %61
  store i32 0, i32* %13, align 4
  %85 = load %1*, %1** %3, align 8
  %86 = bitcast %1* %85 to %29*
  %87 = getelementptr inbounds %29, %29* %86, i64 4
  store %29* %87, %29** %14, align 8
  %88 = load i32, i32* %13, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %13, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %13, align 4
  %92 = load i32, i32* %10, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %98, label %94

94:                                               ; preds = %90
  %95 = load i8, i8* %19, align 1
  %96 = zext i8 %95 to i32
  %97 = icmp eq i32 %96, 1
  br label %98

98:                                               ; preds = %94, %90
  %99 = phi i1 [ true, %90 ], [ %97, %94 ]
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = sext i32 %101 to i64
  %103 = call i64 @llvm.expect.i64(i64 %102, i64 0)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %98
  unreachable

106:                                              ; preds = %98
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %13, align 4
  %111 = load i32, i32* %10, align 4
  %112 = icmp sgt i32 %110, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = load i8, i8* %19, align 1
  %115 = zext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br label %117

117:                                              ; preds = %113, %109
  %118 = phi i1 [ true, %109 ], [ %116, %113 ]
  %119 = xor i1 %118, true
  %120 = zext i1 %119 to i32
  %121 = sext i32 %120 to i64
  %122 = call i64 @llvm.expect.i64(i64 %121, i64 0)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %117
  unreachable

125:                                              ; preds = %117
  br label %126

126:                                              ; preds = %125
  br label %127

127:                                              ; preds = %126
  %128 = load i8, i8* %19, align 1
  %129 = icmp ne i8 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %127
  %131 = load i32, i32* %13, align 4
  %132 = load i32, i32* %12, align 4
  %133 = icmp sgt i32 %131, %132
  %134 = xor i1 %133, true
  %135 = xor i1 %134, true
  %136 = zext i1 %135 to i32
  %137 = sext i32 %136 to i64
  %138 = call i64 @llvm.expect.i64(i64 %137, i64 0)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %130
  br label %159

141:                                              ; preds = %130
  br label %142

142:                                              ; preds = %141, %127
  %143 = load %29*, %29** %14, align 8
  %144 = getelementptr inbounds %29, %29* %143, i32 1
  store %29* %144, %29** %14, align 8
  %145 = load %29*, %29** %14, align 8
  store %29* %145, %29** %15, align 8
  %146 = load %29*, %29** %15, align 8
  %147 = call i32 @1478(%29* %146, i8** %5, i64* %6, i32 0)
  %148 = icmp ne i32 %147, 0
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = zext i1 %151 to i32
  %153 = sext i32 %152 to i64
  %154 = call i64 @llvm.expect.i64(i64 %153, i64 0)
  %155 = icmp ne i64 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  store i32 6, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %159

157:                                              ; preds = %142
  br label %158

158:                                              ; preds = %157
  br label %159

159:                                              ; preds = %158, %156, %140, %80
  %160 = load i32, i32* %20, align 4
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = zext i1 %163 to i32
  %165 = sext i32 %164 to i64
  %166 = call i64 @llvm.expect.i64(i64 %165, i64 0)
  %167 = icmp ne i64 %166, 0
  br i1 %167, label %168, label %197

168:                                              ; preds = %159
  %169 = load i32, i32* %20, align 4
  %170 = icmp eq i32 %169, 2
  br i1 %170, label %171, label %174

171:                                              ; preds = %168
  %172 = load i32, i32* %13, align 4
  %173 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %172, i8* %173)
  br label %190

174:                                              ; preds = %168
  %175 = load i32, i32* %20, align 4
  %176 = icmp eq i32 %175, 3
  br i1 %176, label %177, label %181

177:                                              ; preds = %174
  %178 = load i32, i32* %13, align 4
  %179 = load i8*, i8** %17, align 8
  %180 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %178, i8* %179, %29* %180)
  br label %189

181:                                              ; preds = %174
  %182 = load i32, i32* %20, align 4
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %184, label %188

184:                                              ; preds = %181
  %185 = load i32, i32* %13, align 4
  %186 = load i32, i32* %16, align 4
  %187 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %185, i32 %186, %29* %187)
  br label %188

188:                                              ; preds = %184, %181
  br label %189

189:                                              ; preds = %188, %177
  br label %190

190:                                              ; preds = %189, %171
  br label %191

191:                                              ; preds = %190
  %192 = load %29*, %29** %4, align 8
  %193 = getelementptr inbounds %29, %29* %192, i32 0, i32 1
  %194 = bitcast %31* %193 to i32*
  store i32 2, i32* %194, align 8
  br label %195

195:                                              ; preds = %191
  br label %196

196:                                              ; preds = %195
  store i32 1, i32* %21, align 4
  br label %198

197:                                              ; preds = %159
  store i32 0, i32* %21, align 4
  br label %198

198:                                              ; preds = %197, %196
  %199 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %200 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %200) #13
  %201 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202) #13
  %203 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %203) #13
  %204 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %204) #13
  %205 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #13
  %206 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %207) #13
  %208 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %208) #13
  %209 = load i32, i32* %21, align 4
  switch i32 %209, label %247 [
    i32 0, label %210
  ]

210:                                              ; preds = %198
  br label %211

211:                                              ; preds = %210
  br label %212

212:                                              ; preds = %211
  %213 = call i32 @php_output_start_default()
  %214 = bitcast %99* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %214, i8 0, i64 112, i1 false)
  %215 = getelementptr inbounds %99, %99* %8, i32 0, i32 3
  store i32 0, i32* %215, align 8
  %216 = load i8*, i8** %5, align 8
  %217 = getelementptr inbounds %99, %99* %8, i32 0, i32 1
  store i8* %216, i8** %217, align 8
  %218 = getelementptr inbounds %99, %99* %8, i32 0, i32 4
  store i8 0, i8* %218, align 4
  %219 = getelementptr inbounds %99, %99* %8, i32 0, i32 2
  store %28* null, %28** %219, align 8
  call void @zend_save_lexical_state(%97* %7)
  %220 = call i32 @open_file_for_scanning(%99* %8)
  %221 = icmp eq i32 %220, -1
  br i1 %221, label %222, label %243

222:                                              ; preds = %212
  call void @zend_restore_lexical_state(%97* %7)
  %223 = call i32 @php_output_end()
  br label %224

224:                                              ; preds = %222
  br label %225

225:                                              ; preds = %224
  %226 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %226) #13
  %227 = load %29*, %29** %4, align 8
  store %29* %227, %29** %22, align 8
  %228 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %228) #13
  %229 = load %28*, %28** @zend_empty_string, align 8
  store %28* %229, %28** %23, align 8
  %230 = load %28*, %28** %23, align 8
  %231 = load %29*, %29** %22, align 8
  %232 = getelementptr inbounds %29, %29* %231, i32 0, i32 0
  %233 = bitcast %30* %232 to %28**
  store %28* %230, %28** %233, align 8
  %234 = load %29*, %29** %22, align 8
  %235 = getelementptr inbounds %29, %29* %234, i32 0, i32 1
  %236 = bitcast %31* %235 to i32*
  store i32 6, i32* %236, align 8
  %237 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %237) #13
  %238 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %238) #13
  br label %239

239:                                              ; preds = %225
  br label %240

240:                                              ; preds = %239
  br label %241

241:                                              ; preds = %240
  br label %242

242:                                              ; preds = %241
  store i32 1, i32* %21, align 4
  br label %247

243:                                              ; preds = %212
  call void @zend_strip()
  call void @zend_destroy_file_handle(%99* %8)
  call void @zend_restore_lexical_state(%97* %7)
  %244 = load %29*, %29** %4, align 8
  %245 = call i32 @php_output_get_contents(%29* %244)
  %246 = call i32 @php_output_discard()
  store i32 0, i32* %21, align 4
  br label %247

247:                                              ; preds = %243, %242, %198
  %248 = bitcast %99* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %248) #13
  %249 = bitcast %97* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 224, i8* %249) #13
  %250 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %250) #13
  %251 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %251) #13
  %252 = load i32, i32* %21, align 4
  switch i32 %252, label %254 [
    i32 0, label %253
    i32 1, label %253
  ]

253:                                              ; preds = %247, %247
  ret void

254:                                              ; preds = %247
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ini_get(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29*, align 8
  %15 = alloca %29*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %29*, align 8
  %23 = alloca %28*, align 8
  %24 = alloca %29*, align 8
  %25 = alloca %28*, align 8
  %26 = alloca %29*, align 8
  %27 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  %31 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  br label %32

32:                                               ; preds = %2
  %33 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %9, align 4
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 1, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 1, i32* %11, align 4
  %36 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = load %1*, %1** %3, align 8
  %38 = getelementptr inbounds %1, %1* %37, i32 0, i32 4
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 2
  %40 = bitcast %32* %39 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %12, align 4
  %42 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  %43 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store %29* null, %29** %15, align 8
  %45 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %16, align 4
  %46 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  store i8* null, i8** %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  store i8 0, i8* %19, align 1
  %47 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #13
  store i32 0, i32* %20, align 4
  %48 = load i32, i32* %13, align 4
  %49 = load %29*, %29** %14, align 8
  %50 = load %29*, %29** %15, align 8
  %51 = load i32, i32* %16, align 4
  %52 = load i8*, i8** %17, align 8
  %53 = load i8, i8* %18, align 1
  %54 = load i8, i8* %19, align 1
  br label %55

55:                                               ; preds = %32
  %56 = load i32, i32* %12, align 4
  %57 = load i32, i32* %10, align 4
  %58 = icmp slt i32 %56, %57
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i64 @llvm.expect.i64(i64 %62, i64 0)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %84, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %12, align 4
  %67 = load i32, i32* %11, align 4
  %68 = icmp sgt i32 %66, %67
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = load i32, i32* %11, align 4
  %77 = icmp sge i32 %76, 0
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 1)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %75, %55
  %85 = load i32, i32* %12, align 4
  %86 = load i32, i32* %10, align 4
  %87 = load i32, i32* %11, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %85, i32 %86, i32 %87)
  store i32 1, i32* %20, align 4
  br label %163

88:                                               ; preds = %75, %65
  store i32 0, i32* %13, align 4
  %89 = load %1*, %1** %3, align 8
  %90 = bitcast %1* %89 to %29*
  %91 = getelementptr inbounds %29, %29* %90, i64 4
  store %29* %91, %29** %14, align 8
  %92 = load i32, i32* %13, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %13, align 4
  br label %94

94:                                               ; preds = %88
  %95 = load i32, i32* %13, align 4
  %96 = load i32, i32* %10, align 4
  %97 = icmp sle i32 %95, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %19, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 1
  br label %102

102:                                              ; preds = %98, %94
  %103 = phi i1 [ true, %94 ], [ %101, %98 ]
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = call i64 @llvm.expect.i64(i64 %106, i64 0)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %13, align 4
  %115 = load i32, i32* %10, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %121, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %19, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br label %121

121:                                              ; preds = %117, %113
  %122 = phi i1 [ true, %113 ], [ %120, %117 ]
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  %125 = sext i32 %124 to i64
  %126 = call i64 @llvm.expect.i64(i64 %125, i64 0)
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  unreachable

129:                                              ; preds = %121
  br label %130

130:                                              ; preds = %129
  br label %131

131:                                              ; preds = %130
  %132 = load i8, i8* %19, align 1
  %133 = icmp ne i8 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %131
  %135 = load i32, i32* %13, align 4
  %136 = load i32, i32* %12, align 4
  %137 = icmp sgt i32 %135, %136
  %138 = xor i1 %137, true
  %139 = xor i1 %138, true
  %140 = zext i1 %139 to i32
  %141 = sext i32 %140 to i64
  %142 = call i64 @llvm.expect.i64(i64 %141, i64 0)
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  br label %163

145:                                              ; preds = %134
  br label %146

146:                                              ; preds = %145, %131
  %147 = load %29*, %29** %14, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 1
  store %29* %148, %29** %14, align 8
  %149 = load %29*, %29** %14, align 8
  store %29* %149, %29** %15, align 8
  %150 = load %29*, %29** %15, align 8
  %151 = call i32 @1462(%29* %150, i8** %5, i64* %7, i32 0)
  %152 = icmp ne i32 %151, 0
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %146
  store i32 2, i32* %16, align 4
  store i32 4, i32* %20, align 4
  br label %163

161:                                              ; preds = %146
  br label %162

162:                                              ; preds = %161
  br label %163

163:                                              ; preds = %162, %160, %144, %84
  %164 = load i32, i32* %20, align 4
  %165 = icmp ne i32 %164, 0
  %166 = xor i1 %165, true
  %167 = xor i1 %166, true
  %168 = zext i1 %167 to i32
  %169 = sext i32 %168 to i64
  %170 = call i64 @llvm.expect.i64(i64 %169, i64 0)
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %195

172:                                              ; preds = %163
  %173 = load i32, i32* %20, align 4
  %174 = icmp eq i32 %173, 2
  br i1 %174, label %175, label %178

175:                                              ; preds = %172
  %176 = load i32, i32* %13, align 4
  %177 = load i8*, i8** %17, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %176, i8* %177)
  br label %194

178:                                              ; preds = %172
  %179 = load i32, i32* %20, align 4
  %180 = icmp eq i32 %179, 3
  br i1 %180, label %181, label %185

181:                                              ; preds = %178
  %182 = load i32, i32* %13, align 4
  %183 = load i8*, i8** %17, align 8
  %184 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %182, i8* %183, %29* %184)
  br label %193

185:                                              ; preds = %178
  %186 = load i32, i32* %20, align 4
  %187 = icmp eq i32 %186, 4
  br i1 %187, label %188, label %192

188:                                              ; preds = %185
  %189 = load i32, i32* %13, align 4
  %190 = load i32, i32* %16, align 4
  %191 = load %29*, %29** %15, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %189, i32 %190, %29* %191)
  br label %192

192:                                              ; preds = %188, %185
  br label %193

193:                                              ; preds = %192, %181
  br label %194

194:                                              ; preds = %193, %175
  store i32 1, i32* %21, align 4
  br label %196

195:                                              ; preds = %163
  store i32 0, i32* %21, align 4
  br label %196

196:                                              ; preds = %195, %194
  %197 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  %198 = bitcast i8** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %198) #13
  %199 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %200) #13
  %201 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %201) #13
  %202 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %203) #13
  %204 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %204) #13
  %205 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #13
  %206 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = load i32, i32* %21, align 4
  switch i32 %207, label %297 [
    i32 0, label %208
  ]

208:                                              ; preds = %196
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  %211 = load i8*, i8** %5, align 8
  %212 = load i64, i64* %7, align 8
  %213 = trunc i64 %212 to i32
  %214 = call i8* @zend_ini_string(i8* %211, i32 %213, i32 0)
  store i8* %214, i8** %6, align 8
  %215 = load i8*, i8** %6, align 8
  %216 = icmp ne i8* %215, null
  br i1 %216, label %224, label %217

217:                                              ; preds = %210
  br label %218

218:                                              ; preds = %217
  %219 = load %29*, %29** %4, align 8
  %220 = getelementptr inbounds %29, %29* %219, i32 0, i32 1
  %221 = bitcast %31* %220 to i32*
  store i32 2, i32* %221, align 8
  br label %222

222:                                              ; preds = %218
  br label %223

223:                                              ; preds = %222
  store i32 1, i32* %21, align 4
  br label %297

224:                                              ; preds = %210
  %225 = load i8*, i8** %6, align 8
  %226 = call i64 @strlen(i8* %225) #15
  store i64 %226, i64* %8, align 8
  %227 = load i64, i64* %8, align 8
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %249

229:                                              ; preds = %224
  br label %230

230:                                              ; preds = %229
  br label %231

231:                                              ; preds = %230
  %232 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %232) #13
  %233 = load %29*, %29** %4, align 8
  store %29* %233, %29** %22, align 8
  %234 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %234) #13
  %235 = load %28*, %28** @zend_empty_string, align 8
  store %28* %235, %28** %23, align 8
  %236 = load %28*, %28** %23, align 8
  %237 = load %29*, %29** %22, align 8
  %238 = getelementptr inbounds %29, %29* %237, i32 0, i32 0
  %239 = bitcast %30* %238 to %28**
  store %28* %236, %28** %239, align 8
  %240 = load %29*, %29** %22, align 8
  %241 = getelementptr inbounds %29, %29* %240, i32 0, i32 1
  %242 = bitcast %31* %241 to i32*
  store i32 6, i32* %242, align 8
  %243 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %243) #13
  %244 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %244) #13
  br label %245

245:                                              ; preds = %231
  br label %246

246:                                              ; preds = %245
  br label %247

247:                                              ; preds = %246
  br label %248

248:                                              ; preds = %247
  store i32 1, i32* %21, align 4
  br label %297

249:                                              ; preds = %224
  %250 = load i64, i64* %8, align 8
  %251 = icmp eq i64 %250, 1
  br i1 %251, label %252, label %274

252:                                              ; preds = %249
  br label %253

253:                                              ; preds = %252
  %254 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %254) #13
  %255 = load %29*, %29** %4, align 8
  store %29* %255, %29** %24, align 8
  %256 = bitcast %28** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %256) #13
  %257 = load i8*, i8** %6, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 0
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i64
  %261 = getelementptr inbounds [256 x %28*], [256 x %28*]* @zend_one_char_string, i64 0, i64 %260
  %262 = load %28*, %28** %261, align 8
  store %28* %262, %28** %25, align 8
  %263 = load %28*, %28** %25, align 8
  %264 = load %29*, %29** %24, align 8
  %265 = getelementptr inbounds %29, %29* %264, i32 0, i32 0
  %266 = bitcast %30* %265 to %28**
  store %28* %263, %28** %266, align 8
  %267 = load %29*, %29** %24, align 8
  %268 = getelementptr inbounds %29, %29* %267, i32 0, i32 1
  %269 = bitcast %31* %268 to i32*
  store i32 6, i32* %269, align 8
  %270 = bitcast %28** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %270) #13
  %271 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %271) #13
  br label %272

272:                                              ; preds = %253
  br label %273

273:                                              ; preds = %272
  store i32 1, i32* %21, align 4
  br label %297

274:                                              ; preds = %249
  br label %275

275:                                              ; preds = %274
  br label %276

276:                                              ; preds = %275
  br label %277

277:                                              ; preds = %276
  %278 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %278) #13
  %279 = load %29*, %29** %4, align 8
  store %29* %279, %29** %26, align 8
  %280 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %280) #13
  %281 = load i8*, i8** %6, align 8
  %282 = load i64, i64* %8, align 8
  %283 = call %28* @1463(i8* %281, i64 %282, i32 0)
  store %28* %283, %28** %27, align 8
  %284 = load %28*, %28** %27, align 8
  %285 = load %29*, %29** %26, align 8
  %286 = getelementptr inbounds %29, %29* %285, i32 0, i32 0
  %287 = bitcast %30* %286 to %28**
  store %28* %284, %28** %287, align 8
  %288 = load %29*, %29** %26, align 8
  %289 = getelementptr inbounds %29, %29* %288, i32 0, i32 1
  %290 = bitcast %31* %289 to i32*
  store i32 5126, i32* %290, align 8
  %291 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %291) #13
  %292 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %292) #13
  br label %293

293:                                              ; preds = %277
  br label %294

294:                                              ; preds = %293
  br label %295

295:                                              ; preds = %294
  br label %296

296:                                              ; preds = %295
  store i32 1, i32* %21, align 4
  br label %297

297:                                              ; preds = %296, %273, %248, %223, %196
  %298 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %298) #13
  %299 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %299) #13
  %300 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %300) #13
  %301 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %301) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ini_get_all(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %34*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %29*, align 8
  %16 = alloca %29*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i8*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %23 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #13
  store i8* null, i8** %5, align 8
  %24 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  store i64 0, i64* %6, align 8
  %25 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  store i64 0, i64* %7, align 8
  %26 = bitcast %34** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %9) #13
  store i8 1, i8* %9, align 1
  br label %27

27:                                               ; preds = %2
  %28 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 0, i32* %10, align 4
  %29 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 0, i32* %11, align 4
  %30 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 2, i32* %12, align 4
  %31 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  %32 = load %1*, %1** %3, align 8
  %33 = getelementptr inbounds %1, %1* %32, i32 0, i32 4
  %34 = getelementptr inbounds %29, %29* %33, i32 0, i32 2
  %35 = bitcast %32* %34 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %13, align 4
  %37 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store %29* null, %29** %16, align 8
  %40 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %17, align 4
  %41 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store i8* null, i8** %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %19) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  store i8 0, i8* %20, align 1
  %42 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %21, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load %29*, %29** %15, align 8
  %45 = load %29*, %29** %16, align 8
  %46 = load i32, i32* %17, align 4
  %47 = load i8*, i8** %18, align 8
  %48 = load i8, i8* %19, align 1
  %49 = load i8, i8* %20, align 1
  br label %50

50:                                               ; preds = %27
  %51 = load i32, i32* %13, align 4
  %52 = load i32, i32* %11, align 4
  %53 = icmp slt i32 %51, %52
  %54 = xor i1 %53, true
  %55 = xor i1 %54, true
  %56 = zext i1 %55 to i32
  %57 = sext i32 %56 to i64
  %58 = call i64 @llvm.expect.i64(i64 %57, i64 0)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %50
  %61 = load i32, i32* %13, align 4
  %62 = load i32, i32* %12, align 4
  %63 = icmp sgt i32 %61, %62
  %64 = xor i1 %63, true
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = call i64 @llvm.expect.i64(i64 %67, i64 0)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %83

70:                                               ; preds = %60
  %71 = load i32, i32* %12, align 4
  %72 = icmp sge i32 %71, 0
  %73 = xor i1 %72, true
  %74 = xor i1 %73, true
  %75 = zext i1 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = call i64 @llvm.expect.i64(i64 %76, i64 1)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %70, %50
  %80 = load i32, i32* %13, align 4
  %81 = load i32, i32* %11, align 4
  %82 = load i32, i32* %12, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %80, i32 %81, i32 %82)
  store i32 1, i32* %21, align 4
  br label %228

83:                                               ; preds = %70, %60
  store i32 0, i32* %14, align 4
  %84 = load %1*, %1** %3, align 8
  %85 = bitcast %1* %84 to %29*
  %86 = getelementptr inbounds %29, %29* %85, i64 4
  store %29* %86, %29** %15, align 8
  store i8 1, i8* %20, align 1
  %87 = load i32, i32* %14, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %14, align 4
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %14, align 4
  %91 = load i32, i32* %11, align 4
  %92 = icmp sle i32 %90, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = load i8, i8* %20, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %95, 1
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i1 [ true, %89 ], [ %96, %93 ]
  %99 = xor i1 %98, true
  %100 = zext i1 %99 to i32
  %101 = sext i32 %100 to i64
  %102 = call i64 @llvm.expect.i64(i64 %101, i64 0)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  unreachable

105:                                              ; preds = %97
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %14, align 4
  %110 = load i32, i32* %11, align 4
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %20, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, 0
  br label %116

116:                                              ; preds = %112, %108
  %117 = phi i1 [ true, %108 ], [ %115, %112 ]
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = call i64 @llvm.expect.i64(i64 %120, i64 0)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  unreachable

124:                                              ; preds = %116
  br label %125

125:                                              ; preds = %124
  br label %126

126:                                              ; preds = %125
  %127 = load i8, i8* %20, align 1
  %128 = icmp ne i8 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %126
  %130 = load i32, i32* %14, align 4
  %131 = load i32, i32* %13, align 4
  %132 = icmp sgt i32 %130, %131
  %133 = xor i1 %132, true
  %134 = xor i1 %133, true
  %135 = zext i1 %134 to i32
  %136 = sext i32 %135 to i64
  %137 = call i64 @llvm.expect.i64(i64 %136, i64 0)
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %129
  br label %228

140:                                              ; preds = %129
  br label %141

141:                                              ; preds = %140, %126
  %142 = load %29*, %29** %15, align 8
  %143 = getelementptr inbounds %29, %29* %142, i32 1
  store %29* %143, %29** %15, align 8
  %144 = load %29*, %29** %15, align 8
  store %29* %144, %29** %16, align 8
  %145 = load %29*, %29** %16, align 8
  %146 = call i32 @1462(%29* %145, i8** %5, i64* %6, i32 1)
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = call i64 @llvm.expect.i64(i64 %152, i64 0)
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %141
  store i32 2, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %228

156:                                              ; preds = %141
  %157 = load i32, i32* %14, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %14, align 4
  br label %159

159:                                              ; preds = %156
  %160 = load i32, i32* %14, align 4
  %161 = load i32, i32* %11, align 4
  %162 = icmp sle i32 %160, %161
  br i1 %162, label %167, label %163

163:                                              ; preds = %159
  %164 = load i8, i8* %20, align 1
  %165 = zext i8 %164 to i32
  %166 = icmp eq i32 %165, 1
  br label %167

167:                                              ; preds = %163, %159
  %168 = phi i1 [ true, %159 ], [ %166, %163 ]
  %169 = xor i1 %168, true
  %170 = zext i1 %169 to i32
  %171 = sext i32 %170 to i64
  %172 = call i64 @llvm.expect.i64(i64 %171, i64 0)
  %173 = icmp ne i64 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %167
  unreachable

175:                                              ; preds = %167
  br label %176

176:                                              ; preds = %175
  br label %177

177:                                              ; preds = %176
  br label %178

178:                                              ; preds = %177
  %179 = load i32, i32* %14, align 4
  %180 = load i32, i32* %11, align 4
  %181 = icmp sgt i32 %179, %180
  br i1 %181, label %186, label %182

182:                                              ; preds = %178
  %183 = load i8, i8* %20, align 1
  %184 = zext i8 %183 to i32
  %185 = icmp eq i32 %184, 0
  br label %186

186:                                              ; preds = %182, %178
  %187 = phi i1 [ true, %178 ], [ %185, %182 ]
  %188 = xor i1 %187, true
  %189 = zext i1 %188 to i32
  %190 = sext i32 %189 to i64
  %191 = call i64 @llvm.expect.i64(i64 %190, i64 0)
  %192 = icmp ne i64 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %186
  unreachable

194:                                              ; preds = %186
  br label %195

195:                                              ; preds = %194
  br label %196

196:                                              ; preds = %195
  %197 = load i8, i8* %20, align 1
  %198 = icmp ne i8 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %196
  %200 = load i32, i32* %14, align 4
  %201 = load i32, i32* %13, align 4
  %202 = icmp sgt i32 %200, %201
  %203 = xor i1 %202, true
  %204 = xor i1 %203, true
  %205 = zext i1 %204 to i32
  %206 = sext i32 %205 to i64
  %207 = call i64 @llvm.expect.i64(i64 %206, i64 0)
  %208 = icmp ne i64 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %199
  br label %228

210:                                              ; preds = %199
  br label %211

211:                                              ; preds = %210, %196
  %212 = load %29*, %29** %15, align 8
  %213 = getelementptr inbounds %29, %29* %212, i32 1
  store %29* %213, %29** %15, align 8
  %214 = load %29*, %29** %15, align 8
  store %29* %214, %29** %16, align 8
  %215 = load %29*, %29** %16, align 8
  %216 = call i32 @1465(%29* %215, i8* %9, i8* %19, i32 0)
  %217 = icmp ne i32 %216, 0
  %218 = xor i1 %217, true
  %219 = xor i1 %218, true
  %220 = xor i1 %219, true
  %221 = zext i1 %220 to i32
  %222 = sext i32 %221 to i64
  %223 = call i64 @llvm.expect.i64(i64 %222, i64 0)
  %224 = icmp ne i64 %223, 0
  br i1 %224, label %225, label %226

225:                                              ; preds = %211
  store i32 1, i32* %17, align 4
  store i32 4, i32* %21, align 4
  br label %228

226:                                              ; preds = %211
  br label %227

227:                                              ; preds = %226
  br label %228

228:                                              ; preds = %227, %225, %209, %155, %139, %79
  %229 = load i32, i32* %21, align 4
  %230 = icmp ne i32 %229, 0
  %231 = xor i1 %230, true
  %232 = xor i1 %231, true
  %233 = zext i1 %232 to i32
  %234 = sext i32 %233 to i64
  %235 = call i64 @llvm.expect.i64(i64 %234, i64 0)
  %236 = icmp ne i64 %235, 0
  br i1 %236, label %237, label %260

237:                                              ; preds = %228
  %238 = load i32, i32* %21, align 4
  %239 = icmp eq i32 %238, 2
  br i1 %239, label %240, label %243

240:                                              ; preds = %237
  %241 = load i32, i32* %14, align 4
  %242 = load i8*, i8** %18, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %241, i8* %242)
  br label %259

243:                                              ; preds = %237
  %244 = load i32, i32* %21, align 4
  %245 = icmp eq i32 %244, 3
  br i1 %245, label %246, label %250

246:                                              ; preds = %243
  %247 = load i32, i32* %14, align 4
  %248 = load i8*, i8** %18, align 8
  %249 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %247, i8* %248, %29* %249)
  br label %258

250:                                              ; preds = %243
  %251 = load i32, i32* %21, align 4
  %252 = icmp eq i32 %251, 4
  br i1 %252, label %253, label %257

253:                                              ; preds = %250
  %254 = load i32, i32* %14, align 4
  %255 = load i32, i32* %17, align 4
  %256 = load %29*, %29** %16, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %254, i32 %255, %29* %256)
  br label %257

257:                                              ; preds = %253, %250
  br label %258

258:                                              ; preds = %257, %246
  br label %259

259:                                              ; preds = %258, %240
  store i32 1, i32* %22, align 4
  br label %261

260:                                              ; preds = %228
  store i32 0, i32* %22, align 4
  br label %261

261:                                              ; preds = %260, %259
  %262 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %262) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %19) #13
  %263 = bitcast i8** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %263) #13
  %264 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %264) #13
  %265 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %265) #13
  %266 = bitcast %29** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %266) #13
  %267 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #13
  %268 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %268) #13
  %269 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %269) #13
  %270 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %270) #13
  %271 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %271) #13
  %272 = load i32, i32* %22, align 4
  switch i32 %272, label %305 [
    i32 0, label %273
  ]

273:                                              ; preds = %261
  br label %274

274:                                              ; preds = %273
  br label %275

275:                                              ; preds = %274
  call void @zend_ini_sort_entries()
  %276 = load i8*, i8** %5, align 8
  %277 = icmp ne i8* %276, null
  br i1 %277, label %278, label %297

278:                                              ; preds = %275
  %279 = load i8*, i8** %5, align 8
  %280 = load i64, i64* %6, align 8
  %281 = call i8* @1488(%7* @module_registry, i8* %279, i64 %280)
  %282 = bitcast i8* %281 to %34*
  store %34* %282, %34** %8, align 8
  %283 = icmp eq %34* %282, null
  br i1 %283, label %284, label %292

284:                                              ; preds = %278
  %285 = load i8*, i8** %5, align 8
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @1134, i32 0, i32 0), i8* %285)
  br label %286

286:                                              ; preds = %284
  %287 = load %29*, %29** %4, align 8
  %288 = getelementptr inbounds %29, %29* %287, i32 0, i32 1
  %289 = bitcast %31* %288 to i32*
  store i32 2, i32* %289, align 8
  br label %290

290:                                              ; preds = %286
  br label %291

291:                                              ; preds = %290
  store i32 1, i32* %22, align 4
  br label %305

292:                                              ; preds = %278
  %293 = load %34*, %34** %8, align 8
  %294 = getelementptr inbounds %34, %34* %293, i32 0, i32 22
  %295 = load i32, i32* %294, align 8
  %296 = sext i32 %295 to i64
  store i64 %296, i64* %7, align 8
  br label %297

297:                                              ; preds = %292, %275
  %298 = load %29*, %29** %4, align 8
  %299 = call i32 @_array_init(%29* %298, i32 0)
  %300 = load %7*, %7** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 39), align 8
  %301 = load %29*, %29** %4, align 8
  %302 = load i64, i64* %7, align 8
  %303 = load i8, i8* %9, align 1
  %304 = zext i8 %303 to i32
  call void (%7*, i32 (%29*, i32, %106*, %107*)*, i32, ...) @zend_hash_apply_with_arguments(%7* %300, i32 (%29*, i32, %106*, %107*)* @1489, i32 2, %29* %301, i64 %302, i32 %304)
  store i32 0, i32* %22, align 4
  br label %305

305:                                              ; preds = %297, %291, %261
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %9) #13
  %306 = bitcast %34** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %306) #13
  %307 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %307) #13
  %308 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %308) #13
  %309 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %309) #13
  %310 = load i32, i32* %22, align 4
  switch i32 %310, label %312 [
    i32 0, label %311
    i32 1, label %311
  ]

311:                                              ; preds = %305, %305
  ret void

312:                                              ; preds = %305
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ini_set(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %28*, align 8
  %6 = alloca %28*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca %29*, align 8
  %23 = alloca %28*, align 8
  %24 = alloca %29*, align 8
  %25 = alloca %28*, align 8
  %26 = alloca %29*, align 8
  %27 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %28 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  %29 = bitcast %28** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #13
  br label %31

31:                                               ; preds = %2
  %32 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 0, i32* %8, align 4
  %33 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 2, i32* %9, align 4
  %34 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 2, i32* %10, align 4
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  %36 = load %1*, %1** %3, align 8
  %37 = getelementptr inbounds %1, %1* %36, i32 0, i32 4
  %38 = getelementptr inbounds %29, %29* %37, i32 0, i32 2
  %39 = bitcast %32* %38 to i32*
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %11, align 4
  %41 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %41) #13
  %42 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  %43 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store %29* null, %29** %14, align 8
  %44 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %15, align 4
  %45 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %46 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %46) #13
  store i32 0, i32* %19, align 4
  %47 = load i32, i32* %12, align 4
  %48 = load %29*, %29** %13, align 8
  %49 = load %29*, %29** %14, align 8
  %50 = load i32, i32* %15, align 4
  %51 = load i8*, i8** %16, align 8
  %52 = load i8, i8* %17, align 1
  %53 = load i8, i8* %18, align 1
  br label %54

54:                                               ; preds = %31
  %55 = load i32, i32* %11, align 4
  %56 = load i32, i32* %9, align 4
  %57 = icmp slt i32 %55, %56
  %58 = xor i1 %57, true
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i32
  %61 = sext i32 %60 to i64
  %62 = call i64 @llvm.expect.i64(i64 %61, i64 0)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %83, label %64

64:                                               ; preds = %54
  %65 = load i32, i32* %11, align 4
  %66 = load i32, i32* %10, align 4
  %67 = icmp sgt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = load i32, i32* %10, align 4
  %76 = icmp sge i32 %75, 0
  %77 = xor i1 %76, true
  %78 = xor i1 %77, true
  %79 = zext i1 %78 to i32
  %80 = sext i32 %79 to i64
  %81 = call i64 @llvm.expect.i64(i64 %80, i64 1)
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %74, %54
  %84 = load i32, i32* %11, align 4
  %85 = load i32, i32* %9, align 4
  %86 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %84, i32 %85, i32 %86)
  store i32 1, i32* %19, align 4
  br label %232

87:                                               ; preds = %74, %64
  store i32 0, i32* %12, align 4
  %88 = load %1*, %1** %3, align 8
  %89 = bitcast %1* %88 to %29*
  %90 = getelementptr inbounds %29, %29* %89, i64 4
  store %29* %90, %29** %13, align 8
  %91 = load i32, i32* %12, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %12, align 4
  br label %93

93:                                               ; preds = %87
  %94 = load i32, i32* %12, align 4
  %95 = load i32, i32* %9, align 4
  %96 = icmp sle i32 %94, %95
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = load i8, i8* %18, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp eq i32 %99, 1
  br label %101

101:                                              ; preds = %97, %93
  %102 = phi i1 [ true, %93 ], [ %100, %97 ]
  %103 = xor i1 %102, true
  %104 = zext i1 %103 to i32
  %105 = sext i32 %104 to i64
  %106 = call i64 @llvm.expect.i64(i64 %105, i64 0)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %101
  unreachable

109:                                              ; preds = %101
  br label %110

110:                                              ; preds = %109
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %12, align 4
  %114 = load i32, i32* %9, align 4
  %115 = icmp sgt i32 %113, %114
  br i1 %115, label %120, label %116

116:                                              ; preds = %112
  %117 = load i8, i8* %18, align 1
  %118 = zext i8 %117 to i32
  %119 = icmp eq i32 %118, 0
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i1 [ true, %112 ], [ %119, %116 ]
  %122 = xor i1 %121, true
  %123 = zext i1 %122 to i32
  %124 = sext i32 %123 to i64
  %125 = call i64 @llvm.expect.i64(i64 %124, i64 0)
  %126 = icmp ne i64 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %120
  unreachable

128:                                              ; preds = %120
  br label %129

129:                                              ; preds = %128
  br label %130

130:                                              ; preds = %129
  %131 = load i8, i8* %18, align 1
  %132 = icmp ne i8 %131, 0
  br i1 %132, label %133, label %145

133:                                              ; preds = %130
  %134 = load i32, i32* %12, align 4
  %135 = load i32, i32* %11, align 4
  %136 = icmp sgt i32 %134, %135
  %137 = xor i1 %136, true
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = sext i32 %139 to i64
  %141 = call i64 @llvm.expect.i64(i64 %140, i64 0)
  %142 = icmp ne i64 %141, 0
  br i1 %142, label %143, label %144

143:                                              ; preds = %133
  br label %232

144:                                              ; preds = %133
  br label %145

145:                                              ; preds = %144, %130
  %146 = load %29*, %29** %13, align 8
  %147 = getelementptr inbounds %29, %29* %146, i32 1
  store %29* %147, %29** %13, align 8
  %148 = load %29*, %29** %13, align 8
  store %29* %148, %29** %14, align 8
  %149 = load %29*, %29** %14, align 8
  %150 = call i32 @1461(%29* %149, %28** %5, i32 0)
  %151 = icmp ne i32 %150, 0
  %152 = xor i1 %151, true
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = zext i1 %154 to i32
  %156 = sext i32 %155 to i64
  %157 = call i64 @llvm.expect.i64(i64 %156, i64 0)
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %145
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %232

160:                                              ; preds = %145
  %161 = load i32, i32* %12, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %12, align 4
  br label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %12, align 4
  %165 = load i32, i32* %9, align 4
  %166 = icmp sle i32 %164, %165
  br i1 %166, label %171, label %167

167:                                              ; preds = %163
  %168 = load i8, i8* %18, align 1
  %169 = zext i8 %168 to i32
  %170 = icmp eq i32 %169, 1
  br label %171

171:                                              ; preds = %167, %163
  %172 = phi i1 [ true, %163 ], [ %170, %167 ]
  %173 = xor i1 %172, true
  %174 = zext i1 %173 to i32
  %175 = sext i32 %174 to i64
  %176 = call i64 @llvm.expect.i64(i64 %175, i64 0)
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %171
  unreachable

179:                                              ; preds = %171
  br label %180

180:                                              ; preds = %179
  br label %181

181:                                              ; preds = %180
  br label %182

182:                                              ; preds = %181
  %183 = load i32, i32* %12, align 4
  %184 = load i32, i32* %9, align 4
  %185 = icmp sgt i32 %183, %184
  br i1 %185, label %190, label %186

186:                                              ; preds = %182
  %187 = load i8, i8* %18, align 1
  %188 = zext i8 %187 to i32
  %189 = icmp eq i32 %188, 0
  br label %190

190:                                              ; preds = %186, %182
  %191 = phi i1 [ true, %182 ], [ %189, %186 ]
  %192 = xor i1 %191, true
  %193 = zext i1 %192 to i32
  %194 = sext i32 %193 to i64
  %195 = call i64 @llvm.expect.i64(i64 %194, i64 0)
  %196 = icmp ne i64 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %190
  unreachable

198:                                              ; preds = %190
  br label %199

199:                                              ; preds = %198
  br label %200

200:                                              ; preds = %199
  %201 = load i8, i8* %18, align 1
  %202 = icmp ne i8 %201, 0
  br i1 %202, label %203, label %215

203:                                              ; preds = %200
  %204 = load i32, i32* %12, align 4
  %205 = load i32, i32* %11, align 4
  %206 = icmp sgt i32 %204, %205
  %207 = xor i1 %206, true
  %208 = xor i1 %207, true
  %209 = zext i1 %208 to i32
  %210 = sext i32 %209 to i64
  %211 = call i64 @llvm.expect.i64(i64 %210, i64 0)
  %212 = icmp ne i64 %211, 0
  br i1 %212, label %213, label %214

213:                                              ; preds = %203
  br label %232

214:                                              ; preds = %203
  br label %215

215:                                              ; preds = %214, %200
  %216 = load %29*, %29** %13, align 8
  %217 = getelementptr inbounds %29, %29* %216, i32 1
  store %29* %217, %29** %13, align 8
  %218 = load %29*, %29** %13, align 8
  store %29* %218, %29** %14, align 8
  %219 = load %29*, %29** %14, align 8
  %220 = call i32 @1461(%29* %219, %28** %6, i32 0)
  %221 = icmp ne i32 %220, 0
  %222 = xor i1 %221, true
  %223 = xor i1 %222, true
  %224 = xor i1 %223, true
  %225 = zext i1 %224 to i32
  %226 = sext i32 %225 to i64
  %227 = call i64 @llvm.expect.i64(i64 %226, i64 0)
  %228 = icmp ne i64 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %215
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %232

230:                                              ; preds = %215
  br label %231

231:                                              ; preds = %230
  br label %232

232:                                              ; preds = %231, %229, %213, %159, %143, %83
  %233 = load i32, i32* %19, align 4
  %234 = icmp ne i32 %233, 0
  %235 = xor i1 %234, true
  %236 = xor i1 %235, true
  %237 = zext i1 %236 to i32
  %238 = sext i32 %237 to i64
  %239 = call i64 @llvm.expect.i64(i64 %238, i64 0)
  %240 = icmp ne i64 %239, 0
  br i1 %240, label %241, label %264

241:                                              ; preds = %232
  %242 = load i32, i32* %19, align 4
  %243 = icmp eq i32 %242, 2
  br i1 %243, label %244, label %247

244:                                              ; preds = %241
  %245 = load i32, i32* %12, align 4
  %246 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %245, i8* %246)
  br label %263

247:                                              ; preds = %241
  %248 = load i32, i32* %19, align 4
  %249 = icmp eq i32 %248, 3
  br i1 %249, label %250, label %254

250:                                              ; preds = %247
  %251 = load i32, i32* %12, align 4
  %252 = load i8*, i8** %16, align 8
  %253 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %251, i8* %252, %29* %253)
  br label %262

254:                                              ; preds = %247
  %255 = load i32, i32* %19, align 4
  %256 = icmp eq i32 %255, 4
  br i1 %256, label %257, label %261

257:                                              ; preds = %254
  %258 = load i32, i32* %12, align 4
  %259 = load i32, i32* %15, align 4
  %260 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %258, i32 %259, %29* %260)
  br label %261

261:                                              ; preds = %257, %254
  br label %262

262:                                              ; preds = %261, %250
  br label %263

263:                                              ; preds = %262, %244
  store i32 1, i32* %20, align 4
  br label %265

264:                                              ; preds = %232
  store i32 0, i32* %20, align 4
  br label %265

265:                                              ; preds = %264, %263
  %266 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %266) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %267 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %267) #13
  %268 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %268) #13
  %269 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %269) #13
  %270 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %270) #13
  %271 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %271) #13
  %272 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #13
  %273 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #13
  %274 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #13
  %275 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %275) #13
  %276 = load i32, i32* %20, align 4
  switch i32 %276, label %466 [
    i32 0, label %277
  ]

277:                                              ; preds = %265
  br label %278

278:                                              ; preds = %277
  br label %279

279:                                              ; preds = %278
  %280 = load %28*, %28** %5, align 8
  %281 = getelementptr inbounds %28, %28* %280, i32 0, i32 3
  %282 = getelementptr inbounds [1 x i8], [1 x i8]* %281, i32 0, i32 0
  %283 = load %28*, %28** %5, align 8
  %284 = getelementptr inbounds %28, %28* %283, i32 0, i32 2
  %285 = load i64, i64* %284, align 8
  %286 = trunc i64 %285 to i32
  %287 = call i8* @zend_ini_string(i8* %282, i32 %286, i32 0)
  store i8* %287, i8** %7, align 8
  %288 = load i8*, i8** %7, align 8
  %289 = icmp ne i8* %288, null
  br i1 %289, label %290, label %366

290:                                              ; preds = %279
  %291 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %291) #13
  %292 = load i8*, i8** %7, align 8
  %293 = call i64 @strlen(i8* %292) #15
  store i64 %293, i64* %21, align 8
  %294 = load i64, i64* %21, align 8
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %316

296:                                              ; preds = %290
  br label %297

297:                                              ; preds = %296
  br label %298

298:                                              ; preds = %297
  %299 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %299) #13
  %300 = load %29*, %29** %4, align 8
  store %29* %300, %29** %22, align 8
  %301 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %301) #13
  %302 = load %28*, %28** @zend_empty_string, align 8
  store %28* %302, %28** %23, align 8
  %303 = load %28*, %28** %23, align 8
  %304 = load %29*, %29** %22, align 8
  %305 = getelementptr inbounds %29, %29* %304, i32 0, i32 0
  %306 = bitcast %30* %305 to %28**
  store %28* %303, %28** %306, align 8
  %307 = load %29*, %29** %22, align 8
  %308 = getelementptr inbounds %29, %29* %307, i32 0, i32 1
  %309 = bitcast %31* %308 to i32*
  store i32 6, i32* %309, align 8
  %310 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %310) #13
  %311 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %311) #13
  br label %312

312:                                              ; preds = %298
  br label %313

313:                                              ; preds = %312
  br label %314

314:                                              ; preds = %313
  br label %315

315:                                              ; preds = %314
  br label %364

316:                                              ; preds = %290
  %317 = load i64, i64* %21, align 8
  %318 = icmp eq i64 %317, 1
  br i1 %318, label %319, label %341

319:                                              ; preds = %316
  br label %320

320:                                              ; preds = %319
  %321 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %321) #13
  %322 = load %29*, %29** %4, align 8
  store %29* %322, %29** %24, align 8
  %323 = bitcast %28** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %323) #13
  %324 = load i8*, i8** %7, align 8
  %325 = getelementptr inbounds i8, i8* %324, i64 0
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i64
  %328 = getelementptr inbounds [256 x %28*], [256 x %28*]* @zend_one_char_string, i64 0, i64 %327
  %329 = load %28*, %28** %328, align 8
  store %28* %329, %28** %25, align 8
  %330 = load %28*, %28** %25, align 8
  %331 = load %29*, %29** %24, align 8
  %332 = getelementptr inbounds %29, %29* %331, i32 0, i32 0
  %333 = bitcast %30* %332 to %28**
  store %28* %330, %28** %333, align 8
  %334 = load %29*, %29** %24, align 8
  %335 = getelementptr inbounds %29, %29* %334, i32 0, i32 1
  %336 = bitcast %31* %335 to i32*
  store i32 6, i32* %336, align 8
  %337 = bitcast %28** %25 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %337) #13
  %338 = bitcast %29** %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %338) #13
  br label %339

339:                                              ; preds = %320
  br label %340

340:                                              ; preds = %339
  br label %363

341:                                              ; preds = %316
  br label %342

342:                                              ; preds = %341
  br label %343

343:                                              ; preds = %342
  %344 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %344) #13
  %345 = load %29*, %29** %4, align 8
  store %29* %345, %29** %26, align 8
  %346 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %346) #13
  %347 = load i8*, i8** %7, align 8
  %348 = load i64, i64* %21, align 8
  %349 = call %28* @1463(i8* %347, i64 %348, i32 0)
  store %28* %349, %28** %27, align 8
  %350 = load %28*, %28** %27, align 8
  %351 = load %29*, %29** %26, align 8
  %352 = getelementptr inbounds %29, %29* %351, i32 0, i32 0
  %353 = bitcast %30* %352 to %28**
  store %28* %350, %28** %353, align 8
  %354 = load %29*, %29** %26, align 8
  %355 = getelementptr inbounds %29, %29* %354, i32 0, i32 1
  %356 = bitcast %31* %355 to i32*
  store i32 5126, i32* %356, align 8
  %357 = bitcast %28** %27 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %357) #13
  %358 = bitcast %29** %26 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %358) #13
  br label %359

359:                                              ; preds = %343
  br label %360

360:                                              ; preds = %359
  br label %361

361:                                              ; preds = %360
  br label %362

362:                                              ; preds = %361
  br label %363

363:                                              ; preds = %362, %340
  br label %364

364:                                              ; preds = %363, %315
  %365 = bitcast i64* %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %365) #13
  br label %373

366:                                              ; preds = %279
  br label %367

367:                                              ; preds = %366
  %368 = load %29*, %29** %4, align 8
  %369 = getelementptr inbounds %29, %29* %368, i32 0, i32 1
  %370 = bitcast %31* %369 to i32*
  store i32 2, i32* %370, align 8
  br label %371

371:                                              ; preds = %367
  br label %372

372:                                              ; preds = %371
  br label %373

373:                                              ; preds = %372, %364
  %374 = load i8*, i8** getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 20), align 8
  %375 = icmp ne i8* %374, null
  br i1 %375, label %376, label %452

376:                                              ; preds = %373
  %377 = load %28*, %28** %5, align 8
  %378 = getelementptr inbounds %28, %28* %377, i32 0, i32 3
  %379 = getelementptr inbounds [1 x i8], [1 x i8]* %378, i32 0, i32 0
  %380 = load %28*, %28** %5, align 8
  %381 = getelementptr inbounds %28, %28* %380, i32 0, i32 2
  %382 = load i64, i64* %381, align 8
  %383 = trunc i64 %382 to i32
  %384 = call i32 @1490(i8* %379, i32 %383, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @427, i32 0, i32 0), i32 10)
  %385 = icmp ne i32 %384, 0
  br i1 %385, label %436, label %386

386:                                              ; preds = %376
  %387 = load %28*, %28** %5, align 8
  %388 = getelementptr inbounds %28, %28* %387, i32 0, i32 3
  %389 = getelementptr inbounds [1 x i8], [1 x i8]* %388, i32 0, i32 0
  %390 = load %28*, %28** %5, align 8
  %391 = getelementptr inbounds %28, %28* %390, i32 0, i32 2
  %392 = load i64, i64* %391, align 8
  %393 = trunc i64 %392 to i32
  %394 = call i32 @1490(i8* %389, i32 %393, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1135, i32 0, i32 0), i32 16)
  %395 = icmp ne i32 %394, 0
  br i1 %395, label %436, label %396

396:                                              ; preds = %386
  %397 = load %28*, %28** %5, align 8
  %398 = getelementptr inbounds %28, %28* %397, i32 0, i32 3
  %399 = getelementptr inbounds [1 x i8], [1 x i8]* %398, i32 0, i32 0
  %400 = load %28*, %28** %5, align 8
  %401 = getelementptr inbounds %28, %28* %400, i32 0, i32 2
  %402 = load i64, i64* %401, align 8
  %403 = trunc i64 %402 to i32
  %404 = call i32 @1490(i8* %399, i32 %403, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1136, i32 0, i32 0), i32 10)
  %405 = icmp ne i32 %404, 0
  br i1 %405, label %436, label %406

406:                                              ; preds = %396
  %407 = load %28*, %28** %5, align 8
  %408 = getelementptr inbounds %28, %28* %407, i32 0, i32 3
  %409 = getelementptr inbounds [1 x i8], [1 x i8]* %408, i32 0, i32 0
  %410 = load %28*, %28** %5, align 8
  %411 = getelementptr inbounds %28, %28* %410, i32 0, i32 2
  %412 = load i64, i64* %411, align 8
  %413 = trunc i64 %412 to i32
  %414 = call i32 @1490(i8* %409, i32 %413, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1137, i32 0, i32 0), i32 9)
  %415 = icmp ne i32 %414, 0
  br i1 %415, label %436, label %416

416:                                              ; preds = %406
  %417 = load %28*, %28** %5, align 8
  %418 = getelementptr inbounds %28, %28* %417, i32 0, i32 3
  %419 = getelementptr inbounds [1 x i8], [1 x i8]* %418, i32 0, i32 0
  %420 = load %28*, %28** %5, align 8
  %421 = getelementptr inbounds %28, %28* %420, i32 0, i32 2
  %422 = load i64, i64* %421, align 8
  %423 = trunc i64 %422 to i32
  %424 = call i32 @1490(i8* %419, i32 %423, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1138, i32 0, i32 0), i32 18)
  %425 = icmp ne i32 %424, 0
  br i1 %425, label %436, label %426

426:                                              ; preds = %416
  %427 = load %28*, %28** %5, align 8
  %428 = getelementptr inbounds %28, %28* %427, i32 0, i32 3
  %429 = getelementptr inbounds [1 x i8], [1 x i8]* %428, i32 0, i32 0
  %430 = load %28*, %28** %5, align 8
  %431 = getelementptr inbounds %28, %28* %430, i32 0, i32 2
  %432 = load i64, i64* %431, align 8
  %433 = trunc i64 %432 to i32
  %434 = call i32 @1490(i8* %429, i32 %433, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1139, i32 0, i32 0), i32 19)
  %435 = icmp ne i32 %434, 0
  br i1 %435, label %436, label %451

436:                                              ; preds = %426, %416, %406, %396, %386, %376
  %437 = load %28*, %28** %6, align 8
  %438 = getelementptr inbounds %28, %28* %437, i32 0, i32 3
  %439 = getelementptr inbounds [1 x i8], [1 x i8]* %438, i32 0, i32 0
  %440 = call i32 @php_check_open_basedir(i8* %439)
  %441 = icmp ne i32 %440, 0
  br i1 %441, label %442, label %450

442:                                              ; preds = %436
  %443 = load %29*, %29** %4, align 8
  call void @1491(%29* %443)
  br label %444

444:                                              ; preds = %442
  %445 = load %29*, %29** %4, align 8
  %446 = getelementptr inbounds %29, %29* %445, i32 0, i32 1
  %447 = bitcast %31* %446 to i32*
  store i32 2, i32* %447, align 8
  br label %448

448:                                              ; preds = %444
  br label %449

449:                                              ; preds = %448
  store i32 1, i32* %20, align 4
  br label %466

450:                                              ; preds = %436
  br label %451

451:                                              ; preds = %450, %426
  br label %452

452:                                              ; preds = %451, %373
  %453 = load %28*, %28** %5, align 8
  %454 = load %28*, %28** %6, align 8
  %455 = call i32 @zend_alter_ini_entry_ex(%28* %453, %28* %454, i32 1, i32 16, i32 0)
  %456 = icmp eq i32 %455, -1
  br i1 %456, label %457, label %465

457:                                              ; preds = %452
  %458 = load %29*, %29** %4, align 8
  call void @1491(%29* %458)
  br label %459

459:                                              ; preds = %457
  %460 = load %29*, %29** %4, align 8
  %461 = getelementptr inbounds %29, %29* %460, i32 0, i32 1
  %462 = bitcast %31* %461 to i32*
  store i32 2, i32* %462, align 8
  br label %463

463:                                              ; preds = %459
  br label %464

464:                                              ; preds = %463
  store i32 1, i32* %20, align 4
  br label %466

465:                                              ; preds = %452
  store i32 0, i32* %20, align 4
  br label %466

466:                                              ; preds = %465, %464, %449, %265
  %467 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %467) #13
  %468 = bitcast %28** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %468) #13
  %469 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %469) #13
  %470 = load i32, i32* %20, align 4
  switch i32 %470, label %472 [
    i32 0, label %471
    i32 1, label %471
  ]

471:                                              ; preds = %466, %466
  ret void

472:                                              ; preds = %466
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ini_restore(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %28*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %29*, align 8
  %12 = alloca %29*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %19 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #13
  br label %20

20:                                               ; preds = %2
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #13
  store i32 0, i32* %6, align 4
  %22 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #13
  store i32 1, i32* %7, align 4
  %23 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #13
  store i32 1, i32* %8, align 4
  %24 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #13
  %25 = load %1*, %1** %3, align 8
  %26 = getelementptr inbounds %1, %1* %25, i32 0, i32 4
  %27 = getelementptr inbounds %29, %29* %26, i32 0, i32 2
  %28 = bitcast %32* %27 to i32*
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %31) #13
  %32 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %32) #13
  store %29* null, %29** %12, align 8
  %33 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %13, align 4
  %34 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  store i8* null, i8** %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %15) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  store i8 0, i8* %16, align 1
  %35 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 0, i32* %17, align 4
  %36 = load i32, i32* %10, align 4
  %37 = load %29*, %29** %11, align 8
  %38 = load %29*, %29** %12, align 8
  %39 = load i32, i32* %13, align 4
  %40 = load i8*, i8** %14, align 8
  %41 = load i8, i8* %15, align 1
  %42 = load i8, i8* %16, align 1
  br label %43

43:                                               ; preds = %20
  %44 = load i32, i32* %9, align 4
  %45 = load i32, i32* %7, align 4
  %46 = icmp slt i32 %44, %45
  %47 = xor i1 %46, true
  %48 = xor i1 %47, true
  %49 = zext i1 %48 to i32
  %50 = sext i32 %49 to i64
  %51 = call i64 @llvm.expect.i64(i64 %50, i64 0)
  %52 = icmp ne i64 %51, 0
  br i1 %52, label %72, label %53

53:                                               ; preds = %43
  %54 = load i32, i32* %9, align 4
  %55 = load i32, i32* %8, align 4
  %56 = icmp sgt i32 %54, %55
  %57 = xor i1 %56, true
  %58 = xor i1 %57, true
  %59 = zext i1 %58 to i32
  %60 = sext i32 %59 to i64
  %61 = call i64 @llvm.expect.i64(i64 %60, i64 0)
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %53
  %64 = load i32, i32* %8, align 4
  %65 = icmp sge i32 %64, 0
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 1)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %63, %43
  %73 = load i32, i32* %9, align 4
  %74 = load i32, i32* %7, align 4
  %75 = load i32, i32* %8, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %73, i32 %74, i32 %75)
  store i32 1, i32* %17, align 4
  br label %151

76:                                               ; preds = %63, %53
  store i32 0, i32* %10, align 4
  %77 = load %1*, %1** %3, align 8
  %78 = bitcast %1* %77 to %29*
  %79 = getelementptr inbounds %29, %29* %78, i64 4
  store %29* %79, %29** %11, align 8
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %10, align 4
  br label %82

82:                                               ; preds = %76
  %83 = load i32, i32* %10, align 4
  %84 = load i32, i32* %7, align 4
  %85 = icmp sle i32 %83, %84
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = load i8, i8* %16, align 1
  %88 = zext i8 %87 to i32
  %89 = icmp eq i32 %88, 1
  br label %90

90:                                               ; preds = %86, %82
  %91 = phi i1 [ true, %82 ], [ %89, %86 ]
  %92 = xor i1 %91, true
  %93 = zext i1 %92 to i32
  %94 = sext i32 %93 to i64
  %95 = call i64 @llvm.expect.i64(i64 %94, i64 0)
  %96 = icmp ne i64 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  unreachable

98:                                               ; preds = %90
  br label %99

99:                                               ; preds = %98
  br label %100

100:                                              ; preds = %99
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* %10, align 4
  %103 = load i32, i32* %7, align 4
  %104 = icmp sgt i32 %102, %103
  br i1 %104, label %109, label %105

105:                                              ; preds = %101
  %106 = load i8, i8* %16, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp eq i32 %107, 0
  br label %109

109:                                              ; preds = %105, %101
  %110 = phi i1 [ true, %101 ], [ %108, %105 ]
  %111 = xor i1 %110, true
  %112 = zext i1 %111 to i32
  %113 = sext i32 %112 to i64
  %114 = call i64 @llvm.expect.i64(i64 %113, i64 0)
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %109
  unreachable

117:                                              ; preds = %109
  br label %118

118:                                              ; preds = %117
  br label %119

119:                                              ; preds = %118
  %120 = load i8, i8* %16, align 1
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %122, label %134

122:                                              ; preds = %119
  %123 = load i32, i32* %10, align 4
  %124 = load i32, i32* %9, align 4
  %125 = icmp sgt i32 %123, %124
  %126 = xor i1 %125, true
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  %129 = sext i32 %128 to i64
  %130 = call i64 @llvm.expect.i64(i64 %129, i64 0)
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %122
  br label %151

133:                                              ; preds = %122
  br label %134

134:                                              ; preds = %133, %119
  %135 = load %29*, %29** %11, align 8
  %136 = getelementptr inbounds %29, %29* %135, i32 1
  store %29* %136, %29** %11, align 8
  %137 = load %29*, %29** %11, align 8
  store %29* %137, %29** %12, align 8
  %138 = load %29*, %29** %12, align 8
  %139 = call i32 @1461(%29* %138, %28** %5, i32 0)
  %140 = icmp ne i32 %139, 0
  %141 = xor i1 %140, true
  %142 = xor i1 %141, true
  %143 = xor i1 %142, true
  %144 = zext i1 %143 to i32
  %145 = sext i32 %144 to i64
  %146 = call i64 @llvm.expect.i64(i64 %145, i64 0)
  %147 = icmp ne i64 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %134
  store i32 2, i32* %13, align 4
  store i32 4, i32* %17, align 4
  br label %151

149:                                              ; preds = %134
  br label %150

150:                                              ; preds = %149
  br label %151

151:                                              ; preds = %150, %148, %132, %72
  %152 = load i32, i32* %17, align 4
  %153 = icmp ne i32 %152, 0
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %183

160:                                              ; preds = %151
  %161 = load i32, i32* %17, align 4
  %162 = icmp eq i32 %161, 2
  br i1 %162, label %163, label %166

163:                                              ; preds = %160
  %164 = load i32, i32* %10, align 4
  %165 = load i8*, i8** %14, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %164, i8* %165)
  br label %182

166:                                              ; preds = %160
  %167 = load i32, i32* %17, align 4
  %168 = icmp eq i32 %167, 3
  br i1 %168, label %169, label %173

169:                                              ; preds = %166
  %170 = load i32, i32* %10, align 4
  %171 = load i8*, i8** %14, align 8
  %172 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %170, i8* %171, %29* %172)
  br label %181

173:                                              ; preds = %166
  %174 = load i32, i32* %17, align 4
  %175 = icmp eq i32 %174, 4
  br i1 %175, label %176, label %180

176:                                              ; preds = %173
  %177 = load i32, i32* %10, align 4
  %178 = load i32, i32* %13, align 4
  %179 = load %29*, %29** %12, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %177, i32 %178, %29* %179)
  br label %180

180:                                              ; preds = %176, %173
  br label %181

181:                                              ; preds = %180, %169
  br label %182

182:                                              ; preds = %181, %163
  store i32 1, i32* %18, align 4
  br label %184

183:                                              ; preds = %151
  store i32 0, i32* %18, align 4
  br label %184

184:                                              ; preds = %183, %182
  %185 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %185) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %15) #13
  %186 = bitcast i8** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %186) #13
  %187 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %187) #13
  %188 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %188) #13
  %189 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %189) #13
  %190 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %190) #13
  %191 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %191) #13
  %192 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  %193 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  %194 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = load i32, i32* %18, align 4
  switch i32 %195, label %201 [
    i32 0, label %196
  ]

196:                                              ; preds = %184
  br label %197

197:                                              ; preds = %196
  br label %198

198:                                              ; preds = %197
  %199 = load %28*, %28** %5, align 8
  %200 = call i32 @zend_restore_ini_entry(%28* %199, i32 16)
  store i32 0, i32* %18, align 4
  br label %201

201:                                              ; preds = %198, %184
  %202 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202) #13
  %203 = load i32, i32* %18, align 4
  switch i32 %203, label %205 [
    i32 0, label %204
    i32 1, label %204
  ]

204:                                              ; preds = %201, %201
  ret void

205:                                              ; preds = %201
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_get_include_path(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %29*, align 8
  %9 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %10 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %1*, %1** %3, align 8
  %12 = getelementptr inbounds %1, %1* %11, i32 0, i32 4
  %13 = getelementptr inbounds %29, %29* %12, i32 0, i32 2
  %14 = bitcast %32* %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = sext i32 %19 to i64
  %21 = call i64 @llvm.expect.i64(i64 %20, i64 1)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %2
  br label %31

24:                                               ; preds = %2
  %25 = load %1*, %1** %3, align 8
  %26 = getelementptr inbounds %1, %1* %25, i32 0, i32 4
  %27 = getelementptr inbounds %29, %29* %26, i32 0, i32 2
  %28 = bitcast %32* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %29, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %31

31:                                               ; preds = %24, %23
  %32 = phi i32 [ 0, %23 ], [ %30, %24 ]
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  store i32 1, i32* %6, align 4
  br label %75

35:                                               ; preds = %31
  %36 = call i8* @zend_ini_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1140, i32 0, i32 0), i32 12, i32 0)
  store i8* %36, i8** %5, align 8
  %37 = load i8*, i8** %5, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %46

39:                                               ; preds = %35
  br label %40

40:                                               ; preds = %39
  %41 = load %29*, %29** %4, align 8
  %42 = getelementptr inbounds %29, %29* %41, i32 0, i32 1
  %43 = bitcast %31* %42 to i32*
  store i32 2, i32* %43, align 8
  br label %44

44:                                               ; preds = %40
  br label %45

45:                                               ; preds = %44
  store i32 1, i32* %6, align 4
  br label %75

46:                                               ; preds = %35
  br label %47

47:                                               ; preds = %46
  %48 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %48) #13
  %49 = load i8*, i8** %5, align 8
  store i8* %49, i8** %7, align 8
  br label %50

50:                                               ; preds = %47
  br label %51

51:                                               ; preds = %50
  %52 = bitcast %29** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %52) #13
  %53 = load %29*, %29** %4, align 8
  store %29* %53, %29** %8, align 8
  %54 = bitcast %28** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %54) #13
  %55 = load i8*, i8** %7, align 8
  %56 = load i8*, i8** %7, align 8
  %57 = call i64 @strlen(i8* %56) #15
  %58 = call %28* @1463(i8* %55, i64 %57, i32 0)
  store %28* %58, %28** %9, align 8
  %59 = load %28*, %28** %9, align 8
  %60 = load %29*, %29** %8, align 8
  %61 = getelementptr inbounds %29, %29* %60, i32 0, i32 0
  %62 = bitcast %30* %61 to %28**
  store %28* %59, %28** %62, align 8
  %63 = load %29*, %29** %8, align 8
  %64 = getelementptr inbounds %29, %29* %63, i32 0, i32 1
  %65 = bitcast %31* %64 to i32*
  store i32 5126, i32* %65, align 8
  %66 = bitcast %28** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #13
  %67 = bitcast %29** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  br label %68

68:                                               ; preds = %51
  br label %69

69:                                               ; preds = %68
  br label %70

70:                                               ; preds = %69
  br label %71

71:                                               ; preds = %70
  %72 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %72) #13
  br label %73

73:                                               ; preds = %71
  br label %74

74:                                               ; preds = %73
  store i32 1, i32* %6, align 4
  br label %75

75:                                               ; preds = %74, %45, %34
  %76 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_set_include_path(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %28*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %28*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca %29*, align 8
  %23 = alloca %28*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  %25 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  br label %27

27:                                               ; preds = %2
  %28 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #13
  store i32 0, i32* %8, align 4
  %29 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  store i32 1, i32* %9, align 4
  %30 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 1, i32* %10, align 4
  %31 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  %32 = load %1*, %1** %3, align 8
  %33 = getelementptr inbounds %1, %1* %32, i32 0, i32 4
  %34 = getelementptr inbounds %29, %29* %33, i32 0, i32 2
  %35 = bitcast %32* %34 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %11, align 4
  %37 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %37) #13
  %38 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %38) #13
  %39 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %39) #13
  store %29* null, %29** %14, align 8
  %40 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #13
  store i32 0, i32* %15, align 4
  %41 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %42 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %19, align 4
  %43 = load i32, i32* %12, align 4
  %44 = load %29*, %29** %13, align 8
  %45 = load %29*, %29** %14, align 8
  %46 = load i32, i32* %15, align 4
  %47 = load i8*, i8** %16, align 8
  %48 = load i8, i8* %17, align 1
  %49 = load i8, i8* %18, align 1
  br label %50

50:                                               ; preds = %27
  %51 = load i32, i32* %11, align 4
  %52 = load i32, i32* %9, align 4
  %53 = icmp slt i32 %51, %52
  %54 = xor i1 %53, true
  %55 = xor i1 %54, true
  %56 = zext i1 %55 to i32
  %57 = sext i32 %56 to i64
  %58 = call i64 @llvm.expect.i64(i64 %57, i64 0)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %79, label %60

60:                                               ; preds = %50
  %61 = load i32, i32* %11, align 4
  %62 = load i32, i32* %10, align 4
  %63 = icmp sgt i32 %61, %62
  %64 = xor i1 %63, true
  %65 = xor i1 %64, true
  %66 = zext i1 %65 to i32
  %67 = sext i32 %66 to i64
  %68 = call i64 @llvm.expect.i64(i64 %67, i64 0)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %83

70:                                               ; preds = %60
  %71 = load i32, i32* %10, align 4
  %72 = icmp sge i32 %71, 0
  %73 = xor i1 %72, true
  %74 = xor i1 %73, true
  %75 = zext i1 %74 to i32
  %76 = sext i32 %75 to i64
  %77 = call i64 @llvm.expect.i64(i64 %76, i64 1)
  %78 = icmp ne i64 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %70, %50
  %80 = load i32, i32* %11, align 4
  %81 = load i32, i32* %9, align 4
  %82 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %80, i32 %81, i32 %82)
  store i32 1, i32* %19, align 4
  br label %158

83:                                               ; preds = %70, %60
  store i32 0, i32* %12, align 4
  %84 = load %1*, %1** %3, align 8
  %85 = bitcast %1* %84 to %29*
  %86 = getelementptr inbounds %29, %29* %85, i64 4
  store %29* %86, %29** %13, align 8
  %87 = load i32, i32* %12, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %12, align 4
  br label %89

89:                                               ; preds = %83
  %90 = load i32, i32* %12, align 4
  %91 = load i32, i32* %9, align 4
  %92 = icmp sle i32 %90, %91
  br i1 %92, label %97, label %93

93:                                               ; preds = %89
  %94 = load i8, i8* %18, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %95, 1
  br label %97

97:                                               ; preds = %93, %89
  %98 = phi i1 [ true, %89 ], [ %96, %93 ]
  %99 = xor i1 %98, true
  %100 = zext i1 %99 to i32
  %101 = sext i32 %100 to i64
  %102 = call i64 @llvm.expect.i64(i64 %101, i64 0)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %97
  unreachable

105:                                              ; preds = %97
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %12, align 4
  %110 = load i32, i32* %9, align 4
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %18, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %114, 0
  br label %116

116:                                              ; preds = %112, %108
  %117 = phi i1 [ true, %108 ], [ %115, %112 ]
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = sext i32 %119 to i64
  %121 = call i64 @llvm.expect.i64(i64 %120, i64 0)
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %116
  unreachable

124:                                              ; preds = %116
  br label %125

125:                                              ; preds = %124
  br label %126

126:                                              ; preds = %125
  %127 = load i8, i8* %18, align 1
  %128 = icmp ne i8 %127, 0
  br i1 %128, label %129, label %141

129:                                              ; preds = %126
  %130 = load i32, i32* %12, align 4
  %131 = load i32, i32* %11, align 4
  %132 = icmp sgt i32 %130, %131
  %133 = xor i1 %132, true
  %134 = xor i1 %133, true
  %135 = zext i1 %134 to i32
  %136 = sext i32 %135 to i64
  %137 = call i64 @llvm.expect.i64(i64 %136, i64 0)
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %129
  br label %158

140:                                              ; preds = %129
  br label %141

141:                                              ; preds = %140, %126
  %142 = load %29*, %29** %13, align 8
  %143 = getelementptr inbounds %29, %29* %142, i32 1
  store %29* %143, %29** %13, align 8
  %144 = load %29*, %29** %13, align 8
  store %29* %144, %29** %14, align 8
  %145 = load %29*, %29** %14, align 8
  %146 = call i32 @1492(%29* %145, %28** %5, i32 0)
  %147 = icmp ne i32 %146, 0
  %148 = xor i1 %147, true
  %149 = xor i1 %148, true
  %150 = xor i1 %149, true
  %151 = zext i1 %150 to i32
  %152 = sext i32 %151 to i64
  %153 = call i64 @llvm.expect.i64(i64 %152, i64 0)
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %141
  store i32 6, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %158

156:                                              ; preds = %141
  br label %157

157:                                              ; preds = %156
  br label %158

158:                                              ; preds = %157, %155, %139, %79
  %159 = load i32, i32* %19, align 4
  %160 = icmp ne i32 %159, 0
  %161 = xor i1 %160, true
  %162 = xor i1 %161, true
  %163 = zext i1 %162 to i32
  %164 = sext i32 %163 to i64
  %165 = call i64 @llvm.expect.i64(i64 %164, i64 0)
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %190

167:                                              ; preds = %158
  %168 = load i32, i32* %19, align 4
  %169 = icmp eq i32 %168, 2
  br i1 %169, label %170, label %173

170:                                              ; preds = %167
  %171 = load i32, i32* %12, align 4
  %172 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %171, i8* %172)
  br label %189

173:                                              ; preds = %167
  %174 = load i32, i32* %19, align 4
  %175 = icmp eq i32 %174, 3
  br i1 %175, label %176, label %180

176:                                              ; preds = %173
  %177 = load i32, i32* %12, align 4
  %178 = load i8*, i8** %16, align 8
  %179 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %177, i8* %178, %29* %179)
  br label %188

180:                                              ; preds = %173
  %181 = load i32, i32* %19, align 4
  %182 = icmp eq i32 %181, 4
  br i1 %182, label %183, label %187

183:                                              ; preds = %180
  %184 = load i32, i32* %12, align 4
  %185 = load i32, i32* %15, align 4
  %186 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %184, i32 %185, %29* %186)
  br label %187

187:                                              ; preds = %183, %180
  br label %188

188:                                              ; preds = %187, %176
  br label %189

189:                                              ; preds = %188, %170
  store i32 1, i32* %20, align 4
  br label %191

190:                                              ; preds = %158
  store i32 0, i32* %20, align 4
  br label %191

191:                                              ; preds = %190, %189
  %192 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %192) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %193 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %193) #13
  %194 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %195) #13
  %196 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %196) #13
  %197 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %198) #13
  %199 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #13
  %201 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #13
  %202 = load i32, i32* %20, align 4
  switch i32 %202, label %262 [
    i32 0, label %203
  ]

203:                                              ; preds = %191
  br label %204

204:                                              ; preds = %203
  br label %205

205:                                              ; preds = %204
  %206 = call i8* @zend_ini_string(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1140, i32 0, i32 0), i32 12, i32 0)
  store i8* %206, i8** %6, align 8
  %207 = load i8*, i8** %6, align 8
  %208 = icmp ne i8* %207, null
  br i1 %208, label %209, label %238

209:                                              ; preds = %205
  br label %210

210:                                              ; preds = %209
  %211 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %211) #13
  %212 = load i8*, i8** %6, align 8
  store i8* %212, i8** %21, align 8
  br label %213

213:                                              ; preds = %210
  br label %214

214:                                              ; preds = %213
  %215 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %215) #13
  %216 = load %29*, %29** %4, align 8
  store %29* %216, %29** %22, align 8
  %217 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %217) #13
  %218 = load i8*, i8** %21, align 8
  %219 = load i8*, i8** %21, align 8
  %220 = call i64 @strlen(i8* %219) #15
  %221 = call %28* @1463(i8* %218, i64 %220, i32 0)
  store %28* %221, %28** %23, align 8
  %222 = load %28*, %28** %23, align 8
  %223 = load %29*, %29** %22, align 8
  %224 = getelementptr inbounds %29, %29* %223, i32 0, i32 0
  %225 = bitcast %30* %224 to %28**
  store %28* %222, %28** %225, align 8
  %226 = load %29*, %29** %22, align 8
  %227 = getelementptr inbounds %29, %29* %226, i32 0, i32 1
  %228 = bitcast %31* %227 to i32*
  store i32 5126, i32* %228, align 8
  %229 = bitcast %28** %23 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %229) #13
  %230 = bitcast %29** %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %230) #13
  br label %231

231:                                              ; preds = %214
  br label %232

232:                                              ; preds = %231
  br label %233

233:                                              ; preds = %232
  br label %234

234:                                              ; preds = %233
  %235 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %235) #13
  br label %236

236:                                              ; preds = %234
  br label %237

237:                                              ; preds = %236
  br label %245

238:                                              ; preds = %205
  br label %239

239:                                              ; preds = %238
  %240 = load %29*, %29** %4, align 8
  %241 = getelementptr inbounds %29, %29* %240, i32 0, i32 1
  %242 = bitcast %31* %241 to i32*
  store i32 2, i32* %242, align 8
  br label %243

243:                                              ; preds = %239
  br label %244

244:                                              ; preds = %243
  br label %245

245:                                              ; preds = %244, %237
  %246 = call %28* @1463(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1140, i32 0, i32 0), i64 12, i32 0)
  store %28* %246, %28** %7, align 8
  %247 = load %28*, %28** %7, align 8
  %248 = load %28*, %28** %5, align 8
  %249 = call i32 @zend_alter_ini_entry_ex(%28* %247, %28* %248, i32 1, i32 16, i32 0)
  %250 = icmp eq i32 %249, -1
  br i1 %250, label %251, label %260

251:                                              ; preds = %245
  %252 = load %28*, %28** %7, align 8
  call void @1460(%28* %252)
  %253 = load %29*, %29** %4, align 8
  call void @1491(%29* %253)
  br label %254

254:                                              ; preds = %251
  %255 = load %29*, %29** %4, align 8
  %256 = getelementptr inbounds %29, %29* %255, i32 0, i32 1
  %257 = bitcast %31* %256 to i32*
  store i32 2, i32* %257, align 8
  br label %258

258:                                              ; preds = %254
  br label %259

259:                                              ; preds = %258
  store i32 1, i32* %20, align 4
  br label %262

260:                                              ; preds = %245
  %261 = load %28*, %28** %7, align 8
  call void @1460(%28* %261)
  store i32 0, i32* %20, align 4
  br label %262

262:                                              ; preds = %260, %259, %191
  %263 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %263) #13
  %264 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %264) #13
  %265 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %265) #13
  %266 = load i32, i32* %20, align 4
  switch i32 %266, label %268 [
    i32 0, label %267
    i32 1, label %267
  ]

267:                                              ; preds = %262, %262
  ret void

268:                                              ; preds = %262
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_restore_include_path(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %28*, align 8
  %6 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %7 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #13
  %8 = load %1*, %1** %3, align 8
  %9 = getelementptr inbounds %1, %1* %8, i32 0, i32 4
  %10 = getelementptr inbounds %29, %29* %9, i32 0, i32 2
  %11 = bitcast %32* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 1)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  br label %28

21:                                               ; preds = %2
  %22 = load %1*, %1** %3, align 8
  %23 = getelementptr inbounds %1, %1* %22, i32 0, i32 4
  %24 = getelementptr inbounds %29, %29* %23, i32 0, i32 2
  %25 = bitcast %32* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i32, i8*, ...) @zend_parse_parameters(i32 %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0))
  br label %28

28:                                               ; preds = %21, %20
  %29 = phi i32 [ 0, %20 ], [ %27, %21 ]
  %30 = icmp eq i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  store i32 1, i32* %6, align 4
  br label %37

32:                                               ; preds = %28
  %33 = call %28* @1463(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1140, i32 0, i32 0), i64 12, i32 0)
  store %28* %33, %28** %5, align 8
  %34 = load %28*, %28** %5, align 8
  %35 = call i32 @zend_restore_ini_entry(%28* %34, i32 16)
  %36 = load %28*, %28** %5, align 8
  call void @1493(%28* %36)
  store i32 0, i32* %6, align 4
  br label %37

37:                                               ; preds = %32, %31
  %38 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %38) #13
  %39 = load i32, i32* %6, align 4
  switch i32 %39, label %41 [
    i32 0, label %40
    i32 1, label %40
  ]

40:                                               ; preds = %37, %37
  ret void

41:                                               ; preds = %37
  unreachable
}

declare dso_local void @zif_setcookie(%1*, %29*) #1

declare dso_local void @zif_setrawcookie(%1*, %29*) #1

declare dso_local void @zif_header(%1*, %29*) #1

declare dso_local void @zif_header_remove(%1*, %29*) #1

declare dso_local void @zif_headers_sent(%1*, %29*) #1

declare dso_local void @zif_headers_list(%1*, %29*) #1

declare dso_local void @zif_http_response_code(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden void @zif_connection_aborted(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %6 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load %29*, %29** %4, align 8
  store %29* %7, %29** %5, align 8
  %8 = load i16, i16* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 36), align 8
  %9 = sext i16 %8 to i32
  %10 = and i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = load %29*, %29** %5, align 8
  %13 = getelementptr inbounds %29, %29* %12, i32 0, i32 0
  %14 = bitcast %30* %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = load %29*, %29** %5, align 8
  %16 = getelementptr inbounds %29, %29* %15, i32 0, i32 1
  %17 = bitcast %31* %16 to i32*
  store i32 4, i32* %17, align 8
  %18 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %18) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_connection_status(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %6 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load %29*, %29** %4, align 8
  store %29* %7, %29** %5, align 8
  %8 = load i16, i16* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 36), align 8
  %9 = sext i16 %8 to i64
  %10 = load %29*, %29** %5, align 8
  %11 = getelementptr inbounds %29, %29* %10, i32 0, i32 0
  %12 = bitcast %30* %11 to i64*
  store i64 %9, i64* %12, align 8
  %13 = load %29*, %29** %5, align 8
  %14 = getelementptr inbounds %29, %29* %13, i32 0, i32 1
  %15 = bitcast %31* %14 to i32*
  store i32 4, i32* %15, align 8
  %16 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %16) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_ignore_user_abort(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %29*, align 8
  %13 = alloca %29*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca %28*, align 8
  %21 = alloca %29*, align 8
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %5) #13
  store i8 0, i8* %5, align 1
  %22 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #13
  br label %23

23:                                               ; preds = %2
  %24 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #13
  store i32 0, i32* %7, align 4
  %25 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #13
  store i32 0, i32* %8, align 4
  %26 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #13
  store i32 1, i32* %9, align 4
  %27 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #13
  %28 = load %1*, %1** %3, align 8
  %29 = getelementptr inbounds %1, %1* %28, i32 0, i32 4
  %30 = getelementptr inbounds %29, %29* %29, i32 0, i32 2
  %31 = bitcast %32* %30 to i32*
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %10, align 4
  %33 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %35) #13
  store %29* null, %29** %13, align 8
  %36 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  store i32 0, i32* %14, align 4
  %37 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %37) #13
  store i8* null, i8** %15, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %16) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  store i8 0, i8* %17, align 1
  %38 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %38) #13
  store i32 0, i32* %18, align 4
  %39 = load i32, i32* %11, align 4
  %40 = load %29*, %29** %12, align 8
  %41 = load %29*, %29** %13, align 8
  %42 = load i32, i32* %14, align 4
  %43 = load i8*, i8** %15, align 8
  %44 = load i8, i8* %16, align 1
  %45 = load i8, i8* %17, align 1
  br label %46

46:                                               ; preds = %23
  %47 = load i32, i32* %10, align 4
  %48 = load i32, i32* %8, align 4
  %49 = icmp slt i32 %47, %48
  %50 = xor i1 %49, true
  %51 = xor i1 %50, true
  %52 = zext i1 %51 to i32
  %53 = sext i32 %52 to i64
  %54 = call i64 @llvm.expect.i64(i64 %53, i64 0)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %75, label %56

56:                                               ; preds = %46
  %57 = load i32, i32* %10, align 4
  %58 = load i32, i32* %9, align 4
  %59 = icmp sgt i32 %57, %58
  %60 = xor i1 %59, true
  %61 = xor i1 %60, true
  %62 = zext i1 %61 to i32
  %63 = sext i32 %62 to i64
  %64 = call i64 @llvm.expect.i64(i64 %63, i64 0)
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %79

66:                                               ; preds = %56
  %67 = load i32, i32* %9, align 4
  %68 = icmp sge i32 %67, 0
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 1)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %66, %46
  %76 = load i32, i32* %10, align 4
  %77 = load i32, i32* %8, align 4
  %78 = load i32, i32* %9, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %76, i32 %77, i32 %78)
  store i32 1, i32* %18, align 4
  br label %154

79:                                               ; preds = %66, %56
  store i32 0, i32* %11, align 4
  %80 = load %1*, %1** %3, align 8
  %81 = bitcast %1* %80 to %29*
  %82 = getelementptr inbounds %29, %29* %81, i64 4
  store %29* %82, %29** %12, align 8
  store i8 1, i8* %17, align 1
  %83 = load i32, i32* %11, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %11, align 4
  br label %85

85:                                               ; preds = %79
  %86 = load i32, i32* %11, align 4
  %87 = load i32, i32* %8, align 4
  %88 = icmp sle i32 %86, %87
  br i1 %88, label %93, label %89

89:                                               ; preds = %85
  %90 = load i8, i8* %17, align 1
  %91 = zext i8 %90 to i32
  %92 = icmp eq i32 %91, 1
  br label %93

93:                                               ; preds = %89, %85
  %94 = phi i1 [ true, %85 ], [ %92, %89 ]
  %95 = xor i1 %94, true
  %96 = zext i1 %95 to i32
  %97 = sext i32 %96 to i64
  %98 = call i64 @llvm.expect.i64(i64 %97, i64 0)
  %99 = icmp ne i64 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %93
  unreachable

101:                                              ; preds = %93
  br label %102

102:                                              ; preds = %101
  br label %103

103:                                              ; preds = %102
  br label %104

104:                                              ; preds = %103
  %105 = load i32, i32* %11, align 4
  %106 = load i32, i32* %8, align 4
  %107 = icmp sgt i32 %105, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %104
  %109 = load i8, i8* %17, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp eq i32 %110, 0
  br label %112

112:                                              ; preds = %108, %104
  %113 = phi i1 [ true, %104 ], [ %111, %108 ]
  %114 = xor i1 %113, true
  %115 = zext i1 %114 to i32
  %116 = sext i32 %115 to i64
  %117 = call i64 @llvm.expect.i64(i64 %116, i64 0)
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %112
  unreachable

120:                                              ; preds = %112
  br label %121

121:                                              ; preds = %120
  br label %122

122:                                              ; preds = %121
  %123 = load i8, i8* %17, align 1
  %124 = icmp ne i8 %123, 0
  br i1 %124, label %125, label %137

125:                                              ; preds = %122
  %126 = load i32, i32* %11, align 4
  %127 = load i32, i32* %10, align 4
  %128 = icmp sgt i32 %126, %127
  %129 = xor i1 %128, true
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i32
  %132 = sext i32 %131 to i64
  %133 = call i64 @llvm.expect.i64(i64 %132, i64 0)
  %134 = icmp ne i64 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %125
  br label %154

136:                                              ; preds = %125
  br label %137

137:                                              ; preds = %136, %122
  %138 = load %29*, %29** %12, align 8
  %139 = getelementptr inbounds %29, %29* %138, i32 1
  store %29* %139, %29** %12, align 8
  %140 = load %29*, %29** %12, align 8
  store %29* %140, %29** %13, align 8
  %141 = load %29*, %29** %13, align 8
  %142 = call i32 @1465(%29* %141, i8* %5, i8* %16, i32 0)
  %143 = icmp ne i32 %142, 0
  %144 = xor i1 %143, true
  %145 = xor i1 %144, true
  %146 = xor i1 %145, true
  %147 = zext i1 %146 to i32
  %148 = sext i32 %147 to i64
  %149 = call i64 @llvm.expect.i64(i64 %148, i64 0)
  %150 = icmp ne i64 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %137
  store i32 1, i32* %14, align 4
  store i32 4, i32* %18, align 4
  br label %154

152:                                              ; preds = %137
  br label %153

153:                                              ; preds = %152
  br label %154

154:                                              ; preds = %153, %151, %135, %75
  %155 = load i32, i32* %18, align 4
  %156 = icmp ne i32 %155, 0
  %157 = xor i1 %156, true
  %158 = xor i1 %157, true
  %159 = zext i1 %158 to i32
  %160 = sext i32 %159 to i64
  %161 = call i64 @llvm.expect.i64(i64 %160, i64 0)
  %162 = icmp ne i64 %161, 0
  br i1 %162, label %163, label %186

163:                                              ; preds = %154
  %164 = load i32, i32* %18, align 4
  %165 = icmp eq i32 %164, 2
  br i1 %165, label %166, label %169

166:                                              ; preds = %163
  %167 = load i32, i32* %11, align 4
  %168 = load i8*, i8** %15, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %167, i8* %168)
  br label %185

169:                                              ; preds = %163
  %170 = load i32, i32* %18, align 4
  %171 = icmp eq i32 %170, 3
  br i1 %171, label %172, label %176

172:                                              ; preds = %169
  %173 = load i32, i32* %11, align 4
  %174 = load i8*, i8** %15, align 8
  %175 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %173, i8* %174, %29* %175)
  br label %184

176:                                              ; preds = %169
  %177 = load i32, i32* %18, align 4
  %178 = icmp eq i32 %177, 4
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = load i32, i32* %11, align 4
  %181 = load i32, i32* %14, align 4
  %182 = load %29*, %29** %13, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %180, i32 %181, %29* %182)
  br label %183

183:                                              ; preds = %179, %176
  br label %184

184:                                              ; preds = %183, %172
  br label %185

185:                                              ; preds = %184, %166
  store i32 1, i32* %19, align 4
  br label %187

186:                                              ; preds = %154
  store i32 0, i32* %19, align 4
  br label %187

187:                                              ; preds = %186, %185
  %188 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %188) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %16) #13
  %189 = bitcast i8** %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %189) #13
  %190 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %190) #13
  %191 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %191) #13
  %192 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %192) #13
  %193 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %193) #13
  %194 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #13
  %195 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %195) #13
  %196 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %196) #13
  %197 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  %198 = load i32, i32* %19, align 4
  switch i32 %198, label %235 [
    i32 0, label %199
  ]

199:                                              ; preds = %187
  br label %200

200:                                              ; preds = %199
  br label %201

201:                                              ; preds = %200
  %202 = load i8, i8* getelementptr inbounds (%74, %74* @core_globals, i32 0, i32 37), align 2
  %203 = zext i8 %202 to i16
  %204 = zext i16 %203 to i32
  store i32 %204, i32* %6, align 4
  %205 = load %1*, %1** %3, align 8
  %206 = getelementptr inbounds %1, %1* %205, i32 0, i32 4
  %207 = getelementptr inbounds %29, %29* %206, i32 0, i32 2
  %208 = bitcast %32* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %223

211:                                              ; preds = %201
  %212 = bitcast %28** %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %212) #13
  %213 = call %28* @1463(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @503, i32 0, i32 0), i64 17, i32 0)
  store %28* %213, %28** %20, align 8
  %214 = load %28*, %28** %20, align 8
  %215 = load i8, i8* %5, align 1
  %216 = zext i8 %215 to i32
  %217 = icmp ne i32 %216, 0
  %218 = zext i1 %217 to i64
  %219 = select i1 %217, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1141, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1142, i32 0, i32 0)
  %220 = call i32 @zend_alter_ini_entry_chars(%28* %214, i8* %219, i64 1, i32 1, i32 16)
  %221 = load %28*, %28** %20, align 8
  call void @1460(%28* %221)
  %222 = bitcast %28** %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %222) #13
  br label %223

223:                                              ; preds = %211, %201
  %224 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %224) #13
  %225 = load %29*, %29** %4, align 8
  store %29* %225, %29** %21, align 8
  %226 = load i32, i32* %6, align 4
  %227 = sext i32 %226 to i64
  %228 = load %29*, %29** %21, align 8
  %229 = getelementptr inbounds %29, %29* %228, i32 0, i32 0
  %230 = bitcast %30* %229 to i64*
  store i64 %227, i64* %230, align 8
  %231 = load %29*, %29** %21, align 8
  %232 = getelementptr inbounds %29, %29* %231, i32 0, i32 1
  %233 = bitcast %31* %232 to i32*
  store i32 4, i32* %233, align 8
  %234 = bitcast %29** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %234) #13
  store i32 1, i32* %19, align 4
  br label %235

235:                                              ; preds = %223, %187
  %236 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %236) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %5) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_parse_ini_file(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca %99, align 8
  %10 = alloca void (%29*, %29*, %29*, i32, i8*)*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %29*, align 8
  %17 = alloca %29*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  store i8* null, i8** %5, align 8
  %25 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  store i64 0, i64* %6, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %7) #13
  store i8 0, i8* %7, align 1
  %26 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  store i64 0, i64* %8, align 8
  %27 = bitcast %99* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %27) #13
  %28 = bitcast void (%29*, %29*, %29*, i32, i8*)** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  br label %29

29:                                               ; preds = %2
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 0, i32* %11, align 4
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %12, align 4
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 3, i32* %13, align 4
  %33 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = load %1*, %1** %3, align 8
  %35 = getelementptr inbounds %1, %1* %34, i32 0, i32 4
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 2
  %37 = bitcast %32* %36 to i32*
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %14, align 4
  %39 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  %40 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store %29* null, %29** %17, align 8
  %42 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %18, align 4
  %43 = bitcast i8** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store i8* null, i8** %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %21) #13
  store i8 0, i8* %21, align 1
  %44 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %22, align 4
  %45 = load i32, i32* %15, align 4
  %46 = load %29*, %29** %16, align 8
  %47 = load %29*, %29** %17, align 8
  %48 = load i32, i32* %18, align 4
  %49 = load i8*, i8** %19, align 8
  %50 = load i8, i8* %20, align 1
  %51 = load i8, i8* %21, align 1
  br label %52

52:                                               ; preds = %29
  %53 = load i32, i32* %14, align 4
  %54 = load i32, i32* %12, align 4
  %55 = icmp slt i32 %53, %54
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = call i64 @llvm.expect.i64(i64 %59, i64 0)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %81, label %62

62:                                               ; preds = %52
  %63 = load i32, i32* %14, align 4
  %64 = load i32, i32* %13, align 4
  %65 = icmp sgt i32 %63, %64
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 0)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %85

72:                                               ; preds = %62
  %73 = load i32, i32* %13, align 4
  %74 = icmp sge i32 %73, 0
  %75 = xor i1 %74, true
  %76 = xor i1 %75, true
  %77 = zext i1 %76 to i32
  %78 = sext i32 %77 to i64
  %79 = call i64 @llvm.expect.i64(i64 %78, i64 1)
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %72, %52
  %82 = load i32, i32* %14, align 4
  %83 = load i32, i32* %12, align 4
  %84 = load i32, i32* %13, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %82, i32 %83, i32 %84)
  store i32 1, i32* %22, align 4
  br label %300

85:                                               ; preds = %72, %62
  store i32 0, i32* %15, align 4
  %86 = load %1*, %1** %3, align 8
  %87 = bitcast %1* %86 to %29*
  %88 = getelementptr inbounds %29, %29* %87, i64 4
  store %29* %88, %29** %16, align 8
  %89 = load i32, i32* %15, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %15, align 4
  br label %91

91:                                               ; preds = %85
  %92 = load i32, i32* %15, align 4
  %93 = load i32, i32* %12, align 4
  %94 = icmp sle i32 %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i8, i8* %21, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp eq i32 %97, 1
  br label %99

99:                                               ; preds = %95, %91
  %100 = phi i1 [ true, %91 ], [ %98, %95 ]
  %101 = xor i1 %100, true
  %102 = zext i1 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = call i64 @llvm.expect.i64(i64 %103, i64 0)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %99
  unreachable

107:                                              ; preds = %99
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  br label %110

110:                                              ; preds = %109
  %111 = load i32, i32* %15, align 4
  %112 = load i32, i32* %12, align 4
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = load i8, i8* %21, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %116, 0
  br label %118

118:                                              ; preds = %114, %110
  %119 = phi i1 [ true, %110 ], [ %117, %114 ]
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = call i64 @llvm.expect.i64(i64 %122, i64 0)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %118
  unreachable

126:                                              ; preds = %118
  br label %127

127:                                              ; preds = %126
  br label %128

128:                                              ; preds = %127
  %129 = load i8, i8* %21, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %128
  %132 = load i32, i32* %15, align 4
  %133 = load i32, i32* %14, align 4
  %134 = icmp sgt i32 %132, %133
  %135 = xor i1 %134, true
  %136 = xor i1 %135, true
  %137 = zext i1 %136 to i32
  %138 = sext i32 %137 to i64
  %139 = call i64 @llvm.expect.i64(i64 %138, i64 0)
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %131
  br label %300

142:                                              ; preds = %131
  br label %143

143:                                              ; preds = %142, %128
  %144 = load %29*, %29** %16, align 8
  %145 = getelementptr inbounds %29, %29* %144, i32 1
  store %29* %145, %29** %16, align 8
  %146 = load %29*, %29** %16, align 8
  store %29* %146, %29** %17, align 8
  %147 = load %29*, %29** %17, align 8
  %148 = call i32 @1478(%29* %147, i8** %5, i64* %6, i32 0)
  %149 = icmp ne i32 %148, 0
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i32
  %154 = sext i32 %153 to i64
  %155 = call i64 @llvm.expect.i64(i64 %154, i64 0)
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %143
  store i32 6, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

158:                                              ; preds = %143
  store i8 1, i8* %21, align 1
  %159 = load i32, i32* %15, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %15, align 4
  br label %161

161:                                              ; preds = %158
  %162 = load i32, i32* %15, align 4
  %163 = load i32, i32* %12, align 4
  %164 = icmp sle i32 %162, %163
  br i1 %164, label %169, label %165

165:                                              ; preds = %161
  %166 = load i8, i8* %21, align 1
  %167 = zext i8 %166 to i32
  %168 = icmp eq i32 %167, 1
  br label %169

169:                                              ; preds = %165, %161
  %170 = phi i1 [ true, %161 ], [ %168, %165 ]
  %171 = xor i1 %170, true
  %172 = zext i1 %171 to i32
  %173 = sext i32 %172 to i64
  %174 = call i64 @llvm.expect.i64(i64 %173, i64 0)
  %175 = icmp ne i64 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %169
  unreachable

177:                                              ; preds = %169
  br label %178

178:                                              ; preds = %177
  br label %179

179:                                              ; preds = %178
  br label %180

180:                                              ; preds = %179
  %181 = load i32, i32* %15, align 4
  %182 = load i32, i32* %12, align 4
  %183 = icmp sgt i32 %181, %182
  br i1 %183, label %188, label %184

184:                                              ; preds = %180
  %185 = load i8, i8* %21, align 1
  %186 = zext i8 %185 to i32
  %187 = icmp eq i32 %186, 0
  br label %188

188:                                              ; preds = %184, %180
  %189 = phi i1 [ true, %180 ], [ %187, %184 ]
  %190 = xor i1 %189, true
  %191 = zext i1 %190 to i32
  %192 = sext i32 %191 to i64
  %193 = call i64 @llvm.expect.i64(i64 %192, i64 0)
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %195, label %196

195:                                              ; preds = %188
  unreachable

196:                                              ; preds = %188
  br label %197

197:                                              ; preds = %196
  br label %198

198:                                              ; preds = %197
  %199 = load i8, i8* %21, align 1
  %200 = icmp ne i8 %199, 0
  br i1 %200, label %201, label %213

201:                                              ; preds = %198
  %202 = load i32, i32* %15, align 4
  %203 = load i32, i32* %14, align 4
  %204 = icmp sgt i32 %202, %203
  %205 = xor i1 %204, true
  %206 = xor i1 %205, true
  %207 = zext i1 %206 to i32
  %208 = sext i32 %207 to i64
  %209 = call i64 @llvm.expect.i64(i64 %208, i64 0)
  %210 = icmp ne i64 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %201
  br label %300

212:                                              ; preds = %201
  br label %213

213:                                              ; preds = %212, %198
  %214 = load %29*, %29** %16, align 8
  %215 = getelementptr inbounds %29, %29* %214, i32 1
  store %29* %215, %29** %16, align 8
  %216 = load %29*, %29** %16, align 8
  store %29* %216, %29** %17, align 8
  %217 = load %29*, %29** %17, align 8
  %218 = call i32 @1465(%29* %217, i8* %7, i8* %20, i32 0)
  %219 = icmp ne i32 %218, 0
  %220 = xor i1 %219, true
  %221 = xor i1 %220, true
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i32
  %224 = sext i32 %223 to i64
  %225 = call i64 @llvm.expect.i64(i64 %224, i64 0)
  %226 = icmp ne i64 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %213
  store i32 1, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

228:                                              ; preds = %213
  %229 = load i32, i32* %15, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %15, align 4
  br label %231

231:                                              ; preds = %228
  %232 = load i32, i32* %15, align 4
  %233 = load i32, i32* %12, align 4
  %234 = icmp sle i32 %232, %233
  br i1 %234, label %239, label %235

235:                                              ; preds = %231
  %236 = load i8, i8* %21, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp eq i32 %237, 1
  br label %239

239:                                              ; preds = %235, %231
  %240 = phi i1 [ true, %231 ], [ %238, %235 ]
  %241 = xor i1 %240, true
  %242 = zext i1 %241 to i32
  %243 = sext i32 %242 to i64
  %244 = call i64 @llvm.expect.i64(i64 %243, i64 0)
  %245 = icmp ne i64 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %239
  unreachable

247:                                              ; preds = %239
  br label %248

248:                                              ; preds = %247
  br label %249

249:                                              ; preds = %248
  br label %250

250:                                              ; preds = %249
  %251 = load i32, i32* %15, align 4
  %252 = load i32, i32* %12, align 4
  %253 = icmp sgt i32 %251, %252
  br i1 %253, label %258, label %254

254:                                              ; preds = %250
  %255 = load i8, i8* %21, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp eq i32 %256, 0
  br label %258

258:                                              ; preds = %254, %250
  %259 = phi i1 [ true, %250 ], [ %257, %254 ]
  %260 = xor i1 %259, true
  %261 = zext i1 %260 to i32
  %262 = sext i32 %261 to i64
  %263 = call i64 @llvm.expect.i64(i64 %262, i64 0)
  %264 = icmp ne i64 %263, 0
  br i1 %264, label %265, label %266

265:                                              ; preds = %258
  unreachable

266:                                              ; preds = %258
  br label %267

267:                                              ; preds = %266
  br label %268

268:                                              ; preds = %267
  %269 = load i8, i8* %21, align 1
  %270 = icmp ne i8 %269, 0
  br i1 %270, label %271, label %283

271:                                              ; preds = %268
  %272 = load i32, i32* %15, align 4
  %273 = load i32, i32* %14, align 4
  %274 = icmp sgt i32 %272, %273
  %275 = xor i1 %274, true
  %276 = xor i1 %275, true
  %277 = zext i1 %276 to i32
  %278 = sext i32 %277 to i64
  %279 = call i64 @llvm.expect.i64(i64 %278, i64 0)
  %280 = icmp ne i64 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %271
  br label %300

282:                                              ; preds = %271
  br label %283

283:                                              ; preds = %282, %268
  %284 = load %29*, %29** %16, align 8
  %285 = getelementptr inbounds %29, %29* %284, i32 1
  store %29* %285, %29** %16, align 8
  %286 = load %29*, %29** %16, align 8
  store %29* %286, %29** %17, align 8
  %287 = load %29*, %29** %17, align 8
  %288 = call i32 @1464(%29* %287, i64* %8, i8* %20, i32 0, i32 0)
  %289 = icmp ne i32 %288, 0
  %290 = xor i1 %289, true
  %291 = xor i1 %290, true
  %292 = xor i1 %291, true
  %293 = zext i1 %292 to i32
  %294 = sext i32 %293 to i64
  %295 = call i64 @llvm.expect.i64(i64 %294, i64 0)
  %296 = icmp ne i64 %295, 0
  br i1 %296, label %297, label %298

297:                                              ; preds = %283
  store i32 0, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

298:                                              ; preds = %283
  br label %299

299:                                              ; preds = %298
  br label %300

300:                                              ; preds = %299, %297, %281, %227, %211, %157, %141, %81
  %301 = load i32, i32* %22, align 4
  %302 = icmp ne i32 %301, 0
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = call i64 @llvm.expect.i64(i64 %306, i64 0)
  %308 = icmp ne i64 %307, 0
  br i1 %308, label %309, label %338

309:                                              ; preds = %300
  %310 = load i32, i32* %22, align 4
  %311 = icmp eq i32 %310, 2
  br i1 %311, label %312, label %315

312:                                              ; preds = %309
  %313 = load i32, i32* %15, align 4
  %314 = load i8*, i8** %19, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %313, i8* %314)
  br label %331

315:                                              ; preds = %309
  %316 = load i32, i32* %22, align 4
  %317 = icmp eq i32 %316, 3
  br i1 %317, label %318, label %322

318:                                              ; preds = %315
  %319 = load i32, i32* %15, align 4
  %320 = load i8*, i8** %19, align 8
  %321 = load %29*, %29** %17, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %319, i8* %320, %29* %321)
  br label %330

322:                                              ; preds = %315
  %323 = load i32, i32* %22, align 4
  %324 = icmp eq i32 %323, 4
  br i1 %324, label %325, label %329

325:                                              ; preds = %322
  %326 = load i32, i32* %15, align 4
  %327 = load i32, i32* %18, align 4
  %328 = load %29*, %29** %17, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %326, i32 %327, %29* %328)
  br label %329

329:                                              ; preds = %325, %322
  br label %330

330:                                              ; preds = %329, %318
  br label %331

331:                                              ; preds = %330, %312
  br label %332

332:                                              ; preds = %331
  %333 = load %29*, %29** %4, align 8
  %334 = getelementptr inbounds %29, %29* %333, i32 0, i32 1
  %335 = bitcast %31* %334 to i32*
  store i32 2, i32* %335, align 8
  br label %336

336:                                              ; preds = %332
  br label %337

337:                                              ; preds = %336
  store i32 1, i32* %23, align 4
  br label %339

338:                                              ; preds = %300
  store i32 0, i32* %23, align 4
  br label %339

339:                                              ; preds = %338, %337
  %340 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %340) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %21) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  %341 = bitcast i8** %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %341) #13
  %342 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %342) #13
  %343 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %343) #13
  %344 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %344) #13
  %345 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %345) #13
  %346 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %346) #13
  %347 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %347) #13
  %348 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %348) #13
  %349 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %349) #13
  %350 = load i32, i32* %23, align 4
  switch i32 %350, label %394 [
    i32 0, label %351
  ]

351:                                              ; preds = %339
  br label %352

352:                                              ; preds = %351
  br label %353

353:                                              ; preds = %352
  %354 = load i64, i64* %6, align 8
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %363

356:                                              ; preds = %353
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @1146, i32 0, i32 0))
  br label %357

357:                                              ; preds = %356
  %358 = load %29*, %29** %4, align 8
  %359 = getelementptr inbounds %29, %29* %358, i32 0, i32 1
  %360 = bitcast %31* %359 to i32*
  store i32 2, i32* %360, align 8
  br label %361

361:                                              ; preds = %357
  br label %362

362:                                              ; preds = %361
  store i32 1, i32* %23, align 4
  br label %394

363:                                              ; preds = %353
  %364 = load i8, i8* %7, align 1
  %365 = icmp ne i8 %364, 0
  br i1 %365, label %366, label %370

366:                                              ; preds = %363
  br label %367

367:                                              ; preds = %366
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15, i32 1, i32 0), align 8
  br label %368

368:                                              ; preds = %367
  br label %369

369:                                              ; preds = %368
  store void (%29*, %29*, %29*, i32, i8*)* bitcast (void (%29*, %29*, %29*, i32, %29*)* @1497 to void (%29*, %29*, %29*, i32, i8*)*), void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  br label %371

370:                                              ; preds = %363
  store void (%29*, %29*, %29*, i32, i8*)* bitcast (void (%29*, %29*, %29*, i32, %29*)* @1498 to void (%29*, %29*, %29*, i32, i8*)*), void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  br label %371

371:                                              ; preds = %370, %369
  %372 = bitcast %99* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %372, i8 0, i64 112, i1 false)
  %373 = load i8*, i8** %5, align 8
  %374 = getelementptr inbounds %99, %99* %9, i32 0, i32 1
  store i8* %373, i8** %374, align 8
  %375 = getelementptr inbounds %99, %99* %9, i32 0, i32 3
  store i32 0, i32* %375, align 8
  %376 = load %29*, %29** %4, align 8
  %377 = call i32 @_array_init(%29* %376, i32 0)
  %378 = load i64, i64* %8, align 8
  %379 = trunc i64 %378 to i32
  %380 = load void (%29*, %29*, %29*, i32, i8*)*, void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  %381 = load %29*, %29** %4, align 8
  %382 = bitcast %29* %381 to i8*
  %383 = call i32 @zend_parse_ini_file(%99* %9, i8 zeroext 0, i32 %379, void (%29*, %29*, %29*, i32, i8*)* %380, i8* %382)
  %384 = icmp eq i32 %383, -1
  br i1 %384, label %385, label %393

385:                                              ; preds = %371
  %386 = load %29*, %29** %4, align 8
  call void @1491(%29* %386)
  br label %387

387:                                              ; preds = %385
  %388 = load %29*, %29** %4, align 8
  %389 = getelementptr inbounds %29, %29* %388, i32 0, i32 1
  %390 = bitcast %31* %389 to i32*
  store i32 2, i32* %390, align 8
  br label %391

391:                                              ; preds = %387
  br label %392

392:                                              ; preds = %391
  store i32 1, i32* %23, align 4
  br label %394

393:                                              ; preds = %371
  store i32 0, i32* %23, align 4
  br label %394

394:                                              ; preds = %393, %392, %362, %339
  %395 = bitcast void (%29*, %29*, %29*, i32, i8*)** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %395) #13
  %396 = bitcast %99* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %396) #13
  %397 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %397) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %7) #13
  %398 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %398) #13
  %399 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %399) #13
  %400 = load i32, i32* %23, align 4
  switch i32 %400, label %402 [
    i32 0, label %401
    i32 1, label %401
  ]

401:                                              ; preds = %394, %394
  ret void

402:                                              ; preds = %394
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_parse_ini_string(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca void (%29*, %29*, %29*, i32, i8*)*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %29*, align 8
  %17 = alloca %29*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %24 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #13
  store i8* null, i8** %5, align 8
  %25 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  store i8* null, i8** %6, align 8
  %26 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  store i64 0, i64* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %8) #13
  store i8 0, i8* %8, align 1
  %27 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  store i64 0, i64* %9, align 8
  %28 = bitcast void (%29*, %29*, %29*, i32, i8*)** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  br label %29

29:                                               ; preds = %2
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  store i32 0, i32* %11, align 4
  %31 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #13
  store i32 1, i32* %12, align 4
  %32 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #13
  store i32 3, i32* %13, align 4
  %33 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  %34 = load %1*, %1** %3, align 8
  %35 = getelementptr inbounds %1, %1* %34, i32 0, i32 4
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 2
  %37 = bitcast %32* %36 to i32*
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %14, align 4
  %39 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %39) #13
  %40 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %41) #13
  store %29* null, %29** %17, align 8
  %42 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %18, align 4
  %43 = bitcast i8** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  store i8* null, i8** %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %20) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %21) #13
  store i8 0, i8* %21, align 1
  %44 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 0, i32* %22, align 4
  %45 = load i32, i32* %15, align 4
  %46 = load %29*, %29** %16, align 8
  %47 = load %29*, %29** %17, align 8
  %48 = load i32, i32* %18, align 4
  %49 = load i8*, i8** %19, align 8
  %50 = load i8, i8* %20, align 1
  %51 = load i8, i8* %21, align 1
  br label %52

52:                                               ; preds = %29
  %53 = load i32, i32* %14, align 4
  %54 = load i32, i32* %12, align 4
  %55 = icmp slt i32 %53, %54
  %56 = xor i1 %55, true
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = sext i32 %58 to i64
  %60 = call i64 @llvm.expect.i64(i64 %59, i64 0)
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %81, label %62

62:                                               ; preds = %52
  %63 = load i32, i32* %14, align 4
  %64 = load i32, i32* %13, align 4
  %65 = icmp sgt i32 %63, %64
  %66 = xor i1 %65, true
  %67 = xor i1 %66, true
  %68 = zext i1 %67 to i32
  %69 = sext i32 %68 to i64
  %70 = call i64 @llvm.expect.i64(i64 %69, i64 0)
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %85

72:                                               ; preds = %62
  %73 = load i32, i32* %13, align 4
  %74 = icmp sge i32 %73, 0
  %75 = xor i1 %74, true
  %76 = xor i1 %75, true
  %77 = zext i1 %76 to i32
  %78 = sext i32 %77 to i64
  %79 = call i64 @llvm.expect.i64(i64 %78, i64 1)
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %72, %52
  %82 = load i32, i32* %14, align 4
  %83 = load i32, i32* %12, align 4
  %84 = load i32, i32* %13, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %82, i32 %83, i32 %84)
  store i32 1, i32* %22, align 4
  br label %300

85:                                               ; preds = %72, %62
  store i32 0, i32* %15, align 4
  %86 = load %1*, %1** %3, align 8
  %87 = bitcast %1* %86 to %29*
  %88 = getelementptr inbounds %29, %29* %87, i64 4
  store %29* %88, %29** %16, align 8
  %89 = load i32, i32* %15, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %15, align 4
  br label %91

91:                                               ; preds = %85
  %92 = load i32, i32* %15, align 4
  %93 = load i32, i32* %12, align 4
  %94 = icmp sle i32 %92, %93
  br i1 %94, label %99, label %95

95:                                               ; preds = %91
  %96 = load i8, i8* %21, align 1
  %97 = zext i8 %96 to i32
  %98 = icmp eq i32 %97, 1
  br label %99

99:                                               ; preds = %95, %91
  %100 = phi i1 [ true, %91 ], [ %98, %95 ]
  %101 = xor i1 %100, true
  %102 = zext i1 %101 to i32
  %103 = sext i32 %102 to i64
  %104 = call i64 @llvm.expect.i64(i64 %103, i64 0)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %99
  unreachable

107:                                              ; preds = %99
  br label %108

108:                                              ; preds = %107
  br label %109

109:                                              ; preds = %108
  br label %110

110:                                              ; preds = %109
  %111 = load i32, i32* %15, align 4
  %112 = load i32, i32* %12, align 4
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %118, label %114

114:                                              ; preds = %110
  %115 = load i8, i8* %21, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp eq i32 %116, 0
  br label %118

118:                                              ; preds = %114, %110
  %119 = phi i1 [ true, %110 ], [ %117, %114 ]
  %120 = xor i1 %119, true
  %121 = zext i1 %120 to i32
  %122 = sext i32 %121 to i64
  %123 = call i64 @llvm.expect.i64(i64 %122, i64 0)
  %124 = icmp ne i64 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %118
  unreachable

126:                                              ; preds = %118
  br label %127

127:                                              ; preds = %126
  br label %128

128:                                              ; preds = %127
  %129 = load i8, i8* %21, align 1
  %130 = icmp ne i8 %129, 0
  br i1 %130, label %131, label %143

131:                                              ; preds = %128
  %132 = load i32, i32* %15, align 4
  %133 = load i32, i32* %14, align 4
  %134 = icmp sgt i32 %132, %133
  %135 = xor i1 %134, true
  %136 = xor i1 %135, true
  %137 = zext i1 %136 to i32
  %138 = sext i32 %137 to i64
  %139 = call i64 @llvm.expect.i64(i64 %138, i64 0)
  %140 = icmp ne i64 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %131
  br label %300

142:                                              ; preds = %131
  br label %143

143:                                              ; preds = %142, %128
  %144 = load %29*, %29** %16, align 8
  %145 = getelementptr inbounds %29, %29* %144, i32 1
  store %29* %145, %29** %16, align 8
  %146 = load %29*, %29** %16, align 8
  store %29* %146, %29** %17, align 8
  %147 = load %29*, %29** %17, align 8
  %148 = call i32 @1462(%29* %147, i8** %6, i64* %7, i32 0)
  %149 = icmp ne i32 %148, 0
  %150 = xor i1 %149, true
  %151 = xor i1 %150, true
  %152 = xor i1 %151, true
  %153 = zext i1 %152 to i32
  %154 = sext i32 %153 to i64
  %155 = call i64 @llvm.expect.i64(i64 %154, i64 0)
  %156 = icmp ne i64 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %143
  store i32 2, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

158:                                              ; preds = %143
  store i8 1, i8* %21, align 1
  %159 = load i32, i32* %15, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %15, align 4
  br label %161

161:                                              ; preds = %158
  %162 = load i32, i32* %15, align 4
  %163 = load i32, i32* %12, align 4
  %164 = icmp sle i32 %162, %163
  br i1 %164, label %169, label %165

165:                                              ; preds = %161
  %166 = load i8, i8* %21, align 1
  %167 = zext i8 %166 to i32
  %168 = icmp eq i32 %167, 1
  br label %169

169:                                              ; preds = %165, %161
  %170 = phi i1 [ true, %161 ], [ %168, %165 ]
  %171 = xor i1 %170, true
  %172 = zext i1 %171 to i32
  %173 = sext i32 %172 to i64
  %174 = call i64 @llvm.expect.i64(i64 %173, i64 0)
  %175 = icmp ne i64 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %169
  unreachable

177:                                              ; preds = %169
  br label %178

178:                                              ; preds = %177
  br label %179

179:                                              ; preds = %178
  br label %180

180:                                              ; preds = %179
  %181 = load i32, i32* %15, align 4
  %182 = load i32, i32* %12, align 4
  %183 = icmp sgt i32 %181, %182
  br i1 %183, label %188, label %184

184:                                              ; preds = %180
  %185 = load i8, i8* %21, align 1
  %186 = zext i8 %185 to i32
  %187 = icmp eq i32 %186, 0
  br label %188

188:                                              ; preds = %184, %180
  %189 = phi i1 [ true, %180 ], [ %187, %184 ]
  %190 = xor i1 %189, true
  %191 = zext i1 %190 to i32
  %192 = sext i32 %191 to i64
  %193 = call i64 @llvm.expect.i64(i64 %192, i64 0)
  %194 = icmp ne i64 %193, 0
  br i1 %194, label %195, label %196

195:                                              ; preds = %188
  unreachable

196:                                              ; preds = %188
  br label %197

197:                                              ; preds = %196
  br label %198

198:                                              ; preds = %197
  %199 = load i8, i8* %21, align 1
  %200 = icmp ne i8 %199, 0
  br i1 %200, label %201, label %213

201:                                              ; preds = %198
  %202 = load i32, i32* %15, align 4
  %203 = load i32, i32* %14, align 4
  %204 = icmp sgt i32 %202, %203
  %205 = xor i1 %204, true
  %206 = xor i1 %205, true
  %207 = zext i1 %206 to i32
  %208 = sext i32 %207 to i64
  %209 = call i64 @llvm.expect.i64(i64 %208, i64 0)
  %210 = icmp ne i64 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %201
  br label %300

212:                                              ; preds = %201
  br label %213

213:                                              ; preds = %212, %198
  %214 = load %29*, %29** %16, align 8
  %215 = getelementptr inbounds %29, %29* %214, i32 1
  store %29* %215, %29** %16, align 8
  %216 = load %29*, %29** %16, align 8
  store %29* %216, %29** %17, align 8
  %217 = load %29*, %29** %17, align 8
  %218 = call i32 @1465(%29* %217, i8* %8, i8* %20, i32 0)
  %219 = icmp ne i32 %218, 0
  %220 = xor i1 %219, true
  %221 = xor i1 %220, true
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i32
  %224 = sext i32 %223 to i64
  %225 = call i64 @llvm.expect.i64(i64 %224, i64 0)
  %226 = icmp ne i64 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %213
  store i32 1, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

228:                                              ; preds = %213
  %229 = load i32, i32* %15, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %15, align 4
  br label %231

231:                                              ; preds = %228
  %232 = load i32, i32* %15, align 4
  %233 = load i32, i32* %12, align 4
  %234 = icmp sle i32 %232, %233
  br i1 %234, label %239, label %235

235:                                              ; preds = %231
  %236 = load i8, i8* %21, align 1
  %237 = zext i8 %236 to i32
  %238 = icmp eq i32 %237, 1
  br label %239

239:                                              ; preds = %235, %231
  %240 = phi i1 [ true, %231 ], [ %238, %235 ]
  %241 = xor i1 %240, true
  %242 = zext i1 %241 to i32
  %243 = sext i32 %242 to i64
  %244 = call i64 @llvm.expect.i64(i64 %243, i64 0)
  %245 = icmp ne i64 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %239
  unreachable

247:                                              ; preds = %239
  br label %248

248:                                              ; preds = %247
  br label %249

249:                                              ; preds = %248
  br label %250

250:                                              ; preds = %249
  %251 = load i32, i32* %15, align 4
  %252 = load i32, i32* %12, align 4
  %253 = icmp sgt i32 %251, %252
  br i1 %253, label %258, label %254

254:                                              ; preds = %250
  %255 = load i8, i8* %21, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp eq i32 %256, 0
  br label %258

258:                                              ; preds = %254, %250
  %259 = phi i1 [ true, %250 ], [ %257, %254 ]
  %260 = xor i1 %259, true
  %261 = zext i1 %260 to i32
  %262 = sext i32 %261 to i64
  %263 = call i64 @llvm.expect.i64(i64 %262, i64 0)
  %264 = icmp ne i64 %263, 0
  br i1 %264, label %265, label %266

265:                                              ; preds = %258
  unreachable

266:                                              ; preds = %258
  br label %267

267:                                              ; preds = %266
  br label %268

268:                                              ; preds = %267
  %269 = load i8, i8* %21, align 1
  %270 = icmp ne i8 %269, 0
  br i1 %270, label %271, label %283

271:                                              ; preds = %268
  %272 = load i32, i32* %15, align 4
  %273 = load i32, i32* %14, align 4
  %274 = icmp sgt i32 %272, %273
  %275 = xor i1 %274, true
  %276 = xor i1 %275, true
  %277 = zext i1 %276 to i32
  %278 = sext i32 %277 to i64
  %279 = call i64 @llvm.expect.i64(i64 %278, i64 0)
  %280 = icmp ne i64 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %271
  br label %300

282:                                              ; preds = %271
  br label %283

283:                                              ; preds = %282, %268
  %284 = load %29*, %29** %16, align 8
  %285 = getelementptr inbounds %29, %29* %284, i32 1
  store %29* %285, %29** %16, align 8
  %286 = load %29*, %29** %16, align 8
  store %29* %286, %29** %17, align 8
  %287 = load %29*, %29** %17, align 8
  %288 = call i32 @1464(%29* %287, i64* %9, i8* %20, i32 0, i32 0)
  %289 = icmp ne i32 %288, 0
  %290 = xor i1 %289, true
  %291 = xor i1 %290, true
  %292 = xor i1 %291, true
  %293 = zext i1 %292 to i32
  %294 = sext i32 %293 to i64
  %295 = call i64 @llvm.expect.i64(i64 %294, i64 0)
  %296 = icmp ne i64 %295, 0
  br i1 %296, label %297, label %298

297:                                              ; preds = %283
  store i32 0, i32* %18, align 4
  store i32 4, i32* %22, align 4
  br label %300

298:                                              ; preds = %283
  br label %299

299:                                              ; preds = %298
  br label %300

300:                                              ; preds = %299, %297, %281, %227, %211, %157, %141, %81
  %301 = load i32, i32* %22, align 4
  %302 = icmp ne i32 %301, 0
  %303 = xor i1 %302, true
  %304 = xor i1 %303, true
  %305 = zext i1 %304 to i32
  %306 = sext i32 %305 to i64
  %307 = call i64 @llvm.expect.i64(i64 %306, i64 0)
  %308 = icmp ne i64 %307, 0
  br i1 %308, label %309, label %338

309:                                              ; preds = %300
  %310 = load i32, i32* %22, align 4
  %311 = icmp eq i32 %310, 2
  br i1 %311, label %312, label %315

312:                                              ; preds = %309
  %313 = load i32, i32* %15, align 4
  %314 = load i8*, i8** %19, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %313, i8* %314)
  br label %331

315:                                              ; preds = %309
  %316 = load i32, i32* %22, align 4
  %317 = icmp eq i32 %316, 3
  br i1 %317, label %318, label %322

318:                                              ; preds = %315
  %319 = load i32, i32* %15, align 4
  %320 = load i8*, i8** %19, align 8
  %321 = load %29*, %29** %17, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %319, i8* %320, %29* %321)
  br label %330

322:                                              ; preds = %315
  %323 = load i32, i32* %22, align 4
  %324 = icmp eq i32 %323, 4
  br i1 %324, label %325, label %329

325:                                              ; preds = %322
  %326 = load i32, i32* %15, align 4
  %327 = load i32, i32* %18, align 4
  %328 = load %29*, %29** %17, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %326, i32 %327, %29* %328)
  br label %329

329:                                              ; preds = %325, %322
  br label %330

330:                                              ; preds = %329, %318
  br label %331

331:                                              ; preds = %330, %312
  br label %332

332:                                              ; preds = %331
  %333 = load %29*, %29** %4, align 8
  %334 = getelementptr inbounds %29, %29* %333, i32 0, i32 1
  %335 = bitcast %31* %334 to i32*
  store i32 2, i32* %335, align 8
  br label %336

336:                                              ; preds = %332
  br label %337

337:                                              ; preds = %336
  store i32 1, i32* %23, align 4
  br label %339

338:                                              ; preds = %300
  store i32 0, i32* %23, align 4
  br label %339

339:                                              ; preds = %338, %337
  %340 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %340) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %21) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %20) #13
  %341 = bitcast i8** %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %341) #13
  %342 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %342) #13
  %343 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %343) #13
  %344 = bitcast %29** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %344) #13
  %345 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %345) #13
  %346 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %346) #13
  %347 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %347) #13
  %348 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %348) #13
  %349 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %349) #13
  %350 = load i32, i32* %23, align 4
  switch i32 %350, label %402 [
    i32 0, label %351
  ]

351:                                              ; preds = %339
  br label %352

352:                                              ; preds = %351
  br label %353

353:                                              ; preds = %352
  %354 = load i64, i64* %7, align 8
  %355 = sub i64 2147483647, %354
  %356 = icmp ult i64 %355, 32
  br i1 %356, label %357, label %364

357:                                              ; preds = %353
  br label %358

358:                                              ; preds = %357
  %359 = load %29*, %29** %4, align 8
  %360 = getelementptr inbounds %29, %29* %359, i32 0, i32 1
  %361 = bitcast %31* %360 to i32*
  store i32 2, i32* %361, align 8
  br label %362

362:                                              ; preds = %358
  br label %363

363:                                              ; preds = %362
  br label %364

364:                                              ; preds = %363, %353
  %365 = load i8, i8* %8, align 1
  %366 = icmp ne i8 %365, 0
  br i1 %366, label %367, label %371

367:                                              ; preds = %364
  br label %368

368:                                              ; preds = %367
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15, i32 1, i32 0), align 8
  br label %369

369:                                              ; preds = %368
  br label %370

370:                                              ; preds = %369
  store void (%29*, %29*, %29*, i32, i8*)* bitcast (void (%29*, %29*, %29*, i32, %29*)* @1497 to void (%29*, %29*, %29*, i32, i8*)*), void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  br label %372

371:                                              ; preds = %364
  store void (%29*, %29*, %29*, i32, i8*)* bitcast (void (%29*, %29*, %29*, i32, %29*)* @1498 to void (%29*, %29*, %29*, i32, i8*)*), void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  br label %372

372:                                              ; preds = %371, %370
  %373 = load i64, i64* %7, align 8
  %374 = add i64 %373, 32
  %375 = call noalias i8* @_emalloc(i64 %374) #17
  store i8* %375, i8** %5, align 8
  %376 = load i8*, i8** %5, align 8
  %377 = load i8*, i8** %6, align 8
  %378 = load i64, i64* %7, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %376, i8* align 1 %377, i64 %378, i1 false)
  %379 = load i8*, i8** %5, align 8
  %380 = load i64, i64* %7, align 8
  %381 = getelementptr inbounds i8, i8* %379, i64 %380
  call void @llvm.memset.p0i8.i64(i8* align 1 %381, i8 0, i64 32, i1 false)
  %382 = load %29*, %29** %4, align 8
  %383 = call i32 @_array_init(%29* %382, i32 0)
  %384 = load i8*, i8** %5, align 8
  %385 = load i64, i64* %9, align 8
  %386 = trunc i64 %385 to i32
  %387 = load void (%29*, %29*, %29*, i32, i8*)*, void (%29*, %29*, %29*, i32, i8*)** %10, align 8
  %388 = load %29*, %29** %4, align 8
  %389 = bitcast %29* %388 to i8*
  %390 = call i32 @zend_parse_ini_string(i8* %384, i8 zeroext 0, i32 %386, void (%29*, %29*, %29*, i32, i8*)* %387, i8* %389)
  %391 = icmp eq i32 %390, -1
  br i1 %391, label %392, label %400

392:                                              ; preds = %372
  %393 = load %29*, %29** %4, align 8
  call void @1491(%29* %393)
  br label %394

394:                                              ; preds = %392
  %395 = load %29*, %29** %4, align 8
  %396 = getelementptr inbounds %29, %29* %395, i32 0, i32 1
  %397 = bitcast %31* %396 to i32*
  store i32 2, i32* %397, align 8
  br label %398

398:                                              ; preds = %394
  br label %399

399:                                              ; preds = %398
  br label %400

400:                                              ; preds = %399, %372
  %401 = load i8*, i8** %5, align 8
  call void @_efree(i8* %401)
  store i32 0, i32* %23, align 4
  br label %402

402:                                              ; preds = %400, %339
  %403 = bitcast void (%29*, %29*, %29*, i32, i8*)** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %403) #13
  %404 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %404) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %8) #13
  %405 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %405) #13
  %406 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %406) #13
  %407 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %407) #13
  %408 = load i32, i32* %23, align 4
  switch i32 %408, label %410 [
    i32 0, label %409
    i32 1, label %409
  ]

409:                                              ; preds = %402, %402
  ret void

410:                                              ; preds = %402
  unreachable
}

; Function Attrs: nounwind uwtable
define hidden void @zif_is_uploaded_file(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %29*, align 8
  %14 = alloca %29*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %20 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #13
  %21 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #13
  %22 = load %7*, %7** getelementptr inbounds (%79, %79* @sapi_globals, i32 0, i32 9), align 8
  %23 = icmp ne %7* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %2
  br label %25

25:                                               ; preds = %24
  %26 = load %29*, %29** %4, align 8
  %27 = getelementptr inbounds %29, %29* %26, i32 0, i32 1
  %28 = bitcast %31* %27 to i32*
  store i32 2, i32* %28, align 8
  br label %29

29:                                               ; preds = %25
  br label %30

30:                                               ; preds = %29
  store i32 1, i32* %7, align 4
  br label %230

31:                                               ; preds = %2
  br label %32

32:                                               ; preds = %31
  %33 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #13
  store i32 0, i32* %8, align 4
  %34 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #13
  store i32 1, i32* %9, align 4
  %35 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %35) #13
  store i32 1, i32* %10, align 4
  %36 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %36) #13
  %37 = load %1*, %1** %3, align 8
  %38 = getelementptr inbounds %1, %1* %37, i32 0, i32 4
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 2
  %40 = bitcast %32* %39 to i32*
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %11, align 4
  %42 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  %43 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %43) #13
  %44 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %44) #13
  store %29* null, %29** %14, align 8
  %45 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  store i32 0, i32* %15, align 4
  %46 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #13
  store i8* null, i8** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %17) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %18) #13
  store i8 0, i8* %18, align 1
  %47 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #13
  store i32 0, i32* %19, align 4
  %48 = load i32, i32* %12, align 4
  %49 = load %29*, %29** %13, align 8
  %50 = load %29*, %29** %14, align 8
  %51 = load i32, i32* %15, align 4
  %52 = load i8*, i8** %16, align 8
  %53 = load i8, i8* %17, align 1
  %54 = load i8, i8* %18, align 1
  br label %55

55:                                               ; preds = %32
  %56 = load i32, i32* %11, align 4
  %57 = load i32, i32* %9, align 4
  %58 = icmp slt i32 %56, %57
  %59 = xor i1 %58, true
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = sext i32 %61 to i64
  %63 = call i64 @llvm.expect.i64(i64 %62, i64 0)
  %64 = icmp ne i64 %63, 0
  br i1 %64, label %84, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %11, align 4
  %67 = load i32, i32* %10, align 4
  %68 = icmp sgt i32 %66, %67
  %69 = xor i1 %68, true
  %70 = xor i1 %69, true
  %71 = zext i1 %70 to i32
  %72 = sext i32 %71 to i64
  %73 = call i64 @llvm.expect.i64(i64 %72, i64 0)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %88

75:                                               ; preds = %65
  %76 = load i32, i32* %10, align 4
  %77 = icmp sge i32 %76, 0
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 1)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %75, %55
  %85 = load i32, i32* %11, align 4
  %86 = load i32, i32* %9, align 4
  %87 = load i32, i32* %10, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %85, i32 %86, i32 %87)
  store i32 1, i32* %19, align 4
  br label %163

88:                                               ; preds = %75, %65
  store i32 0, i32* %12, align 4
  %89 = load %1*, %1** %3, align 8
  %90 = bitcast %1* %89 to %29*
  %91 = getelementptr inbounds %29, %29* %90, i64 4
  store %29* %91, %29** %13, align 8
  %92 = load i32, i32* %12, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %12, align 4
  br label %94

94:                                               ; preds = %88
  %95 = load i32, i32* %12, align 4
  %96 = load i32, i32* %9, align 4
  %97 = icmp sle i32 %95, %96
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = load i8, i8* %18, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 1
  br label %102

102:                                              ; preds = %98, %94
  %103 = phi i1 [ true, %94 ], [ %101, %98 ]
  %104 = xor i1 %103, true
  %105 = zext i1 %104 to i32
  %106 = sext i32 %105 to i64
  %107 = call i64 @llvm.expect.i64(i64 %106, i64 0)
  %108 = icmp ne i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %102
  unreachable

110:                                              ; preds = %102
  br label %111

111:                                              ; preds = %110
  br label %112

112:                                              ; preds = %111
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %12, align 4
  %115 = load i32, i32* %9, align 4
  %116 = icmp sgt i32 %114, %115
  br i1 %116, label %121, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %18, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp eq i32 %119, 0
  br label %121

121:                                              ; preds = %117, %113
  %122 = phi i1 [ true, %113 ], [ %120, %117 ]
  %123 = xor i1 %122, true
  %124 = zext i1 %123 to i32
  %125 = sext i32 %124 to i64
  %126 = call i64 @llvm.expect.i64(i64 %125, i64 0)
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  unreachable

129:                                              ; preds = %121
  br label %130

130:                                              ; preds = %129
  br label %131

131:                                              ; preds = %130
  %132 = load i8, i8* %18, align 1
  %133 = icmp ne i8 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %131
  %135 = load i32, i32* %12, align 4
  %136 = load i32, i32* %11, align 4
  %137 = icmp sgt i32 %135, %136
  %138 = xor i1 %137, true
  %139 = xor i1 %138, true
  %140 = zext i1 %139 to i32
  %141 = sext i32 %140 to i64
  %142 = call i64 @llvm.expect.i64(i64 %141, i64 0)
  %143 = icmp ne i64 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  br label %163

145:                                              ; preds = %134
  br label %146

146:                                              ; preds = %145, %131
  %147 = load %29*, %29** %13, align 8
  %148 = getelementptr inbounds %29, %29* %147, i32 1
  store %29* %148, %29** %13, align 8
  %149 = load %29*, %29** %13, align 8
  store %29* %149, %29** %14, align 8
  %150 = load %29*, %29** %14, align 8
  %151 = call i32 @1462(%29* %150, i8** %5, i64* %6, i32 0)
  %152 = icmp ne i32 %151, 0
  %153 = xor i1 %152, true
  %154 = xor i1 %153, true
  %155 = xor i1 %154, true
  %156 = zext i1 %155 to i32
  %157 = sext i32 %156 to i64
  %158 = call i64 @llvm.expect.i64(i64 %157, i64 0)
  %159 = icmp ne i64 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %146
  store i32 2, i32* %15, align 4
  store i32 4, i32* %19, align 4
  br label %163

161:                                              ; preds = %146
  br label %162

162:                                              ; preds = %161
  br label %163

163:                                              ; preds = %162, %160, %144, %84
  %164 = load i32, i32* %19, align 4
  %165 = icmp ne i32 %164, 0
  %166 = xor i1 %165, true
  %167 = xor i1 %166, true
  %168 = zext i1 %167 to i32
  %169 = sext i32 %168 to i64
  %170 = call i64 @llvm.expect.i64(i64 %169, i64 0)
  %171 = icmp ne i64 %170, 0
  br i1 %171, label %172, label %195

172:                                              ; preds = %163
  %173 = load i32, i32* %19, align 4
  %174 = icmp eq i32 %173, 2
  br i1 %174, label %175, label %178

175:                                              ; preds = %172
  %176 = load i32, i32* %12, align 4
  %177 = load i8*, i8** %16, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %176, i8* %177)
  br label %194

178:                                              ; preds = %172
  %179 = load i32, i32* %19, align 4
  %180 = icmp eq i32 %179, 3
  br i1 %180, label %181, label %185

181:                                              ; preds = %178
  %182 = load i32, i32* %12, align 4
  %183 = load i8*, i8** %16, align 8
  %184 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %182, i8* %183, %29* %184)
  br label %193

185:                                              ; preds = %178
  %186 = load i32, i32* %19, align 4
  %187 = icmp eq i32 %186, 4
  br i1 %187, label %188, label %192

188:                                              ; preds = %185
  %189 = load i32, i32* %12, align 4
  %190 = load i32, i32* %15, align 4
  %191 = load %29*, %29** %14, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %189, i32 %190, %29* %191)
  br label %192

192:                                              ; preds = %188, %185
  br label %193

193:                                              ; preds = %192, %181
  br label %194

194:                                              ; preds = %193, %175
  store i32 1, i32* %7, align 4
  br label %196

195:                                              ; preds = %163
  store i32 0, i32* %7, align 4
  br label %196

196:                                              ; preds = %195, %194
  %197 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %197) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %18) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %17) #13
  %198 = bitcast i8** %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %198) #13
  %199 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %199) #13
  %200 = bitcast %29** %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %200) #13
  %201 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %201) #13
  %202 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #13
  %203 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %203) #13
  %204 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %204) #13
  %205 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #13
  %206 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #13
  %207 = load i32, i32* %7, align 4
  switch i32 %207, label %230 [
    i32 0, label %208
  ]

208:                                              ; preds = %196
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  %211 = load %7*, %7** getelementptr inbounds (%79, %79* @sapi_globals, i32 0, i32 9), align 8
  %212 = load i8*, i8** %5, align 8
  %213 = load i64, i64* %6, align 8
  %214 = call zeroext i8 @zend_hash_str_exists(%7* %211, i8* %212, i64 %213)
  %215 = icmp ne i8 %214, 0
  br i1 %215, label %216, label %223

216:                                              ; preds = %210
  br label %217

217:                                              ; preds = %216
  %218 = load %29*, %29** %4, align 8
  %219 = getelementptr inbounds %29, %29* %218, i32 0, i32 1
  %220 = bitcast %31* %219 to i32*
  store i32 3, i32* %220, align 8
  br label %221

221:                                              ; preds = %217
  br label %222

222:                                              ; preds = %221
  store i32 1, i32* %7, align 4
  br label %230

223:                                              ; preds = %210
  br label %224

224:                                              ; preds = %223
  %225 = load %29*, %29** %4, align 8
  %226 = getelementptr inbounds %29, %29* %225, i32 0, i32 1
  %227 = bitcast %31* %226 to i32*
  store i32 2, i32* %227, align 8
  br label %228

228:                                              ; preds = %224
  br label %229

229:                                              ; preds = %228
  store i32 1, i32* %7, align 4
  br label %230

230:                                              ; preds = %229, %222, %196, %30
  %231 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %231) #13
  %232 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %232) #13
  ret void
}

; Function Attrs: nounwind uwtable
define hidden void @zif_move_uploaded_file(%1* %0, %29* %1) #0 {
  %3 = alloca %1*, align 8
  %4 = alloca %29*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %29*, align 8
  %19 = alloca %29*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca i32, align 4
  store %1* %0, %1** %3, align 8
  store %29* %1, %29** %4, align 8
  %25 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %26) #13
  %27 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %27) #13
  %28 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %28) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %9) #13
  store i8 0, i8* %9, align 1
  %29 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #13
  %30 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #13
  %31 = load %7*, %7** getelementptr inbounds (%79, %79* @sapi_globals, i32 0, i32 9), align 8
  %32 = icmp ne %7* %31, null
  br i1 %32, label %40, label %33

33:                                               ; preds = %2
  br label %34

34:                                               ; preds = %33
  %35 = load %29*, %29** %4, align 8
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 1
  %37 = bitcast %31* %36 to i32*
  store i32 2, i32* %37, align 8
  br label %38

38:                                               ; preds = %34
  br label %39

39:                                               ; preds = %38
  store i32 1, i32* %12, align 4
  br label %366

40:                                               ; preds = %2
  br label %41

41:                                               ; preds = %40
  %42 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %42) #13
  store i32 0, i32* %13, align 4
  %43 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #13
  store i32 2, i32* %14, align 4
  %44 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  store i32 2, i32* %15, align 4
  %45 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %45) #13
  %46 = load %1*, %1** %3, align 8
  %47 = getelementptr inbounds %1, %1* %46, i32 0, i32 4
  %48 = getelementptr inbounds %29, %29* %47, i32 0, i32 2
  %49 = bitcast %32* %48 to i32*
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %16, align 4
  %51 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %51) #13
  %52 = bitcast %29** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %52) #13
  %53 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %53) #13
  store %29* null, %29** %19, align 8
  %54 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %54) #13
  store i32 0, i32* %20, align 4
  %55 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #13
  store i8* null, i8** %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %22) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %23) #13
  store i8 0, i8* %23, align 1
  %56 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %56) #13
  store i32 0, i32* %24, align 4
  %57 = load i32, i32* %17, align 4
  %58 = load %29*, %29** %18, align 8
  %59 = load %29*, %29** %19, align 8
  %60 = load i32, i32* %20, align 4
  %61 = load i8*, i8** %21, align 8
  %62 = load i8, i8* %22, align 1
  %63 = load i8, i8* %23, align 1
  br label %64

64:                                               ; preds = %41
  %65 = load i32, i32* %16, align 4
  %66 = load i32, i32* %14, align 4
  %67 = icmp slt i32 %65, %66
  %68 = xor i1 %67, true
  %69 = xor i1 %68, true
  %70 = zext i1 %69 to i32
  %71 = sext i32 %70 to i64
  %72 = call i64 @llvm.expect.i64(i64 %71, i64 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %93, label %74

74:                                               ; preds = %64
  %75 = load i32, i32* %16, align 4
  %76 = load i32, i32* %15, align 4
  %77 = icmp sgt i32 %75, %76
  %78 = xor i1 %77, true
  %79 = xor i1 %78, true
  %80 = zext i1 %79 to i32
  %81 = sext i32 %80 to i64
  %82 = call i64 @llvm.expect.i64(i64 %81, i64 0)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %97

84:                                               ; preds = %74
  %85 = load i32, i32* %15, align 4
  %86 = icmp sge i32 %85, 0
  %87 = xor i1 %86, true
  %88 = xor i1 %87, true
  %89 = zext i1 %88 to i32
  %90 = sext i32 %89 to i64
  %91 = call i64 @llvm.expect.i64(i64 %90, i64 1)
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %84, %64
  %94 = load i32, i32* %16, align 4
  %95 = load i32, i32* %14, align 4
  %96 = load i32, i32* %15, align 4
  call void @zend_wrong_parameters_count_error(i8 zeroext 0, i32 %94, i32 %95, i32 %96)
  store i32 1, i32* %24, align 4
  br label %242

97:                                               ; preds = %84, %74
  store i32 0, i32* %17, align 4
  %98 = load %1*, %1** %3, align 8
  %99 = bitcast %1* %98 to %29*
  %100 = getelementptr inbounds %29, %29* %99, i64 4
  store %29* %100, %29** %18, align 8
  %101 = load i32, i32* %17, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %17, align 4
  br label %103

103:                                              ; preds = %97
  %104 = load i32, i32* %17, align 4
  %105 = load i32, i32* %14, align 4
  %106 = icmp sle i32 %104, %105
  br i1 %106, label %111, label %107

107:                                              ; preds = %103
  %108 = load i8, i8* %23, align 1
  %109 = zext i8 %108 to i32
  %110 = icmp eq i32 %109, 1
  br label %111

111:                                              ; preds = %107, %103
  %112 = phi i1 [ true, %103 ], [ %110, %107 ]
  %113 = xor i1 %112, true
  %114 = zext i1 %113 to i32
  %115 = sext i32 %114 to i64
  %116 = call i64 @llvm.expect.i64(i64 %115, i64 0)
  %117 = icmp ne i64 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %111
  unreachable

119:                                              ; preds = %111
  br label %120

120:                                              ; preds = %119
  br label %121

121:                                              ; preds = %120
  br label %122

122:                                              ; preds = %121
  %123 = load i32, i32* %17, align 4
  %124 = load i32, i32* %14, align 4
  %125 = icmp sgt i32 %123, %124
  br i1 %125, label %130, label %126

126:                                              ; preds = %122
  %127 = load i8, i8* %23, align 1
  %128 = zext i8 %127 to i32
  %129 = icmp eq i32 %128, 0
  br label %130

130:                                              ; preds = %126, %122
  %131 = phi i1 [ true, %122 ], [ %129, %126 ]
  %132 = xor i1 %131, true
  %133 = zext i1 %132 to i32
  %134 = sext i32 %133 to i64
  %135 = call i64 @llvm.expect.i64(i64 %134, i64 0)
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %130
  unreachable

138:                                              ; preds = %130
  br label %139

139:                                              ; preds = %138
  br label %140

140:                                              ; preds = %139
  %141 = load i8, i8* %23, align 1
  %142 = icmp ne i8 %141, 0
  br i1 %142, label %143, label %155

143:                                              ; preds = %140
  %144 = load i32, i32* %17, align 4
  %145 = load i32, i32* %16, align 4
  %146 = icmp sgt i32 %144, %145
  %147 = xor i1 %146, true
  %148 = xor i1 %147, true
  %149 = zext i1 %148 to i32
  %150 = sext i32 %149 to i64
  %151 = call i64 @llvm.expect.i64(i64 %150, i64 0)
  %152 = icmp ne i64 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %143
  br label %242

154:                                              ; preds = %143
  br label %155

155:                                              ; preds = %154, %140
  %156 = load %29*, %29** %18, align 8
  %157 = getelementptr inbounds %29, %29* %156, i32 1
  store %29* %157, %29** %18, align 8
  %158 = load %29*, %29** %18, align 8
  store %29* %158, %29** %19, align 8
  %159 = load %29*, %29** %19, align 8
  %160 = call i32 @1462(%29* %159, i8** %5, i64* %7, i32 0)
  %161 = icmp ne i32 %160, 0
  %162 = xor i1 %161, true
  %163 = xor i1 %162, true
  %164 = xor i1 %163, true
  %165 = zext i1 %164 to i32
  %166 = sext i32 %165 to i64
  %167 = call i64 @llvm.expect.i64(i64 %166, i64 0)
  %168 = icmp ne i64 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %155
  store i32 2, i32* %20, align 4
  store i32 4, i32* %24, align 4
  br label %242

170:                                              ; preds = %155
  %171 = load i32, i32* %17, align 4
  %172 = add nsw i32 %171, 1
  store i32 %172, i32* %17, align 4
  br label %173

173:                                              ; preds = %170
  %174 = load i32, i32* %17, align 4
  %175 = load i32, i32* %14, align 4
  %176 = icmp sle i32 %174, %175
  br i1 %176, label %181, label %177

177:                                              ; preds = %173
  %178 = load i8, i8* %23, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp eq i32 %179, 1
  br label %181

181:                                              ; preds = %177, %173
  %182 = phi i1 [ true, %173 ], [ %180, %177 ]
  %183 = xor i1 %182, true
  %184 = zext i1 %183 to i32
  %185 = sext i32 %184 to i64
  %186 = call i64 @llvm.expect.i64(i64 %185, i64 0)
  %187 = icmp ne i64 %186, 0
  br i1 %187, label %188, label %189

188:                                              ; preds = %181
  unreachable

189:                                              ; preds = %181
  br label %190

190:                                              ; preds = %189
  br label %191

191:                                              ; preds = %190
  br label %192

192:                                              ; preds = %191
  %193 = load i32, i32* %17, align 4
  %194 = load i32, i32* %14, align 4
  %195 = icmp sgt i32 %193, %194
  br i1 %195, label %200, label %196

196:                                              ; preds = %192
  %197 = load i8, i8* %23, align 1
  %198 = zext i8 %197 to i32
  %199 = icmp eq i32 %198, 0
  br label %200

200:                                              ; preds = %196, %192
  %201 = phi i1 [ true, %192 ], [ %199, %196 ]
  %202 = xor i1 %201, true
  %203 = zext i1 %202 to i32
  %204 = sext i32 %203 to i64
  %205 = call i64 @llvm.expect.i64(i64 %204, i64 0)
  %206 = icmp ne i64 %205, 0
  br i1 %206, label %207, label %208

207:                                              ; preds = %200
  unreachable

208:                                              ; preds = %200
  br label %209

209:                                              ; preds = %208
  br label %210

210:                                              ; preds = %209
  %211 = load i8, i8* %23, align 1
  %212 = icmp ne i8 %211, 0
  br i1 %212, label %213, label %225

213:                                              ; preds = %210
  %214 = load i32, i32* %17, align 4
  %215 = load i32, i32* %16, align 4
  %216 = icmp sgt i32 %214, %215
  %217 = xor i1 %216, true
  %218 = xor i1 %217, true
  %219 = zext i1 %218 to i32
  %220 = sext i32 %219 to i64
  %221 = call i64 @llvm.expect.i64(i64 %220, i64 0)
  %222 = icmp ne i64 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %213
  br label %242

224:                                              ; preds = %213
  br label %225

225:                                              ; preds = %224, %210
  %226 = load %29*, %29** %18, align 8
  %227 = getelementptr inbounds %29, %29* %226, i32 1
  store %29* %227, %29** %18, align 8
  %228 = load %29*, %29** %18, align 8
  store %29* %228, %29** %19, align 8
  %229 = load %29*, %29** %19, align 8
  %230 = call i32 @1478(%29* %229, i8** %6, i64* %8, i32 0)
  %231 = icmp ne i32 %230, 0
  %232 = xor i1 %231, true
  %233 = xor i1 %232, true
  %234 = xor i1 %233, true
  %235 = zext i1 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = call i64 @llvm.expect.i64(i64 %236, i64 0)
  %238 = icmp ne i64 %237, 0
  br i1 %238, label %239, label %240

239:                                              ; preds = %225
  store i32 6, i32* %20, align 4
  store i32 4, i32* %24, align 4
  br label %242

240:                                              ; preds = %225
  br label %241

241:                                              ; preds = %240
  br label %242

242:                                              ; preds = %241, %239, %223, %169, %153, %93
  %243 = load i32, i32* %24, align 4
  %244 = icmp ne i32 %243, 0
  %245 = xor i1 %244, true
  %246 = xor i1 %245, true
  %247 = zext i1 %246 to i32
  %248 = sext i32 %247 to i64
  %249 = call i64 @llvm.expect.i64(i64 %248, i64 0)
  %250 = icmp ne i64 %249, 0
  br i1 %250, label %251, label %274

251:                                              ; preds = %242
  %252 = load i32, i32* %24, align 4
  %253 = icmp eq i32 %252, 2
  br i1 %253, label %254, label %257

254:                                              ; preds = %251
  %255 = load i32, i32* %17, align 4
  %256 = load i8*, i8** %21, align 8
  call void @zend_wrong_callback_error(i8 zeroext 0, i32 2, i32 %255, i8* %256)
  br label %273

257:                                              ; preds = %251
  %258 = load i32, i32* %24, align 4
  %259 = icmp eq i32 %258, 3
  br i1 %259, label %260, label %264

260:                                              ; preds = %257
  %261 = load i32, i32* %17, align 4
  %262 = load i8*, i8** %21, align 8
  %263 = load %29*, %29** %19, align 8
  call void @zend_wrong_parameter_class_error(i8 zeroext 0, i32 %261, i8* %262, %29* %263)
  br label %272

264:                                              ; preds = %257
  %265 = load i32, i32* %24, align 4
  %266 = icmp eq i32 %265, 4
  br i1 %266, label %267, label %271

267:                                              ; preds = %264
  %268 = load i32, i32* %17, align 4
  %269 = load i32, i32* %20, align 4
  %270 = load %29*, %29** %19, align 8
  call void @zend_wrong_parameter_type_error(i8 zeroext 0, i32 %268, i32 %269, %29* %270)
  br label %271

271:                                              ; preds = %267, %264
  br label %272

272:                                              ; preds = %271, %260
  br label %273

273:                                              ; preds = %272, %254
  store i32 1, i32* %12, align 4
  br label %275

274:                                              ; preds = %242
  store i32 0, i32* %12, align 4
  br label %275

275:                                              ; preds = %274, %273
  %276 = bitcast i32* %24 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %23) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %22) #13
  %277 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %277) #13
  %278 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %278) #13
  %279 = bitcast %29** %19 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %279) #13
  %280 = bitcast %29** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %280) #13
  %281 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %281) #13
  %282 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %282) #13
  %283 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %283) #13
  %284 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %284) #13
  %285 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %285) #13
  %286 = load i32, i32* %12, align 4
  switch i32 %286, label %366 [
    i32 0, label %287
  ]

287:                                              ; preds = %275
  br label %288

288:                                              ; preds = %287
  br label %289

289:                                              ; preds = %288
  %290 = load %7*, %7** getelementptr inbounds (%79, %79* @sapi_globals, i32 0, i32 9), align 8
  %291 = load i8*, i8** %5, align 8
  %292 = load i64, i64* %7, align 8
  %293 = call zeroext i8 @zend_hash_str_exists(%7* %290, i8* %291, i64 %292)
  %294 = icmp ne i8 %293, 0
  br i1 %294, label %302, label %295

295:                                              ; preds = %289
  br label %296

296:                                              ; preds = %295
  %297 = load %29*, %29** %4, align 8
  %298 = getelementptr inbounds %29, %29* %297, i32 0, i32 1
  %299 = bitcast %31* %298 to i32*
  store i32 2, i32* %299, align 8
  br label %300

300:                                              ; preds = %296
  br label %301

301:                                              ; preds = %300
  store i32 1, i32* %12, align 4
  br label %366

302:                                              ; preds = %289
  %303 = load i8*, i8** %6, align 8
  %304 = call i32 @php_check_open_basedir(i8* %303)
  %305 = icmp ne i32 %304, 0
  br i1 %305, label %306, label %313

306:                                              ; preds = %302
  br label %307

307:                                              ; preds = %306
  %308 = load %29*, %29** %4, align 8
  %309 = getelementptr inbounds %29, %29* %308, i32 0, i32 1
  %310 = bitcast %31* %309 to i32*
  store i32 2, i32* %310, align 8
  br label %311

311:                                              ; preds = %307
  br label %312

312:                                              ; preds = %311
  store i32 1, i32* %12, align 4
  br label %366

313:                                              ; preds = %302
  %314 = load i8*, i8** %5, align 8
  %315 = load i8*, i8** %6, align 8
  %316 = call i32 @rename(i8* %314, i8* %315) #13
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %334

318:                                              ; preds = %313
  store i8 1, i8* %9, align 1
  %319 = call i32 @umask(i32 63) #13
  store i32 %319, i32* %10, align 4
  %320 = load i32, i32* %10, align 4
  %321 = call i32 @umask(i32 %320) #13
  %322 = load i8*, i8** %6, align 8
  %323 = load i32, i32* %10, align 4
  %324 = xor i32 %323, -1
  %325 = and i32 438, %324
  %326 = call i32 @chmod(i8* %322, i32 %325) #13
  store i32 %326, i32* %11, align 4
  %327 = load i32, i32* %11, align 4
  %328 = icmp eq i32 %327, -1
  br i1 %328, label %329, label %333

329:                                              ; preds = %318
  %330 = call i32* @__errno_location() #14
  %331 = load i32, i32* %330, align 4
  %332 = call i8* @strerror(i32 %331) #13
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1144, i32 0, i32 0), i8* %332)
  br label %333

333:                                              ; preds = %329, %318
  br label %343

334:                                              ; preds = %313
  %335 = load i8*, i8** %5, align 8
  %336 = load i8*, i8** %6, align 8
  %337 = call i32 @php_copy_file_ex(i8* %335, i8* %336, i32 1024)
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %342

339:                                              ; preds = %334
  %340 = load i8*, i8** %5, align 8
  %341 = call i32 @unlink(i8* %340) #13
  store i8 1, i8* %9, align 1
  br label %342

342:                                              ; preds = %339, %334
  br label %343

343:                                              ; preds = %342, %333
  %344 = load i8, i8* %9, align 1
  %345 = icmp ne i8 %344, 0
  br i1 %345, label %346, label %351

346:                                              ; preds = %343
  %347 = load %7*, %7** getelementptr inbounds (%79, %79* @sapi_globals, i32 0, i32 9), align 8
  %348 = load i8*, i8** %5, align 8
  %349 = load i64, i64* %7, align 8
  %350 = call i32 @zend_hash_str_del(%7* %347, i8* %348, i64 %349)
  br label %354

351:                                              ; preds = %343
  %352 = load i8*, i8** %5, align 8
  %353 = load i8*, i8** %6, align 8
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @1145, i32 0, i32 0), i8* %352, i8* %353)
  br label %354

354:                                              ; preds = %351, %346
  br label %355

355:                                              ; preds = %354
  %356 = load i8, i8* %9, align 1
  %357 = zext i8 %356 to i32
  %358 = icmp ne i32 %357, 0
  %359 = zext i1 %358 to i64
  %360 = select i1 %358, i32 3, i32 2
  %361 = load %29*, %29** %4, align 8
  %362 = getelementptr inbounds %29, %29* %361, i32 0, i32 1
  %363 = bitcast %31* %362 to i32*
  store i32 %360, i32* %363, align 8
  br label %364

364:                                              ; preds = %355
  br label %365

365:                                              ; preds = %364
  store i32 1, i32* %12, align 4
  br label %366

366:                                              ; preds = %365, %312, %301, %275, %39
  %367 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %367) #13
  %368 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %368) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %9) #13
  %369 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %369) #13
  %370 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %370) #13
  %371 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %371) #13
  %372 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %372) #13
  ret void
}

declare dso_local void @zif_gethostbyaddr(%1*, %29*) #1

declare dso_local void @zif_gethostbyname(%1*, %29*) #1

declare dso_local void @zif_gethostbynamel(%1*, %29*) #1

declare dso_local void @zif_gethostname(%1*, %29*) #1

declare dso_local void @zif_dns_check_record(%1*, %29*) #1

declare dso_local void @zif_dns_get_mx(%1*, %29*) #1

declare dso_local void @zif_dns_get_record(%1*, %29*) #1

declare dso_local void @zif_intval(%1*, %29*) #1

declare dso_local void @zif_floatval(%1*, %29*) #1

declare dso_local void @zif_strval(%1*, %29*) #1

declare dso_local void @zif_boolval(%1*, %29*) #1

declare dso_local void @zif_gettype(%1*, %29*) #1

declare dso_local void @zif_settype(%1*, %29*) #1

declare dso_local void @zif_is_null(%1*, %29*) #1

declare dso_local void @zif_is_resource(%1*, %29*) #1

declare dso_local void @zif_is_bool(%1*, %29*) #1

declare dso_local void @zif_is_int(%1*, %29*) #1

declare dso_local void @zif_is_float(%1*, %29*) #1

declare dso_local void @zif_is_numeric(%1*, %29*) #1

declare dso_local void @zif_is_string(%1*, %29*) #1

declare dso_local void @zif_is_array(%1*, %29*) #1

declare dso_local void @zif_is_object(%1*, %29*) #1

declare dso_local void @zif_is_scalar(%1*, %29*) #1

declare dso_local void @zif_is_callable(%1*, %29*) #1

declare dso_local void @zif_is_iterable(%1*, %29*) #1

declare dso_local void @zif_pclose(%1*, %29*) #1

declare dso_local void @zif_popen(%1*, %29*) #1

declare dso_local void @zif_readfile(%1*, %29*) #1

declare dso_local void @zif_rewind(%1*, %29*) #1

declare dso_local void @zif_rmdir(%1*, %29*) #1

declare dso_local void @zif_umask(%1*, %29*) #1

declare dso_local void @zif_fclose(%1*, %29*) #1

declare dso_local void @zif_feof(%1*, %29*) #1

declare dso_local void @zif_fgetc(%1*, %29*) #1

declare dso_local void @zif_fgets(%1*, %29*) #1

declare dso_local void @zif_fgetss(%1*, %29*) #1

declare dso_local void @zif_fread(%1*, %29*) #1

declare dso_local void @php_if_fopen(%1*, %29*) #1

declare dso_local void @zif_fpassthru(%1*, %29*) #1

declare dso_local void @php_if_ftruncate(%1*, %29*) #1

declare dso_local void @php_if_fstat(%1*, %29*) #1

declare dso_local void @zif_fseek(%1*, %29*) #1

declare dso_local void @zif_ftell(%1*, %29*) #1

declare dso_local void @zif_fflush(%1*, %29*) #1

declare dso_local void @zif_fwrite(%1*, %29*) #1

declare dso_local void @zif_mkdir(%1*, %29*) #1

declare dso_local void @zif_rename(%1*, %29*) #1

declare dso_local void @zif_copy(%1*, %29*) #1

declare dso_local void @zif_tempnam(%1*, %29*) #1

declare dso_local void @php_if_tmpfile(%1*, %29*) #1

declare dso_local void @zif_file(%1*, %29*) #1

declare dso_local void @zif_file_get_contents(%1*, %29*) #1

declare dso_local void @zif_file_put_contents(%1*, %29*) #1

declare dso_local void @zif_stream_select(%1*, %29*) #1

declare dso_local void @zif_stream_context_create(%1*, %29*) #1

declare dso_local void @zif_stream_context_set_params(%1*, %29*) #1

declare dso_local void @zif_stream_context_get_params(%1*, %29*) #1

declare dso_local void @zif_stream_context_set_option(%1*, %29*) #1

declare dso_local void @zif_stream_context_get_options(%1*, %29*) #1

declare dso_local void @zif_stream_context_get_default(%1*, %29*) #1

declare dso_local void @zif_stream_context_set_default(%1*, %29*) #1

declare dso_local void @zif_stream_filter_prepend(%1*, %29*) #1

declare dso_local void @zif_stream_filter_append(%1*, %29*) #1

declare dso_local void @zif_stream_filter_remove(%1*, %29*) #1

declare dso_local void @zif_stream_socket_client(%1*, %29*) #1

declare dso_local void @zif_stream_socket_server(%1*, %29*) #1

declare dso_local void @zif_stream_socket_accept(%1*, %29*) #1

declare dso_local void @zif_stream_socket_get_name(%1*, %29*) #1

declare dso_local void @zif_stream_socket_recvfrom(%1*, %29*) #1

declare dso_local void @zif_stream_socket_sendto(%1*, %29*) #1

declare dso_local void @zif_stream_socket_enable_crypto(%1*, %29*) #1

declare dso_local void @zif_stream_socket_shutdown(%1*, %29*) #1

declare dso_local void @zif_stream_socket_pair(%1*, %29*) #1

declare dso_local void @zif_stream_copy_to_stream(%1*, %29*) #1

declare dso_local void @zif_stream_get_contents(%1*, %29*) #1

declare dso_local void @zif_stream_supports_lock(%1*, %29*) #1

declare dso_local void @zif_stream_isatty(%1*, %29*) #1

declare dso_local void @zif_fgetcsv(%1*, %29*) #1

declare dso_local void @zif_fputcsv(%1*, %29*) #1

declare dso_local void @zif_flock(%1*, %29*) #1

declare dso_local void @zif_get_meta_tags(%1*, %29*) #1

declare dso_local void @zif_stream_set_read_buffer(%1*, %29*) #1

declare dso_local void @zif_stream_set_write_buffer(%1*, %29*) #1

declare dso_local void @zif_stream_set_chunk_size(%1*, %29*) #1

declare dso_local void @zif_stream_set_blocking(%1*, %29*) #1

declare dso_local void @zif_stream_get_meta_data(%1*, %29*) #1

declare dso_local void @zif_stream_get_line(%1*, %29*) #1

declare dso_local void @zif_stream_wrapper_register(%1*, %29*) #1

declare dso_local void @zif_stream_wrapper_unregister(%1*, %29*) #1

declare dso_local void @zif_stream_wrapper_restore(%1*, %29*) #1

declare dso_local void @zif_stream_get_wrappers(%1*, %29*) #1

declare dso_local void @zif_stream_get_transports(%1*, %29*) #1

declare dso_local void @zif_stream_resolve_include_path(%1*, %29*) #1

declare dso_local void @zif_stream_is_local(%1*, %29*) #1

declare dso_local void @zif_get_headers(%1*, %29*) #1

declare dso_local void @zif_stream_set_timeout(%1*, %29*) #1

declare dso_local void @zif_realpath(%1*, %29*) #1

declare dso_local void @zif_fnmatch(%1*, %29*) #1

declare dso_local void @zif_fsockopen(%1*, %29*) #1

declare dso_local void @zif_pfsockopen(%1*, %29*) #1

declare dso_local void @zif_pack(%1*, %29*) #1

declare dso_local void @zif_unpack(%1*, %29*) #1

declare dso_local void @zif_get_browser(%1*, %29*) #1

declare dso_local void @zif_crypt(%1*, %29*) #1

declare dso_local void @zif_opendir(%1*, %29*) #1

declare dso_local void @zif_closedir(%1*, %29*) #1

declare dso_local void @zif_chdir(%1*, %29*) #1

declare dso_local void @zif_chroot(%1*, %29*) #1

declare dso_local void @zif_getcwd(%1*, %29*) #1

declare dso_local void @zif_rewinddir(%1*, %29*) #1

declare dso_local void @php_if_readdir(%1*, %29*) #1

declare dso_local void @zif_getdir(%1*, %29*) #1

declare dso_local void @zif_scandir(%1*, %29*) #1

declare dso_local void @zif_glob(%1*, %29*) #1

declare dso_local void @zif_fileatime(%1*, %29*) #1

declare dso_local void @zif_filectime(%1*, %29*) #1

declare dso_local void @zif_filegroup(%1*, %29*) #1

declare dso_local void @zif_fileinode(%1*, %29*) #1

declare dso_local void @zif_filemtime(%1*, %29*) #1

declare dso_local void @zif_fileowner(%1*, %29*) #1

declare dso_local void @zif_fileperms(%1*, %29*) #1

declare dso_local void @zif_filesize(%1*, %29*) #1

declare dso_local void @zif_filetype(%1*, %29*) #1

declare dso_local void @zif_file_exists(%1*, %29*) #1

declare dso_local void @zif_is_writable(%1*, %29*) #1

declare dso_local void @zif_is_readable(%1*, %29*) #1

declare dso_local void @zif_is_executable(%1*, %29*) #1

declare dso_local void @zif_is_file(%1*, %29*) #1

declare dso_local void @zif_is_dir(%1*, %29*) #1

declare dso_local void @zif_is_link(%1*, %29*) #1

declare dso_local void @php_if_stat(%1*, %29*) #1

declare dso_local void @php_if_lstat(%1*, %29*) #1

declare dso_local void @zif_chown(%1*, %29*) #1

declare dso_local void @zif_chgrp(%1*, %29*) #1

declare dso_local void @zif_lchown(%1*, %29*) #1

declare dso_local void @zif_lchgrp(%1*, %29*) #1

declare dso_local void @zif_chmod(%1*, %29*) #1

declare dso_local void @zif_touch(%1*, %29*) #1

declare dso_local void @zif_clearstatcache(%1*, %29*) #1

declare dso_local void @zif_disk_total_space(%1*, %29*) #1

declare dso_local void @zif_disk_free_space(%1*, %29*) #1

declare dso_local void @zif_realpath_cache_size(%1*, %29*) #1

declare dso_local void @zif_realpath_cache_get(%1*, %29*) #1

declare dso_local void @zif_mail(%1*, %29*) #1

declare dso_local void @zif_ezmlm_hash(%1*, %29*) #1

declare dso_local void @zif_openlog(%1*, %29*) #1

declare dso_local void @zif_syslog(%1*, %29*) #1

declare dso_local void @zif_closelog(%1*, %29*) #1

declare dso_local void @zif_lcg_value(%1*, %29*) #1

declare dso_local void @zif_metaphone(%1*, %29*) #1

declare dso_local void @zif_ob_start(%1*, %29*) #1

declare dso_local void @zif_ob_flush(%1*, %29*) #1

declare dso_local void @zif_ob_clean(%1*, %29*) #1

declare dso_local void @zif_ob_end_flush(%1*, %29*) #1

declare dso_local void @zif_ob_end_clean(%1*, %29*) #1

declare dso_local void @zif_ob_get_flush(%1*, %29*) #1

declare dso_local void @zif_ob_get_clean(%1*, %29*) #1

declare dso_local void @zif_ob_get_length(%1*, %29*) #1

declare dso_local void @zif_ob_get_level(%1*, %29*) #1

declare dso_local void @zif_ob_get_status(%1*, %29*) #1

declare dso_local void @zif_ob_get_contents(%1*, %29*) #1

declare dso_local void @zif_ob_implicit_flush(%1*, %29*) #1

declare dso_local void @zif_ob_list_handlers(%1*, %29*) #1

declare dso_local void @zif_ksort(%1*, %29*) #1

declare dso_local void @zif_krsort(%1*, %29*) #1

declare dso_local void @zif_natsort(%1*, %29*) #1

declare dso_local void @zif_natcasesort(%1*, %29*) #1

declare dso_local void @zif_asort(%1*, %29*) #1

declare dso_local void @zif_arsort(%1*, %29*) #1

declare dso_local void @zif_sort(%1*, %29*) #1

declare dso_local void @zif_rsort(%1*, %29*) #1

declare dso_local void @zif_usort(%1*, %29*) #1

declare dso_local void @zif_uasort(%1*, %29*) #1

declare dso_local void @zif_uksort(%1*, %29*) #1

declare dso_local void @zif_shuffle(%1*, %29*) #1

declare dso_local void @zif_array_walk(%1*, %29*) #1

declare dso_local void @zif_array_walk_recursive(%1*, %29*) #1

declare dso_local void @zif_count(%1*, %29*) #1

declare dso_local void @zif_end(%1*, %29*) #1

declare dso_local void @zif_prev(%1*, %29*) #1

declare dso_local void @zif_next(%1*, %29*) #1

declare dso_local void @zif_reset(%1*, %29*) #1

declare dso_local void @zif_current(%1*, %29*) #1

declare dso_local void @zif_key(%1*, %29*) #1

declare dso_local void @zif_min(%1*, %29*) #1

declare dso_local void @zif_max(%1*, %29*) #1

declare dso_local void @zif_in_array(%1*, %29*) #1

declare dso_local void @zif_array_search(%1*, %29*) #1

declare dso_local void @zif_extract(%1*, %29*) #1

declare dso_local void @zif_compact(%1*, %29*) #1

declare dso_local void @zif_array_fill(%1*, %29*) #1

declare dso_local void @zif_array_fill_keys(%1*, %29*) #1

declare dso_local void @zif_range(%1*, %29*) #1

declare dso_local void @zif_array_multisort(%1*, %29*) #1

declare dso_local void @zif_array_push(%1*, %29*) #1

declare dso_local void @zif_array_pop(%1*, %29*) #1

declare dso_local void @zif_array_shift(%1*, %29*) #1

declare dso_local void @zif_array_unshift(%1*, %29*) #1

declare dso_local void @zif_array_splice(%1*, %29*) #1

declare dso_local void @zif_array_slice(%1*, %29*) #1

declare dso_local void @zif_array_merge(%1*, %29*) #1

declare dso_local void @zif_array_merge_recursive(%1*, %29*) #1

declare dso_local void @zif_array_replace(%1*, %29*) #1

declare dso_local void @zif_array_replace_recursive(%1*, %29*) #1

declare dso_local void @zif_array_keys(%1*, %29*) #1

declare dso_local void @zif_array_values(%1*, %29*) #1

declare dso_local void @zif_array_count_values(%1*, %29*) #1

declare dso_local void @zif_array_column(%1*, %29*) #1

declare dso_local void @zif_array_reverse(%1*, %29*) #1

declare dso_local void @zif_array_reduce(%1*, %29*) #1

declare dso_local void @zif_array_pad(%1*, %29*) #1

declare dso_local void @zif_array_flip(%1*, %29*) #1

declare dso_local void @zif_array_change_key_case(%1*, %29*) #1

declare dso_local void @zif_array_rand(%1*, %29*) #1

declare dso_local void @zif_array_unique(%1*, %29*) #1

declare dso_local void @zif_array_intersect(%1*, %29*) #1

declare dso_local void @zif_array_intersect_key(%1*, %29*) #1

declare dso_local void @zif_array_intersect_ukey(%1*, %29*) #1

declare dso_local void @zif_array_uintersect(%1*, %29*) #1

declare dso_local void @zif_array_intersect_assoc(%1*, %29*) #1

declare dso_local void @zif_array_uintersect_assoc(%1*, %29*) #1

declare dso_local void @zif_array_intersect_uassoc(%1*, %29*) #1

declare dso_local void @zif_array_uintersect_uassoc(%1*, %29*) #1

declare dso_local void @zif_array_diff(%1*, %29*) #1

declare dso_local void @zif_array_diff_key(%1*, %29*) #1

declare dso_local void @zif_array_diff_ukey(%1*, %29*) #1

declare dso_local void @zif_array_udiff(%1*, %29*) #1

declare dso_local void @zif_array_diff_assoc(%1*, %29*) #1

declare dso_local void @zif_array_udiff_assoc(%1*, %29*) #1

declare dso_local void @zif_array_diff_uassoc(%1*, %29*) #1

declare dso_local void @zif_array_udiff_uassoc(%1*, %29*) #1

declare dso_local void @zif_array_sum(%1*, %29*) #1

declare dso_local void @zif_array_product(%1*, %29*) #1

declare dso_local void @zif_array_filter(%1*, %29*) #1

declare dso_local void @zif_array_map(%1*, %29*) #1

declare dso_local void @zif_array_chunk(%1*, %29*) #1

declare dso_local void @zif_array_combine(%1*, %29*) #1

declare dso_local void @zif_array_key_exists(%1*, %29*) #1

declare dso_local void @zif_assert(%1*, %29*) #1

declare dso_local void @zif_assert_options(%1*, %29*) #1

declare dso_local void @zif_version_compare(%1*, %29*) #1

declare dso_local void @zif_ftok(%1*, %29*) #1

declare dso_local void @zif_str_rot13(%1*, %29*) #1

declare dso_local void @zif_stream_get_filters(%1*, %29*) #1

declare dso_local void @zif_stream_filter_register(%1*, %29*) #1

declare dso_local void @zif_stream_bucket_make_writeable(%1*, %29*) #1

declare dso_local void @zif_stream_bucket_prepend(%1*, %29*) #1

declare dso_local void @zif_stream_bucket_append(%1*, %29*) #1

declare dso_local void @zif_stream_bucket_new(%1*, %29*) #1

declare dso_local void @zif_output_add_rewrite_var(%1*, %29*) #1

declare dso_local void @zif_output_reset_rewrite_vars(%1*, %29*) #1

declare dso_local void @zif_sys_get_temp_dir(%1*, %29*) #1

; Function Attrs: nounwind uwtable
define hidden i32 @zm_startup_basic(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  call void @1457(%37* @basic_globals)
  call void @_zend_hash_init(%7* @1039, i32 0, void (%29*)* null, i8 zeroext 1)
  %5 = call %6* @php_create_incomplete_class()
  store %6* %5, %6** @1040, align 8
  store %6* %5, %6** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 30), align 8
  %6 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1041, i32 0, i32 0), i64 18, i64 1, i32 3, i32 %6)
  %7 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1042, i32 0, i32 0), i64 17, i64 0, i32 3, i32 %7)
  %8 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1043, i32 0, i32 0), i64 18, i64 2, i32 3, i32 %8)
  %9 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1044, i32 0, i32 0), i64 8, i64 1, i32 3, i32 %9)
  %10 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1045, i32 0, i32 0), i64 10, i64 2, i32 3, i32 %10)
  %11 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1046, i32 0, i32 0), i64 10, i64 4, i32 3, i32 %11)
  %12 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1047, i32 0, i32 0), i64 7, i64 7, i32 3, i32 %12)
  %13 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1048, i32 0, i32 0), i64 18, i64 0, i32 3, i32 %13)
  %14 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @1049, i32 0, i32 0), i64 15, i64 1, i32 3, i32 %14)
  %15 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1050, i32 0, i32 0), i64 17, i64 2, i32 3, i32 %15)
  %16 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1051, i32 0, i32 0), i64 14, i64 0, i32 3, i32 %16)
  %17 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1052, i32 0, i32 0), i64 12, i64 1, i32 3, i32 %17)
  %18 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1053, i32 0, i32 0), i64 12, i64 2, i32 3, i32 %18)
  %19 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1054, i32 0, i32 0), i64 12, i64 3, i32 3, i32 %19)
  %20 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1055, i32 0, i32 0), i64 12, i64 4, i32 3, i32 %20)
  %21 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1056, i32 0, i32 0), i64 12, i64 5, i32 3, i32 %21)
  %22 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @1057, i32 0, i32 0), i64 13, i64 6, i32 3, i32 %22)
  %23 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1058, i32 0, i32 0), i64 16, i64 7, i32 3, i32 %23)
  %24 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1059, i32 0, i32 0), i64 17, i64 1, i32 3, i32 %24)
  %25 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1060, i32 0, i32 0), i64 17, i64 2, i32 3, i32 %25)
  %26 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1061, i32 0, i32 0), i64 3, double 0x4005BF0A8B145769, i32 3, i32 %26)
  %27 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1062, i32 0, i32 0), i64 7, double 0x3FF71547652B82FE, i32 3, i32 %27)
  %28 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1063, i32 0, i32 0), i64 8, double 0x3FDBCB7B1526E50E, i32 3, i32 %28)
  %29 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1064, i32 0, i32 0), i64 5, double 0x3FE62E42FEFA39EF, i32 3, i32 %29)
  %30 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1065, i32 0, i32 0), i64 6, double 0x40026BB1BBB55516, i32 3, i32 %30)
  %31 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1066, i32 0, i32 0), i64 4, double 0x400921FB54442D18, i32 3, i32 %31)
  %32 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1067, i32 0, i32 0), i64 6, double 0x3FF921FB54442D18, i32 3, i32 %32)
  %33 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1068, i32 0, i32 0), i64 6, double 0x3FE921FB54442D18, i32 3, i32 %33)
  %34 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1069, i32 0, i32 0), i64 6, double 0x3FD45F306DC9C883, i32 3, i32 %34)
  %35 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1070, i32 0, i32 0), i64 6, double 0x3FE45F306DC9C883, i32 3, i32 %35)
  %36 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1071, i32 0, i32 0), i64 8, double 0x3FFC5BF891B4EF6B, i32 3, i32 %36)
  %37 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1072, i32 0, i32 0), i64 10, double 0x3FF20DD750429B6D, i32 3, i32 %37)
  %38 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1073, i32 0, i32 0), i64 6, double 0x3FF250D048E7A1BD, i32 3, i32 %38)
  %39 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1074, i32 0, i32 0), i64 7, double 0x3FE2788CFC6FB619, i32 3, i32 %39)
  %40 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1075, i32 0, i32 0), i64 7, double 0x3FF6A09E667F3BCD, i32 3, i32 %40)
  %41 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @1076, i32 0, i32 0), i64 9, double 0x3FE6A09E667F3BCD, i32 3, i32 %41)
  %42 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1077, i32 0, i32 0), i64 7, double 0x3FFBB67AE8584CAA, i32 3, i32 %42)
  %43 = call double @1456()
  %44 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1078, i32 0, i32 0), i64 3, double %43, i32 3, i32 %44)
  %45 = call double @1455()
  %46 = load i32, i32* %4, align 4
  call void @zend_register_double_constant(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1079, i32 0, i32 0), i64 3, double %45, i32 3, i32 %46)
  %47 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1080, i32 0, i32 0), i64 17, i64 1, i32 3, i32 %47)
  %48 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1081, i32 0, i32 0), i64 19, i64 2, i32 3, i32 %48)
  %49 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @1082, i32 0, i32 0), i64 19, i64 3, i32 3, i32 %49)
  %50 = load i32, i32* %4, align 4
  call void @zend_register_long_constant(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @1083, i32 0, i32 0), i64 18, i64 4, i32 3, i32 %50)
  %51 = load i32, i32* %3, align 4
  %52 = load i32, i32* %4, align 4
  call void @register_phpinfo_constants(i32 %51, i32 %52)
  %53 = load i32, i32* %3, align 4
  %54 = load i32, i32* %4, align 4
  call void @register_html_constants(i32 %53, i32 %54)
  %55 = load i32, i32* %3, align 4
  %56 = load i32, i32* %4, align 4
  call void @register_string_constants(i32 %55, i32 %56)
  %57 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1084, i32 0, i32 0), i64 2)
  %58 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @814, i32 0, i32 0), i64 4)
  %59 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1085, i32 0, i32 0), i64 7)
  %60 = load i32, i32* %3, align 4
  %61 = load i32, i32* %4, align 4
  %62 = call i32 @zm_startup_file(i32 %60, i32 %61)
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %2
  %65 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), i64 4)
  br label %66

66:                                               ; preds = %64, %2
  %67 = load i32, i32* %3, align 4
  %68 = load i32, i32* %4, align 4
  %69 = call i32 @zm_startup_pack(i32 %67, i32 %68)
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @726, i32 0, i32 0), i64 4)
  br label %73

73:                                               ; preds = %71, %66
  %74 = load i32, i32* %3, align 4
  %75 = load i32, i32* %4, align 4
  %76 = call i32 @zm_startup_browscap(i32 %74, i32 %75)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %73
  %79 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1086, i32 0, i32 0), i64 8)
  br label %80

80:                                               ; preds = %78, %73
  %81 = load i32, i32* %3, align 4
  %82 = load i32, i32* %4, align 4
  %83 = call i32 @zm_startup_standard_filters(i32 %81, i32 %82)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %80
  %86 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1087, i32 0, i32 0), i64 16)
  br label %87

87:                                               ; preds = %85, %80
  %88 = load i32, i32* %3, align 4
  %89 = load i32, i32* %4, align 4
  %90 = call i32 @zm_startup_user_filters(i32 %88, i32 %89)
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %87
  %93 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1088, i32 0, i32 0), i64 12)
  br label %94

94:                                               ; preds = %92, %87
  %95 = load i32, i32* %3, align 4
  %96 = load i32, i32* %4, align 4
  %97 = call i32 @zm_startup_password(i32 %95, i32 %96)
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %94
  %100 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1089, i32 0, i32 0), i64 8)
  br label %101

101:                                              ; preds = %99, %94
  %102 = load i32, i32* %3, align 4
  %103 = load i32, i32* %4, align 4
  %104 = call i32 @zm_startup_mt_rand(i32 %102, i32 %103)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @262, i32 0, i32 0), i64 7)
  br label %108

108:                                              ; preds = %106, %101
  %109 = load i32, i32* %3, align 4
  %110 = load i32, i32* %4, align 4
  %111 = call i32 @zm_startup_nl_langinfo(i32 %109, i32 %110)
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %108
  %114 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @178, i32 0, i32 0), i64 11)
  br label %115

115:                                              ; preds = %113, %108
  %116 = load i32, i32* %3, align 4
  %117 = load i32, i32* %4, align 4
  %118 = call i32 @zm_startup_crypt(i32 %116, i32 %117)
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %122

120:                                              ; preds = %115
  %121 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @732, i32 0, i32 0), i64 5)
  br label %122

122:                                              ; preds = %120, %115
  %123 = load i32, i32* %3, align 4
  %124 = load i32, i32* %4, align 4
  %125 = call i32 @zm_startup_lcg(i32 %123, i32 %124)
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %122
  %128 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1090, i32 0, i32 0), i64 3)
  br label %129

129:                                              ; preds = %127, %122
  %130 = load i32, i32* %3, align 4
  %131 = load i32, i32* %4, align 4
  %132 = call i32 @zm_startup_dir(i32 %130, i32 %131)
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %129
  %135 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @748, i32 0, i32 0), i64 3)
  br label %136

136:                                              ; preds = %134, %129
  %137 = load i32, i32* %3, align 4
  %138 = load i32, i32* %4, align 4
  %139 = call i32 @zm_startup_syslog(i32 %137, i32 %138)
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %143

141:                                              ; preds = %136
  %142 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @820, i32 0, i32 0), i64 6)
  br label %143

143:                                              ; preds = %141, %136
  %144 = load i32, i32* %3, align 4
  %145 = load i32, i32* %4, align 4
  %146 = call i32 @zm_startup_array(i32 %144, i32 %145)
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %150

148:                                              ; preds = %143
  %149 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1091, i32 0, i32 0), i64 5)
  br label %150

150:                                              ; preds = %148, %143
  %151 = load i32, i32* %3, align 4
  %152 = load i32, i32* %4, align 4
  %153 = call i32 @zm_startup_assert(i32 %151, i32 %152)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %150
  %156 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1007, i32 0, i32 0), i64 6)
  br label %157

157:                                              ; preds = %155, %150
  %158 = load i32, i32* %3, align 4
  %159 = load i32, i32* %4, align 4
  %160 = call i32 @zm_startup_url_scanner_ex(i32 %158, i32 %159)
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %157
  %163 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1092, i32 0, i32 0), i64 14)
  br label %164

164:                                              ; preds = %162, %157
  %165 = load i32, i32* %3, align 4
  %166 = load i32, i32* %4, align 4
  %167 = call i32 @zm_startup_proc_open(i32 %165, i32 %166)
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %171

169:                                              ; preds = %164
  %170 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @246, i32 0, i32 0), i64 9)
  br label %171

171:                                              ; preds = %169, %164
  %172 = load i32, i32* %3, align 4
  %173 = load i32, i32* %4, align 4
  %174 = call i32 @zm_startup_exec(i32 %172, i32 %173)
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %178

176:                                              ; preds = %171
  %177 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @234, i32 0, i32 0), i64 4)
  br label %178

178:                                              ; preds = %176, %171
  %179 = load i32, i32* %3, align 4
  %180 = load i32, i32* %4, align 4
  %181 = call i32 @zm_startup_user_streams(i32 %179, i32 %180)
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %178
  %184 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1093, i32 0, i32 0), i64 12)
  br label %185

185:                                              ; preds = %183, %178
  %186 = load i32, i32* %3, align 4
  %187 = load i32, i32* %4, align 4
  %188 = call i32 @zm_startup_imagetypes(i32 %186, i32 %187)
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %192

190:                                              ; preds = %185
  %191 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1094, i32 0, i32 0), i64 10)
  br label %192

192:                                              ; preds = %190, %185
  %193 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1095, i32 0, i32 0), %51* @php_stream_php_wrapper)
  %194 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), %51* @php_plain_files_wrapper)
  %195 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @752, i32 0, i32 0), %51* @php_glob_stream_wrapper)
  %196 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1096, i32 0, i32 0), %51* @php_stream_rfc2397_wrapper)
  %197 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1097, i32 0, i32 0), %51* @php_stream_http_wrapper)
  %198 = call i32 @php_register_url_stream_wrapper(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1098, i32 0, i32 0), %51* @php_stream_ftp_wrapper)
  %199 = load i32, i32* %3, align 4
  %200 = load i32, i32* %4, align 4
  %201 = call i32 @zm_startup_dns(i32 %199, i32 %200)
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %205

203:                                              ; preds = %192
  %204 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1099, i32 0, i32 0), i64 3)
  br label %205

205:                                              ; preds = %203, %192
  %206 = load i32, i32* %3, align 4
  %207 = load i32, i32* %4, align 4
  %208 = call i32 @zm_startup_random(i32 %206, i32 %207)
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %212

210:                                              ; preds = %205
  %211 = call %29* @zend_hash_str_add_empty_element(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1100, i32 0, i32 0), i64 6)
  br label %212

212:                                              ; preds = %210, %205
  ret i32 0
}

; Function Attrs: nounwind uwtable
define hidden i32 @zm_shutdown_basic(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = call i32 @zm_shutdown_syslog(i32 %5, i32 %6)
  call void @1458(%37* @basic_globals)
  %8 = call i32 @php_unregister_url_stream_wrapper(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1095, i32 0, i32 0))
  %9 = call i32 @php_unregister_url_stream_wrapper(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1097, i32 0, i32 0))
  %10 = call i32 @php_unregister_url_stream_wrapper(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1098, i32 0, i32 0))
  %11 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1086, i32 0, i32 0), i64 8)
  %12 = icmp ne i8 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %2
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* %4, align 4
  %16 = call i32 @zm_shutdown_browscap(i32 %14, i32 %15)
  br label %17

17:                                               ; preds = %13, %2
  %18 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1091, i32 0, i32 0), i64 5)
  %19 = icmp ne i8 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = load i32, i32* %3, align 4
  %22 = load i32, i32* %4, align 4
  %23 = call i32 @zm_shutdown_array(i32 %21, i32 %22)
  br label %24

24:                                               ; preds = %20, %17
  %25 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1007, i32 0, i32 0), i64 6)
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %24
  %28 = load i32, i32* %3, align 4
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @zm_shutdown_assert(i32 %28, i32 %29)
  br label %31

31:                                               ; preds = %27, %24
  %32 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1092, i32 0, i32 0), i64 14)
  %33 = icmp ne i8 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %31
  %35 = load i32, i32* %3, align 4
  %36 = load i32, i32* %4, align 4
  %37 = call i32 @zm_shutdown_url_scanner_ex(i32 %35, i32 %36)
  br label %38

38:                                               ; preds = %34, %31
  %39 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @621, i32 0, i32 0), i64 4)
  %40 = icmp ne i8 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %38
  %42 = load i32, i32* %3, align 4
  %43 = load i32, i32* %4, align 4
  %44 = call i32 @zm_shutdown_file(i32 %42, i32 %43)
  br label %45

45:                                               ; preds = %41, %38
  %46 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1087, i32 0, i32 0), i64 16)
  %47 = icmp ne i8 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %45
  %49 = load i32, i32* %3, align 4
  %50 = load i32, i32* %4, align 4
  %51 = call i32 @zm_shutdown_standard_filters(i32 %49, i32 %50)
  br label %52

52:                                               ; preds = %48, %45
  %53 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @732, i32 0, i32 0), i64 5)
  %54 = icmp ne i8 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %52
  %56 = load i32, i32* %3, align 4
  %57 = load i32, i32* %4, align 4
  %58 = call i32 @zm_shutdown_crypt(i32 %56, i32 %57)
  br label %59

59:                                               ; preds = %55, %52
  %60 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1100, i32 0, i32 0), i64 6)
  %61 = icmp ne i8 %60, 0
  br i1 %61, label %62, label %66

62:                                               ; preds = %59
  %63 = load i32, i32* %3, align 4
  %64 = load i32, i32* %4, align 4
  %65 = call i32 @zm_shutdown_random(i32 %63, i32 %64)
  br label %66

66:                                               ; preds = %62, %59
  call void @zend_hash_destroy(%7* @1039)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define hidden i32 @zm_activate_basic(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 7, i32 0), i8 0, i64 256, i1 false)
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 31), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%45* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 32) to i8*), i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%47* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 33) to i8*), i8 0, i64 16, i1 false)
  store i8* null, i8** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 3), align 8
  br label %5

5:                                                ; preds = %2
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 2, i32 1, i32 0), align 8
  br label %6

6:                                                ; preds = %5
  store i8* null, i8** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 6), align 8
  store %28* null, %28** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 4), align 8
  store i8 0, i8* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 5), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%38* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 10) to i8*), i8* align 8 bitcast (%38* @empty_fcall_info to i8*), i64 56, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 11, i32 0), i8* align 8 getelementptr inbounds (%39, %39* @empty_fcall_info_cache, i32 0, i32 0), i64 40, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%38* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 12) to i8*), i8* align 8 bitcast (%38* @empty_fcall_info to i8*), i64 56, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 13, i32 0), i8* align 8 getelementptr inbounds (%39, %39* @empty_fcall_info_cache, i32 0, i32 0), i64 40, i1 false)
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 16), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 17), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 18), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 19), align 8
  call void @_zend_hash_init(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 1), i32 1, void (%29*)* @1459, i8 zeroext 0)
  store %7* null, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 @zm_activate_filestat(i32 %7, i32 %8)
  %10 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @820, i32 0, i32 0), i64 6)
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %6
  %13 = load i32, i32* %3, align 4
  %14 = load i32, i32* %4, align 4
  %15 = call i32 @zm_activate_syslog(i32 %13, i32 %14)
  br label %16

16:                                               ; preds = %12, %6
  %17 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @748, i32 0, i32 0), i64 3)
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = load i32, i32* %3, align 4
  %21 = load i32, i32* %4, align 4
  %22 = call i32 @zm_activate_dir(i32 %20, i32 %21)
  br label %23

23:                                               ; preds = %19, %16
  %24 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1092, i32 0, i32 0), i64 14)
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = load i32, i32* %3, align 4
  %28 = load i32, i32* %4, align 4
  %29 = call i32 @zm_activate_url_scanner_ex(i32 %27, i32 %28)
  br label %30

30:                                               ; preds = %26, %23
  store %63* null, %63** getelementptr inbounds (%65, %65* @file_globals, i32 0, i32 7), align 8
  store %7* null, %7** getelementptr inbounds (%65, %65* @file_globals, i32 0, i32 8), align 8
  store %7* null, %7** getelementptr inbounds (%65, %65* @file_globals, i32 0, i32 9), align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define hidden i32 @zm_deactivate_basic(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  call void @_zval_ptr_dtor(%29* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 2))
  br label %5

5:                                                ; preds = %2
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 2, i32 1, i32 0), align 8
  br label %6

6:                                                ; preds = %5
  store i8* null, i8** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 3), align 8
  call void @zend_hash_destroy(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 1))
  store i8 0, i8* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 27), align 4
  %7 = load i32, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 41), align 8
  %8 = icmp ne i32 %7, -1
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = load i32, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 41), align 8
  %11 = call i32 @umask(i32 %10) #13
  br label %12

12:                                               ; preds = %9, %6
  %13 = load i8, i8* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 5), align 8
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %12
  %16 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1101, i32 0, i32 0)) #13
  %17 = call i8* @setlocale(i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @1102, i32 0, i32 0)) #13
  %18 = load %28*, %28** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 4), align 8
  %19 = icmp ne %28* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = load %28*, %28** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 4), align 8
  call void @1460(%28* %21)
  store %28* null, %28** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 4), align 8
  br label %22

22:                                               ; preds = %20, %15
  br label %23

23:                                               ; preds = %22, %12
  %24 = load i32, i32* %3, align 4
  %25 = load i32, i32* %4, align 4
  %26 = call i32 @zm_deactivate_filestat(i32 %24, i32 %25)
  %27 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1007, i32 0, i32 0), i64 6)
  %28 = icmp ne i8 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %23
  %30 = load i32, i32* %3, align 4
  %31 = load i32, i32* %4, align 4
  %32 = call i32 @zm_deactivate_assert(i32 %30, i32 %31)
  br label %33

33:                                               ; preds = %29, %23
  %34 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1092, i32 0, i32 0), i64 14)
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %33
  %37 = load i32, i32* %3, align 4
  %38 = load i32, i32* %4, align 4
  %39 = call i32 @zm_deactivate_url_scanner_ex(i32 %37, i32 %38)
  br label %40

40:                                               ; preds = %36, %33
  %41 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1085, i32 0, i32 0), i64 7)
  %42 = icmp ne i8 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = load i32, i32* %3, align 4
  %45 = load i32, i32* %4, align 4
  %46 = call i32 @zm_deactivate_streams(i32 %44, i32 %45)
  br label %47

47:                                               ; preds = %43, %40
  %48 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %49 = icmp ne %40* %48, null
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  call void @zend_llist_destroy(%40* %51)
  %52 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  %53 = bitcast %40* %52 to i8*
  call void @_efree(i8* %53)
  store %40* null, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  br label %54

54:                                               ; preds = %50, %47
  %55 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1088, i32 0, i32 0), i64 12)
  %56 = icmp ne i8 %55, 0
  br i1 %56, label %57, label %61

57:                                               ; preds = %54
  %58 = load i32, i32* %3, align 4
  %59 = load i32, i32* %4, align 4
  %60 = call i32 @zm_deactivate_user_filters(i32 %58, i32 %59)
  br label %61

61:                                               ; preds = %57, %54
  %62 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @1086, i32 0, i32 0), i64 8)
  %63 = icmp ne i8 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = load i32, i32* %3, align 4
  %66 = load i32, i32* %4, align 4
  %67 = call i32 @zm_deactivate_browscap(i32 %65, i32 %66)
  br label %68

68:                                               ; preds = %64, %61
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 16), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 17), align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define hidden void @zm_info_basic(%34* %0) #0 {
  %2 = alloca %34*, align 8
  store %34* %0, %34** %2, align 8
  call void @php_info_print_table_start()
  %3 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1084, i32 0, i32 0), i64 2)
  %4 = icmp ne i8 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load %34*, %34** %2, align 8
  call void @zm_info_dl(%34* %6)
  br label %7

7:                                                ; preds = %5, %1
  %8 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @814, i32 0, i32 0), i64 4)
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = load %34*, %34** %2, align 8
  call void @zm_info_mail(%34* %11)
  br label %12

12:                                               ; preds = %10, %7
  call void @php_info_print_table_end()
  %13 = call zeroext i8 @zend_hash_str_exists(%7* @1039, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1007, i32 0, i32 0), i64 6)
  %14 = icmp ne i8 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = load %34*, %34** %2, align 8
  call void @zm_info_assert(%34* %16)
  br label %17

17:                                               ; preds = %15, %12
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local double @php_get_nan() #0 {
  %1 = call double @1455()
  ret double %1
}

; Function Attrs: alwaysinline nounwind uwtable
define internal double @1455() #2 {
  ret double 0x7FF8000000000000
}

; Function Attrs: nounwind uwtable
define dso_local double @php_get_inf() #0 {
  %1 = call double @1456()
  ret double %1
}

; Function Attrs: alwaysinline nounwind uwtable
define internal double @1456() #2 {
  ret double 0x7FF0000000000000
}

; Function Attrs: nounwind uwtable
define internal void @1457(%37* %0) #0 {
  %2 = alloca %37*, align 8
  store %37* %0, %37** %2, align 8
  store i8 0, i8* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 27), align 4
  store i64 0, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 28), align 8
  store i32 -1, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 41), align 8
  store i32* null, i32** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 25), align 8
  store i32 -1, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 26), align 8
  store %40* null, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  store %7* null, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 40), align 8
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 31), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%45* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 32) to i8*), i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%47* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 33) to i8*), i8 0, i64 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%49* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 34) to i8*), i8 0, i64 168, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%49* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 36) to i8*), i8 0, i64 168, i1 false)
  store i32 1, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 34, i32 10), align 4
  store i32 0, i32* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 36, i32 10), align 4
  call void @_zend_hash_init(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 35), i32 0, void (%29*)* null, i8 zeroext 1)
  call void @_zend_hash_init(%7* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 37), i32 0, void (%29*)* null, i8 zeroext 1)
  %3 = load %6*, %6** @1040, align 8
  store %6* %3, %6** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 30), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 16), align 8
  store i64 -1, i64* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 17), align 8
  ret void
}

declare dso_local void @_zend_hash_init(%7*, i32, void (%29*)*, i8 zeroext) #1

declare dso_local %6* @php_create_incomplete_class() #1

declare dso_local void @zend_register_long_constant(i8*, i64, i64, i32, i32) #1

declare dso_local void @zend_register_double_constant(i8*, i64, double, i32, i32) #1

declare dso_local void @register_phpinfo_constants(i32, i32) #1

declare dso_local void @register_html_constants(i32, i32) #1

declare dso_local void @register_string_constants(i32, i32) #1

declare dso_local %29* @zend_hash_str_add_empty_element(%7*, i8*, i64) #1

declare dso_local i32 @zm_startup_file(i32, i32) #1

declare dso_local i32 @zm_startup_pack(i32, i32) #1

declare dso_local i32 @zm_startup_browscap(i32, i32) #1

declare dso_local i32 @zm_startup_standard_filters(i32, i32) #1

declare dso_local i32 @zm_startup_user_filters(i32, i32) #1

declare dso_local i32 @zm_startup_password(i32, i32) #1

declare dso_local i32 @zm_startup_mt_rand(i32, i32) #1

declare dso_local i32 @zm_startup_nl_langinfo(i32, i32) #1

declare dso_local i32 @zm_startup_crypt(i32, i32) #1

declare dso_local i32 @zm_startup_lcg(i32, i32) #1

declare dso_local i32 @zm_startup_dir(i32, i32) #1

declare dso_local i32 @zm_startup_syslog(i32, i32) #1

declare dso_local i32 @zm_startup_array(i32, i32) #1

declare dso_local i32 @zm_startup_assert(i32, i32) #1

declare dso_local i32 @zm_startup_url_scanner_ex(i32, i32) #1

declare dso_local i32 @zm_startup_proc_open(i32, i32) #1

declare dso_local i32 @zm_startup_exec(i32, i32) #1

declare dso_local i32 @zm_startup_user_streams(i32, i32) #1

declare dso_local i32 @zm_startup_imagetypes(i32, i32) #1

declare dso_local i32 @php_register_url_stream_wrapper(i8*, %51*) #1

declare dso_local i32 @zm_startup_dns(i32, i32) #1

declare dso_local i32 @zm_startup_random(i32, i32) #1

declare dso_local i32 @zm_shutdown_syslog(i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @1458(%37* %0) #0 {
  %2 = alloca %37*, align 8
  store %37* %0, %37** %2, align 8
  %3 = load %37*, %37** %2, align 8
  %4 = getelementptr inbounds %37, %37* %3, i32 0, i32 34
  %5 = getelementptr inbounds %49, %49* %4, i32 0, i32 14
  %6 = load %7*, %7** %5, align 8
  %7 = icmp ne %7* %6, null
  br i1 %7, label %8, label %18

8:                                                ; preds = %1
  %9 = load %37*, %37** %2, align 8
  %10 = getelementptr inbounds %37, %37* %9, i32 0, i32 34
  %11 = getelementptr inbounds %49, %49* %10, i32 0, i32 14
  %12 = load %7*, %7** %11, align 8
  call void @zend_hash_destroy(%7* %12)
  %13 = load %37*, %37** %2, align 8
  %14 = getelementptr inbounds %37, %37* %13, i32 0, i32 34
  %15 = getelementptr inbounds %49, %49* %14, i32 0, i32 14
  %16 = load %7*, %7** %15, align 8
  %17 = bitcast %7* %16 to i8*
  call void @free(i8* %17) #13
  br label %18

18:                                               ; preds = %8, %1
  %19 = load %37*, %37** %2, align 8
  %20 = getelementptr inbounds %37, %37* %19, i32 0, i32 36
  %21 = getelementptr inbounds %49, %49* %20, i32 0, i32 14
  %22 = load %7*, %7** %21, align 8
  %23 = icmp ne %7* %22, null
  br i1 %23, label %24, label %34

24:                                               ; preds = %18
  %25 = load %37*, %37** %2, align 8
  %26 = getelementptr inbounds %37, %37* %25, i32 0, i32 36
  %27 = getelementptr inbounds %49, %49* %26, i32 0, i32 14
  %28 = load %7*, %7** %27, align 8
  call void @zend_hash_destroy(%7* %28)
  %29 = load %37*, %37** %2, align 8
  %30 = getelementptr inbounds %37, %37* %29, i32 0, i32 36
  %31 = getelementptr inbounds %49, %49* %30, i32 0, i32 14
  %32 = load %7*, %7** %31, align 8
  %33 = bitcast %7* %32 to i8*
  call void @free(i8* %33) #13
  br label %34

34:                                               ; preds = %24, %18
  %35 = load %37*, %37** %2, align 8
  %36 = getelementptr inbounds %37, %37* %35, i32 0, i32 35
  call void @zend_hash_destroy(%7* %36)
  %37 = load %37*, %37** %2, align 8
  %38 = getelementptr inbounds %37, %37* %37, i32 0, i32 37
  call void @zend_hash_destroy(%7* %38)
  ret void
}

declare dso_local i32 @php_unregister_url_stream_wrapper(i8*) #1

declare dso_local zeroext i8 @zend_hash_str_exists(%7*, i8*, i64) #1

declare dso_local i32 @zm_shutdown_browscap(i32, i32) #1

declare dso_local i32 @zm_shutdown_array(i32, i32) #1

declare dso_local i32 @zm_shutdown_assert(i32, i32) #1

declare dso_local i32 @zm_shutdown_url_scanner_ex(i32, i32) #1

declare dso_local i32 @zm_shutdown_file(i32, i32) #1

declare dso_local i32 @zm_shutdown_standard_filters(i32, i32) #1

declare dso_local i32 @zm_shutdown_crypt(i32, i32) #1

declare dso_local i32 @zm_shutdown_random(i32, i32) #1

declare dso_local void @zend_hash_destroy(%7*) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind uwtable
define internal void @1459(%29* %0) #0 {
  %2 = alloca %29*, align 8
  %3 = alloca %89*, align 8
  store %29* %0, %29** %2, align 8
  %4 = bitcast %89** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load %29*, %29** %2, align 8
  %6 = getelementptr inbounds %29, %29* %5, i32 0, i32 0
  %7 = bitcast %30* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %89*
  store %89* %9, %89** %3, align 8
  %10 = load %89*, %89** %3, align 8
  %11 = getelementptr inbounds %89, %89* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %19

14:                                               ; preds = %1
  %15 = load %89*, %89** %3, align 8
  %16 = getelementptr inbounds %89, %89* %15, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @putenv(i8* %17) #13
  br label %24

19:                                               ; preds = %1
  %20 = load %89*, %89** %3, align 8
  %21 = getelementptr inbounds %89, %89* %20, i32 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @unsetenv(i8* %22) #13
  br label %24

24:                                               ; preds = %19, %14
  %25 = load %89*, %89** %3, align 8
  %26 = getelementptr inbounds %89, %89* %25, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = load %89*, %89** %3, align 8
  %29 = getelementptr inbounds %89, %89* %28, i32 0, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = call i32 @strncmp(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1108, i32 0, i32 0), i64 %31) #15
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %24
  call void @tzset() #13
  br label %35

35:                                               ; preds = %34, %24
  %36 = load %89*, %89** %3, align 8
  %37 = getelementptr inbounds %89, %89* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  call void @_efree(i8* %38)
  %39 = load %89*, %89** %3, align 8
  %40 = getelementptr inbounds %89, %89* %39, i32 0, i32 2
  %41 = load i8*, i8** %40, align 8
  call void @_efree(i8* %41)
  %42 = load %89*, %89** %3, align 8
  %43 = bitcast %89* %42 to i8*
  call void @_efree(i8* %43)
  %44 = bitcast %89** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #13
  ret void
}

declare dso_local i32 @zm_activate_filestat(i32, i32) #1

declare dso_local i32 @zm_activate_syslog(i32, i32) #1

declare dso_local i32 @zm_activate_dir(i32, i32) #1

declare dso_local i32 @zm_activate_url_scanner_ex(i32, i32) #1

declare dso_local void @_zval_ptr_dtor(%29*) #1

; Function Attrs: nounwind
declare dso_local i32 @umask(i32) #5

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1460(%28* %0) #2 {
  %2 = alloca %28*, align 8
  store %28* %0, %28** %2, align 8
  %3 = load %28*, %28** %2, align 8
  %4 = getelementptr inbounds %28, %28* %3, i32 0, i32 0
  %5 = getelementptr inbounds %8, %8* %4, i32 0, i32 1
  %6 = bitcast %9* %5 to %93*
  %7 = getelementptr inbounds %93, %93* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 2
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %37, label %12

12:                                               ; preds = %1
  %13 = load %28*, %28** %2, align 8
  %14 = getelementptr inbounds %28, %28* %13, i32 0, i32 0
  %15 = getelementptr inbounds %8, %8* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, -1
  store i32 %17, i32* %15, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %36

19:                                               ; preds = %12
  %20 = load %28*, %28** %2, align 8
  %21 = getelementptr inbounds %28, %28* %20, i32 0, i32 0
  %22 = getelementptr inbounds %8, %8* %21, i32 0, i32 1
  %23 = bitcast %9* %22 to %93*
  %24 = getelementptr inbounds %93, %93* %23, i32 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = and i32 %26, 1
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %19
  %30 = load %28*, %28** %2, align 8
  %31 = bitcast %28* %30 to i8*
  call void @free(i8* %31) #13
  br label %35

32:                                               ; preds = %19
  %33 = load %28*, %28** %2, align 8
  %34 = bitcast %28* %33 to i8*
  call void @_efree(i8* %34)
  br label %35

35:                                               ; preds = %32, %29
  br label %36

36:                                               ; preds = %35, %12
  br label %37

37:                                               ; preds = %36, %1
  ret void
}

declare dso_local i32 @zm_deactivate_filestat(i32, i32) #1

declare dso_local i32 @zm_deactivate_assert(i32, i32) #1

declare dso_local i32 @zm_deactivate_url_scanner_ex(i32, i32) #1

declare dso_local i32 @zm_deactivate_streams(i32, i32) #1

declare dso_local void @zend_llist_destroy(%40*) #1

declare dso_local void @_efree(i8*) #1

declare dso_local i32 @zm_deactivate_user_filters(i32, i32) #1

declare dso_local i32 @zm_deactivate_browscap(i32, i32) #1

declare dso_local void @php_info_print_table_start() #1

declare dso_local void @zm_info_dl(%34*) #1

declare dso_local void @zm_info_mail(%34*) #1

declare dso_local void @php_info_print_table_end() #1

declare dso_local void @zm_info_assert(%34*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.expect.i64(i64, i64) #6

declare dso_local void @zend_wrong_parameters_count_error(i8 zeroext, i32, i32, i32) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1461(%29* %0, %28** %1, i32 %2) #2 {
  %4 = alloca i32, align 4
  %5 = alloca %29*, align 8
  %6 = alloca %28**, align 8
  %7 = alloca i32, align 4
  store %29* %0, %29** %5, align 8
  store %28** %1, %28*** %6, align 8
  store i32 %2, i32* %7, align 4
  %8 = load %29*, %29** %5, align 8
  %9 = call zeroext i8 @1468(%29* %8)
  %10 = zext i8 %9 to i32
  %11 = icmp eq i32 %10, 6
  %12 = xor i1 %11, true
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = sext i32 %14 to i64
  %16 = call i64 @llvm.expect.i64(i64 %15, i64 1)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %24

18:                                               ; preds = %3
  %19 = load %29*, %29** %5, align 8
  %20 = getelementptr inbounds %29, %29* %19, i32 0, i32 0
  %21 = bitcast %30* %20 to %28**
  %22 = load %28*, %28** %21, align 8
  %23 = load %28**, %28*** %6, align 8
  store %28* %22, %28** %23, align 8
  br label %39

24:                                               ; preds = %3
  %25 = load i32, i32* %7, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %34

27:                                               ; preds = %24
  %28 = load %29*, %29** %5, align 8
  %29 = call zeroext i8 @1468(%29* %28)
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %27
  %33 = load %28**, %28*** %6, align 8
  store %28* null, %28** %33, align 8
  br label %38

34:                                               ; preds = %27, %24
  %35 = load %29*, %29** %5, align 8
  %36 = load %28**, %28*** %6, align 8
  %37 = call i32 @zend_parse_arg_str_slow(%29* %35, %28** %36)
  store i32 %37, i32* %4, align 4
  br label %40

38:                                               ; preds = %32
  br label %39

39:                                               ; preds = %38, %18
  store i32 1, i32* %4, align 4
  br label %40

40:                                               ; preds = %39, %34
  %41 = load i32, i32* %4, align 4
  ret i32 %41
}

declare dso_local void @zend_wrong_callback_error(i8 zeroext, i32, i32, i8*) #1

declare dso_local void @zend_wrong_parameter_class_error(i8 zeroext, i32, i8*, %29*) #1

declare dso_local void @zend_wrong_parameter_type_error(i8 zeroext, i32, i32, %29*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare dso_local %6* @zend_get_executed_scope() #1

declare dso_local %29* @zend_get_constant_ex(%28*, %6*, i32) #1

declare dso_local void @_zval_copy_ctor_func(%29*) #1

declare dso_local i32 @zval_update_constant_ex(%29*, %6*) #1

declare dso_local void @php_error_docref0(i8*, i32, i8*, ...) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1462(%29* %0, i8** %1, i64* %2, i32 %3) #2 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %28*, align 8
  %11 = alloca i32, align 4
  store %29* %0, %29** %6, align 8
  store i8** %1, i8*** %7, align 8
  store i64* %2, i64** %8, align 8
  store i32 %3, i32* %9, align 4
  %12 = bitcast %28** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load %29*, %29** %6, align 8
  %14 = load i32, i32* %9, align 4
  %15 = call i32 @1461(%29* %13, %28** %10, i32 %14)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  store i32 0, i32* %5, align 4
  store i32 1, i32* %11, align 4
  br label %44

18:                                               ; preds = %4
  %19 = load i32, i32* %9, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = load %28*, %28** %10, align 8
  %23 = icmp ne %28* %22, null
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = xor i1 %25, true
  %27 = zext i1 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = call i64 @llvm.expect.i64(i64 %28, i64 0)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %21
  %32 = load i8**, i8*** %7, align 8
  store i8* null, i8** %32, align 8
  %33 = load i64*, i64** %8, align 8
  store i64 0, i64* %33, align 8
  br label %43

34:                                               ; preds = %21, %18
  %35 = load %28*, %28** %10, align 8
  %36 = getelementptr inbounds %28, %28* %35, i32 0, i32 3
  %37 = getelementptr inbounds [1 x i8], [1 x i8]* %36, i32 0, i32 0
  %38 = load i8**, i8*** %7, align 8
  store i8* %37, i8** %38, align 8
  %39 = load %28*, %28** %10, align 8
  %40 = getelementptr inbounds %28, %28* %39, i32 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = load i64*, i64** %8, align 8
  store i64 %41, i64* %42, align 8
  br label %43

43:                                               ; preds = %34, %31
  store i32 1, i32* %5, align 4
  store i32 1, i32* %11, align 4
  br label %44

44:                                               ; preds = %43, %17
  %45 = bitcast %28** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #13
  %46 = load i32, i32* %5, align 4
  ret i32 %46
}

; Function Attrs: nounwind
declare dso_local i8* @inet_ntop(i32, i8*, i8*, i32) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal %28* @1463(i8* %0, i64 %1, i32 %2) #2 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca %28*, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %8 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load i64, i64* %5, align 8
  %10 = load i32, i32* %6, align 4
  %11 = call %28* @1499(i64 %9, i32 %10)
  store %28* %11, %28** %7, align 8
  %12 = load %28*, %28** %7, align 8
  %13 = getelementptr inbounds %28, %28* %12, i32 0, i32 3
  %14 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i32 0, i32 0
  %15 = load i8*, i8** %4, align 8
  %16 = load i64, i64* %5, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 1 %15, i64 %16, i1 false)
  %17 = load %28*, %28** %7, align 8
  %18 = getelementptr inbounds %28, %28* %17, i32 0, i32 3
  %19 = load i64, i64* %5, align 8
  %20 = getelementptr inbounds [1 x i8], [1 x i8]* %18, i64 0, i64 %19
  store i8 0, i8* %20, align 1
  %21 = load %28*, %28** %7, align 8
  %22 = bitcast %28** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %22) #13
  ret %28* %21
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: nounwind
declare dso_local i32 @inet_pton(i32, i8*, i8*) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1464(%29* %0, i64* %1, i8* %2, i32 %3, i32 %4) #2 {
  %6 = alloca i32, align 4
  %7 = alloca %29*, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %29* %0, %29** %7, align 8
  store i64* %1, i64** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  %12 = load i32, i32* %10, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %5
  %15 = load i8*, i8** %9, align 8
  store i8 0, i8* %15, align 1
  br label %16

16:                                               ; preds = %14, %5
  %17 = load %29*, %29** %7, align 8
  %18 = call zeroext i8 @1468(%29* %17)
  %19 = zext i8 %18 to i32
  %20 = icmp eq i32 %19, 4
  %21 = xor i1 %20, true
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = call i64 @llvm.expect.i64(i64 %24, i64 1)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %33

27:                                               ; preds = %16
  %28 = load %29*, %29** %7, align 8
  %29 = getelementptr inbounds %29, %29* %28, i32 0, i32 0
  %30 = bitcast %30* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = load i64*, i64** %8, align 8
  store i64 %31, i64* %32, align 8
  br label %56

33:                                               ; preds = %16
  %34 = load i32, i32* %10, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %44

36:                                               ; preds = %33
  %37 = load %29*, %29** %7, align 8
  %38 = call zeroext i8 @1468(%29* %37)
  %39 = zext i8 %38 to i32
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = load i8*, i8** %9, align 8
  store i8 1, i8* %42, align 1
  %43 = load i64*, i64** %8, align 8
  store i64 0, i64* %43, align 8
  br label %55

44:                                               ; preds = %36, %33
  %45 = load i32, i32* %11, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %44
  %48 = load %29*, %29** %7, align 8
  %49 = load i64*, i64** %8, align 8
  %50 = call i32 @zend_parse_arg_long_cap_slow(%29* %48, i64* %49)
  store i32 %50, i32* %6, align 4
  br label %57

51:                                               ; preds = %44
  %52 = load %29*, %29** %7, align 8
  %53 = load i64*, i64** %8, align 8
  %54 = call i32 @zend_parse_arg_long_slow(%29* %52, i64* %53)
  store i32 %54, i32* %6, align 4
  br label %57

55:                                               ; preds = %41
  br label %56

56:                                               ; preds = %55, %27
  store i32 1, i32* %6, align 4
  br label %57

57:                                               ; preds = %56, %51, %47
  %58 = load i32, i32* %6, align 4
  ret i32 %58
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1465(%29* %0, i8* %1, i8* %2, i32 %3) #2 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %29* %0, %29** %6, align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = load i8*, i8** %8, align 8
  store i8 0, i8* %13, align 1
  br label %14

14:                                               ; preds = %12, %4
  %15 = load %29*, %29** %6, align 8
  %16 = call zeroext i8 @1468(%29* %15)
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 3
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = call i64 @llvm.expect.i64(i64 %22, i64 1)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %14
  %26 = load i8*, i8** %7, align 8
  store i8 1, i8* %26, align 1
  br label %57

27:                                               ; preds = %14
  %28 = load %29*, %29** %6, align 8
  %29 = call zeroext i8 @1468(%29* %28)
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 2
  %32 = xor i1 %31, true
  %33 = xor i1 %32, true
  %34 = zext i1 %33 to i32
  %35 = sext i32 %34 to i64
  %36 = call i64 @llvm.expect.i64(i64 %35, i64 1)
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %27
  %39 = load i8*, i8** %7, align 8
  store i8 0, i8* %39, align 1
  br label %56

40:                                               ; preds = %27
  %41 = load i32, i32* %9, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %40
  %44 = load %29*, %29** %6, align 8
  %45 = call zeroext i8 @1468(%29* %44)
  %46 = zext i8 %45 to i32
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %51

48:                                               ; preds = %43
  %49 = load i8*, i8** %8, align 8
  store i8 1, i8* %49, align 1
  %50 = load i8*, i8** %7, align 8
  store i8 0, i8* %50, align 1
  br label %55

51:                                               ; preds = %43, %40
  %52 = load %29*, %29** %6, align 8
  %53 = load i8*, i8** %7, align 8
  %54 = call i32 @zend_parse_arg_bool_slow(%29* %52, i8* %53)
  store i32 %54, i32* %5, align 4
  br label %58

55:                                               ; preds = %48
  br label %56

56:                                               ; preds = %55, %38
  br label %57

57:                                               ; preds = %56, %25
  store i32 1, i32* %5, align 4
  br label %58

58:                                               ; preds = %57, %51
  %59 = load i32, i32* %5, align 4
  ret i32 %59
}

declare dso_local i32 @_array_init(%29*, i32) #1

declare dso_local i8* @sapi_getenv(i8*, i64) #1

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #5

declare dso_local noalias i8* @_estrndup(i8*, i64) #1

declare dso_local i32 @zend_hash_str_del(%7*, i8*, i64) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare dso_local i32 @unsetenv(i8*) #5

; Function Attrs: nounwind
declare dso_local i32 @putenv(i8*) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @1466(%7* %0, i8* %1, i64 %2, i8* %3, i64 %4) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca %7*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %29, align 8
  %13 = alloca %29*, align 8
  %14 = alloca i32, align 4
  store %7* %0, %7** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64 %2, i64* %9, align 8
  store i8* %3, i8** %10, align 8
  store i64 %4, i64* %11, align 8
  %15 = bitcast %29* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %15) #13
  %16 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  br label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %29, %29* %12, i32 0, i32 0
  %19 = bitcast %30* %18 to i8**
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds %29, %29* %12, i32 0, i32 1
  %21 = bitcast %31* %20 to i32*
  store i32 17, i32* %21, align 8
  br label %22

22:                                               ; preds = %17
  br label %23

23:                                               ; preds = %22
  %24 = load %7*, %7** %7, align 8
  %25 = load i8*, i8** %8, align 8
  %26 = load i64, i64* %9, align 8
  %27 = call %29* @_zend_hash_str_add(%7* %24, i8* %25, i64 %26, %29* %12)
  store %29* %27, %29** %13, align 8
  %28 = icmp ne %29* %27, null
  br i1 %28, label %29, label %57

29:                                               ; preds = %23
  %30 = load %7*, %7** %7, align 8
  %31 = getelementptr inbounds %7, %7* %30, i32 0, i32 1
  %32 = bitcast %10* %31 to i32*
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %33, 1
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %29
  %37 = load i64, i64* %11, align 8
  %38 = call noalias i8* @__zend_malloc(i64 %37) #17
  br label %42

39:                                               ; preds = %29
  %40 = load i64, i64* %11, align 8
  %41 = call noalias i8* @_emalloc(i64 %40) #17
  br label %42

42:                                               ; preds = %39, %36
  %43 = phi i8* [ %38, %36 ], [ %41, %39 ]
  %44 = load %29*, %29** %13, align 8
  %45 = getelementptr inbounds %29, %29* %44, i32 0, i32 0
  %46 = bitcast %30* %45 to i8**
  store i8* %43, i8** %46, align 8
  %47 = load %29*, %29** %13, align 8
  %48 = getelementptr inbounds %29, %29* %47, i32 0, i32 0
  %49 = bitcast %30* %48 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = load i8*, i8** %10, align 8
  %52 = load i64, i64* %11, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 %52, i1 false)
  %53 = load %29*, %29** %13, align 8
  %54 = getelementptr inbounds %29, %29* %53, i32 0, i32 0
  %55 = bitcast %30* %54 to i8**
  %56 = load i8*, i8** %55, align 8
  store i8* %56, i8** %6, align 8
  store i32 1, i32* %14, align 4
  br label %58

57:                                               ; preds = %23
  store i8* null, i8** %6, align 8
  store i32 1, i32* %14, align 4
  br label %58

58:                                               ; preds = %57, %42
  %59 = bitcast %29** %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #13
  %60 = bitcast %29* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %60) #13
  %61 = load i8*, i8** %6, align 8
  ret i8* %61
}

; Function Attrs: nounwind
declare dso_local void @tzset() #5

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1467(%29* %0, %29** %1, i32 %2, i32 %3) #2 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca %29**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %29* %0, %29** %6, align 8
  store %29** %1, %29*** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %10 = load %29*, %29** %6, align 8
  %11 = call zeroext i8 @1468(%29* %10)
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 7
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 1)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %4
  %21 = load i32, i32* %9, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %37

23:                                               ; preds = %20
  %24 = load %29*, %29** %6, align 8
  %25 = call zeroext i8 @1468(%29* %24)
  %26 = zext i8 %25 to i32
  %27 = icmp eq i32 %26, 8
  %28 = xor i1 %27, true
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  %31 = sext i32 %30 to i64
  %32 = call i64 @llvm.expect.i64(i64 %31, i64 1)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %23, %4
  %35 = load %29*, %29** %6, align 8
  %36 = load %29**, %29*** %7, align 8
  store %29* %35, %29** %36, align 8
  br label %55

37:                                               ; preds = %23, %20
  %38 = load i32, i32* %8, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %53

40:                                               ; preds = %37
  %41 = load %29*, %29** %6, align 8
  %42 = call zeroext i8 @1468(%29* %41)
  %43 = zext i8 %42 to i32
  %44 = icmp eq i32 %43, 1
  %45 = xor i1 %44, true
  %46 = xor i1 %45, true
  %47 = zext i1 %46 to i32
  %48 = sext i32 %47 to i64
  %49 = call i64 @llvm.expect.i64(i64 %48, i64 1)
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %40
  %52 = load %29**, %29*** %7, align 8
  store %29* null, %29** %52, align 8
  br label %54

53:                                               ; preds = %40, %37
  store i32 0, i32* %5, align 4
  br label %56

54:                                               ; preds = %51
  br label %55

55:                                               ; preds = %54, %34
  store i32 1, i32* %5, align 4
  br label %56

56:                                               ; preds = %55, %53
  %57 = load i32, i32* %5, align 4
  ret i32 %57
}

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i8 @1468(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  %3 = load %29*, %29** %2, align 8
  %4 = getelementptr inbounds %29, %29* %3, i32 0, i32 1
  %5 = bitcast %31* %4 to %83*
  %6 = getelementptr inbounds %83, %83* %5, i32 0, i32 0
  %7 = load i8, i8* %6, align 8
  ret i8 %7
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1469(%29* %0, %29** %1, i32 %2) #2 {
  %4 = alloca %29*, align 8
  %5 = alloca %29**, align 8
  %6 = alloca i32, align 4
  store %29* %0, %29** %4, align 8
  store %29** %1, %29*** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %3
  %10 = load %29*, %29** %4, align 8
  %11 = call zeroext i8 @1468(%29* %10)
  %12 = zext i8 %11 to i32
  %13 = icmp eq i32 %12, 1
  %14 = xor i1 %13, true
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 0)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %9
  br label %23

21:                                               ; preds = %9, %3
  %22 = load %29*, %29** %4, align 8
  br label %23

23:                                               ; preds = %21, %20
  %24 = phi %29* [ null, %20 ], [ %22, %21 ]
  %25 = load %29**, %29*** %5, align 8
  store %29* %24, %29** %25, align 8
  ret void
}

declare dso_local zeroext i8 @zend_is_auto_global_str(i8*, i64) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal %29* @1470(%7* %0, i8* %1, i64 %2) #2 {
  %4 = alloca %7*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %29*, align 8
  store %7* %0, %7** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load %7*, %7** %4, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = load i64, i64* %6, align 8
  %12 = call %29* @zend_hash_str_find(%7* %9, i8* %10, i64 %11)
  store %29* %12, %29** %7, align 8
  %13 = load %29*, %29** %7, align 8
  %14 = icmp ne %29* %13, null
  br i1 %14, label %15, label %36

15:                                               ; preds = %3
  %16 = load %29*, %29** %7, align 8
  %17 = call zeroext i8 @1468(%29* %16)
  %18 = zext i8 %17 to i32
  %19 = icmp eq i32 %18, 15
  br i1 %19, label %20, label %36

20:                                               ; preds = %15
  %21 = load %29*, %29** %7, align 8
  %22 = getelementptr inbounds %29, %29* %21, i32 0, i32 0
  %23 = bitcast %30* %22 to %29**
  %24 = load %29*, %29** %23, align 8
  %25 = call zeroext i8 @1468(%29* %24)
  %26 = zext i8 %25 to i32
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %20
  %29 = load %29*, %29** %7, align 8
  %30 = getelementptr inbounds %29, %29* %29, i32 0, i32 0
  %31 = bitcast %30* %30 to %29**
  %32 = load %29*, %29** %31, align 8
  br label %34

33:                                               ; preds = %20
  br label %34

34:                                               ; preds = %33, %28
  %35 = phi %29* [ %32, %28 ], [ null, %33 ]
  br label %38

36:                                               ; preds = %15, %3
  %37 = load %29*, %29** %7, align 8
  br label %38

38:                                               ; preds = %36, %34
  %39 = phi %29* [ %35, %34 ], [ %37, %36 ]
  %40 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #13
  ret %29* %39
}

declare dso_local noalias i8* @_safe_emalloc(i64, i64, i64) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal %28* @1471(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  %3 = load %29*, %29** %2, align 8
  %4 = call zeroext i8 @1468(%29* %3)
  %5 = zext i8 %4 to i32
  %6 = icmp eq i32 %5, 6
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = load %29*, %29** %2, align 8
  %9 = getelementptr inbounds %29, %29* %8, i32 0, i32 0
  %10 = bitcast %30* %9 to %28**
  %11 = load %28*, %28** %10, align 8
  %12 = call %28* @1501(%28* %11)
  br label %16

13:                                               ; preds = %1
  %14 = load %29*, %29** %2, align 8
  %15 = call %28* @_zval_get_string_func(%29* %14)
  br label %16

16:                                               ; preds = %13, %7
  %17 = phi %28* [ %12, %7 ], [ %15, %13 ]
  ret %28* %17
}

declare dso_local noalias i8* @_estrdup(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @1472(i8* %0, %90** %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %90**, align 8
  %5 = alloca %90*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store %90** %1, %90*** %4, align 8
  %9 = bitcast %90** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #13
  store %90* null, %90** %5, align 8
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #13
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #13
  store i32 0, i32* %7, align 4
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #13
  %13 = load i8*, i8** %3, align 8
  %14 = call i64 @strlen(i8* %13) #15
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %8, align 4
  store i32 0, i32* %6, align 4
  br label %16

16:                                               ; preds = %72, %2
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %8, align 4
  %19 = icmp ult i32 %17, %18
  br i1 %19, label %20, label %75

20:                                               ; preds = %16
  %21 = load i8*, i8** %3, align 8
  %22 = load i32, i32* %6, align 4
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %21, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp sge i32 %26, 48
  br i1 %27, label %28, label %36

28:                                               ; preds = %20
  %29 = load i8*, i8** %3, align 8
  %30 = load i32, i32* %6, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp sle i32 %34, 57
  br i1 %35, label %68, label %36

36:                                               ; preds = %28, %20
  %37 = load i8*, i8** %3, align 8
  %38 = load i32, i32* %6, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp sge i32 %42, 65
  br i1 %43, label %44, label %52

44:                                               ; preds = %36
  %45 = load i8*, i8** %3, align 8
  %46 = load i32, i32* %6, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp sle i32 %50, 90
  br i1 %51, label %68, label %52

52:                                               ; preds = %44, %36
  %53 = load i8*, i8** %3, align 8
  %54 = load i32, i32* %6, align 4
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp sge i32 %58, 97
  br i1 %59, label %60, label %71

60:                                               ; preds = %52
  %61 = load i8*, i8** %3, align 8
  %62 = load i32, i32* %6, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp sle i32 %66, 122
  br i1 %67, label %68, label %71

68:                                               ; preds = %60, %44, %28
  %69 = load i32, i32* %7, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %7, align 4
  br label %71

71:                                               ; preds = %68, %60, %52
  br label %72

72:                                               ; preds = %71
  %73 = load i32, i32* %6, align 4
  %74 = add i32 %73, 1
  store i32 %74, i32* %6, align 4
  br label %16

75:                                               ; preds = %16
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  %78 = call noalias i8* @_safe_emalloc(i64 16, i64 %77, i64 0)
  %79 = bitcast i8* %78 to %90*
  store %90* %79, %90** %5, align 8
  %80 = load %90*, %90** %5, align 8
  %81 = bitcast %90* %80 to i8*
  %82 = load i32, i32* %7, align 4
  %83 = zext i32 %82 to i64
  %84 = mul i64 16, %83
  call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 %84, i1 false)
  %85 = load %90*, %90** %5, align 8
  %86 = load %90**, %90*** %4, align 8
  store %90* %85, %90** %86, align 8
  br label %87

87:                                               ; preds = %156, %75
  %88 = load i8*, i8** %3, align 8
  %89 = load i8, i8* %88, align 1
  %90 = sext i8 %89 to i32
  %91 = icmp sge i32 %90, 48
  br i1 %91, label %92, label %97

92:                                               ; preds = %87
  %93 = load i8*, i8** %3, align 8
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  %96 = icmp sle i32 %95, 57
  br i1 %96, label %119, label %97

97:                                               ; preds = %92, %87
  %98 = load i8*, i8** %3, align 8
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = icmp sge i32 %100, 65
  br i1 %101, label %102, label %107

102:                                              ; preds = %97
  %103 = load i8*, i8** %3, align 8
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = icmp sle i32 %105, 90
  br i1 %106, label %119, label %107

107:                                              ; preds = %102, %97
  %108 = load i8*, i8** %3, align 8
  %109 = load i8, i8* %108, align 1
  %110 = sext i8 %109 to i32
  %111 = icmp sge i32 %110, 97
  br i1 %111, label %112, label %117

112:                                              ; preds = %107
  %113 = load i8*, i8** %3, align 8
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = icmp sle i32 %115, 122
  br label %117

117:                                              ; preds = %112, %107
  %118 = phi i1 [ false, %107 ], [ %116, %112 ]
  br label %119

119:                                              ; preds = %117, %102, %92
  %120 = phi i1 [ true, %102 ], [ true, %92 ], [ %118, %117 ]
  br i1 %120, label %121, label %159

121:                                              ; preds = %119
  %122 = load i8*, i8** %3, align 8
  %123 = load i8, i8* %122, align 1
  %124 = load %90*, %90** %5, align 8
  %125 = getelementptr inbounds %90, %90* %124, i32 0, i32 0
  store i8 %123, i8* %125, align 8
  %126 = load i8*, i8** %3, align 8
  %127 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %127, i8** %3, align 8
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = icmp eq i32 %129, 58
  %131 = zext i1 %130 to i64
  %132 = select i1 %130, i32 1, i32 0
  %133 = load %90*, %90** %5, align 8
  %134 = getelementptr inbounds %90, %90* %133, i32 0, i32 1
  store i32 %132, i32* %134, align 4
  %135 = load %90*, %90** %5, align 8
  %136 = getelementptr inbounds %90, %90* %135, i32 0, i32 2
  store i8* null, i8** %136, align 8
  %137 = load %90*, %90** %5, align 8
  %138 = getelementptr inbounds %90, %90* %137, i32 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 1
  br i1 %140, label %141, label %156

141:                                              ; preds = %121
  %142 = load i8*, i8** %3, align 8
  %143 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %143, i8** %3, align 8
  %144 = load i8*, i8** %3, align 8
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %145 to i32
  %147 = icmp eq i32 %146, 58
  br i1 %147, label %148, label %155

148:                                              ; preds = %141
  %149 = load %90*, %90** %5, align 8
  %150 = getelementptr inbounds %90, %90* %149, i32 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %150, align 4
  %153 = load i8*, i8** %3, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %3, align 8
  br label %155

155:                                              ; preds = %148, %141
  br label %156

156:                                              ; preds = %155, %121
  %157 = load %90*, %90** %5, align 8
  %158 = getelementptr inbounds %90, %90* %157, i32 1
  store %90* %158, %90** %5, align 8
  br label %87

159:                                              ; preds = %119
  %160 = load i32, i32* %7, align 4
  %161 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %161) #13
  %162 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %162) #13
  %163 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %163) #13
  %164 = bitcast %90** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %164) #13
  ret i32 %160
}

; Function Attrs: allocsize(1)
declare dso_local i8* @_erealloc(i8*, i64) #8

declare dso_local i32 @php_getopt(i32, i8**, %90*, i8**, i32*, i32, i32) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i8 @1473(i8* %0, i64 %1, i64* %2, double* %3, i32 %4) #2 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64*, align 8
  %9 = alloca double*, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64* %2, i64** %8, align 8
  store double* %3, double** %9, align 8
  store i32 %4, i32* %10, align 4
  %11 = load i8*, i8** %6, align 8
  %12 = load i64, i64* %7, align 8
  %13 = load i64*, i64** %8, align 8
  %14 = load double*, double** %9, align 8
  %15 = load i32, i32* %10, align 4
  %16 = call zeroext i8 @1502(i8* %11, i64 %12, i64* %13, double* %14, i32 %15, i32* null)
  ret i8 %16
}

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally dso_local i32 @atoi(i8* nonnull %0) #9 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i64 @strtol(i8* %3, i8** null, i32 10) #13
  %5 = trunc i64 %4 to i32
  ret i32 %5
}

declare dso_local %29* @zend_hash_index_find(%7*, i64) #1

declare dso_local void @convert_to_array(%29*) #1

declare dso_local %29* @_zend_hash_next_index_insert(%7*, %29*) #1

declare dso_local %29* @_zend_hash_index_update(%7*, i64, %29*) #1

declare dso_local %29* @zend_hash_str_find(%7*, i8*, i64) #1

declare dso_local %29* @_zend_hash_str_add(%7*, i8*, i64, %29*) #1

; Function Attrs: nounwind uwtable
define internal void @1474(%90* %0) #0 {
  %2 = alloca %90*, align 8
  %3 = alloca %90*, align 8
  store %90* %0, %90** %2, align 8
  %4 = bitcast %90** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #13
  %5 = load %90*, %90** %2, align 8
  %6 = icmp ne %90* %5, null
  br i1 %6, label %7, label %34

7:                                                ; preds = %1
  %8 = load %90*, %90** %2, align 8
  store %90* %8, %90** %3, align 8
  br label %9

9:                                                ; preds = %30, %7
  %10 = load %90*, %90** %3, align 8
  %11 = icmp ne %90* %10, null
  br i1 %11, label %12, label %18

12:                                               ; preds = %9
  %13 = load %90*, %90** %3, align 8
  %14 = getelementptr inbounds %90, %90* %13, i32 0, i32 0
  %15 = load i8, i8* %14, align 8
  %16 = sext i8 %15 to i32
  %17 = icmp ne i32 %16, 45
  br label %18

18:                                               ; preds = %12, %9
  %19 = phi i1 [ false, %9 ], [ %17, %12 ]
  br i1 %19, label %20, label %33

20:                                               ; preds = %18
  %21 = load %90*, %90** %3, align 8
  %22 = getelementptr inbounds %90, %90* %21, i32 0, i32 2
  %23 = load i8*, i8** %22, align 8
  %24 = icmp ne i8* %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %20
  %26 = load %90*, %90** %3, align 8
  %27 = getelementptr inbounds %90, %90* %26, i32 0, i32 2
  %28 = load i8*, i8** %27, align 8
  call void @_efree(i8* %28)
  br label %29

29:                                               ; preds = %25, %20
  br label %30

30:                                               ; preds = %29
  %31 = load %90*, %90** %3, align 8
  %32 = getelementptr inbounds %90, %90* %31, i32 1
  store %90* %32, %90** %3, align 8
  br label %9

33:                                               ; preds = %18
  br label %34

34:                                               ; preds = %33, %1
  %35 = bitcast %90** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @1475(i8** %0, i32 %1) #0 {
  %3 = alloca i8**, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8** %0, i8*** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #13
  %7 = load i8**, i8*** %3, align 8
  %8 = icmp ne i8** %7, null
  br i1 %8, label %9, label %34

9:                                                ; preds = %2
  store i32 0, i32* %5, align 4
  br label %10

10:                                               ; preds = %28, %9
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %31

14:                                               ; preds = %10
  %15 = load i8**, i8*** %3, align 8
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8*, i8** %15, i64 %17
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %27

21:                                               ; preds = %14
  %22 = load i8**, i8*** %3, align 8
  %23 = load i32, i32* %5, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8*, i8** %22, i64 %24
  %26 = load i8*, i8** %25, align 8
  call void @_efree(i8* %26)
  br label %27

27:                                               ; preds = %21, %14
  br label %28

28:                                               ; preds = %27
  %29 = load i32, i32* %5, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %5, align 4
  br label %10

31:                                               ; preds = %10
  %32 = load i8**, i8*** %3, align 8
  %33 = bitcast i8** %32 to i8*
  call void @_efree(i8* %33)
  br label %34

34:                                               ; preds = %31, %2
  %35 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #13
  ret void
}

declare dso_local i32 @zend_parse_parameters(i32, i8*, ...) #1

declare dso_local i32 @sapi_flush() #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @nanosleep(%44*, %44*) #1

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #10

declare dso_local i32 @add_assoc_long_ex(%29*, i8*, i64, i64) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1476(%29* %0, double* %1, i8* %2, i32 %3) #2 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca double*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %29* %0, %29** %6, align 8
  store double* %1, double** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %10 = load i32, i32* %9, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = load i8*, i8** %8, align 8
  store i8 0, i8* %13, align 1
  br label %14

14:                                               ; preds = %12, %4
  %15 = load %29*, %29** %6, align 8
  %16 = call zeroext i8 @1468(%29* %15)
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 5
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = call i64 @llvm.expect.i64(i64 %22, i64 1)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %14
  %26 = load %29*, %29** %6, align 8
  %27 = getelementptr inbounds %29, %29* %26, i32 0, i32 0
  %28 = bitcast %30* %27 to double*
  %29 = load double, double* %28, align 8
  %30 = load double*, double** %7, align 8
  store double %29, double* %30, align 8
  br label %47

31:                                               ; preds = %14
  %32 = load i32, i32* %9, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %42

34:                                               ; preds = %31
  %35 = load %29*, %29** %6, align 8
  %36 = call zeroext i8 @1468(%29* %35)
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = load i8*, i8** %8, align 8
  store i8 1, i8* %40, align 1
  %41 = load double*, double** %7, align 8
  store double 0.000000e+00, double* %41, align 8
  br label %46

42:                                               ; preds = %34, %31
  %43 = load %29*, %29** %6, align 8
  %44 = load double*, double** %7, align 8
  %45 = call i32 @zend_parse_arg_double_slow(%29* %43, double* %44)
  store i32 %45, i32* %5, align 4
  br label %48

46:                                               ; preds = %39
  br label %47

47:                                               ; preds = %46, %25
  store i32 1, i32* %5, align 4
  br label %48

48:                                               ; preds = %47, %42
  %49 = load i32, i32* %5, align 4
  ret i32 %49
}

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%84*, %85*) #5

declare dso_local i8* @php_get_current_user() #1

declare dso_local %29* @cfg_get_entry(i8*, i64) #1

declare dso_local void @zend_hash_apply_with_arguments(%7*, i32 (%29*, i32, %106*, %107*)*, i32, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @1477(%29* %0, i32 %1, %106* %2, %107* %3) #0 {
  %5 = alloca %29*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %106*, align 8
  %8 = alloca %107*, align 8
  %9 = alloca %29*, align 8
  %10 = alloca %29, align 8
  store %29* %0, %29** %5, align 8
  store i32 %1, i32* %6, align 4
  store %106* %2, %106** %7, align 8
  store %107* %3, %107** %8, align 8
  %11 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #13
  %12 = load %106*, %106** %7, align 8
  %13 = getelementptr inbounds %106, %106* %12, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp ule i32 %14, 40
  br i1 %15, label %16, label %22

16:                                               ; preds = %4
  %17 = getelementptr inbounds %106, %106* %12, i32 0, i32 3
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr i8, i8* %18, i32 %14
  %20 = bitcast i8* %19 to %29**
  %21 = add i32 %14, 8
  store i32 %21, i32* %13, align 8
  br label %27

22:                                               ; preds = %4
  %23 = getelementptr inbounds %106, %106* %12, i32 0, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %24 to %29**
  %26 = getelementptr i8, i8* %24, i32 8
  store i8* %26, i8** %23, align 8
  br label %27

27:                                               ; preds = %22, %16
  %28 = phi %29** [ %20, %16 ], [ %25, %22 ]
  %29 = load %29*, %29** %28, align 8
  store %29* %29, %29** %9, align 8
  %30 = bitcast %29* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %30) #13
  %31 = load %29*, %29** %5, align 8
  %32 = call zeroext i8 @1468(%29* %31)
  %33 = zext i8 %32 to i32
  %34 = icmp eq i32 %33, 6
  br i1 %34, label %35, label %70

35:                                               ; preds = %27
  %36 = load %107*, %107** %8, align 8
  %37 = getelementptr inbounds %107, %107* %36, i32 0, i32 1
  %38 = load %28*, %28** %37, align 8
  %39 = icmp ne %28* %38, null
  br i1 %39, label %40, label %58

40:                                               ; preds = %35
  %41 = load %29*, %29** %9, align 8
  %42 = load %107*, %107** %8, align 8
  %43 = getelementptr inbounds %107, %107* %42, i32 0, i32 1
  %44 = load %28*, %28** %43, align 8
  %45 = getelementptr inbounds %28, %28* %44, i32 0, i32 3
  %46 = getelementptr inbounds [1 x i8], [1 x i8]* %45, i32 0, i32 0
  %47 = load %107*, %107** %8, align 8
  %48 = getelementptr inbounds %107, %107* %47, i32 0, i32 1
  %49 = load %28*, %28** %48, align 8
  %50 = getelementptr inbounds %28, %28* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = load %29*, %29** %5, align 8
  %53 = getelementptr inbounds %29, %29* %52, i32 0, i32 0
  %54 = bitcast %30* %53 to %28**
  %55 = load %28*, %28** %54, align 8
  %56 = call %28* @1501(%28* %55)
  %57 = call i32 @add_assoc_str_ex(%29* %41, i8* %46, i64 %51, %28* %56)
  br label %69

58:                                               ; preds = %35
  %59 = load %29*, %29** %9, align 8
  %60 = load %107*, %107** %8, align 8
  %61 = getelementptr inbounds %107, %107* %60, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = load %29*, %29** %5, align 8
  %64 = getelementptr inbounds %29, %29* %63, i32 0, i32 0
  %65 = bitcast %30* %64 to %28**
  %66 = load %28*, %28** %65, align 8
  %67 = call %28* @1501(%28* %66)
  %68 = call i32 @add_index_str(%29* %59, i64 %62, %28* %67)
  br label %69

69:                                               ; preds = %58, %40
  br label %95

70:                                               ; preds = %27
  %71 = load %29*, %29** %5, align 8
  %72 = call zeroext i8 @1468(%29* %71)
  %73 = zext i8 %72 to i32
  %74 = icmp eq i32 %73, 7
  br i1 %74, label %75, label %94

75:                                               ; preds = %70
  %76 = call i32 @_array_init(%29* %10, i32 0)
  %77 = load %29*, %29** %5, align 8
  %78 = getelementptr inbounds %29, %29* %77, i32 0, i32 0
  %79 = bitcast %30* %78 to %7**
  %80 = load %7*, %7** %79, align 8
  %81 = bitcast %29* %10 to { i64, i64 }*
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  call void (%7*, i32 (%29*, i32, %106*, %107*)*, i32, ...) @zend_hash_apply_with_arguments(%7* %80, i32 (%29*, i32, %106*, %107*)* @1477, i32 1, i64 %83, i64 %85)
  %86 = load %29*, %29** %9, align 8
  %87 = getelementptr inbounds %29, %29* %86, i32 0, i32 0
  %88 = bitcast %30* %87 to %7**
  %89 = load %7*, %7** %88, align 8
  %90 = load %107*, %107** %8, align 8
  %91 = getelementptr inbounds %107, %107* %90, i32 0, i32 1
  %92 = load %28*, %28** %91, align 8
  %93 = call %29* @_zend_hash_update(%7* %89, %28* %92, %29* %10)
  br label %94

94:                                               ; preds = %75, %70
  br label %95

95:                                               ; preds = %94, %69
  %96 = bitcast %29* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %96) #13
  %97 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %97) #13
  ret i32 0
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1478(%29* %0, i8** %1, i64* %2, i32 %3) #2 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %28*, align 8
  %11 = alloca i32, align 4
  store %29* %0, %29** %6, align 8
  store i8** %1, i8*** %7, align 8
  store i64* %2, i64** %8, align 8
  store i32 %3, i32* %9, align 4
  %12 = bitcast %28** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load %29*, %29** %6, align 8
  %14 = load i32, i32* %9, align 4
  %15 = call i32 @1492(%29* %13, %28** %10, i32 %14)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  store i32 0, i32* %5, align 4
  store i32 1, i32* %11, align 4
  br label %44

18:                                               ; preds = %4
  %19 = load i32, i32* %9, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = load %28*, %28** %10, align 8
  %23 = icmp ne %28* %22, null
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = xor i1 %25, true
  %27 = zext i1 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = call i64 @llvm.expect.i64(i64 %28, i64 0)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %21
  %32 = load i8**, i8*** %7, align 8
  store i8* null, i8** %32, align 8
  %33 = load i64*, i64** %8, align 8
  store i64 0, i64* %33, align 8
  br label %43

34:                                               ; preds = %21, %18
  %35 = load %28*, %28** %10, align 8
  %36 = getelementptr inbounds %28, %28* %35, i32 0, i32 3
  %37 = getelementptr inbounds [1 x i8], [1 x i8]* %36, i32 0, i32 0
  %38 = load i8**, i8*** %7, align 8
  store i8* %37, i8** %38, align 8
  %39 = load %28*, %28** %10, align 8
  %40 = getelementptr inbounds %28, %28* %39, i32 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = load i64*, i64** %8, align 8
  store i64 %41, i64* %42, align 8
  br label %43

43:                                               ; preds = %34, %31
  store i32 1, i32* %5, align 4
  store i32 1, i32* %11, align 4
  br label %44

44:                                               ; preds = %43, %17
  %45 = bitcast %28** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #13
  %46 = load i32, i32* %5, align 4
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define dso_local i32 @_php_error_log_ex(i32 %0, i8* %1, i64 %2, i8* %3, i8* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %53*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i8* %1, i8** %8, align 8
  store i64 %2, i64* %9, align 8
  store i8* %3, i8** %10, align 8
  store i8* %4, i8** %11, align 8
  %15 = bitcast %53** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  store %53* null, %53** %12, align 8
  %16 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #13
  %17 = load i32, i32* %7, align 4
  switch i32 %17, label %53 [
    i32 1, label %18
    i32 2, label %26
    i32 3, label %27
    i32 4, label %45
  ]

18:                                               ; preds = %5
  %19 = load i8*, i8** %10, align 8
  %20 = load i8*, i8** %8, align 8
  %21 = load i8*, i8** %11, align 8
  %22 = call i32 @php_mail(i8* %19, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1119, i32 0, i32 0), i8* %20, i8* %21, i8* null)
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %18
  store i32 -1, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

25:                                               ; preds = %18
  br label %55

26:                                               ; preds = %5
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1120, i32 0, i32 0))
  store i32 -1, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

27:                                               ; preds = %5
  %28 = load i8*, i8** %10, align 8
  %29 = call %53* @_php_stream_open_wrapper_ex(i8* %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1121, i32 0, i32 0), i32 8, %28** null, %63* null)
  store %53* %29, %53** %12, align 8
  %30 = load %53*, %53** %12, align 8
  %31 = icmp ne %53* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %27
  store i32 -1, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

33:                                               ; preds = %27
  %34 = load %53*, %53** %12, align 8
  %35 = load i8*, i8** %8, align 8
  %36 = load i64, i64* %9, align 8
  %37 = call i64 @_php_stream_write(%53* %34, i8* %35, i64 %36)
  store i64 %37, i64* %13, align 8
  %38 = load %53*, %53** %12, align 8
  %39 = call i32 @_php_stream_free(%53* %38, i32 3)
  %40 = load i64, i64* %13, align 8
  %41 = load i64, i64* %9, align 8
  %42 = icmp ne i64 %40, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %33
  store i32 -1, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

44:                                               ; preds = %33
  br label %55

45:                                               ; preds = %5
  %46 = load void (i8*, i32)*, void (i8*, i32)** getelementptr inbounds (%76, %76* @sapi_module, i32 0, i32 17), align 8
  %47 = icmp ne void (i8*, i32)* %46, null
  br i1 %47, label %48, label %51

48:                                               ; preds = %45
  %49 = load void (i8*, i32)*, void (i8*, i32)** getelementptr inbounds (%76, %76* @sapi_module, i32 0, i32 17), align 8
  %50 = load i8*, i8** %8, align 8
  call void %49(i8* %50, i32 -1)
  br label %52

51:                                               ; preds = %45
  store i32 -1, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

52:                                               ; preds = %48
  br label %55

53:                                               ; preds = %5
  %54 = load i8*, i8** %8, align 8
  call void @php_log_err_with_severity(i8* %54, i32 5)
  br label %55

55:                                               ; preds = %53, %52, %44, %25
  store i32 0, i32* %6, align 4
  store i32 1, i32* %14, align 4
  br label %56

56:                                               ; preds = %55, %51, %43, %32, %26, %24
  %57 = bitcast i64* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #13
  %58 = bitcast %53** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %58) #13
  %59 = load i32, i32* %6, align 4
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define dso_local i32 @_php_error_log(i32 %0, i8* %1, i8* %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %9 = load i32, i32* %5, align 4
  %10 = load i8*, i8** %6, align 8
  %11 = load i32, i32* %5, align 4
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = load i8*, i8** %6, align 8
  %15 = call i64 @strlen(i8* %14) #15
  br label %17

16:                                               ; preds = %4
  br label %17

17:                                               ; preds = %16, %13
  %18 = phi i64 [ %15, %13 ], [ 0, %16 ]
  %19 = load i8*, i8** %7, align 8
  %20 = load i8*, i8** %8, align 8
  %21 = call i32 @_php_error_log_ex(i32 %9, i8* %10, i64 %18, i8* %19, i8* %20)
  ret i32 %21
}

declare dso_local i32 @php_mail(i8*, i8*, i8*, i8*, i8*) #1

declare dso_local %53* @_php_stream_open_wrapper_ex(i8*, i8*, i32, %28**, %63*) #1

declare dso_local i64 @_php_stream_write(%53*, i8*, i64) #1

declare dso_local i32 @_php_stream_free(%53*, i32) #1

declare dso_local void @php_log_err_with_severity(i8*, i32) #1

declare dso_local i32 @add_assoc_string_ex(%29*, i8*, i64, i8*) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #5

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1479(%29* %0, %38* %1, %39* %2, i32 %3, i8** %4) #2 {
  %6 = alloca i32, align 4
  %7 = alloca %29*, align 8
  %8 = alloca %38*, align 8
  %9 = alloca %39*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8**, align 8
  store %29* %0, %29** %7, align 8
  store %38* %1, %38** %8, align 8
  store %39* %2, %39** %9, align 8
  store i32 %3, i32* %10, align 4
  store i8** %4, i8*** %11, align 8
  %12 = load i32, i32* %10, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %31

14:                                               ; preds = %5
  %15 = load %29*, %29** %7, align 8
  %16 = call zeroext i8 @1468(%29* %15)
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 1
  %19 = xor i1 %18, true
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = call i64 @llvm.expect.i64(i64 %22, i64 0)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %14
  %26 = load %38*, %38** %8, align 8
  %27 = getelementptr inbounds %38, %38* %26, i32 0, i32 0
  store i64 0, i64* %27, align 8
  %28 = load %39*, %39** %9, align 8
  %29 = getelementptr inbounds %39, %39* %28, i32 0, i32 0
  store i8 0, i8* %29, align 8
  %30 = load i8**, i8*** %11, align 8
  store i8* null, i8** %30, align 8
  br label %46

31:                                               ; preds = %14, %5
  %32 = load %29*, %29** %7, align 8
  %33 = load %38*, %38** %8, align 8
  %34 = load %39*, %39** %9, align 8
  %35 = load i8**, i8*** %11, align 8
  %36 = call i32 @zend_fcall_info_init(%29* %32, i32 0, %38* %33, %39* %34, %28** null, i8** %35)
  %37 = icmp ne i32 %36, 0
  %38 = xor i1 %37, true
  %39 = xor i1 %38, true
  %40 = zext i1 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = call i64 @llvm.expect.i64(i64 %41, i64 0)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %31
  store i32 0, i32* %6, align 4
  br label %47

45:                                               ; preds = %31
  br label %46

46:                                               ; preds = %45, %25
  store i32 1, i32* %6, align 4
  br label %47

47:                                               ; preds = %46, %44
  %48 = load i32, i32* %6, align 4
  ret i32 %48
}

declare dso_local i32 @zend_call_function(%38*, %39*) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1480(%29* %0) #2 {
  %2 = alloca %29*, align 8
  %3 = alloca %29*, align 8
  %4 = alloca %91*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %29*, align 8
  %7 = alloca %82*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %29*, align 8
  %10 = alloca %29*, align 8
  %11 = alloca %82*, align 8
  %12 = alloca i32, align 4
  store %29* %0, %29** %2, align 8
  %13 = load %29*, %29** %2, align 8
  %14 = call i32 @1481(%29* %13)
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %80

16:                                               ; preds = %1
  br label %17

17:                                               ; preds = %16
  %18 = bitcast %29** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #13
  %19 = load %29*, %29** %2, align 8
  store %29* %19, %29** %3, align 8
  %20 = bitcast %91** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #13
  br label %21

21:                                               ; preds = %17
  %22 = load %29*, %29** %3, align 8
  %23 = call zeroext i8 @1468(%29* %22)
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %24, 10
  %26 = xor i1 %25, true
  %27 = zext i1 %26 to i32
  %28 = sext i32 %27 to i64
  %29 = call i64 @llvm.expect.i64(i64 %28, i64 0)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %21
  unreachable

32:                                               ; preds = %21
  br label %33

33:                                               ; preds = %32
  br label %34

34:                                               ; preds = %33
  %35 = load %29*, %29** %3, align 8
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 0
  %37 = bitcast %30* %36 to %91**
  %38 = load %91*, %91** %37, align 8
  store %91* %38, %91** %4, align 8
  br label %39

39:                                               ; preds = %34
  %40 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %40) #13
  %41 = load %29*, %29** %3, align 8
  store %29* %41, %29** %5, align 8
  %42 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %42) #13
  %43 = load %91*, %91** %4, align 8
  %44 = getelementptr inbounds %91, %91* %43, i32 0, i32 1
  store %29* %44, %29** %6, align 8
  %45 = bitcast %82** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %45) #13
  %46 = load %29*, %29** %6, align 8
  %47 = getelementptr inbounds %29, %29* %46, i32 0, i32 0
  %48 = bitcast %30* %47 to %82**
  %49 = load %82*, %82** %48, align 8
  store %82* %49, %82** %7, align 8
  %50 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %50) #13
  %51 = load %29*, %29** %6, align 8
  %52 = getelementptr inbounds %29, %29* %51, i32 0, i32 1
  %53 = bitcast %31* %52 to i32*
  %54 = load i32, i32* %53, align 8
  store i32 %54, i32* %8, align 4
  br label %55

55:                                               ; preds = %39
  %56 = load %82*, %82** %7, align 8
  %57 = load %29*, %29** %5, align 8
  %58 = getelementptr inbounds %29, %29* %57, i32 0, i32 0
  %59 = bitcast %30* %58 to %82**
  store %82* %56, %82** %59, align 8
  %60 = load i32, i32* %8, align 4
  %61 = load %29*, %29** %5, align 8
  %62 = getelementptr inbounds %29, %29* %61, i32 0, i32 1
  %63 = bitcast %31* %62 to i32*
  store i32 %60, i32* %63, align 8
  br label %64

64:                                               ; preds = %55
  br label %65

65:                                               ; preds = %64
  %66 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %66) #13
  %67 = bitcast %82** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #13
  %68 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #13
  %69 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %69) #13
  br label %70

70:                                               ; preds = %65
  br label %71

71:                                               ; preds = %70
  br label %72

72:                                               ; preds = %71
  %73 = load %91*, %91** %4, align 8
  %74 = bitcast %91* %73 to i8*
  call void @_efree_24(i8* %74)
  br label %75

75:                                               ; preds = %72
  br label %76

76:                                               ; preds = %75
  %77 = bitcast %91** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #13
  %78 = bitcast %29** %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #13
  br label %79

79:                                               ; preds = %76
  br label %128

80:                                               ; preds = %1
  %81 = load %29*, %29** %2, align 8
  %82 = call i32 @1482(%29* %81)
  br label %83

83:                                               ; preds = %80
  %84 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %84) #13
  %85 = load %29*, %29** %2, align 8
  store %29* %85, %29** %9, align 8
  %86 = bitcast %29** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %86) #13
  %87 = load %29*, %29** %2, align 8
  %88 = getelementptr inbounds %29, %29* %87, i32 0, i32 0
  %89 = bitcast %30* %88 to %91**
  %90 = load %91*, %91** %89, align 8
  %91 = getelementptr inbounds %91, %91* %90, i32 0, i32 1
  store %29* %91, %29** %10, align 8
  %92 = bitcast %82** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %92) #13
  %93 = load %29*, %29** %10, align 8
  %94 = getelementptr inbounds %29, %29* %93, i32 0, i32 0
  %95 = bitcast %30* %94 to %82**
  %96 = load %82*, %82** %95, align 8
  store %82* %96, %82** %11, align 8
  %97 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %97) #13
  %98 = load %29*, %29** %10, align 8
  %99 = getelementptr inbounds %29, %29* %98, i32 0, i32 1
  %100 = bitcast %31* %99 to i32*
  %101 = load i32, i32* %100, align 8
  store i32 %101, i32* %12, align 4
  br label %102

102:                                              ; preds = %83
  %103 = load %82*, %82** %11, align 8
  %104 = load %29*, %29** %9, align 8
  %105 = getelementptr inbounds %29, %29* %104, i32 0, i32 0
  %106 = bitcast %30* %105 to %82**
  store %82* %103, %82** %106, align 8
  %107 = load i32, i32* %12, align 4
  %108 = load %29*, %29** %9, align 8
  %109 = getelementptr inbounds %29, %29* %108, i32 0, i32 1
  %110 = bitcast %31* %109 to i32*
  store i32 %107, i32* %110, align 8
  br label %111

111:                                              ; preds = %102
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %12, align 4
  %114 = and i32 %113, 1024
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %116, label %122

116:                                              ; preds = %112
  %117 = load %82*, %82** %11, align 8
  %118 = getelementptr inbounds %82, %82* %117, i32 0, i32 0
  %119 = getelementptr inbounds %8, %8* %118, i32 0, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, 1
  store i32 %121, i32* %119, align 4
  br label %122

122:                                              ; preds = %116, %112
  %123 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %123) #13
  %124 = bitcast %82** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %124) #13
  %125 = bitcast %29** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %125) #13
  %126 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %126) #13
  br label %127

127:                                              ; preds = %122
  br label %128

128:                                              ; preds = %127, %79
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1481(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  br label %3

3:                                                ; preds = %1
  %4 = load %29*, %29** %2, align 8
  %5 = getelementptr inbounds %29, %29* %4, i32 0, i32 1
  %6 = bitcast %31* %5 to %83*
  %7 = getelementptr inbounds %83, %83* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %21, label %12

12:                                               ; preds = %3
  %13 = load %29*, %29** %2, align 8
  %14 = getelementptr inbounds %29, %29* %13, i32 0, i32 1
  %15 = bitcast %31* %14 to %83*
  %16 = getelementptr inbounds %83, %83* %15, i32 0, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %18, 16
  %20 = icmp ne i32 %19, 0
  br label %21

21:                                               ; preds = %12, %3
  %22 = phi i1 [ true, %3 ], [ %20, %12 ]
  %23 = xor i1 %22, true
  %24 = zext i1 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = call i64 @llvm.expect.i64(i64 %25, i64 0)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %21
  unreachable

29:                                               ; preds = %21
  br label %30

30:                                               ; preds = %29
  %31 = load %29*, %29** %2, align 8
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 0
  %33 = bitcast %30* %32 to %82**
  %34 = load %82*, %82** %33, align 8
  %35 = getelementptr inbounds %82, %82* %34, i32 0, i32 0
  %36 = getelementptr inbounds %8, %8* %35, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  ret i32 %37
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1482(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  br label %3

3:                                                ; preds = %1
  %4 = load %29*, %29** %2, align 8
  %5 = getelementptr inbounds %29, %29* %4, i32 0, i32 1
  %6 = bitcast %31* %5 to %83*
  %7 = getelementptr inbounds %83, %83* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 4
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 0)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  unreachable

18:                                               ; preds = %3
  br label %19

19:                                               ; preds = %18
  %20 = load %29*, %29** %2, align 8
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 0
  %22 = bitcast %30* %21 to %82**
  %23 = load %82*, %82** %22, align 8
  %24 = getelementptr inbounds %82, %82* %23, i32 0, i32 0
  %25 = getelementptr inbounds %8, %8* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, -1
  store i32 %27, i32* %25, align 4
  ret i32 %27
}

declare dso_local i32 @zend_fcall_info_args(%38*, %29*) #1

declare dso_local void @zend_fcall_info_args_clear(%38*, i32) #1

declare dso_local void @zend_throw_error(%6*, i8*, ...) #1

declare dso_local %6* @zend_get_called_scope(%1*) #1

declare dso_local zeroext i8 @instanceof_function(%6*, %6*) #1

; Function Attrs: nounwind uwtable
define dso_local void @php_call_shutdown_functions() #0 {
  %1 = alloca [1 x %68]*, align 8
  %2 = alloca [1 x %68], align 16
  %3 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %4 = icmp ne %7* %3, null
  br i1 %4, label %5, label %18

5:                                                ; preds = %0
  %6 = bitcast [1 x %68]** %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load [1 x %68]*, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  store [1 x %68]* %7, [1 x %68]** %1, align 8
  %8 = bitcast [1 x %68]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %8) #13
  store [1 x %68]* %2, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  %9 = getelementptr inbounds [1 x %68], [1 x %68]* %2, i32 0, i32 0
  %10 = call i32 @_setjmp(%68* %9) #18
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %5
  %13 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  call void @zend_hash_apply(%7* %13, i32 (%29*)* @1483)
  br label %14

14:                                               ; preds = %12, %5
  %15 = load [1 x %68]*, [1 x %68]** %1, align 8
  store [1 x %68]* %15, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  %16 = bitcast [1 x %68]* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %16) #13
  %17 = bitcast [1 x %68]** %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #13
  br label %18

18:                                               ; preds = %14, %0
  ret void
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @_setjmp(%68*) #11

declare dso_local void @zend_hash_apply(%7*, i32 (%29*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @1483(%29* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %29*, align 8
  %4 = alloca %94*, align 8
  %5 = alloca %29, align 8
  %6 = alloca %28*, align 8
  %7 = alloca i32, align 4
  store %29* %0, %29** %3, align 8
  %8 = bitcast %94** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load %29*, %29** %3, align 8
  %10 = getelementptr inbounds %29, %29* %9, i32 0, i32 0
  %11 = bitcast %30* %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast i8* %12 to %94*
  store %94* %13, %94** %4, align 8
  %14 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %14) #13
  %15 = load %94*, %94** %4, align 8
  %16 = getelementptr inbounds %94, %94* %15, i32 0, i32 0
  %17 = load %29*, %29** %16, align 8
  %18 = getelementptr inbounds %29, %29* %17, i64 0
  %19 = call zeroext i8 @zend_is_callable(%29* %18, i32 0, %28** null)
  %20 = icmp ne i8 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %1
  %22 = bitcast %28** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #13
  %23 = load %94*, %94** %4, align 8
  %24 = getelementptr inbounds %94, %94* %23, i32 0, i32 0
  %25 = load %29*, %29** %24, align 8
  %26 = getelementptr inbounds %29, %29* %25, i64 0
  %27 = call %28* @zend_get_callable_name(%29* %26)
  store %28* %27, %28** %6, align 8
  %28 = load %28*, %28** %6, align 8
  %29 = getelementptr inbounds %28, %28* %28, i32 0, i32 3
  %30 = getelementptr inbounds [1 x i8], [1 x i8]* %29, i32 0, i32 0
  call void (i32, i8*, ...) @zend_error(i32 2, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @1447, i32 0, i32 0), i8* %30)
  %31 = load %28*, %28** %6, align 8
  call void @1460(%28* %31)
  store i32 0, i32* %2, align 4
  store i32 1, i32* %7, align 4
  %32 = bitcast %28** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #13
  br label %50

33:                                               ; preds = %1
  %34 = load %94*, %94** %4, align 8
  %35 = getelementptr inbounds %94, %94* %34, i32 0, i32 0
  %36 = load %29*, %29** %35, align 8
  %37 = getelementptr inbounds %29, %29* %36, i64 0
  %38 = load %94*, %94** %4, align 8
  %39 = getelementptr inbounds %94, %94* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 8
  %41 = sub nsw i32 %40, 1
  %42 = load %94*, %94** %4, align 8
  %43 = getelementptr inbounds %94, %94* %42, i32 0, i32 0
  %44 = load %29*, %29** %43, align 8
  %45 = getelementptr inbounds %29, %29* %44, i64 1
  %46 = call i32 @_call_user_function_ex(%29* null, %29* %37, %29* %5, i32 %41, %29* %45, i32 1)
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %33
  call void @1491(%29* %5)
  br label %49

49:                                               ; preds = %48, %33
  store i32 0, i32* %2, align 4
  store i32 1, i32* %7, align 4
  br label %50

50:                                               ; preds = %49, %21
  %51 = bitcast %29* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %51) #13
  %52 = bitcast %94** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %52) #13
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define dso_local void @php_free_shutdown_functions() #0 {
  %1 = alloca [1 x %68]*, align 8
  %2 = alloca [1 x %68], align 16
  %3 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %4 = icmp ne %7* %3, null
  br i1 %4, label %5, label %30

5:                                                ; preds = %0
  %6 = bitcast [1 x %68]** %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load [1 x %68]*, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  store [1 x %68]* %7, [1 x %68]** %1, align 8
  %8 = bitcast [1 x %68]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* %8) #13
  store [1 x %68]* %2, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  %9 = getelementptr inbounds [1 x %68], [1 x %68]* %2, i32 0, i32 0
  %10 = call i32 @_setjmp(%68* %9) #18
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %19

12:                                               ; preds = %5
  %13 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  call void @zend_hash_destroy(%7* %13)
  br label %14

14:                                               ; preds = %12
  %15 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %16 = bitcast %7* %15 to i8*
  call void @_efree_56(i8* %16)
  br label %17

17:                                               ; preds = %14
  br label %18

18:                                               ; preds = %17
  store %7* null, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  br label %26

19:                                               ; preds = %5
  %20 = load [1 x %68]*, [1 x %68]** %1, align 8
  store [1 x %68]* %20, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  br label %21

21:                                               ; preds = %19
  %22 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %23 = bitcast %7* %22 to i8*
  call void @_efree_56(i8* %23)
  br label %24

24:                                               ; preds = %21
  br label %25

25:                                               ; preds = %24
  store %7* null, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  br label %26

26:                                               ; preds = %25, %18
  %27 = load [1 x %68]*, [1 x %68]** %1, align 8
  store [1 x %68]* %27, [1 x %68]** getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 7), align 8
  %28 = bitcast [1 x %68]* %2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 200, i8* %28) #13
  %29 = bitcast [1 x %68]** %1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #13
  br label %30

30:                                               ; preds = %26, %0
  ret void
}

declare dso_local void @_efree_56(i8*) #1

declare dso_local void @zend_wrong_param_count() #1

declare dso_local i32 @_zend_get_parameters_array_ex(i32, %29*) #1

declare dso_local zeroext i8 @zend_is_callable(%29*, i32, %28**) #1

declare dso_local %28* @zend_get_callable_name(%29*) #1

declare dso_local noalias i8* @_emalloc_56() #1

; Function Attrs: nounwind uwtable
define internal void @1484(%29* %0) #0 {
  %2 = alloca %29*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %94*, align 8
  store %29* %0, %29** %2, align 8
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #13
  %6 = bitcast %94** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load %29*, %29** %2, align 8
  %8 = getelementptr inbounds %29, %29* %7, i32 0, i32 0
  %9 = bitcast %30* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to %94*
  store %94* %11, %94** %4, align 8
  store i32 0, i32* %3, align 4
  br label %12

12:                                               ; preds = %25, %1
  %13 = load i32, i32* %3, align 4
  %14 = load %94*, %94** %4, align 8
  %15 = getelementptr inbounds %94, %94* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %13, %16
  br i1 %17, label %18, label %28

18:                                               ; preds = %12
  %19 = load %94*, %94** %4, align 8
  %20 = getelementptr inbounds %94, %94* %19, i32 0, i32 0
  %21 = load %29*, %29** %20, align 8
  %22 = load i32, i32* %3, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %29, %29* %21, i64 %23
  call void @_zval_ptr_dtor(%29* %24)
  br label %25

25:                                               ; preds = %18
  %26 = load i32, i32* %3, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %3, align 4
  br label %12

28:                                               ; preds = %12
  %29 = load %94*, %94** %4, align 8
  %30 = getelementptr inbounds %94, %94* %29, i32 0, i32 0
  %31 = load %29*, %29** %30, align 8
  %32 = bitcast %29* %31 to i8*
  call void @_efree(i8* %32)
  %33 = load %94*, %94** %4, align 8
  %34 = bitcast %94* %33 to i8*
  call void @_efree(i8* %34)
  %35 = bitcast %94** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  %36 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %36) #13
  ret void
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1485(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  br label %3

3:                                                ; preds = %1
  %4 = load %29*, %29** %2, align 8
  %5 = getelementptr inbounds %29, %29* %4, i32 0, i32 1
  %6 = bitcast %31* %5 to %83*
  %7 = getelementptr inbounds %83, %83* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 4
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = call i64 @llvm.expect.i64(i64 %14, i64 0)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  unreachable

18:                                               ; preds = %3
  br label %19

19:                                               ; preds = %18
  %20 = load %29*, %29** %2, align 8
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 0
  %22 = bitcast %30* %21 to %82**
  %23 = load %82*, %82** %22, align 8
  %24 = getelementptr inbounds %82, %82* %23, i32 0, i32 0
  %25 = getelementptr inbounds %8, %8* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %25, align 4
  ret i32 %27
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @1486(%7* %0, i8* %1, i64 %2) #2 {
  %4 = alloca i8*, align 8
  %5 = alloca %7*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %29, align 8
  %9 = alloca %29*, align 8
  %10 = alloca i32, align 4
  store %7* %0, %7** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %11 = bitcast %29* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %11) #13
  %12 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  br label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %29, %29* %8, i32 0, i32 0
  %15 = bitcast %30* %14 to i8**
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %29, %29* %8, i32 0, i32 1
  %17 = bitcast %31* %16 to i32*
  store i32 17, i32* %17, align 8
  br label %18

18:                                               ; preds = %13
  br label %19

19:                                               ; preds = %18
  %20 = load %7*, %7** %5, align 8
  %21 = call %29* @_zend_hash_next_index_insert(%7* %20, %29* %8)
  store %29* %21, %29** %9, align 8
  %22 = icmp ne %29* %21, null
  br i1 %22, label %23, label %51

23:                                               ; preds = %19
  %24 = load %7*, %7** %5, align 8
  %25 = getelementptr inbounds %7, %7* %24, i32 0, i32 1
  %26 = bitcast %10* %25 to i32*
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 1
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %23
  %31 = load i64, i64* %7, align 8
  %32 = call noalias i8* @__zend_malloc(i64 %31) #17
  br label %36

33:                                               ; preds = %23
  %34 = load i64, i64* %7, align 8
  %35 = call noalias i8* @_emalloc(i64 %34) #17
  br label %36

36:                                               ; preds = %33, %30
  %37 = phi i8* [ %32, %30 ], [ %35, %33 ]
  %38 = load %29*, %29** %9, align 8
  %39 = getelementptr inbounds %29, %29* %38, i32 0, i32 0
  %40 = bitcast %30* %39 to i8**
  store i8* %37, i8** %40, align 8
  %41 = load %29*, %29** %9, align 8
  %42 = getelementptr inbounds %29, %29* %41, i32 0, i32 0
  %43 = bitcast %30* %42 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = load i8*, i8** %6, align 8
  %46 = load i64, i64* %7, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %45, i64 %46, i1 false)
  %47 = load %29*, %29** %9, align 8
  %48 = getelementptr inbounds %29, %29* %47, i32 0, i32 0
  %49 = bitcast %30* %48 to i8**
  %50 = load i8*, i8** %49, align 8
  store i8* %50, i8** %4, align 8
  store i32 1, i32* %10, align 4
  br label %52

51:                                               ; preds = %19
  store i8* null, i8** %4, align 8
  store i32 1, i32* %10, align 4
  br label %52

52:                                               ; preds = %51, %36
  %53 = bitcast %29** %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #13
  %54 = bitcast %29* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %54) #13
  %55 = load i8*, i8** %4, align 8
  ret i8* %55
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @register_user_shutdown_function(i8* %0, i64 %1, %94* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %94*, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %94* %2, %94** %6, align 8
  %7 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %8 = icmp ne %7* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = call noalias i8* @_emalloc_56()
  %11 = bitcast i8* %10 to %7*
  store %7* %11, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %12 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  call void @_zend_hash_init(%7* %12, i32 0, void (%29*)* @1484, i8 zeroext 0)
  br label %13

13:                                               ; preds = %9, %3
  %14 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %15 = load i8*, i8** %4, align 8
  %16 = load i64, i64* %5, align 8
  %17 = load %94*, %94** %6, align 8
  %18 = bitcast %94* %17 to i8*
  %19 = call i8* @1487(%7* %14, i8* %15, i64 %16, i8* %18, i64 16)
  %20 = icmp ne i8* %19, null
  %21 = zext i1 %20 to i32
  %22 = trunc i32 %21 to i8
  ret i8 %22
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @1487(%7* %0, i8* %1, i64 %2, i8* %3, i64 %4) #2 {
  %6 = alloca %7*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store %7* %0, %7** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i8* %3, i8** %9, align 8
  store i64 %4, i64* %10, align 8
  %12 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #13
  %13 = load %7*, %7** %6, align 8
  %14 = getelementptr inbounds %7, %7* %13, i32 0, i32 1
  %15 = bitcast %10* %14 to i32*
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 1
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %5
  %20 = load i64, i64* %10, align 8
  %21 = call noalias i8* @__zend_malloc(i64 %20) #17
  br label %25

22:                                               ; preds = %5
  %23 = load i64, i64* %10, align 8
  %24 = call noalias i8* @_emalloc(i64 %23) #17
  br label %25

25:                                               ; preds = %22, %19
  %26 = phi i8* [ %21, %19 ], [ %24, %22 ]
  store i8* %26, i8** %11, align 8
  %27 = load i8*, i8** %11, align 8
  %28 = load i8*, i8** %9, align 8
  %29 = load i64, i64* %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %28, i64 %29, i1 false)
  %30 = load %7*, %7** %6, align 8
  %31 = load i8*, i8** %7, align 8
  %32 = load i64, i64* %8, align 8
  %33 = load i8*, i8** %11, align 8
  %34 = call i8* @1503(%7* %30, i8* %31, i64 %32, i8* %33)
  %35 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %35) #13
  ret i8* %34
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @remove_user_shutdown_function(i8* %0, i64 %1) #0 {
  %3 = alloca i8, align 1
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %7 = icmp ne %7* %6, null
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %10 = load i8*, i8** %4, align 8
  %11 = load i64, i64* %5, align 8
  %12 = call i32 @zend_hash_str_del(%7* %9, i8* %10, i64 %11)
  %13 = icmp ne i32 %12, -1
  %14 = zext i1 %13 to i32
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %3, align 1
  br label %17

16:                                               ; preds = %2
  store i8 0, i8* %3, align 1
  br label %17

17:                                               ; preds = %16, %8
  %18 = load i8, i8* %3, align 1
  ret i8 %18
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @append_user_shutdown_function(%29* %0, i32 %1) #0 {
  %3 = alloca %94, align 8
  %4 = bitcast %94* %3 to { %29*, i32 }*
  %5 = getelementptr inbounds { %29*, i32 }, { %29*, i32 }* %4, i32 0, i32 0
  store %29* %0, %29** %5, align 8
  %6 = getelementptr inbounds { %29*, i32 }, { %29*, i32 }* %4, i32 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %8 = icmp ne %7* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = call noalias i8* @_emalloc_56()
  %11 = bitcast i8* %10 to %7*
  store %7* %11, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %12 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  call void @_zend_hash_init(%7* %12, i32 0, void (%29*)* @1484, i8 zeroext 0)
  br label %13

13:                                               ; preds = %9, %2
  %14 = load %7*, %7** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 0), align 8
  %15 = bitcast %94* %3 to i8*
  %16 = call i8* @1486(%7* %14, i8* %15, i64 16)
  %17 = icmp ne i8* %16, null
  %18 = zext i1 %17 to i32
  %19 = trunc i32 %18 to i8
  ret i8 %19
}

; Function Attrs: nounwind uwtable
define dso_local void @php_get_highlight_struct(%96* %0) #0 {
  %2 = alloca %96*, align 8
  store %96* %0, %96** %2, align 8
  %3 = call i8* @zend_ini_string_ex(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1128, i32 0, i32 0), i32 17, i32 0, i8* null)
  %4 = load %96*, %96** %2, align 8
  %5 = getelementptr inbounds %96, %96* %4, i32 0, i32 1
  store i8* %3, i8** %5, align 8
  %6 = call i8* @zend_ini_string_ex(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1129, i32 0, i32 0), i32 17, i32 0, i8* null)
  %7 = load %96*, %96** %2, align 8
  %8 = getelementptr inbounds %96, %96* %7, i32 0, i32 2
  store i8* %6, i8** %8, align 8
  %9 = call i8* @zend_ini_string_ex(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @1130, i32 0, i32 0), i32 14, i32 0, i8* null)
  %10 = load %96*, %96** %2, align 8
  %11 = getelementptr inbounds %96, %96* %10, i32 0, i32 0
  store i8* %9, i8** %11, align 8
  %12 = call i8* @zend_ini_string_ex(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @1131, i32 0, i32 0), i32 17, i32 0, i8* null)
  %13 = load %96*, %96** %2, align 8
  %14 = getelementptr inbounds %96, %96* %13, i32 0, i32 4
  store i8* %12, i8** %14, align 8
  %15 = call i8* @zend_ini_string_ex(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1132, i32 0, i32 0), i32 16, i32 0, i8* null)
  %16 = load %96*, %96** %2, align 8
  %17 = getelementptr inbounds %96, %96* %16, i32 0, i32 3
  store i8* %15, i8** %17, align 8
  ret void
}

declare dso_local i8* @zend_ini_string_ex(i8*, i32, i32, i8*) #1

declare dso_local i32 @php_check_open_basedir(i8*) #1

declare dso_local i32 @php_output_start_default() #1

declare dso_local i32 @highlight_file(i8*, %96*) #1

declare dso_local i32 @php_output_end() #1

declare dso_local i32 @php_output_get_contents(%29*) #1

declare dso_local i32 @php_output_discard() #1

declare dso_local void @zend_save_lexical_state(%97*) #1

declare dso_local i32 @open_file_for_scanning(%99*) #1

declare dso_local void @zend_restore_lexical_state(%97*) #1

declare dso_local void @zend_strip() #1

declare dso_local void @zend_destroy_file_handle(%99*) #1

declare dso_local void @_convert_to_string(%29*) #1

declare dso_local i8* @zend_make_compiled_string_description(i8*) #1

declare dso_local i32 @highlight_string(%29*, %96*, i8*) #1

declare dso_local i8* @zend_ini_string(i8*, i32, i32) #1

declare dso_local void @zend_ini_sort_entries() #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @1488(%7* %0, i8* %1, i64 %2) #2 {
  %4 = alloca i8*, align 8
  %5 = alloca %7*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %29*, align 8
  %9 = alloca i32, align 4
  store %7* %0, %7** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %10 = bitcast %29** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %7*, %7** %5, align 8
  %12 = load i8*, i8** %6, align 8
  %13 = load i64, i64* %7, align 8
  %14 = call %29* @zend_hash_str_find(%7* %11, i8* %12, i64 %13)
  store %29* %14, %29** %8, align 8
  %15 = load %29*, %29** %8, align 8
  %16 = icmp ne %29* %15, null
  br i1 %16, label %17, label %37

17:                                               ; preds = %3
  br label %18

18:                                               ; preds = %17
  %19 = load %29*, %29** %8, align 8
  %20 = getelementptr inbounds %29, %29* %19, i32 0, i32 0
  %21 = bitcast %30* %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = sext i32 %25 to i64
  %27 = call i64 @llvm.expect.i64(i64 %26, i64 0)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %18
  unreachable

30:                                               ; preds = %18
  br label %31

31:                                               ; preds = %30
  br label %32

32:                                               ; preds = %31
  %33 = load %29*, %29** %8, align 8
  %34 = getelementptr inbounds %29, %29* %33, i32 0, i32 0
  %35 = bitcast %30* %34 to i8**
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %4, align 8
  store i32 1, i32* %9, align 4
  br label %38

37:                                               ; preds = %3
  store i8* null, i8** %4, align 8
  store i32 1, i32* %9, align 4
  br label %38

38:                                               ; preds = %37, %32
  %39 = bitcast %29** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #13
  %40 = load i8*, i8** %4, align 8
  ret i8* %40
}

; Function Attrs: nounwind uwtable
define internal i32 @1489(%29* %0, i32 %1, %106* %2, %107* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %29*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %106*, align 8
  %9 = alloca %107*, align 8
  %10 = alloca %35*, align 8
  %11 = alloca %29*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %29, align 8
  %15 = alloca i32, align 4
  %16 = alloca %29, align 8
  %17 = alloca %29*, align 8
  %18 = alloca %28*, align 8
  store %29* %0, %29** %6, align 8
  store i32 %1, i32* %7, align 4
  store %106* %2, %106** %8, align 8
  store %107* %3, %107** %9, align 8
  %19 = bitcast %35** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #13
  %20 = load %29*, %29** %6, align 8
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 0
  %22 = bitcast %30* %21 to i8**
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast i8* %23 to %35*
  store %35* %24, %35** %10, align 8
  %25 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #13
  %26 = load %106*, %106** %8, align 8
  %27 = getelementptr inbounds %106, %106* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp ule i32 %28, 40
  br i1 %29, label %30, label %36

30:                                               ; preds = %4
  %31 = getelementptr inbounds %106, %106* %26, i32 0, i32 3
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr i8, i8* %32, i32 %28
  %34 = bitcast i8* %33 to %29**
  %35 = add i32 %28, 8
  store i32 %35, i32* %27, align 8
  br label %41

36:                                               ; preds = %4
  %37 = getelementptr inbounds %106, %106* %26, i32 0, i32 2
  %38 = load i8*, i8** %37, align 8
  %39 = bitcast i8* %38 to %29**
  %40 = getelementptr i8, i8* %38, i32 8
  store i8* %40, i8** %37, align 8
  br label %41

41:                                               ; preds = %36, %30
  %42 = phi %29** [ %34, %30 ], [ %39, %36 ]
  %43 = load %29*, %29** %42, align 8
  store %29* %43, %29** %11, align 8
  %44 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #13
  %45 = load %106*, %106** %8, align 8
  %46 = getelementptr inbounds %106, %106* %45, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp ule i32 %47, 40
  br i1 %48, label %49, label %55

49:                                               ; preds = %41
  %50 = getelementptr inbounds %106, %106* %45, i32 0, i32 3
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr i8, i8* %51, i32 %47
  %53 = bitcast i8* %52 to i32*
  %54 = add i32 %47, 8
  store i32 %54, i32* %46, align 8
  br label %60

55:                                               ; preds = %41
  %56 = getelementptr inbounds %106, %106* %45, i32 0, i32 2
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast i8* %57 to i32*
  %59 = getelementptr i8, i8* %57, i32 8
  store i8* %59, i8** %56, align 8
  br label %60

60:                                               ; preds = %55, %49
  %61 = phi i32* [ %53, %49 ], [ %58, %55 ]
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %12, align 4
  %63 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %63) #13
  %64 = load %106*, %106** %8, align 8
  %65 = getelementptr inbounds %106, %106* %64, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp ule i32 %66, 40
  br i1 %67, label %68, label %74

68:                                               ; preds = %60
  %69 = getelementptr inbounds %106, %106* %64, i32 0, i32 3
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr i8, i8* %70, i32 %66
  %72 = bitcast i8* %71 to i32*
  %73 = add i32 %66, 8
  store i32 %73, i32* %65, align 8
  br label %79

74:                                               ; preds = %60
  %75 = getelementptr inbounds %106, %106* %64, i32 0, i32 2
  %76 = load i8*, i8** %75, align 8
  %77 = bitcast i8* %76 to i32*
  %78 = getelementptr i8, i8* %76, i32 8
  store i8* %78, i8** %75, align 8
  br label %79

79:                                               ; preds = %74, %68
  %80 = phi i32* [ %72, %68 ], [ %77, %74 ]
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %13, align 4
  %82 = bitcast %29* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %82) #13
  %83 = load i32, i32* %12, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %92

85:                                               ; preds = %79
  %86 = load %35*, %35** %10, align 8
  %87 = getelementptr inbounds %35, %35* %86, i32 0, i32 11
  %88 = load i32, i32* %87, align 4
  %89 = load i32, i32* %12, align 4
  %90 = icmp ne i32 %88, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %85
  store i32 0, i32* %5, align 4
  store i32 1, i32* %15, align 4
  br label %227

92:                                               ; preds = %85, %79
  %93 = load %107*, %107** %9, align 8
  %94 = getelementptr inbounds %107, %107* %93, i32 0, i32 1
  %95 = load %28*, %28** %94, align 8
  %96 = icmp eq %28* %95, null
  br i1 %96, label %106, label %97

97:                                               ; preds = %92
  %98 = load %107*, %107** %9, align 8
  %99 = getelementptr inbounds %107, %107* %98, i32 0, i32 1
  %100 = load %28*, %28** %99, align 8
  %101 = getelementptr inbounds %28, %28* %100, i32 0, i32 3
  %102 = getelementptr inbounds [1 x i8], [1 x i8]* %101, i64 0, i64 0
  %103 = load i8, i8* %102, align 8
  %104 = sext i8 %103 to i32
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %226

106:                                              ; preds = %97, %92
  %107 = load i32, i32* %13, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %162

109:                                              ; preds = %106
  %110 = call i32 @_array_init(%29* %14, i32 0)
  %111 = load %35*, %35** %10, align 8
  %112 = getelementptr inbounds %35, %35* %111, i32 0, i32 6
  %113 = load %28*, %28** %112, align 8
  %114 = icmp ne %28* %113, null
  br i1 %114, label %115, label %121

115:                                              ; preds = %109
  %116 = load %35*, %35** %10, align 8
  %117 = getelementptr inbounds %35, %35* %116, i32 0, i32 6
  %118 = load %28*, %28** %117, align 8
  %119 = call %28* @1501(%28* %118)
  %120 = call i32 @add_assoc_str_ex(%29* %14, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1448, i32 0, i32 0), i64 12, %28* %119)
  br label %135

121:                                              ; preds = %109
  %122 = load %35*, %35** %10, align 8
  %123 = getelementptr inbounds %35, %35* %122, i32 0, i32 5
  %124 = load %28*, %28** %123, align 8
  %125 = icmp ne %28* %124, null
  br i1 %125, label %126, label %132

126:                                              ; preds = %121
  %127 = load %35*, %35** %10, align 8
  %128 = getelementptr inbounds %35, %35* %127, i32 0, i32 5
  %129 = load %28*, %28** %128, align 8
  %130 = call %28* @1501(%28* %129)
  %131 = call i32 @add_assoc_str_ex(%29* %14, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1448, i32 0, i32 0), i64 12, %28* %130)
  br label %134

132:                                              ; preds = %121
  %133 = call i32 @add_assoc_null_ex(%29* %14, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @1448, i32 0, i32 0), i64 12)
  br label %134

134:                                              ; preds = %132, %126
  br label %135

135:                                              ; preds = %134, %115
  %136 = load %35*, %35** %10, align 8
  %137 = getelementptr inbounds %35, %35* %136, i32 0, i32 5
  %138 = load %28*, %28** %137, align 8
  %139 = icmp ne %28* %138, null
  br i1 %139, label %140, label %146

140:                                              ; preds = %135
  %141 = load %35*, %35** %10, align 8
  %142 = getelementptr inbounds %35, %35* %141, i32 0, i32 5
  %143 = load %28*, %28** %142, align 8
  %144 = call %28* @1501(%28* %143)
  %145 = call i32 @add_assoc_str_ex(%29* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1449, i32 0, i32 0), i64 11, %28* %144)
  br label %148

146:                                              ; preds = %135
  %147 = call i32 @add_assoc_null_ex(%29* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @1449, i32 0, i32 0), i64 11)
  br label %148

148:                                              ; preds = %146, %140
  %149 = load %35*, %35** %10, align 8
  %150 = getelementptr inbounds %35, %35* %149, i32 0, i32 8
  %151 = load i32, i32* %150, align 8
  %152 = sext i32 %151 to i64
  %153 = call i32 @add_assoc_long_ex(%29* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @1450, i32 0, i32 0), i64 6, i64 %152)
  %154 = load %29*, %29** %11, align 8
  %155 = getelementptr inbounds %29, %29* %154, i32 0, i32 0
  %156 = bitcast %30* %155 to %7**
  %157 = load %7*, %7** %156, align 8
  %158 = load %35*, %35** %10, align 8
  %159 = getelementptr inbounds %35, %35* %158, i32 0, i32 0
  %160 = load %28*, %28** %159, align 8
  %161 = call %29* @1504(%7* %157, %28* %160, %29* %14)
  br label %225

162:                                              ; preds = %106
  %163 = load %35*, %35** %10, align 8
  %164 = getelementptr inbounds %35, %35* %163, i32 0, i32 5
  %165 = load %28*, %28** %164, align 8
  %166 = icmp ne %28* %165, null
  br i1 %166, label %167, label %215

167:                                              ; preds = %162
  %168 = bitcast %29* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %168) #13
  br label %169

169:                                              ; preds = %167
  %170 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %170) #13
  store %29* %16, %29** %17, align 8
  %171 = bitcast %28** %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %171) #13
  %172 = load %35*, %35** %10, align 8
  %173 = getelementptr inbounds %35, %35* %172, i32 0, i32 5
  %174 = load %28*, %28** %173, align 8
  store %28* %174, %28** %18, align 8
  %175 = load %28*, %28** %18, align 8
  %176 = load %29*, %29** %17, align 8
  %177 = getelementptr inbounds %29, %29* %176, i32 0, i32 0
  %178 = bitcast %30* %177 to %28**
  store %28* %175, %28** %178, align 8
  %179 = load %28*, %28** %18, align 8
  %180 = getelementptr inbounds %28, %28* %179, i32 0, i32 0
  %181 = getelementptr inbounds %8, %8* %180, i32 0, i32 1
  %182 = bitcast %9* %181 to %93*
  %183 = getelementptr inbounds %93, %93* %182, i32 0, i32 1
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = and i32 %185, 2
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %188, label %192

188:                                              ; preds = %169
  %189 = load %29*, %29** %17, align 8
  %190 = getelementptr inbounds %29, %29* %189, i32 0, i32 1
  %191 = bitcast %31* %190 to i32*
  store i32 6, i32* %191, align 8
  br label %201

192:                                              ; preds = %169
  %193 = load %28*, %28** %18, align 8
  %194 = getelementptr inbounds %28, %28* %193, i32 0, i32 0
  %195 = getelementptr inbounds %8, %8* %194, i32 0, i32 0
  %196 = load i32, i32* %195, align 8
  %197 = add i32 %196, 1
  store i32 %197, i32* %195, align 8
  %198 = load %29*, %29** %17, align 8
  %199 = getelementptr inbounds %29, %29* %198, i32 0, i32 1
  %200 = bitcast %31* %199 to i32*
  store i32 5126, i32* %200, align 8
  br label %201

201:                                              ; preds = %192, %188
  %202 = bitcast %28** %18 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202) #13
  %203 = bitcast %29** %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %203) #13
  br label %204

204:                                              ; preds = %201
  br label %205

205:                                              ; preds = %204
  %206 = load %29*, %29** %11, align 8
  %207 = getelementptr inbounds %29, %29* %206, i32 0, i32 0
  %208 = bitcast %30* %207 to %7**
  %209 = load %7*, %7** %208, align 8
  %210 = load %35*, %35** %10, align 8
  %211 = getelementptr inbounds %35, %35* %210, i32 0, i32 0
  %212 = load %28*, %28** %211, align 8
  %213 = call %29* @1504(%7* %209, %28* %212, %29* %16)
  %214 = bitcast %29* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %214) #13
  br label %224

215:                                              ; preds = %162
  %216 = load %29*, %29** %11, align 8
  %217 = getelementptr inbounds %29, %29* %216, i32 0, i32 0
  %218 = bitcast %30* %217 to %7**
  %219 = load %7*, %7** %218, align 8
  %220 = load %35*, %35** %10, align 8
  %221 = getelementptr inbounds %35, %35* %220, i32 0, i32 0
  %222 = load %28*, %28** %221, align 8
  %223 = call %29* @1504(%7* %219, %28* %222, %29* getelementptr inbounds (%67, %67* @executor_globals, i32 0, i32 0))
  br label %224

224:                                              ; preds = %215, %205
  br label %225

225:                                              ; preds = %224, %148
  br label %226

226:                                              ; preds = %225, %97
  store i32 0, i32* %5, align 4
  store i32 1, i32* %15, align 4
  br label %227

227:                                              ; preds = %226, %91
  %228 = bitcast %29* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %228) #13
  %229 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %229) #13
  %230 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %230) #13
  %231 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %231) #13
  %232 = bitcast %35** %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %232) #13
  %233 = load i32, i32* %5, align 4
  ret i32 %233
}

; Function Attrs: nounwind uwtable
define internal i32 @1490(i8* %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %9, align 4
  %12 = sub nsw i32 %11, 1
  %13 = icmp ne i32 %10, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %4
  store i32 0, i32* %5, align 4
  br label %24

15:                                               ; preds = %4
  %16 = load i8*, i8** %6, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = load i32, i32* %7, align 4
  %19 = sext i32 %18 to i64
  %20 = call i32 @strncmp(i8* %16, i8* %17, i64 %19) #15
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  store i32 %23, i32* %5, align 4
  br label %24

24:                                               ; preds = %15, %14
  %25 = load i32, i32* %5, align 4
  ret i32 %25
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1491(%29* %0) #2 {
  %2 = alloca %29*, align 8
  store %29* %0, %29** %2, align 8
  %3 = load %29*, %29** %2, align 8
  %4 = getelementptr inbounds %29, %29* %3, i32 0, i32 1
  %5 = bitcast %31* %4 to %83*
  %6 = getelementptr inbounds %83, %83* %5, i32 0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = and i32 %8, 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %1
  %12 = load %29*, %29** %2, align 8
  %13 = call i32 @1482(%29* %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = load %29*, %29** %2, align 8
  %17 = getelementptr inbounds %29, %29* %16, i32 0, i32 0
  %18 = bitcast %30* %17 to %82**
  %19 = load %82*, %82** %18, align 8
  call void @_zval_dtor_func(%82* %19)
  br label %20

20:                                               ; preds = %15, %11, %1
  ret void
}

declare dso_local i32 @zend_alter_ini_entry_ex(%28*, %28*, i32, i32, i32) #1

declare dso_local i32 @zend_restore_ini_entry(%28*, i32) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1492(%29* %0, %28** %1, i32 %2) #2 {
  %4 = alloca i32, align 4
  %5 = alloca %29*, align 8
  %6 = alloca %28**, align 8
  %7 = alloca i32, align 4
  store %29* %0, %29** %5, align 8
  store %28** %1, %28*** %6, align 8
  store i32 %2, i32* %7, align 4
  %8 = load %29*, %29** %5, align 8
  %9 = load %28**, %28*** %6, align 8
  %10 = load i32, i32* %7, align 4
  %11 = call i32 @1461(%29* %8, %28** %9, i32 %10)
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %34

13:                                               ; preds = %3
  %14 = load %28**, %28*** %6, align 8
  %15 = load %28*, %28** %14, align 8
  %16 = icmp ne %28* %15, null
  br i1 %16, label %17, label %35

17:                                               ; preds = %13
  %18 = load %28**, %28*** %6, align 8
  %19 = load %28*, %28** %18, align 8
  %20 = getelementptr inbounds %28, %28* %19, i32 0, i32 3
  %21 = getelementptr inbounds [1 x i8], [1 x i8]* %20, i32 0, i32 0
  %22 = call i64 @strlen(i8* %21) #15
  %23 = load %28**, %28*** %6, align 8
  %24 = load %28*, %28** %23, align 8
  %25 = getelementptr inbounds %28, %28* %24, i32 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = icmp ne i64 %22, %26
  %28 = xor i1 %27, true
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  %31 = sext i32 %30 to i64
  %32 = call i64 @llvm.expect.i64(i64 %31, i64 0)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %17, %3
  store i32 0, i32* %4, align 4
  br label %36

35:                                               ; preds = %17, %13
  store i32 1, i32* %4, align 4
  br label %36

36:                                               ; preds = %35, %34
  %37 = load i32, i32* %4, align 4
  ret i32 %37
}

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1493(%28* %0) #2 {
  %2 = alloca %28*, align 8
  store %28* %0, %28** %2, align 8
  %3 = load %28*, %28** %2, align 8
  %4 = getelementptr inbounds %28, %28* %3, i32 0, i32 0
  %5 = getelementptr inbounds %8, %8* %4, i32 0, i32 1
  %6 = bitcast %9* %5 to %93*
  %7 = getelementptr inbounds %93, %93* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 2
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %43, label %12

12:                                               ; preds = %1
  br label %13

13:                                               ; preds = %12
  %14 = load %28*, %28** %2, align 8
  %15 = getelementptr inbounds %28, %28* %14, i32 0, i32 0
  %16 = getelementptr inbounds %8, %8* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp ule i32 %17, 1
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i32
  %21 = sext i32 %20 to i64
  %22 = call i64 @llvm.expect.i64(i64 %21, i64 0)
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %13
  unreachable

25:                                               ; preds = %13
  br label %26

26:                                               ; preds = %25
  %27 = load %28*, %28** %2, align 8
  %28 = getelementptr inbounds %28, %28* %27, i32 0, i32 0
  %29 = getelementptr inbounds %8, %8* %28, i32 0, i32 1
  %30 = bitcast %9* %29 to %93*
  %31 = getelementptr inbounds %93, %93* %30, i32 0, i32 1
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 1
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %26
  %37 = load %28*, %28** %2, align 8
  %38 = bitcast %28* %37 to i8*
  call void @free(i8* %38) #13
  br label %42

39:                                               ; preds = %26
  %40 = load %28*, %28** %2, align 8
  %41 = bitcast %28* %40 to i8*
  call void @_efree(i8* %41)
  br label %42

42:                                               ; preds = %39, %36
  br label %43

43:                                               ; preds = %42, %1
  ret void
}

declare dso_local %28* @zend_print_zval_r_to_str(%29*, i32) #1

declare dso_local void @zend_print_zval_r(%29*, i32) #1

declare dso_local i32 @zend_alter_ini_entry_chars(%28*, i8*, i64, i32, i32) #1

declare dso_local %86* @getservbyname(i8*, i8*) #1

declare dso_local %86* @getservbyport(i32, i8*) #1

declare dso_local %87* @getprotobyname(i8*) #1

declare dso_local %87* @getprotobynumber(i32) #1

declare dso_local void @zend_llist_init(%40*, i64, void (i8*)*, i8 zeroext) #1

; Function Attrs: nounwind uwtable
define internal void @1494(%95* %0) #0 {
  %2 = alloca %95*, align 8
  %3 = alloca i32, align 4
  store %95* %0, %95** %2, align 8
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #13
  store i32 0, i32* %3, align 4
  br label %5

5:                                                ; preds = %18, %1
  %6 = load i32, i32* %3, align 4
  %7 = load %95*, %95** %2, align 8
  %8 = getelementptr inbounds %95, %95* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %5
  %12 = load %95*, %95** %2, align 8
  %13 = getelementptr inbounds %95, %95* %12, i32 0, i32 0
  %14 = load %29*, %29** %13, align 8
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %29, %29* %14, i64 %16
  call void @_zval_ptr_dtor(%29* %17)
  br label %18

18:                                               ; preds = %11
  %19 = load i32, i32* %3, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %3, align 4
  br label %5

21:                                               ; preds = %5
  %22 = load %95*, %95** %2, align 8
  %23 = getelementptr inbounds %95, %95* %22, i32 0, i32 0
  %24 = load %29*, %29** %23, align 8
  %25 = bitcast %29* %24 to i8*
  call void @_efree(i8* %25)
  %26 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #13
  ret void
}

declare dso_local void @php_add_tick_function(void (i32, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @1495(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %5 = load %40*, %40** getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 14), align 8
  call void @zend_llist_apply(%40* %5, void (i8*)* bitcast (void (%95*)* @1506 to void (i8*)*))
  ret void
}

declare dso_local void @zend_llist_add_element(%40*, i8*) #1

declare dso_local noalias i8* @_emalloc_16() #1

declare dso_local void @zend_llist_del_element(%40*, i8*, i32 (i8*, i8*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @1496(%95* %0, %95* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %95*, align 8
  %5 = alloca %95*, align 8
  %6 = alloca %29*, align 8
  %7 = alloca %29*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %95* %0, %95** %4, align 8
  store %95* %1, %95** %5, align 8
  %10 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %95*, %95** %4, align 8
  %12 = getelementptr inbounds %95, %95* %11, i32 0, i32 0
  %13 = load %29*, %29** %12, align 8
  %14 = getelementptr inbounds %29, %29* %13, i64 0
  store %29* %14, %29** %6, align 8
  %15 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #13
  %16 = load %95*, %95** %5, align 8
  %17 = getelementptr inbounds %95, %95* %16, i32 0, i32 0
  %18 = load %29*, %29** %17, align 8
  %19 = getelementptr inbounds %29, %29* %18, i64 0
  store %29* %19, %29** %7, align 8
  %20 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #13
  %21 = load %29*, %29** %6, align 8
  %22 = call zeroext i8 @1468(%29* %21)
  %23 = zext i8 %22 to i32
  %24 = icmp eq i32 %23, 6
  br i1 %24, label %25, label %36

25:                                               ; preds = %2
  %26 = load %29*, %29** %7, align 8
  %27 = call zeroext i8 @1468(%29* %26)
  %28 = zext i8 %27 to i32
  %29 = icmp eq i32 %28, 6
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = load %29*, %29** %6, align 8
  %32 = load %29*, %29** %7, align 8
  %33 = call i32 @zend_binary_zval_strcmp(%29* %31, %29* %32)
  %34 = icmp eq i32 %33, 0
  %35 = zext i1 %34 to i32
  store i32 %35, i32* %8, align 4
  br label %71

36:                                               ; preds = %25, %2
  %37 = load %29*, %29** %6, align 8
  %38 = call zeroext i8 @1468(%29* %37)
  %39 = zext i8 %38 to i32
  %40 = icmp eq i32 %39, 7
  br i1 %40, label %41, label %52

41:                                               ; preds = %36
  %42 = load %29*, %29** %7, align 8
  %43 = call zeroext i8 @1468(%29* %42)
  %44 = zext i8 %43 to i32
  %45 = icmp eq i32 %44, 7
  br i1 %45, label %46, label %52

46:                                               ; preds = %41
  %47 = load %29*, %29** %6, align 8
  %48 = load %29*, %29** %7, align 8
  %49 = call i32 @zend_compare_arrays(%29* %47, %29* %48)
  %50 = icmp eq i32 %49, 0
  %51 = zext i1 %50 to i32
  store i32 %51, i32* %8, align 4
  br label %70

52:                                               ; preds = %41, %36
  %53 = load %29*, %29** %6, align 8
  %54 = call zeroext i8 @1468(%29* %53)
  %55 = zext i8 %54 to i32
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %57, label %68

57:                                               ; preds = %52
  %58 = load %29*, %29** %7, align 8
  %59 = call zeroext i8 @1468(%29* %58)
  %60 = zext i8 %59 to i32
  %61 = icmp eq i32 %60, 8
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = load %29*, %29** %6, align 8
  %64 = load %29*, %29** %7, align 8
  %65 = call i32 @zend_compare_objects(%29* %63, %29* %64)
  %66 = icmp eq i32 %65, 0
  %67 = zext i1 %66 to i32
  store i32 %67, i32* %8, align 4
  br label %69

68:                                               ; preds = %57, %52
  store i32 0, i32* %8, align 4
  br label %69

69:                                               ; preds = %68, %62
  br label %70

70:                                               ; preds = %69, %46
  br label %71

71:                                               ; preds = %70, %30
  %72 = load i32, i32* %8, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %80

74:                                               ; preds = %71
  %75 = load %95*, %95** %4, align 8
  %76 = getelementptr inbounds %95, %95* %75, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp ne i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @1454, i32 0, i32 0))
  store i32 0, i32* %3, align 4
  store i32 1, i32* %9, align 4
  br label %82

80:                                               ; preds = %74, %71
  %81 = load i32, i32* %8, align 4
  store i32 %81, i32* %3, align 4
  store i32 1, i32* %9, align 4
  br label %82

82:                                               ; preds = %80, %79
  %83 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %83) #13
  %84 = bitcast %29** %7 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %84) #13
  %85 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %85) #13
  %86 = load i32, i32* %3, align 4
  ret i32 %86
}

; Function Attrs: nounwind
declare dso_local i32 @rename(i8*, i8*) #5

; Function Attrs: nounwind
declare dso_local i32 @chmod(i8*, i32) #5

; Function Attrs: nounwind
declare dso_local i8* @strerror(i32) #5

declare dso_local i32 @php_copy_file_ex(i8*, i8*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #5

; Function Attrs: nounwind uwtable
define internal void @1497(%29* %0, %29* %1, %29* %2, i32 %3, %29* %4) #0 {
  %6 = alloca %29*, align 8
  %7 = alloca %29*, align 8
  %8 = alloca %29*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %29*, align 8
  %11 = alloca %29*, align 8
  store %29* %0, %29** %6, align 8
  store %29* %1, %29** %7, align 8
  store %29* %2, %29** %8, align 8
  store i32 %3, i32* %9, align 4
  store %29* %4, %29** %10, align 8
  %12 = load i32, i32* %9, align 4
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %14, label %25

14:                                               ; preds = %5
  %15 = call i32 @_array_init(%29* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15), i32 0)
  %16 = load %29*, %29** %10, align 8
  %17 = getelementptr inbounds %29, %29* %16, i32 0, i32 0
  %18 = bitcast %30* %17 to %7**
  %19 = load %7*, %7** %18, align 8
  %20 = load %29*, %29** %6, align 8
  %21 = getelementptr inbounds %29, %29* %20, i32 0, i32 0
  %22 = bitcast %30* %21 to %28**
  %23 = load %28*, %28** %22, align 8
  %24 = call %29* @1504(%7* %19, %28* %23, %29* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15))
  br label %44

25:                                               ; preds = %5
  %26 = load %29*, %29** %7, align 8
  %27 = icmp ne %29* %26, null
  br i1 %27, label %28, label %43

28:                                               ; preds = %25
  %29 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %29) #13
  %30 = call zeroext i8 @1468(%29* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15))
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %28
  store %29* getelementptr inbounds (%37, %37* @basic_globals, i32 0, i32 15), %29** %11, align 8
  br label %36

34:                                               ; preds = %28
  %35 = load %29*, %29** %10, align 8
  store %29* %35, %29** %11, align 8
  br label %36

36:                                               ; preds = %34, %33
  %37 = load %29*, %29** %6, align 8
  %38 = load %29*, %29** %7, align 8
  %39 = load %29*, %29** %8, align 8
  %40 = load i32, i32* %9, align 4
  %41 = load %29*, %29** %11, align 8
  call void @1498(%29* %37, %29* %38, %29* %39, i32 %40, %29* %41)
  %42 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #13
  br label %43

43:                                               ; preds = %36, %25
  br label %44

44:                                               ; preds = %43, %14
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @1498(%29* %0, %29* %1, %29* %2, i32 %3, %29* %4) #0 {
  %6 = alloca %29*, align 8
  %7 = alloca %29*, align 8
  %8 = alloca %29*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %29*, align 8
  %11 = alloca %29, align 8
  %12 = alloca %29*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  store %29* %0, %29** %6, align 8
  store %29* %1, %29** %7, align 8
  store %29* %2, %29** %8, align 8
  store i32 %3, i32* %9, align 4
  store %29* %4, %29** %10, align 8
  %15 = load i32, i32* %9, align 4
  switch i32 %15, label %199 [
    i32 1, label %16
    i32 3, label %45
    i32 2, label %199
  ]

16:                                               ; preds = %5
  %17 = load %29*, %29** %7, align 8
  %18 = icmp ne %29* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %16
  br label %199

20:                                               ; preds = %16
  br label %21

21:                                               ; preds = %20
  %22 = load %29*, %29** %7, align 8
  %23 = getelementptr inbounds %29, %29* %22, i32 0, i32 1
  %24 = bitcast %31* %23 to %83*
  %25 = getelementptr inbounds %83, %83* %24, i32 0, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = and i32 %27, 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %21
  %31 = load %29*, %29** %7, align 8
  %32 = call i32 @1485(%29* %31)
  br label %33

33:                                               ; preds = %30, %21
  br label %34

34:                                               ; preds = %33
  %35 = load %29*, %29** %10, align 8
  %36 = getelementptr inbounds %29, %29* %35, i32 0, i32 0
  %37 = bitcast %30* %36 to %7**
  %38 = load %7*, %7** %37, align 8
  %39 = load %29*, %29** %6, align 8
  %40 = getelementptr inbounds %29, %29* %39, i32 0, i32 0
  %41 = bitcast %30* %40 to %28**
  %42 = load %28*, %28** %41, align 8
  %43 = load %29*, %29** %7, align 8
  %44 = call %29* @1504(%7* %38, %28* %42, %29* %43)
  br label %199

45:                                               ; preds = %5
  %46 = bitcast %29* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %46) #13
  %47 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #13
  %48 = load %29*, %29** %7, align 8
  %49 = icmp ne %29* %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %45
  store i32 2, i32* %13, align 4
  br label %194

51:                                               ; preds = %45
  %52 = load %29*, %29** %6, align 8
  %53 = getelementptr inbounds %29, %29* %52, i32 0, i32 0
  %54 = bitcast %30* %53 to %28**
  %55 = load %28*, %28** %54, align 8
  %56 = getelementptr inbounds %28, %28* %55, i32 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = icmp ugt i64 %57, 1
  br i1 %58, label %59, label %69

59:                                               ; preds = %51
  %60 = load %29*, %29** %6, align 8
  %61 = getelementptr inbounds %29, %29* %60, i32 0, i32 0
  %62 = bitcast %30* %61 to %28**
  %63 = load %28*, %28** %62, align 8
  %64 = getelementptr inbounds %28, %28* %63, i32 0, i32 3
  %65 = getelementptr inbounds [1 x i8], [1 x i8]* %64, i64 0, i64 0
  %66 = load i8, i8* %65, align 8
  %67 = sext i8 %66 to i32
  %68 = icmp eq i32 %67, 48
  br i1 %68, label %118, label %69

69:                                               ; preds = %59, %51
  %70 = load %29*, %29** %6, align 8
  %71 = getelementptr inbounds %29, %29* %70, i32 0, i32 0
  %72 = bitcast %30* %71 to %28**
  %73 = load %28*, %28** %72, align 8
  %74 = getelementptr inbounds %28, %28* %73, i32 0, i32 3
  %75 = getelementptr inbounds [1 x i8], [1 x i8]* %74, i32 0, i32 0
  %76 = load %29*, %29** %6, align 8
  %77 = getelementptr inbounds %29, %29* %76, i32 0, i32 0
  %78 = bitcast %30* %77 to %28**
  %79 = load %28*, %28** %78, align 8
  %80 = getelementptr inbounds %28, %28* %79, i32 0, i32 2
  %81 = load i64, i64* %80, align 8
  %82 = call zeroext i8 @1473(i8* %75, i64 %81, i64* null, double* null, i32 0)
  %83 = zext i8 %82 to i32
  %84 = icmp eq i32 %83, 4
  br i1 %84, label %85, label %118

85:                                               ; preds = %69
  %86 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %86) #13
  %87 = load %29*, %29** %6, align 8
  %88 = getelementptr inbounds %29, %29* %87, i32 0, i32 0
  %89 = bitcast %30* %88 to %28**
  %90 = load %28*, %28** %89, align 8
  %91 = getelementptr inbounds %28, %28* %90, i32 0, i32 3
  %92 = getelementptr inbounds [1 x i8], [1 x i8]* %91, i32 0, i32 0
  %93 = load %29*, %29** %6, align 8
  %94 = getelementptr inbounds %29, %29* %93, i32 0, i32 0
  %95 = bitcast %30* %94 to %28**
  %96 = load %28*, %28** %95, align 8
  %97 = getelementptr inbounds %28, %28* %96, i32 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = trunc i64 %98 to i32
  %100 = call i64 @zend_atol(i8* %92, i32 %99)
  store i64 %100, i64* %14, align 8
  %101 = load %29*, %29** %10, align 8
  %102 = getelementptr inbounds %29, %29* %101, i32 0, i32 0
  %103 = bitcast %30* %102 to %7**
  %104 = load %7*, %7** %103, align 8
  %105 = load i64, i64* %14, align 8
  %106 = call %29* @zend_hash_index_find(%7* %104, i64 %105)
  store %29* %106, %29** %12, align 8
  %107 = icmp eq %29* %106, null
  br i1 %107, label %108, label %116

108:                                              ; preds = %85
  %109 = call i32 @_array_init(%29* %11, i32 0)
  %110 = load %29*, %29** %10, align 8
  %111 = getelementptr inbounds %29, %29* %110, i32 0, i32 0
  %112 = bitcast %30* %111 to %7**
  %113 = load %7*, %7** %112, align 8
  %114 = load i64, i64* %14, align 8
  %115 = call %29* @_zend_hash_index_update(%7* %113, i64 %114, %29* %11)
  store %29* %115, %29** %12, align 8
  br label %116

116:                                              ; preds = %108, %85
  %117 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %117) #13
  br label %141

118:                                              ; preds = %69, %59
  %119 = load %29*, %29** %10, align 8
  %120 = getelementptr inbounds %29, %29* %119, i32 0, i32 0
  %121 = bitcast %30* %120 to %7**
  %122 = load %7*, %7** %121, align 8
  %123 = load %29*, %29** %6, align 8
  %124 = getelementptr inbounds %29, %29* %123, i32 0, i32 0
  %125 = bitcast %30* %124 to %28**
  %126 = load %28*, %28** %125, align 8
  %127 = call %29* @zend_hash_find(%7* %122, %28* %126)
  store %29* %127, %29** %12, align 8
  %128 = icmp eq %29* %127, null
  br i1 %128, label %129, label %140

129:                                              ; preds = %118
  %130 = call i32 @_array_init(%29* %11, i32 0)
  %131 = load %29*, %29** %10, align 8
  %132 = getelementptr inbounds %29, %29* %131, i32 0, i32 0
  %133 = bitcast %30* %132 to %7**
  %134 = load %7*, %7** %133, align 8
  %135 = load %29*, %29** %6, align 8
  %136 = getelementptr inbounds %29, %29* %135, i32 0, i32 0
  %137 = bitcast %30* %136 to %28**
  %138 = load %28*, %28** %137, align 8
  %139 = call %29* @_zend_hash_update(%7* %134, %28* %138, %29* %11)
  store %29* %139, %29** %12, align 8
  br label %140

140:                                              ; preds = %129, %118
  br label %141

141:                                              ; preds = %140, %116
  %142 = load %29*, %29** %12, align 8
  %143 = call zeroext i8 @1468(%29* %142)
  %144 = zext i8 %143 to i32
  %145 = icmp ne i32 %144, 7
  br i1 %145, label %146, label %150

146:                                              ; preds = %141
  %147 = load %29*, %29** %12, align 8
  call void @1491(%29* %147)
  %148 = load %29*, %29** %12, align 8
  %149 = call i32 @_array_init(%29* %148, i32 0)
  br label %150

150:                                              ; preds = %146, %141
  %151 = load %29*, %29** %8, align 8
  %152 = icmp ne %29* %151, null
  br i1 %152, label %153, label %166

153:                                              ; preds = %150
  %154 = load %29*, %29** %8, align 8
  %155 = call zeroext i8 @1468(%29* %154)
  %156 = zext i8 %155 to i32
  %157 = icmp eq i32 %156, 6
  br i1 %157, label %158, label %185

158:                                              ; preds = %153
  %159 = load %29*, %29** %8, align 8
  %160 = getelementptr inbounds %29, %29* %159, i32 0, i32 0
  %161 = bitcast %30* %160 to %28**
  %162 = load %28*, %28** %161, align 8
  %163 = getelementptr inbounds %28, %28* %162, i32 0, i32 2
  %164 = load i64, i64* %163, align 8
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %185

166:                                              ; preds = %158, %150
  br label %167

167:                                              ; preds = %166
  %168 = load %29*, %29** %7, align 8
  %169 = getelementptr inbounds %29, %29* %168, i32 0, i32 1
  %170 = bitcast %31* %169 to %83*
  %171 = getelementptr inbounds %83, %83* %170, i32 0, i32 1
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = and i32 %173, 4
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %179

176:                                              ; preds = %167
  %177 = load %29*, %29** %7, align 8
  %178 = call i32 @1485(%29* %177)
  br label %179

179:                                              ; preds = %176, %167
  br label %180

180:                                              ; preds = %179
  br label %181

181:                                              ; preds = %180
  %182 = load %29*, %29** %12, align 8
  %183 = load %29*, %29** %7, align 8
  %184 = call i32 @add_next_index_zval(%29* %182, %29* %183)
  br label %193

185:                                              ; preds = %158, %153
  %186 = load %29*, %29** %12, align 8
  %187 = getelementptr inbounds %29, %29* %186, i32 0, i32 0
  %188 = bitcast %30* %187 to %7**
  %189 = load %7*, %7** %188, align 8
  %190 = load %29*, %29** %8, align 8
  %191 = load %29*, %29** %7, align 8
  %192 = call i32 @array_set_zval_key(%7* %189, %29* %190, %29* %191)
  br label %193

193:                                              ; preds = %185, %181
  store i32 0, i32* %13, align 4
  br label %194

194:                                              ; preds = %193, %50
  %195 = bitcast %29** %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %195) #13
  %196 = bitcast %29* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %196) #13
  %197 = load i32, i32* %13, align 4
  switch i32 %197, label %200 [
    i32 0, label %198
    i32 2, label %199
  ]

198:                                              ; preds = %194
  br label %199

199:                                              ; preds = %5, %5, %198, %194, %34, %19
  ret void

200:                                              ; preds = %194
  unreachable
}

declare dso_local i32 @zend_parse_ini_file(%99*, i8 zeroext, i32, void (%29*, %29*, %29*, i32, i8*)*, i8*) #1

; Function Attrs: allocsize(0)
declare dso_local noalias i8* @_emalloc(i64) #12

declare dso_local i32 @zend_parse_ini_string(i8*, i8 zeroext, i32, void (%29*, %29*, %29*, i32, i8*)*, i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @getloadavg(double*, i32) #5

declare dso_local i32 @add_index_double(%29*, i64, double) #1

declare dso_local i32 @zend_parse_arg_str_slow(%29*, %28**) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal %28* @1499(i64 %0, i32 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca %28*, align 8
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #13
  %7 = load i32, i32* %4, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %2
  %10 = load i64, i64* %3, align 8
  %11 = add i64 ptrtoint (i8* getelementptr inbounds (%28, %28* null, i32 0, i32 3, i32 0) to i64), %10
  %12 = add i64 %11, 1
  %13 = add i64 %12, 8
  %14 = sub i64 %13, 1
  %15 = and i64 %14, -8
  %16 = call noalias i8* @__zend_malloc(i64 %15) #17
  br label %25

17:                                               ; preds = %2
  %18 = load i64, i64* %3, align 8
  %19 = add i64 ptrtoint (i8* getelementptr inbounds (%28, %28* null, i32 0, i32 3, i32 0) to i64), %18
  %20 = add i64 %19, 1
  %21 = add i64 %20, 8
  %22 = sub i64 %21, 1
  %23 = and i64 %22, -8
  %24 = call noalias i8* @_emalloc(i64 %23) #17
  br label %25

25:                                               ; preds = %17, %9
  %26 = phi i8* [ %16, %9 ], [ %24, %17 ]
  %27 = bitcast i8* %26 to %28*
  store %28* %27, %28** %5, align 8
  %28 = load %28*, %28** %5, align 8
  %29 = getelementptr inbounds %28, %28* %28, i32 0, i32 0
  %30 = getelementptr inbounds %8, %8* %29, i32 0, i32 0
  store i32 1, i32* %30, align 8
  %31 = load i32, i32* %4, align 4
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i64
  %34 = select i1 %32, i32 1, i32 0
  %35 = shl i32 %34, 8
  %36 = or i32 6, %35
  %37 = load %28*, %28** %5, align 8
  %38 = getelementptr inbounds %28, %28* %37, i32 0, i32 0
  %39 = getelementptr inbounds %8, %8* %38, i32 0, i32 1
  %40 = bitcast %9* %39 to i32*
  store i32 %36, i32* %40, align 4
  %41 = load %28*, %28** %5, align 8
  call void @1500(%28* %41)
  %42 = load i64, i64* %3, align 8
  %43 = load %28*, %28** %5, align 8
  %44 = getelementptr inbounds %28, %28* %43, i32 0, i32 2
  store i64 %42, i64* %44, align 8
  %45 = load %28*, %28** %5, align 8
  %46 = bitcast %28** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #13
  ret %28* %45
}

; Function Attrs: allocsize(0)
declare dso_local noalias i8* @__zend_malloc(i64) #12

; Function Attrs: alwaysinline nounwind uwtable
define internal void @1500(%28* %0) #2 {
  %2 = alloca %28*, align 8
  store %28* %0, %28** %2, align 8
  %3 = load %28*, %28** %2, align 8
  %4 = getelementptr inbounds %28, %28* %3, i32 0, i32 1
  store i64 0, i64* %4, align 8
  ret void
}

declare dso_local i32 @zend_parse_arg_long_cap_slow(%29*, i64*) #1

declare dso_local i32 @zend_parse_arg_long_slow(%29*, i64*) #1

declare dso_local i32 @zend_parse_arg_bool_slow(%29*, i8*) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal %28* @1501(%28* %0) #2 {
  %2 = alloca %28*, align 8
  store %28* %0, %28** %2, align 8
  %3 = load %28*, %28** %2, align 8
  %4 = getelementptr inbounds %28, %28* %3, i32 0, i32 0
  %5 = getelementptr inbounds %8, %8* %4, i32 0, i32 1
  %6 = bitcast %9* %5 to %93*
  %7 = getelementptr inbounds %93, %93* %6, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = and i32 %9, 2
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %1
  %13 = load %28*, %28** %2, align 8
  %14 = getelementptr inbounds %28, %28* %13, i32 0, i32 0
  %15 = getelementptr inbounds %8, %8* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, 1
  store i32 %17, i32* %15, align 8
  br label %18

18:                                               ; preds = %12, %1
  %19 = load %28*, %28** %2, align 8
  ret %28* %19
}

declare dso_local %28* @_zval_get_string_func(%29*) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i8 @1502(i8* %0, i64 %1, i64* %2, double* %3, i32 %4, i32* %5) #2 {
  %7 = alloca i8, align 1
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca double*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 8
  store i8* %0, i8** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64* %2, i64** %10, align 8
  store double* %3, double** %11, align 8
  store i32 %4, i32* %12, align 4
  store i32* %5, i32** %13, align 8
  %14 = load i8*, i8** %8, align 8
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp sgt i32 %16, 57
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  store i8 0, i8* %7, align 1
  br label %27

19:                                               ; preds = %6
  %20 = load i8*, i8** %8, align 8
  %21 = load i64, i64* %9, align 8
  %22 = load i64*, i64** %10, align 8
  %23 = load double*, double** %11, align 8
  %24 = load i32, i32* %12, align 4
  %25 = load i32*, i32** %13, align 8
  %26 = call zeroext i8 @_is_numeric_string_ex(i8* %20, i64 %21, i64* %22, double* %23, i32 %24, i32* %25)
  store i8 %26, i8* %7, align 1
  br label %27

27:                                               ; preds = %19, %18
  %28 = load i8, i8* %7, align 1
  ret i8 %28
}

declare dso_local zeroext i8 @_is_numeric_string_ex(i8*, i64, i64*, double*, i32, i32*) #1

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #5

declare dso_local i32 @zend_parse_arg_double_slow(%29*, double*) #1

declare dso_local i32 @add_assoc_str_ex(%29*, i8*, i64, %28*) #1

declare dso_local i32 @add_index_str(%29*, i64, %28*) #1

declare dso_local %29* @_zend_hash_update(%7*, %28*, %29*) #1

declare dso_local i32 @zend_fcall_info_init(%29*, i32, %38*, %39*, %28**, i8**) #1

declare dso_local void @_efree_24(i8*) #1

declare dso_local void @zend_error(i32, i8*, ...) #1

declare dso_local i32 @_call_user_function_ex(%29*, %29*, %29*, i32, %29*, i32) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal i8* @1503(%7* %0, i8* %1, i64 %2, i8* %3) #2 {
  %5 = alloca i8*, align 8
  %6 = alloca %7*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %29, align 8
  %11 = alloca %29*, align 8
  %12 = alloca i32, align 4
  store %7* %0, %7** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i8* %3, i8** %9, align 8
  %13 = bitcast %29* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %13) #13
  %14 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #13
  br label %15

15:                                               ; preds = %4
  %16 = load i8*, i8** %9, align 8
  %17 = getelementptr inbounds %29, %29* %10, i32 0, i32 0
  %18 = bitcast %30* %17 to i8**
  store i8* %16, i8** %18, align 8
  %19 = getelementptr inbounds %29, %29* %10, i32 0, i32 1
  %20 = bitcast %31* %19 to i32*
  store i32 17, i32* %20, align 8
  br label %21

21:                                               ; preds = %15
  br label %22

22:                                               ; preds = %21
  %23 = load %7*, %7** %6, align 8
  %24 = load i8*, i8** %7, align 8
  %25 = load i64, i64* %8, align 8
  %26 = call %29* @_zend_hash_str_update(%7* %23, i8* %24, i64 %25, %29* %10)
  store %29* %26, %29** %11, align 8
  %27 = load %29*, %29** %11, align 8
  %28 = icmp ne %29* %27, null
  br i1 %28, label %29, label %49

29:                                               ; preds = %22
  br label %30

30:                                               ; preds = %29
  %31 = load %29*, %29** %11, align 8
  %32 = getelementptr inbounds %29, %29* %31, i32 0, i32 0
  %33 = bitcast %30* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ne i8* %34, null
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = sext i32 %37 to i64
  %39 = call i64 @llvm.expect.i64(i64 %38, i64 0)
  %40 = icmp ne i64 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %30
  unreachable

42:                                               ; preds = %30
  br label %43

43:                                               ; preds = %42
  br label %44

44:                                               ; preds = %43
  %45 = load %29*, %29** %11, align 8
  %46 = getelementptr inbounds %29, %29* %45, i32 0, i32 0
  %47 = bitcast %30* %46 to i8**
  %48 = load i8*, i8** %47, align 8
  store i8* %48, i8** %5, align 8
  store i32 1, i32* %12, align 4
  br label %50

49:                                               ; preds = %22
  store i8* null, i8** %5, align 8
  store i32 1, i32* %12, align 4
  br label %50

50:                                               ; preds = %49, %44
  %51 = bitcast %29** %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #13
  %52 = bitcast %29* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %52) #13
  %53 = load i8*, i8** %5, align 8
  ret i8* %53
}

declare dso_local %29* @_zend_hash_str_update(%7*, i8*, i64, %29*) #1

declare dso_local i32 @add_assoc_null_ex(%29*, i8*, i64) #1

; Function Attrs: alwaysinline nounwind uwtable
define internal %29* @1504(%7* %0, %28* %1, %29* %2) #2 {
  %4 = alloca %29*, align 8
  %5 = alloca %7*, align 8
  %6 = alloca %28*, align 8
  %7 = alloca %29*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store %7* %0, %7** %5, align 8
  store %28* %1, %28** %6, align 8
  store %29* %2, %29** %7, align 8
  %10 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load %28*, %28** %6, align 8
  %12 = getelementptr inbounds %28, %28* %11, i32 0, i32 3
  %13 = getelementptr inbounds [1 x i8], [1 x i8]* %12, i32 0, i32 0
  %14 = load %28*, %28** %6, align 8
  %15 = getelementptr inbounds %28, %28* %14, i32 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = call i32 @1505(i8* %13, i64 %16, i64* %8)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %3
  %20 = load %7*, %7** %5, align 8
  %21 = load i64, i64* %8, align 8
  %22 = load %29*, %29** %7, align 8
  %23 = call %29* @_zend_hash_index_update(%7* %20, i64 %21, %29* %22)
  store %29* %23, %29** %4, align 8
  store i32 1, i32* %9, align 4
  br label %29

24:                                               ; preds = %3
  %25 = load %7*, %7** %5, align 8
  %26 = load %28*, %28** %6, align 8
  %27 = load %29*, %29** %7, align 8
  %28 = call %29* @_zend_hash_update(%7* %25, %28* %26, %29* %27)
  store %29* %28, %29** %4, align 8
  store i32 1, i32* %9, align 4
  br label %29

29:                                               ; preds = %24, %19
  %30 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #13
  %31 = load %29*, %29** %4, align 8
  ret %29* %31
}

; Function Attrs: alwaysinline nounwind uwtable
define internal i32 @1505(i8* %0, i64 %1, i64* %2) #2 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64* %2, i64** %7, align 8
  %10 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #13
  %11 = load i8*, i8** %5, align 8
  store i8* %11, i8** %8, align 8
  %12 = load i8*, i8** %8, align 8
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp sgt i32 %14, 57
  br i1 %15, label %16, label %17

16:                                               ; preds = %3
  store i32 0, i32* %4, align 4
  store i32 1, i32* %9, align 4
  br label %48

17:                                               ; preds = %3
  %18 = load i8*, i8** %8, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp slt i32 %20, 48
  br i1 %21, label %22, label %42

22:                                               ; preds = %17
  %23 = load i8*, i8** %8, align 8
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp ne i32 %25, 45
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store i32 0, i32* %4, align 4
  store i32 1, i32* %9, align 4
  br label %48

28:                                               ; preds = %22
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %8, align 8
  %31 = load i8*, i8** %8, align 8
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp sgt i32 %33, 57
  br i1 %34, label %40, label %35

35:                                               ; preds = %28
  %36 = load i8*, i8** %8, align 8
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp slt i32 %38, 48
  br i1 %39, label %40, label %41

40:                                               ; preds = %35, %28
  store i32 0, i32* %4, align 4
  store i32 1, i32* %9, align 4
  br label %48

41:                                               ; preds = %35
  br label %42

42:                                               ; preds = %41, %17
  br label %43

43:                                               ; preds = %42
  %44 = load i8*, i8** %5, align 8
  %45 = load i64, i64* %6, align 8
  %46 = load i64*, i64** %7, align 8
  %47 = call i32 @_zend_handle_numeric_str_ex(i8* %44, i64 %45, i64* %46)
  store i32 %47, i32* %4, align 4
  store i32 1, i32* %9, align 4
  br label %48

48:                                               ; preds = %43, %40, %27, %16
  %49 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #13
  %50 = load i32, i32* %4, align 4
  ret i32 %50
}

declare dso_local i32 @_zend_handle_numeric_str_ex(i8*, i64, i64*) #1

declare dso_local void @_zval_dtor_func(%82*) #1

declare dso_local void @zend_llist_apply(%40*, void (i8*)*) #1

; Function Attrs: nounwind uwtable
define internal void @1506(%95* %0) #0 {
  %2 = alloca %95*, align 8
  %3 = alloca %29, align 8
  %4 = alloca %29*, align 8
  %5 = alloca %29*, align 8
  %6 = alloca %29*, align 8
  store %95* %0, %95** %2, align 8
  %7 = bitcast %29* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %7) #13
  %8 = bitcast %29** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #13
  %9 = load %95*, %95** %2, align 8
  %10 = getelementptr inbounds %95, %95* %9, i32 0, i32 0
  %11 = load %29*, %29** %10, align 8
  %12 = getelementptr inbounds %29, %29* %11, i64 0
  store %29* %12, %29** %4, align 8
  %13 = load %95*, %95** %2, align 8
  %14 = getelementptr inbounds %95, %95* %13, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %100, label %17

17:                                               ; preds = %1
  %18 = load %95*, %95** %2, align 8
  %19 = getelementptr inbounds %95, %95* %18, i32 0, i32 2
  store i32 1, i32* %19, align 4
  %20 = load %29*, %29** %4, align 8
  %21 = load %95*, %95** %2, align 8
  %22 = getelementptr inbounds %95, %95* %21, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = sub nsw i32 %23, 1
  %25 = load %95*, %95** %2, align 8
  %26 = getelementptr inbounds %95, %95* %25, i32 0, i32 0
  %27 = load %29*, %29** %26, align 8
  %28 = getelementptr inbounds %29, %29* %27, i64 1
  %29 = call i32 @_call_user_function_ex(%29* null, %29* %20, %29* %3, i32 %24, %29* %28, i32 1)
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %17
  call void @1491(%29* %3)
  br label %97

32:                                               ; preds = %17
  %33 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %33) #13
  %34 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %34) #13
  %35 = load %29*, %29** %4, align 8
  %36 = call zeroext i8 @1468(%29* %35)
  %37 = zext i8 %36 to i32
  %38 = icmp eq i32 %37, 6
  br i1 %38, label %39, label %46

39:                                               ; preds = %32
  %40 = load %29*, %29** %4, align 8
  %41 = getelementptr inbounds %29, %29* %40, i32 0, i32 0
  %42 = bitcast %30* %41 to %28**
  %43 = load %28*, %28** %42, align 8
  %44 = getelementptr inbounds %28, %28* %43, i32 0, i32 3
  %45 = getelementptr inbounds [1 x i8], [1 x i8]* %44, i32 0, i32 0
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @1451, i32 0, i32 0), i8* %45)
  br label %94

46:                                               ; preds = %32
  %47 = load %29*, %29** %4, align 8
  %48 = call zeroext i8 @1468(%29* %47)
  %49 = zext i8 %48 to i32
  %50 = icmp eq i32 %49, 7
  br i1 %50, label %51, label %92

51:                                               ; preds = %46
  %52 = load %29*, %29** %4, align 8
  %53 = getelementptr inbounds %29, %29* %52, i32 0, i32 0
  %54 = bitcast %30* %53 to %7**
  %55 = load %7*, %7** %54, align 8
  %56 = call %29* @zend_hash_index_find(%7* %55, i64 0)
  store %29* %56, %29** %5, align 8
  %57 = icmp ne %29* %56, null
  br i1 %57, label %58, label %92

58:                                               ; preds = %51
  %59 = load %29*, %29** %4, align 8
  %60 = getelementptr inbounds %29, %29* %59, i32 0, i32 0
  %61 = bitcast %30* %60 to %7**
  %62 = load %7*, %7** %61, align 8
  %63 = call %29* @zend_hash_index_find(%7* %62, i64 1)
  store %29* %63, %29** %6, align 8
  %64 = icmp ne %29* %63, null
  br i1 %64, label %65, label %92

65:                                               ; preds = %58
  %66 = load %29*, %29** %5, align 8
  %67 = call zeroext i8 @1468(%29* %66)
  %68 = zext i8 %67 to i32
  %69 = icmp eq i32 %68, 8
  br i1 %69, label %70, label %92

70:                                               ; preds = %65
  %71 = load %29*, %29** %6, align 8
  %72 = call zeroext i8 @1468(%29* %71)
  %73 = zext i8 %72 to i32
  %74 = icmp eq i32 %73, 6
  br i1 %74, label %75, label %92

75:                                               ; preds = %70
  %76 = load %29*, %29** %5, align 8
  %77 = getelementptr inbounds %29, %29* %76, i32 0, i32 0
  %78 = bitcast %30* %77 to %15**
  %79 = load %15*, %15** %78, align 8
  %80 = getelementptr inbounds %15, %15* %79, i32 0, i32 2
  %81 = load %6*, %6** %80, align 8
  %82 = getelementptr inbounds %6, %6* %81, i32 0, i32 1
  %83 = load %28*, %28** %82, align 8
  %84 = getelementptr inbounds %28, %28* %83, i32 0, i32 3
  %85 = getelementptr inbounds [1 x i8], [1 x i8]* %84, i32 0, i32 0
  %86 = load %29*, %29** %6, align 8
  %87 = getelementptr inbounds %29, %29* %86, i32 0, i32 0
  %88 = bitcast %30* %87 to %28**
  %89 = load %28*, %28** %88, align 8
  %90 = getelementptr inbounds %28, %28* %89, i32 0, i32 3
  %91 = getelementptr inbounds [1 x i8], [1 x i8]* %90, i32 0, i32 0
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @1452, i32 0, i32 0), i8* %85, i8* %91)
  br label %93

92:                                               ; preds = %70, %65, %58, %51, %46
  call void (i8*, i32, i8*, ...) @php_error_docref0(i8* null, i32 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @1453, i32 0, i32 0))
  br label %93

93:                                               ; preds = %92, %75
  br label %94

94:                                               ; preds = %93, %39
  %95 = bitcast %29** %6 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %95) #13
  %96 = bitcast %29** %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %96) #13
  br label %97

97:                                               ; preds = %94, %31
  %98 = load %95*, %95** %2, align 8
  %99 = getelementptr inbounds %95, %95* %98, i32 0, i32 2
  store i32 0, i32* %99, align 4
  br label %100

100:                                              ; preds = %97, %1
  %101 = bitcast %29** %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %101) #13
  %102 = bitcast %29* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %102) #13
  ret void
}

declare dso_local i32 @zend_binary_zval_strcmp(%29*, %29*) #1

declare dso_local i32 @zend_compare_arrays(%29*, %29*) #1

declare dso_local i32 @zend_compare_objects(%29*, %29*) #1

declare dso_local i64 @zend_atol(i8*, i32) #1

declare dso_local %29* @zend_hash_find(%7*, %28*) #1

declare dso_local i32 @add_next_index_zval(%29*, %29*) #1

declare dso_local i32 @array_set_zval_key(%7*, %29*, %29*) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { alwaysinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone willreturn }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { nounwind readnone }
attributes #15 = { nounwind readonly }
attributes #16 = { allocsize(1) }
attributes #17 = { allocsize(0) }
attributes #18 = { nounwind returns_twice }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
