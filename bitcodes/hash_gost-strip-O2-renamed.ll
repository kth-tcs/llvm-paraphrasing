; ModuleID = 'hash_gost-strip-O2-renamed.bc'
source_filename = "/home/travis/build/orestisfl/compilation-database/build/php-src/ext/hash/hash_gost.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { void (i8*)*, void (i8*, i8*, i32)*, void (i8*, i8*)*, i32 (i8*, i8*, i8*)*, i32, i32, i32, i8 }
%1 = type { [16 x i32], [2 x i32], i8, [32 x i8], [4 x [256 x i32]]* }

@0 = internal constant [4 x [256 x i32]] [[256 x i32] [i32 466944, i32 479232, i32 477184, i32 462848, i32 485376, i32 475136, i32 458752, i32 487424, i32 471040, i32 481280, i32 460800, i32 483328, i32 473088, i32 489472, i32 468992, i32 464896, i32 368640, i32 380928, i32 378880, i32 364544, i32 387072, i32 376832, i32 360448, i32 389120, i32 372736, i32 382976, i32 362496, i32 385024, i32 374784, i32 391168, i32 370688, i32 366592, i32 139264, i32 151552, i32 149504, i32 135168, i32 157696, i32 147456, i32 131072, i32 159744, i32 143360, i32 153600, i32 133120, i32 155648, i32 145408, i32 161792, i32 141312, i32 137216, i32 401408, i32 413696, i32 411648, i32 397312, i32 419840, i32 409600, i32 393216, i32 421888, i32 405504, i32 415744, i32 395264, i32 417792, i32 407552, i32 423936, i32 403456, i32 399360, i32 204800, i32 217088, i32 215040, i32 200704, i32 223232, i32 212992, i32 196608, i32 225280, i32 208896, i32 219136, i32 198656, i32 221184, i32 210944, i32 227328, i32 206848, i32 202752, i32 434176, i32 446464, i32 444416, i32 430080, i32 452608, i32 442368, i32 425984, i32 454656, i32 438272, i32 448512, i32 428032, i32 450560, i32 440320, i32 456704, i32 436224, i32 432128, i32 499712, i32 512000, i32 509952, i32 495616, i32 518144, i32 507904, i32 491520, i32 520192, i32 503808, i32 514048, i32 493568, i32 516096, i32 505856, i32 522240, i32 501760, i32 497664, i32 335872, i32 348160, i32 346112, i32 331776, i32 354304, i32 344064, i32 327680, i32 356352, i32 339968, i32 350208, i32 329728, i32 352256, i32 342016, i32 358400, i32 337920, i32 333824, i32 73728, i32 86016, i32 83968, i32 69632, i32 92160, i32 81920, i32 65536, i32 94208, i32 77824, i32 88064, i32 67584, i32 90112, i32 79872, i32 96256, i32 75776, i32 71680, i32 106496, i32 118784, i32 116736, i32 102400, i32 124928, i32 114688, i32 98304, i32 126976, i32 110592, i32 120832, i32 100352, i32 122880, i32 112640, i32 129024, i32 108544, i32 104448, i32 270336, i32 282624, i32 280576, i32 266240, i32 288768, i32 278528, i32 262144, i32 290816, i32 274432, i32 284672, i32 264192, i32 286720, i32 276480, i32 292864, i32 272384, i32 268288, i32 40960, i32 53248, i32 51200, i32 36864, i32 59392, i32 49152, i32 32768, i32 61440, i32 45056, i32 55296, i32 34816, i32 57344, i32 47104, i32 63488, i32 43008, i32 38912, i32 8192, i32 20480, i32 18432, i32 4096, i32 26624, i32 16384, i32 0, i32 28672, i32 12288, i32 22528, i32 2048, i32 24576, i32 14336, i32 30720, i32 10240, i32 6144, i32 237568, i32 249856, i32 247808, i32 233472, i32 256000, i32 245760, i32 229376, i32 258048, i32 241664, i32 251904, i32 231424, i32 253952, i32 243712, i32 260096, i32 239616, i32 235520, i32 172032, i32 184320, i32 182272, i32 167936, i32 190464, i32 180224, i32 163840, i32 192512, i32 176128, i32 186368, i32 165888, i32 188416, i32 178176, i32 194560, i32 174080, i32 169984, i32 303104, i32 315392, i32 313344, i32 299008, i32 321536, i32 311296, i32 294912, i32 323584, i32 307200, i32 317440, i32 296960, i32 319488, i32 309248, i32 325632, i32 305152, i32 301056], [256 x i32] [i32 61341696, i32 62914560, i32 59244544, i32 65536000, i32 63963136, i32 60293120, i32 60817408, i32 59768832, i32 66060288, i32 66584576, i32 65011712, i32 62390272, i32 61865984, i32 58720256, i32 63438848, i32 64487424, i32 111673344, i32 113246208, i32 109576192, i32 115867648, i32 114294784, i32 110624768, i32 111149056, i32 110100480, i32 116391936, i32 116916224, i32 115343360, i32 112721920, i32 112197632, i32 109051904, i32 113770496, i32 114819072, i32 86507520, i32 88080384, i32 84410368, i32 90701824, i32 89128960, i32 85458944, i32 85983232, i32 84934656, i32 91226112, i32 91750400, i32 90177536, i32 87556096, i32 87031808, i32 83886080, i32 88604672, i32 89653248, i32 11010048, i32 12582912, i32 8912896, i32 15204352, i32 13631488, i32 9961472, i32 10485760, i32 9437184, i32 15728640, i32 16252928, i32 14680064, i32 12058624, i32 11534336, i32 8388608, i32 13107200, i32 14155776, i32 2621440, i32 4194304, i32 524288, i32 6815744, i32 5242880, i32 1572864, i32 2097152, i32 1048576, i32 7340032, i32 7864320, i32 6291456, i32 3670016, i32 3145728, i32 0, i32 4718592, i32 5767168, i32 69730304, i32 71303168, i32 67633152, i32 73924608, i32 72351744, i32 68681728, i32 69206016, i32 68157440, i32 74448896, i32 74973184, i32 73400320, i32 70778880, i32 70254592, i32 67108864, i32 71827456, i32 72876032, i32 78118912, i32 79691776, i32 76021760, i32 82313216, i32 80740352, i32 77070336, i32 77594624, i32 76546048, i32 82837504, i32 83361792, i32 81788928, i32 79167488, i32 78643200, i32 75497472, i32 80216064, i32 81264640, i32 128450560, i32 130023424, i32 126353408, i32 132644864, i32 131072000, i32 127401984, i32 127926272, i32 126877696, i32 133169152, i32 133693440, i32 132120576, i32 129499136, i32 128974848, i32 125829120, i32 130547712, i32 131596288, i32 120061952, i32 121634816, i32 117964800, i32 124256256, i32 122683392, i32 119013376, i32 119537664, i32 118489088, i32 124780544, i32 125304832, i32 123731968, i32 121110528, i32 120586240, i32 117440512, i32 122159104, i32 123207680, i32 36175872, i32 37748736, i32 34078720, i32 40370176, i32 38797312, i32 35127296, i32 35651584, i32 34603008, i32 40894464, i32 41418752, i32 39845888, i32 37224448, i32 36700160, i32 33554432, i32 38273024, i32 39321600, i32 52953088, i32 54525952, i32 50855936, i32 57147392, i32 55574528, i32 51904512, i32 52428800, i32 51380224, i32 57671680, i32 58195968, i32 56623104, i32 54001664, i32 53477376, i32 50331648, i32 55050240, i32 56098816, i32 103284736, i32 104857600, i32 101187584, i32 107479040, i32 105906176, i32 102236160, i32 102760448, i32 101711872, i32 108003328, i32 108527616, i32 106954752, i32 104333312, i32 103809024, i32 100663296, i32 105381888, i32 106430464, i32 94896128, i32 96468992, i32 92798976, i32 99090432, i32 97517568, i32 93847552, i32 94371840, i32 93323264, i32 99614720, i32 100139008, i32 98566144, i32 95944704, i32 95420416, i32 92274688, i32 96993280, i32 98041856, i32 19398656, i32 20971520, i32 17301504, i32 23592960, i32 22020096, i32 18350080, i32 18874368, i32 17825792, i32 24117248, i32 24641536, i32 23068672, i32 20447232, i32 19922944, i32 16777216, i32 21495808, i32 22544384, i32 44564480, i32 46137344, i32 42467328, i32 48758784, i32 47185920, i32 43515904, i32 44040192, i32 42991616, i32 49283072, i32 49807360, i32 48234496, i32 45613056, i32 45088768, i32 41943040, i32 46661632, i32 47710208, i32 27787264, i32 29360128, i32 25690112, i32 31981568, i32 30408704, i32 26738688, i32 27262976, i32 26214400, i32 32505856, i32 33030144, i32 31457280, i32 28835840, i32 28311552, i32 25165824, i32 29884416, i32 30932992], [256 x i32] [i32 805306370, i32 1610612738, i32 939524098, i32 134217730, i32 671088642, i32 2013265922, i32 1744830466, i32 1073741826, i32 536870914, i32 1342177282, i32 1207959554, i32 1879048194, i32 2, i32 402653186, i32 1476395010, i32 268435458, i32 -1342177275, i32 -536870907, i32 -1207959547, i32 -2013265915, i32 -1476395003, i32 -134217723, i32 -402653179, i32 -1073741819, i32 -1610612731, i32 -805306363, i32 -939524091, i32 -268435451, i32 -2147483643, i32 -1744830459, i32 -671088635, i32 -1879048187, i32 805306373, i32 1610612741, i32 939524101, i32 134217733, i32 671088645, i32 2013265925, i32 1744830469, i32 1073741829, i32 536870917, i32 1342177285, i32 1207959557, i32 1879048197, i32 5, i32 402653189, i32 1476395013, i32 268435461, i32 805306368, i32 1610612736, i32 939524096, i32 134217728, i32 671088640, i32 2013265920, i32 1744830464, i32 1073741824, i32 536870912, i32 1342177280, i32 1207959552, i32 1879048192, i32 0, i32 402653184, i32 1476395008, i32 268435456, i32 -1342177277, i32 -536870909, i32 -1207959549, i32 -2013265917, i32 -1476395005, i32 -134217725, i32 -402653181, i32 -1073741821, i32 -1610612733, i32 -805306365, i32 -939524093, i32 -268435453, i32 -2147483645, i32 -1744830461, i32 -671088637, i32 -1879048189, i32 805306369, i32 1610612737, i32 939524097, i32 134217729, i32 671088641, i32 2013265921, i32 1744830465, i32 1073741825, i32 536870913, i32 1342177281, i32 1207959553, i32 1879048193, i32 1, i32 402653185, i32 1476395009, i32 268435457, i32 -1342177280, i32 -536870912, i32 -1207959552, i32 -2013265920, i32 -1476395008, i32 -134217728, i32 -402653184, i32 -1073741824, i32 -1610612736, i32 -805306368, i32 -939524096, i32 -268435456, i32 -2147483648, i32 -1744830464, i32 -671088640, i32 -1879048192, i32 -1342177274, i32 -536870906, i32 -1207959546, i32 -2013265914, i32 -1476395002, i32 -134217722, i32 -402653178, i32 -1073741818, i32 -1610612730, i32 -805306362, i32 -939524090, i32 -268435450, i32 -2147483642, i32 -1744830458, i32 -671088634, i32 -1879048186, i32 -1342177279, i32 -536870911, i32 -1207959551, i32 -2013265919, i32 -1476395007, i32 -134217727, i32 -402653183, i32 -1073741823, i32 -1610612735, i32 -805306367, i32 -939524095, i32 -268435455, i32 -2147483647, i32 -1744830463, i32 -671088639, i32 -1879048191, i32 805306371, i32 1610612739, i32 939524099, i32 134217731, i32 671088643, i32 2013265923, i32 1744830467, i32 1073741827, i32 536870915, i32 1342177283, i32 1207959555, i32 1879048195, i32 3, i32 402653187, i32 1476395011, i32 268435459, i32 805306372, i32 1610612740, i32 939524100, i32 134217732, i32 671088644, i32 2013265924, i32 1744830468, i32 1073741828, i32 536870916, i32 1342177284, i32 1207959556, i32 1879048196, i32 4, i32 402653188, i32 1476395012, i32 268435460, i32 -1342177278, i32 -536870910, i32 -1207959550, i32 -2013265918, i32 -1476395006, i32 -134217726, i32 -402653182, i32 -1073741822, i32 -1610612734, i32 -805306366, i32 -939524094, i32 -268435454, i32 -2147483646, i32 -1744830462, i32 -671088638, i32 -1879048190, i32 -1342177276, i32 -536870908, i32 -1207959548, i32 -2013265916, i32 -1476395004, i32 -134217724, i32 -402653180, i32 -1073741820, i32 -1610612732, i32 -805306364, i32 -939524092, i32 -268435452, i32 -2147483644, i32 -1744830460, i32 -671088636, i32 -1879048188, i32 805306374, i32 1610612742, i32 939524102, i32 134217734, i32 671088646, i32 2013265926, i32 1744830470, i32 1073741830, i32 536870918, i32 1342177286, i32 1207959558, i32 1879048198, i32 6, i32 402653190, i32 1476395014, i32 268435462, i32 -1342177273, i32 -536870905, i32 -1207959545, i32 -2013265913, i32 -1476395001, i32 -134217721, i32 -402653177, i32 -1073741817, i32 -1610612729, i32 -805306361, i32 -939524089, i32 -268435449, i32 -2147483641, i32 -1744830457, i32 -671088633, i32 -1879048185, i32 805306375, i32 1610612743, i32 939524103, i32 134217735, i32 671088647, i32 2013265927, i32 1744830471, i32 1073741831, i32 536870919, i32 1342177287, i32 1207959559, i32 1879048199, i32 7, i32 402653191, i32 1476395015, i32 268435463], [256 x i32] [i32 232, i32 216, i32 160, i32 136, i32 152, i32 248, i32 168, i32 200, i32 128, i32 208, i32 240, i32 184, i32 176, i32 192, i32 144, i32 224, i32 2024, i32 2008, i32 1952, i32 1928, i32 1944, i32 2040, i32 1960, i32 1992, i32 1920, i32 2000, i32 2032, i32 1976, i32 1968, i32 1984, i32 1936, i32 2016, i32 1768, i32 1752, i32 1696, i32 1672, i32 1688, i32 1784, i32 1704, i32 1736, i32 1664, i32 1744, i32 1776, i32 1720, i32 1712, i32 1728, i32 1680, i32 1760, i32 104, i32 88, i32 32, i32 8, i32 24, i32 120, i32 40, i32 72, i32 0, i32 80, i32 112, i32 56, i32 48, i32 64, i32 16, i32 96, i32 744, i32 728, i32 672, i32 648, i32 664, i32 760, i32 680, i32 712, i32 640, i32 720, i32 752, i32 696, i32 688, i32 704, i32 656, i32 736, i32 1000, i32 984, i32 928, i32 904, i32 920, i32 1016, i32 936, i32 968, i32 896, i32 976, i32 1008, i32 952, i32 944, i32 960, i32 912, i32 992, i32 1384, i32 1368, i32 1312, i32 1288, i32 1304, i32 1400, i32 1320, i32 1352, i32 1280, i32 1360, i32 1392, i32 1336, i32 1328, i32 1344, i32 1296, i32 1376, i32 616, i32 600, i32 544, i32 520, i32 536, i32 632, i32 552, i32 584, i32 512, i32 592, i32 624, i32 568, i32 560, i32 576, i32 528, i32 608, i32 1256, i32 1240, i32 1184, i32 1160, i32 1176, i32 1272, i32 1192, i32 1224, i32 1152, i32 1232, i32 1264, i32 1208, i32 1200, i32 1216, i32 1168, i32 1248, i32 360, i32 344, i32 288, i32 264, i32 280, i32 376, i32 296, i32 328, i32 256, i32 336, i32 368, i32 312, i32 304, i32 320, i32 272, i32 352, i32 488, i32 472, i32 416, i32 392, i32 408, i32 504, i32 424, i32 456, i32 384, i32 464, i32 496, i32 440, i32 432, i32 448, i32 400, i32 480, i32 1896, i32 1880, i32 1824, i32 1800, i32 1816, i32 1912, i32 1832, i32 1864, i32 1792, i32 1872, i32 1904, i32 1848, i32 1840, i32 1856, i32 1808, i32 1888, i32 872, i32 856, i32 800, i32 776, i32 792, i32 888, i32 808, i32 840, i32 768, i32 848, i32 880, i32 824, i32 816, i32 832, i32 784, i32 864, i32 1512, i32 1496, i32 1440, i32 1416, i32 1432, i32 1528, i32 1448, i32 1480, i32 1408, i32 1488, i32 1520, i32 1464, i32 1456, i32 1472, i32 1424, i32 1504, i32 1128, i32 1112, i32 1056, i32 1032, i32 1048, i32 1144, i32 1064, i32 1096, i32 1024, i32 1104, i32 1136, i32 1080, i32 1072, i32 1088, i32 1040, i32 1120, i32 1640, i32 1624, i32 1568, i32 1544, i32 1560, i32 1656, i32 1576, i32 1608, i32 1536, i32 1616, i32 1648, i32 1592, i32 1584, i32 1600, i32 1552, i32 1632]], align 16
@1 = internal constant [4 x [256 x i32]] [[256 x i32] [i32 184320, i32 172032, i32 174080, i32 176128, i32 180224, i32 165888, i32 169984, i32 178176, i32 190464, i32 188416, i32 192512, i32 163840, i32 182272, i32 167936, i32 186368, i32 194560, i32 512000, i32 499712, i32 501760, i32 503808, i32 507904, i32 493568, i32 497664, i32 505856, i32 518144, i32 516096, i32 520192, i32 491520, i32 509952, i32 495616, i32 514048, i32 522240, i32 151552, i32 139264, i32 141312, i32 143360, i32 147456, i32 133120, i32 137216, i32 145408, i32 157696, i32 155648, i32 159744, i32 131072, i32 149504, i32 135168, i32 153600, i32 161792, i32 20480, i32 8192, i32 10240, i32 12288, i32 16384, i32 2048, i32 6144, i32 14336, i32 26624, i32 24576, i32 28672, i32 0, i32 18432, i32 4096, i32 22528, i32 30720, i32 86016, i32 73728, i32 75776, i32 77824, i32 81920, i32 67584, i32 71680, i32 79872, i32 92160, i32 90112, i32 94208, i32 65536, i32 83968, i32 69632, i32 88064, i32 96256, i32 446464, i32 434176, i32 436224, i32 438272, i32 442368, i32 428032, i32 432128, i32 440320, i32 452608, i32 450560, i32 454656, i32 425984, i32 444416, i32 430080, i32 448512, i32 456704, i32 380928, i32 368640, i32 370688, i32 372736, i32 376832, i32 362496, i32 366592, i32 374784, i32 387072, i32 385024, i32 389120, i32 360448, i32 378880, i32 364544, i32 382976, i32 391168, i32 315392, i32 303104, i32 305152, i32 307200, i32 311296, i32 296960, i32 301056, i32 309248, i32 321536, i32 319488, i32 323584, i32 294912, i32 313344, i32 299008, i32 317440, i32 325632, i32 53248, i32 40960, i32 43008, i32 45056, i32 49152, i32 34816, i32 38912, i32 47104, i32 59392, i32 57344, i32 61440, i32 32768, i32 51200, i32 36864, i32 55296, i32 63488, i32 249856, i32 237568, i32 239616, i32 241664, i32 245760, i32 231424, i32 235520, i32 243712, i32 256000, i32 253952, i32 258048, i32 229376, i32 247808, i32 233472, i32 251904, i32 260096, i32 217088, i32 204800, i32 206848, i32 208896, i32 212992, i32 198656, i32 202752, i32 210944, i32 223232, i32 221184, i32 225280, i32 196608, i32 215040, i32 200704, i32 219136, i32 227328, i32 118784, i32 106496, i32 108544, i32 110592, i32 114688, i32 100352, i32 104448, i32 112640, i32 124928, i32 122880, i32 126976, i32 98304, i32 116736, i32 102400, i32 120832, i32 129024, i32 413696, i32 401408, i32 403456, i32 405504, i32 409600, i32 395264, i32 399360, i32 407552, i32 419840, i32 417792, i32 421888, i32 393216, i32 411648, i32 397312, i32 415744, i32 423936, i32 479232, i32 466944, i32 468992, i32 471040, i32 475136, i32 460800, i32 464896, i32 473088, i32 485376, i32 483328, i32 487424, i32 458752, i32 477184, i32 462848, i32 481280, i32 489472, i32 348160, i32 335872, i32 337920, i32 339968, i32 344064, i32 329728, i32 333824, i32 342016, i32 354304, i32 352256, i32 356352, i32 327680, i32 346112, i32 331776, i32 350208, i32 358400, i32 282624, i32 270336, i32 272384, i32 274432, i32 278528, i32 264192, i32 268288, i32 276480, i32 288768, i32 286720, i32 290816, i32 262144, i32 280576, i32 266240, i32 284672, i32 292864], [256 x i32] [i32 37224448, i32 41418752, i32 39845888, i32 40894464, i32 38273024, i32 35651584, i32 34078720, i32 33554432, i32 35127296, i32 39321600, i32 36175872, i32 34603008, i32 36700160, i32 38797312, i32 37748736, i32 40370176, i32 87556096, i32 91750400, i32 90177536, i32 91226112, i32 88604672, i32 85983232, i32 84410368, i32 83886080, i32 85458944, i32 89653248, i32 86507520, i32 84934656, i32 87031808, i32 89128960, i32 88080384, i32 90701824, i32 62390272, i32 66584576, i32 65011712, i32 66060288, i32 63438848, i32 60817408, i32 59244544, i32 58720256, i32 60293120, i32 64487424, i32 61341696, i32 59768832, i32 61865984, i32 63963136, i32 62914560, i32 65536000, i32 104333312, i32 108527616, i32 106954752, i32 108003328, i32 105381888, i32 102760448, i32 101187584, i32 100663296, i32 102236160, i32 106430464, i32 103284736, i32 101711872, i32 103809024, i32 105906176, i32 104857600, i32 107479040, i32 3670016, i32 7864320, i32 6291456, i32 7340032, i32 4718592, i32 2097152, i32 524288, i32 0, i32 1572864, i32 5767168, i32 2621440, i32 1048576, i32 3145728, i32 5242880, i32 4194304, i32 6815744, i32 129499136, i32 133693440, i32 132120576, i32 133169152, i32 130547712, i32 127926272, i32 126353408, i32 125829120, i32 127401984, i32 131596288, i32 128450560, i32 126877696, i32 128974848, i32 131072000, i32 130023424, i32 132644864, i32 20447232, i32 24641536, i32 23068672, i32 24117248, i32 21495808, i32 18874368, i32 17301504, i32 16777216, i32 18350080, i32 22544384, i32 19398656, i32 17825792, i32 19922944, i32 22020096, i32 20971520, i32 23592960, i32 70778880, i32 74973184, i32 73400320, i32 74448896, i32 71827456, i32 69206016, i32 67633152, i32 67108864, i32 68681728, i32 72876032, i32 69730304, i32 68157440, i32 70254592, i32 72351744, i32 71303168, i32 73924608, i32 121110528, i32 125304832, i32 123731968, i32 124780544, i32 122159104, i32 119537664, i32 117964800, i32 117440512, i32 119013376, i32 123207680, i32 120061952, i32 118489088, i32 120586240, i32 122683392, i32 121634816, i32 124256256, i32 12058624, i32 16252928, i32 14680064, i32 15728640, i32 13107200, i32 10485760, i32 8912896, i32 8388608, i32 9961472, i32 14155776, i32 11010048, i32 9437184, i32 11534336, i32 13631488, i32 12582912, i32 15204352, i32 54001664, i32 58195968, i32 56623104, i32 57671680, i32 55050240, i32 52428800, i32 50855936, i32 50331648, i32 51904512, i32 56098816, i32 52953088, i32 51380224, i32 53477376, i32 55574528, i32 54525952, i32 57147392, i32 45613056, i32 49807360, i32 48234496, i32 49283072, i32 46661632, i32 44040192, i32 42467328, i32 41943040, i32 43515904, i32 47710208, i32 44564480, i32 42991616, i32 45088768, i32 47185920, i32 46137344, i32 48758784, i32 112721920, i32 116916224, i32 115343360, i32 116391936, i32 113770496, i32 111149056, i32 109576192, i32 109051904, i32 110624768, i32 114819072, i32 111673344, i32 110100480, i32 112197632, i32 114294784, i32 113246208, i32 115867648, i32 95944704, i32 100139008, i32 98566144, i32 99614720, i32 96993280, i32 94371840, i32 92798976, i32 92274688, i32 93847552, i32 98041856, i32 94896128, i32 93323264, i32 95420416, i32 97517568, i32 96468992, i32 99090432, i32 79167488, i32 83361792, i32 81788928, i32 82837504, i32 80216064, i32 77594624, i32 76021760, i32 75497472, i32 77070336, i32 81264640, i32 78118912, i32 76546048, i32 78643200, i32 80740352, i32 79691776, i32 82313216, i32 28835840, i32 33030144, i32 31457280, i32 32505856, i32 29884416, i32 27262976, i32 25690112, i32 25165824, i32 26738688, i32 30932992, i32 27787264, i32 26214400, i32 28311552, i32 30408704, i32 29360128, i32 31981568], [256 x i32] [i32 -1207959549, i32 -1342177277, i32 -1610612733, i32 -671088637, i32 -939524093, i32 -536870909, i32 -1879048189, i32 -805306365, i32 -2013265917, i32 -1073741821, i32 -2147483645, i32 -268435453, i32 -134217725, i32 -402653181, i32 -1744830461, i32 -1476395005, i32 939524099, i32 805306371, i32 536870915, i32 1476395011, i32 1207959555, i32 1610612739, i32 268435459, i32 1342177283, i32 134217731, i32 1073741827, i32 3, i32 1879048195, i32 2013265923, i32 1744830467, i32 402653187, i32 671088643, i32 939524097, i32 805306369, i32 536870913, i32 1476395009, i32 1207959553, i32 1610612737, i32 268435457, i32 1342177281, i32 134217729, i32 1073741825, i32 1, i32 1879048193, i32 2013265921, i32 1744830465, i32 402653185, i32 671088641, i32 939524098, i32 805306370, i32 536870914, i32 1476395010, i32 1207959554, i32 1610612738, i32 268435458, i32 1342177282, i32 134217730, i32 1073741826, i32 2, i32 1879048194, i32 2013265922, i32 1744830466, i32 402653186, i32 671088642, i32 -1207959546, i32 -1342177274, i32 -1610612730, i32 -671088634, i32 -939524090, i32 -536870906, i32 -1879048186, i32 -805306362, i32 -2013265914, i32 -1073741818, i32 -2147483642, i32 -268435450, i32 -134217722, i32 -402653178, i32 -1744830458, i32 -1476395002, i32 -1207959548, i32 -1342177276, i32 -1610612732, i32 -671088636, i32 -939524092, i32 -536870908, i32 -1879048188, i32 -805306364, i32 -2013265916, i32 -1073741820, i32 -2147483644, i32 -268435452, i32 -134217724, i32 -402653180, i32 -1744830460, i32 -1476395004, i32 -1207959545, i32 -1342177273, i32 -1610612729, i32 -671088633, i32 -939524089, i32 -536870905, i32 -1879048185, i32 -805306361, i32 -2013265913, i32 -1073741817, i32 -2147483641, i32 -268435449, i32 -134217721, i32 -402653177, i32 -1744830457, i32 -1476395001, i32 939524096, i32 805306368, i32 536870912, i32 1476395008, i32 1207959552, i32 1610612736, i32 268435456, i32 1342177280, i32 134217728, i32 1073741824, i32 0, i32 1879048192, i32 2013265920, i32 1744830464, i32 402653184, i32 671088640, i32 939524101, i32 805306373, i32 536870917, i32 1476395013, i32 1207959557, i32 1610612741, i32 268435461, i32 1342177285, i32 134217733, i32 1073741829, i32 5, i32 1879048197, i32 2013265925, i32 1744830469, i32 402653189, i32 671088645, i32 -1207959552, i32 -1342177280, i32 -1610612736, i32 -671088640, i32 -939524096, i32 -536870912, i32 -1879048192, i32 -805306368, i32 -2013265920, i32 -1073741824, i32 -2147483648, i32 -268435456, i32 -134217728, i32 -402653184, i32 -1744830464, i32 -1476395008, i32 -1207959550, i32 -1342177278, i32 -1610612734, i32 -671088638, i32 -939524094, i32 -536870910, i32 -1879048190, i32 -805306366, i32 -2013265918, i32 -1073741822, i32 -2147483646, i32 -268435454, i32 -134217726, i32 -402653182, i32 -1744830462, i32 -1476395006, i32 -1207959547, i32 -1342177275, i32 -1610612731, i32 -671088635, i32 -939524091, i32 -536870907, i32 -1879048187, i32 -805306363, i32 -2013265915, i32 -1073741819, i32 -2147483643, i32 -268435451, i32 -134217723, i32 -402653179, i32 -1744830459, i32 -1476395003, i32 939524100, i32 805306372, i32 536870916, i32 1476395012, i32 1207959556, i32 1610612740, i32 268435460, i32 1342177284, i32 134217732, i32 1073741828, i32 4, i32 1879048196, i32 2013265924, i32 1744830468, i32 402653188, i32 671088644, i32 939524103, i32 805306375, i32 536870919, i32 1476395015, i32 1207959559, i32 1610612743, i32 268435463, i32 1342177287, i32 134217735, i32 1073741831, i32 7, i32 1879048199, i32 2013265927, i32 1744830471, i32 402653191, i32 671088647, i32 939524102, i32 805306374, i32 536870918, i32 1476395014, i32 1207959558, i32 1610612742, i32 268435462, i32 1342177286, i32 134217734, i32 1073741830, i32 6, i32 1879048198, i32 2013265926, i32 1744830470, i32 402653190, i32 671088646, i32 -1207959551, i32 -1342177279, i32 -1610612735, i32 -671088639, i32 -939524095, i32 -536870911, i32 -1879048191, i32 -805306367, i32 -2013265919, i32 -1073741823, i32 -2147483647, i32 -268435455, i32 -134217727, i32 -402653183, i32 -1744830463, i32 -1476395007], [256 x i32] [i32 232, i32 240, i32 160, i32 136, i32 184, i32 128, i32 168, i32 208, i32 152, i32 224, i32 192, i32 248, i32 176, i32 144, i32 200, i32 216, i32 488, i32 496, i32 416, i32 392, i32 440, i32 384, i32 424, i32 464, i32 408, i32 480, i32 448, i32 504, i32 432, i32 400, i32 456, i32 472, i32 1384, i32 1392, i32 1312, i32 1288, i32 1336, i32 1280, i32 1320, i32 1360, i32 1304, i32 1376, i32 1344, i32 1400, i32 1328, i32 1296, i32 1352, i32 1368, i32 1256, i32 1264, i32 1184, i32 1160, i32 1208, i32 1152, i32 1192, i32 1232, i32 1176, i32 1248, i32 1216, i32 1272, i32 1200, i32 1168, i32 1224, i32 1240, i32 744, i32 752, i32 672, i32 648, i32 696, i32 640, i32 680, i32 720, i32 664, i32 736, i32 704, i32 760, i32 688, i32 656, i32 712, i32 728, i32 1512, i32 1520, i32 1440, i32 1416, i32 1464, i32 1408, i32 1448, i32 1488, i32 1432, i32 1504, i32 1472, i32 1528, i32 1456, i32 1424, i32 1480, i32 1496, i32 616, i32 624, i32 544, i32 520, i32 568, i32 512, i32 552, i32 592, i32 536, i32 608, i32 576, i32 632, i32 560, i32 528, i32 584, i32 600, i32 2024, i32 2032, i32 1952, i32 1928, i32 1976, i32 1920, i32 1960, i32 2000, i32 1944, i32 2016, i32 1984, i32 2040, i32 1968, i32 1936, i32 1992, i32 2008, i32 1128, i32 1136, i32 1056, i32 1032, i32 1080, i32 1024, i32 1064, i32 1104, i32 1048, i32 1120, i32 1088, i32 1144, i32 1072, i32 1040, i32 1096, i32 1112, i32 872, i32 880, i32 800, i32 776, i32 824, i32 768, i32 808, i32 848, i32 792, i32 864, i32 832, i32 888, i32 816, i32 784, i32 840, i32 856, i32 1000, i32 1008, i32 928, i32 904, i32 952, i32 896, i32 936, i32 976, i32 920, i32 992, i32 960, i32 1016, i32 944, i32 912, i32 968, i32 984, i32 1896, i32 1904, i32 1824, i32 1800, i32 1848, i32 1792, i32 1832, i32 1872, i32 1816, i32 1888, i32 1856, i32 1912, i32 1840, i32 1808, i32 1864, i32 1880, i32 1768, i32 1776, i32 1696, i32 1672, i32 1720, i32 1664, i32 1704, i32 1744, i32 1688, i32 1760, i32 1728, i32 1784, i32 1712, i32 1680, i32 1736, i32 1752, i32 104, i32 112, i32 32, i32 8, i32 56, i32 0, i32 40, i32 80, i32 24, i32 96, i32 64, i32 120, i32 48, i32 16, i32 72, i32 88, i32 360, i32 368, i32 288, i32 264, i32 312, i32 256, i32 296, i32 336, i32 280, i32 352, i32 320, i32 376, i32 304, i32 272, i32 328, i32 344, i32 1640, i32 1648, i32 1568, i32 1544, i32 1592, i32 1536, i32 1576, i32 1616, i32 1560, i32 1632, i32 1600, i32 1656, i32 1584, i32 1552, i32 1608, i32 1624]], align 16
@php_hash_gost_ops = hidden local_unnamed_addr constant %0 { void (i8*)* bitcast (void (%1*)* @PHP_GOSTInit to void (i8*)*), void (i8*, i8*, i32)* bitcast (void (%1*, i8*, i64)* @PHP_GOSTUpdate to void (i8*, i8*, i32)*), void (i8*, i8*)* bitcast (void (i8*, %1*)* @PHP_GOSTFinal to void (i8*, i8*)*), i32 (i8*, i8*, i8*)* @php_hash_copy, i32 32, i32 32, i32 120, i8 1 }, align 8
@php_hash_gost_crypto_ops = hidden local_unnamed_addr constant %0 { void (i8*)* bitcast (void (%1*)* @PHP_GOSTInitCrypto to void (i8*)*), void (i8*, i8*, i32)* bitcast (void (%1*, i8*, i64)* @PHP_GOSTUpdate to void (i8*, i8*, i32)*), void (i8*, i8*)* bitcast (void (i8*, %1*)* @PHP_GOSTFinal to void (i8*, i8*)*), i32 (i8*, i8*, i8*)* @php_hash_copy, i32 32, i32 32, i32 120, i8 1 }, align 8

; Function Attrs: nounwind uwtable
define dso_local void @PHP_GOSTInit(%1* nocapture %0) #0 {
  %2 = bitcast %1* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 112, i1 false)
  %3 = getelementptr inbounds %1, %1* %0, i64 0, i32 4
  store [4 x [256 x i32]]* @0, [4 x [256 x i32]]** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind uwtable
define dso_local void @PHP_GOSTInitCrypto(%1* nocapture %0) #0 {
  %2 = bitcast %1* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 112, i1 false) #6
  %3 = getelementptr inbounds %1, %1* %0, i64 0, i32 4
  store [4 x [256 x i32]]* @1, [4 x [256 x i32]]** %3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @PHP_GOSTUpdate(%1* %0, i8* nocapture readonly %1, i64 %2) #0 {
  %4 = getelementptr inbounds %1, %1* %0, i64 0, i32 1, i64 0
  %5 = load i32, i32* %4, align 8
  %6 = xor i32 %5, -1
  %7 = zext i32 %6 to i64
  %8 = shl i64 %2, 3
  %9 = icmp ugt i64 %8, %7
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = getelementptr inbounds %1, %1* %0, i64 0, i32 1, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, 1
  store i32 %13, i32* %11, align 4
  %14 = trunc i64 %8 to i32
  %15 = sub i32 %14, %6
  br label %19

16:                                               ; preds = %3
  %17 = trunc i64 %8 to i32
  %18 = add i32 %5, %17
  br label %19

19:                                               ; preds = %16, %10
  %20 = phi i32 [ %18, %16 ], [ %15, %10 ]
  store i32 %20, i32* %4, align 8
  %21 = getelementptr inbounds %1, %1* %0, i64 0, i32 2
  %22 = load i8, i8* %21, align 8
  %23 = zext i8 %22 to i64
  %24 = add i64 %23, %2
  %25 = icmp ult i64 %24, 32
  br i1 %25, label %26, label %28

26:                                               ; preds = %19
  %27 = getelementptr inbounds %1, %1* %0, i64 0, i32 3, i64 %23
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %27, i8* align 1 %1, i64 %2, i1 false)
  br label %51

28:                                               ; preds = %19
  %29 = and i64 %24, 31
  %30 = icmp eq i8 %22, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %28
  %32 = sub nsw i64 32, %23
  %33 = getelementptr inbounds %1, %1* %0, i64 0, i32 3, i64 %23
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %33, i8* align 1 %1, i64 %32, i1 false)
  %34 = getelementptr inbounds %1, %1* %0, i64 0, i32 3, i64 0
  tail call fastcc void @2(%1* nonnull %0, i8* nonnull %34)
  br label %35

35:                                               ; preds = %28, %31
  %36 = phi i64 [ %32, %31 ], [ 0, %28 ]
  %37 = add nsw i64 %36, 32
  %38 = icmp ugt i64 %37, %2
  br i1 %38, label %45, label %39

39:                                               ; preds = %35, %39
  %40 = phi i64 [ %43, %39 ], [ %37, %35 ]
  %41 = phi i64 [ %40, %39 ], [ %36, %35 ]
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  tail call fastcc void @2(%1* %0, i8* %42)
  %43 = add i64 %40, 32
  %44 = icmp ugt i64 %43, %2
  br i1 %44, label %45, label %39

45:                                               ; preds = %39, %35
  %46 = phi i64 [ %36, %35 ], [ %40, %39 ]
  %47 = getelementptr inbounds %1, %1* %0, i64 0, i32 3, i64 0
  %48 = getelementptr inbounds i8, i8* %1, i64 %46
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %47, i8* align 1 %48, i64 %29, i1 false)
  %49 = getelementptr inbounds %1, %1* %0, i64 0, i32 3, i64 %29
  %50 = sub nsw i64 32, %29
  tail call void @explicit_bzero(i8* nonnull %49, i64 %50) #6
  br label %51

51:                                               ; preds = %45, %26
  %52 = phi i64 [ %29, %45 ], [ %24, %26 ]
  %53 = trunc i64 %52 to i8
  store i8 %53, i8* %21, align 8
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @2(%1* nocapture %0, i8* nocapture readonly %1) unnamed_addr #3 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #6
  %5 = load i8, i8* %1, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds i8, i8* %1, i64 1
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = shl nuw nsw i32 %9, 8
  %11 = or i32 %10, %6
  %12 = getelementptr inbounds i8, i8* %1, i64 2
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 16
  %16 = or i32 %11, %15
  %17 = getelementptr inbounds i8, i8* %1, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = shl nuw i32 %19, 24
  %21 = or i32 %16, %20
  %22 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  store i32 %21, i32* %22, align 16
  %23 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 8
  %24 = load i32, i32* %23, align 4
  %25 = add i32 %24, %21
  store i32 %25, i32* %23, align 4
  %26 = icmp ult i32 %25, %21
  %27 = zext i1 %26 to i32
  %28 = getelementptr inbounds i8, i8* %1, i64 4
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds i8, i8* %1, i64 5
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = shl nuw nsw i32 %33, 8
  %35 = or i32 %34, %30
  %36 = getelementptr inbounds i8, i8* %1, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = shl nuw nsw i32 %38, 16
  %40 = or i32 %35, %39
  %41 = getelementptr inbounds i8, i8* %1, i64 7
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = shl nuw i32 %43, 24
  %45 = or i32 %40, %44
  %46 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 9
  %48 = load i32, i32* %47, align 4
  %49 = add i32 %48, %27
  %50 = add i32 %49, %45
  store i32 %50, i32* %47, align 4
  %51 = icmp ult i32 %50, %45
  %52 = icmp eq i32 %49, 0
  %53 = and i1 %52, %26
  %54 = or i1 %51, %53
  %55 = zext i1 %54 to i32
  %56 = getelementptr inbounds i8, i8* %1, i64 8
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = getelementptr inbounds i8, i8* %1, i64 9
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = shl nuw nsw i32 %61, 8
  %63 = or i32 %62, %58
  %64 = getelementptr inbounds i8, i8* %1, i64 10
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 16
  %68 = or i32 %63, %67
  %69 = getelementptr inbounds i8, i8* %1, i64 11
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = shl nuw i32 %71, 24
  %73 = or i32 %68, %72
  %74 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  store i32 %73, i32* %74, align 8
  %75 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 10
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, %55
  %78 = add i32 %77, %73
  store i32 %78, i32* %75, align 4
  %79 = icmp ult i32 %78, %73
  %80 = icmp eq i32 %77, 0
  %81 = and i1 %80, %54
  %82 = or i1 %79, %81
  %83 = zext i1 %82 to i32
  %84 = getelementptr inbounds i8, i8* %1, i64 12
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = getelementptr inbounds i8, i8* %1, i64 13
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = shl nuw nsw i32 %89, 8
  %91 = or i32 %90, %86
  %92 = getelementptr inbounds i8, i8* %1, i64 14
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %94, 16
  %96 = or i32 %91, %95
  %97 = getelementptr inbounds i8, i8* %1, i64 15
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = shl nuw i32 %99, 24
  %101 = or i32 %96, %100
  %102 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  store i32 %101, i32* %102, align 4
  %103 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 11
  %104 = load i32, i32* %103, align 4
  %105 = add i32 %104, %83
  %106 = add i32 %105, %101
  store i32 %106, i32* %103, align 4
  %107 = icmp ult i32 %106, %101
  %108 = icmp eq i32 %105, 0
  %109 = and i1 %108, %82
  %110 = or i1 %107, %109
  %111 = zext i1 %110 to i32
  %112 = getelementptr inbounds i8, i8* %1, i64 16
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = getelementptr inbounds i8, i8* %1, i64 17
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = shl nuw nsw i32 %117, 8
  %119 = or i32 %118, %114
  %120 = getelementptr inbounds i8, i8* %1, i64 18
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 16
  %124 = or i32 %119, %123
  %125 = getelementptr inbounds i8, i8* %1, i64 19
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl nuw i32 %127, 24
  %129 = or i32 %124, %128
  %130 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4
  store i32 %129, i32* %130, align 16
  %131 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 12
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %132, %111
  %134 = add i32 %133, %129
  store i32 %134, i32* %131, align 4
  %135 = icmp ult i32 %134, %129
  %136 = icmp eq i32 %133, 0
  %137 = and i1 %136, %110
  %138 = or i1 %135, %137
  %139 = zext i1 %138 to i32
  %140 = getelementptr inbounds i8, i8* %1, i64 20
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = getelementptr inbounds i8, i8* %1, i64 21
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = shl nuw nsw i32 %145, 8
  %147 = or i32 %146, %142
  %148 = getelementptr inbounds i8, i8* %1, i64 22
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = shl nuw nsw i32 %150, 16
  %152 = or i32 %147, %151
  %153 = getelementptr inbounds i8, i8* %1, i64 23
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = shl nuw i32 %155, 24
  %157 = or i32 %152, %156
  %158 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5
  store i32 %157, i32* %158, align 4
  %159 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 13
  %160 = load i32, i32* %159, align 4
  %161 = add i32 %160, %139
  %162 = add i32 %161, %157
  store i32 %162, i32* %159, align 4
  %163 = icmp ult i32 %162, %157
  %164 = icmp eq i32 %161, 0
  %165 = and i1 %164, %138
  %166 = or i1 %163, %165
  %167 = zext i1 %166 to i32
  %168 = getelementptr inbounds i8, i8* %1, i64 24
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = getelementptr inbounds i8, i8* %1, i64 25
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = shl nuw nsw i32 %173, 8
  %175 = or i32 %174, %170
  %176 = getelementptr inbounds i8, i8* %1, i64 26
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = shl nuw nsw i32 %178, 16
  %180 = or i32 %175, %179
  %181 = getelementptr inbounds i8, i8* %1, i64 27
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = shl nuw i32 %183, 24
  %185 = or i32 %180, %184
  %186 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 6
  store i32 %185, i32* %186, align 8
  %187 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 14
  %188 = load i32, i32* %187, align 4
  %189 = add i32 %188, %167
  %190 = add i32 %189, %185
  store i32 %190, i32* %187, align 4
  %191 = icmp ult i32 %190, %185
  %192 = icmp eq i32 %189, 0
  %193 = and i1 %192, %166
  %194 = or i1 %191, %193
  %195 = zext i1 %194 to i32
  %196 = getelementptr inbounds i8, i8* %1, i64 28
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = getelementptr inbounds i8, i8* %1, i64 29
  %200 = load i8, i8* %199, align 1
  %201 = zext i8 %200 to i32
  %202 = shl nuw nsw i32 %201, 8
  %203 = or i32 %202, %198
  %204 = getelementptr inbounds i8, i8* %1, i64 30
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  %207 = shl nuw nsw i32 %206, 16
  %208 = or i32 %203, %207
  %209 = getelementptr inbounds i8, i8* %1, i64 31
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = shl nuw i32 %211, 24
  %213 = or i32 %208, %212
  %214 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7
  store i32 %213, i32* %214, align 4
  %215 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 15
  %216 = load i32, i32* %215, align 4
  %217 = add i32 %216, %195
  %218 = add i32 %217, %213
  store i32 %218, i32* %215, align 4
  call fastcc void @3(%1* %0, i32* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #6
  ret void
}

; Function Attrs: nounwind
declare dso_local void @explicit_bzero(i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @PHP_GOSTFinal(i8* nocapture %0, %1* %1) #0 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 32, i1 false)
  %5 = getelementptr inbounds %1, %1* %1, i64 0, i32 2
  %6 = load i8, i8* %5, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %1, %1* %1, i64 0, i32 3, i64 0
  tail call fastcc void @2(%1* nonnull %1, i8* nonnull %9)
  br label %10

10:                                               ; preds = %2, %8
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %12 = getelementptr inbounds %1, %1* %1, i64 0, i32 1, i64 0
  %13 = bitcast i32* %12 to i64*
  %14 = bitcast [8 x i32]* %3 to i64*
  %15 = load i64, i64* %13, align 8
  store i64 %15, i64* %14, align 16
  call fastcc void @3(%1* nonnull %1, i32* nonnull %11)
  %16 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 8
  %17 = bitcast i32* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %4, i8* nonnull align 8 %17, i64 32, i1 false)
  call fastcc void @3(%1* nonnull %1, i32* nonnull %11)
  %18 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = trunc i32 %19 to i8
  store i8 %20, i8* %0, align 1
  %21 = load i32, i32* %18, align 4
  %22 = lshr i32 %21, 8
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %23, i8* %24, align 1
  %25 = load i32, i32* %18, align 4
  %26 = lshr i32 %25, 16
  %27 = trunc i32 %26 to i8
  %28 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %27, i8* %28, align 1
  %29 = load i32, i32* %18, align 4
  %30 = lshr i32 %29, 24
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds i8, i8* %0, i64 4
  store i8 %35, i8* %36, align 1
  %37 = load i32, i32* %33, align 4
  %38 = lshr i32 %37, 8
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds i8, i8* %0, i64 5
  store i8 %39, i8* %40, align 1
  %41 = load i32, i32* %33, align 4
  %42 = lshr i32 %41, 16
  %43 = trunc i32 %42 to i8
  %44 = getelementptr inbounds i8, i8* %0, i64 6
  store i8 %43, i8* %44, align 1
  %45 = load i32, i32* %33, align 4
  %46 = lshr i32 %45, 24
  %47 = trunc i32 %46 to i8
  %48 = getelementptr inbounds i8, i8* %0, i64 7
  store i8 %47, i8* %48, align 1
  %49 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 2
  %50 = load i32, i32* %49, align 4
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %0, i64 8
  store i8 %51, i8* %52, align 1
  %53 = load i32, i32* %49, align 4
  %54 = lshr i32 %53, 8
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %0, i64 9
  store i8 %55, i8* %56, align 1
  %57 = load i32, i32* %49, align 4
  %58 = lshr i32 %57, 16
  %59 = trunc i32 %58 to i8
  %60 = getelementptr inbounds i8, i8* %0, i64 10
  store i8 %59, i8* %60, align 1
  %61 = load i32, i32* %49, align 4
  %62 = lshr i32 %61, 24
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds i8, i8* %0, i64 11
  store i8 %63, i8* %64, align 1
  %65 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 3
  %66 = load i32, i32* %65, align 4
  %67 = trunc i32 %66 to i8
  %68 = getelementptr inbounds i8, i8* %0, i64 12
  store i8 %67, i8* %68, align 1
  %69 = load i32, i32* %65, align 4
  %70 = lshr i32 %69, 8
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds i8, i8* %0, i64 13
  store i8 %71, i8* %72, align 1
  %73 = load i32, i32* %65, align 4
  %74 = lshr i32 %73, 16
  %75 = trunc i32 %74 to i8
  %76 = getelementptr inbounds i8, i8* %0, i64 14
  store i8 %75, i8* %76, align 1
  %77 = load i32, i32* %65, align 4
  %78 = lshr i32 %77, 24
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %0, i64 15
  store i8 %79, i8* %80, align 1
  %81 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 4
  %82 = load i32, i32* %81, align 4
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %0, i64 16
  store i8 %83, i8* %84, align 1
  %85 = load i32, i32* %81, align 4
  %86 = lshr i32 %85, 8
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %0, i64 17
  store i8 %87, i8* %88, align 1
  %89 = load i32, i32* %81, align 4
  %90 = lshr i32 %89, 16
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %0, i64 18
  store i8 %91, i8* %92, align 1
  %93 = load i32, i32* %81, align 4
  %94 = lshr i32 %93, 24
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %0, i64 19
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 5
  %98 = load i32, i32* %97, align 4
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %0, i64 20
  store i8 %99, i8* %100, align 1
  %101 = load i32, i32* %97, align 4
  %102 = lshr i32 %101, 8
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds i8, i8* %0, i64 21
  store i8 %103, i8* %104, align 1
  %105 = load i32, i32* %97, align 4
  %106 = lshr i32 %105, 16
  %107 = trunc i32 %106 to i8
  %108 = getelementptr inbounds i8, i8* %0, i64 22
  store i8 %107, i8* %108, align 1
  %109 = load i32, i32* %97, align 4
  %110 = lshr i32 %109, 24
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %0, i64 23
  store i8 %111, i8* %112, align 1
  %113 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 6
  %114 = load i32, i32* %113, align 4
  %115 = trunc i32 %114 to i8
  %116 = getelementptr inbounds i8, i8* %0, i64 24
  store i8 %115, i8* %116, align 1
  %117 = load i32, i32* %113, align 4
  %118 = lshr i32 %117, 8
  %119 = trunc i32 %118 to i8
  %120 = getelementptr inbounds i8, i8* %0, i64 25
  store i8 %119, i8* %120, align 1
  %121 = load i32, i32* %113, align 4
  %122 = lshr i32 %121, 16
  %123 = trunc i32 %122 to i8
  %124 = getelementptr inbounds i8, i8* %0, i64 26
  store i8 %123, i8* %124, align 1
  %125 = load i32, i32* %113, align 4
  %126 = lshr i32 %125, 24
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %0, i64 27
  store i8 %127, i8* %128, align 1
  %129 = getelementptr inbounds %1, %1* %1, i64 0, i32 0, i64 7
  %130 = load i32, i32* %129, align 4
  %131 = trunc i32 %130 to i8
  %132 = getelementptr inbounds i8, i8* %0, i64 28
  store i8 %131, i8* %132, align 1
  %133 = load i32, i32* %129, align 4
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %0, i64 29
  store i8 %135, i8* %136, align 1
  %137 = load i32, i32* %129, align 4
  %138 = lshr i32 %137, 16
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds i8, i8* %0, i64 30
  store i8 %139, i8* %140, align 1
  %141 = load i32, i32* %129, align 4
  %142 = lshr i32 %141, 24
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %0, i64 31
  store i8 %143, i8* %144, align 1
  %145 = bitcast %1* %1 to i8*
  tail call void @explicit_bzero(i8* %145, i64 120) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #6
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @3(%1* nocapture %0, i32* nocapture readonly %1) unnamed_addr #3 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #6
  %5 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 5
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 6
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 7
  %20 = load i32, i32* %19, align 4
  %21 = load i32, i32* %1, align 4
  %22 = getelementptr inbounds i32, i32* %1, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %1, i64 2
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds i32, i32* %1, i64 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %1, i64 4
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i32, i32* %1, i64 5
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %1, i64 6
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i32, i32* %1, i64 7
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %0, i64 0, i32 4
  %37 = load [4 x [256 x i32]]*, [4 x [256 x i32]]** %36, align 8
  br label %38

38:                                               ; preds = %2, %897
  %39 = phi i64 [ 0, %2 ], [ %910, %897 ]
  %40 = phi i32 [ %20, %2 ], [ %905, %897 ]
  %41 = phi i32 [ %18, %2 ], [ %904, %897 ]
  %42 = phi i32 [ %16, %2 ], [ %903, %897 ]
  %43 = phi i32 [ %14, %2 ], [ %902, %897 ]
  %44 = phi i32 [ %12, %2 ], [ %901, %897 ]
  %45 = phi i32 [ %10, %2 ], [ %900, %897 ]
  %46 = phi i32 [ %8, %2 ], [ %899, %897 ]
  %47 = phi i32 [ %21, %2 ], [ %51, %897 ]
  %48 = phi i32 [ %23, %2 ], [ %52, %897 ]
  %49 = phi i32 [ %25, %2 ], [ %53, %897 ]
  %50 = phi i32 [ %27, %2 ], [ %54, %897 ]
  %51 = phi i32 [ %29, %2 ], [ %906, %897 ]
  %52 = phi i32 [ %31, %2 ], [ %908, %897 ]
  %53 = phi i32 [ %33, %2 ], [ %907, %897 ]
  %54 = phi i32 [ %35, %2 ], [ %909, %897 ]
  %55 = phi i32 [ %6, %2 ], [ %898, %897 ]
  %56 = xor i32 %47, %55
  %57 = xor i32 %46, %48
  %58 = xor i32 %45, %49
  %59 = xor i32 %44, %50
  %60 = xor i32 %43, %51
  %61 = xor i32 %42, %52
  %62 = xor i32 %41, %53
  %63 = xor i32 %40, %54
  %64 = and i32 %56, 255
  %65 = shl i32 %58, 8
  %66 = and i32 %65, 65280
  %67 = or i32 %66, %64
  %68 = shl i32 %60, 16
  %69 = and i32 %68, 16711680
  %70 = or i32 %67, %69
  %71 = shl i32 %62, 24
  %72 = or i32 %70, %71
  %73 = lshr i32 %56, 8
  %74 = and i32 %73, 255
  %75 = and i32 %58, 65280
  %76 = or i32 %75, %74
  %77 = shl i32 %60, 8
  %78 = and i32 %77, 16711680
  %79 = or i32 %76, %78
  %80 = shl i32 %62, 16
  %81 = and i32 %80, -16777216
  %82 = or i32 %79, %81
  %83 = lshr i32 %56, 16
  %84 = and i32 %83, 255
  %85 = lshr i32 %58, 8
  %86 = and i32 %85, 65280
  %87 = or i32 %86, %84
  %88 = and i32 %60, 16711680
  %89 = or i32 %87, %88
  %90 = shl i32 %62, 8
  %91 = and i32 %90, -16777216
  %92 = or i32 %89, %91
  %93 = lshr i32 %56, 24
  %94 = lshr i32 %58, 16
  %95 = and i32 %94, 65280
  %96 = or i32 %95, %93
  %97 = lshr i32 %60, 8
  %98 = and i32 %97, 16711680
  %99 = or i32 %96, %98
  %100 = and i32 %62, -16777216
  %101 = or i32 %99, %100
  %102 = and i32 %57, 255
  %103 = shl i32 %59, 8
  %104 = and i32 %103, 65280
  %105 = or i32 %104, %102
  %106 = shl i32 %61, 16
  %107 = and i32 %106, 16711680
  %108 = or i32 %105, %107
  %109 = shl i32 %63, 24
  %110 = or i32 %108, %109
  %111 = lshr i32 %57, 8
  %112 = and i32 %111, 255
  %113 = and i32 %59, 65280
  %114 = or i32 %113, %112
  %115 = shl i32 %61, 8
  %116 = and i32 %115, 16711680
  %117 = or i32 %114, %116
  %118 = shl i32 %63, 16
  %119 = and i32 %118, -16777216
  %120 = or i32 %117, %119
  %121 = lshr i32 %57, 16
  %122 = and i32 %121, 255
  %123 = lshr i32 %59, 8
  %124 = and i32 %123, 65280
  %125 = or i32 %124, %122
  %126 = and i32 %61, 16711680
  %127 = or i32 %125, %126
  %128 = shl i32 %63, 8
  %129 = and i32 %128, -16777216
  %130 = or i32 %127, %129
  %131 = lshr i32 %57, 24
  %132 = lshr i32 %59, 16
  %133 = and i32 %132, 65280
  %134 = or i32 %133, %131
  %135 = lshr i32 %61, 8
  %136 = and i32 %135, 16711680
  %137 = or i32 %134, %136
  %138 = and i32 %63, -16777216
  %139 = or i32 %137, %138
  %140 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 %39
  %141 = load i32, i32* %140, align 4
  %142 = or i64 %39, 1
  %143 = getelementptr inbounds %1, %1* %0, i64 0, i32 0, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %141, %72
  %146 = and i32 %145, 255
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = lshr i32 %145, 8
  %151 = and i32 %150, 255
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = lshr i32 %145, 16
  %156 = and i32 %155, 255
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = lshr i32 %145, 24
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = xor i32 %149, %144
  %165 = xor i32 %164, %154
  %166 = xor i32 %165, %159
  %167 = xor i32 %166, %163
  %168 = add i32 %167, %82
  %169 = and i32 %168, 255
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = lshr i32 %168, 8
  %174 = and i32 %173, 255
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = lshr i32 %168, 16
  %179 = and i32 %178, 255
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = lshr i32 %168, 24
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = xor i32 %172, %141
  %188 = xor i32 %187, %177
  %189 = xor i32 %188, %182
  %190 = xor i32 %189, %186
  %191 = add i32 %190, %92
  %192 = and i32 %191, 255
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = lshr i32 %191, 8
  %197 = and i32 %196, 255
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = lshr i32 %191, 16
  %202 = and i32 %201, 255
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = lshr i32 %191, 24
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = xor i32 %195, %167
  %211 = xor i32 %210, %200
  %212 = xor i32 %211, %205
  %213 = xor i32 %212, %209
  %214 = add i32 %213, %101
  %215 = and i32 %214, 255
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = lshr i32 %214, 8
  %220 = and i32 %219, 255
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = lshr i32 %214, 16
  %225 = and i32 %224, 255
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = lshr i32 %214, 24
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = xor i32 %218, %190
  %234 = xor i32 %233, %223
  %235 = xor i32 %234, %228
  %236 = xor i32 %235, %232
  %237 = add i32 %236, %110
  %238 = and i32 %237, 255
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = lshr i32 %237, 8
  %243 = and i32 %242, 255
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = lshr i32 %237, 16
  %248 = and i32 %247, 255
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = lshr i32 %237, 24
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = xor i32 %241, %213
  %257 = xor i32 %256, %246
  %258 = xor i32 %257, %251
  %259 = xor i32 %258, %255
  %260 = add i32 %259, %120
  %261 = and i32 %260, 255
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = lshr i32 %260, 8
  %266 = and i32 %265, 255
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = lshr i32 %260, 16
  %271 = and i32 %270, 255
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = lshr i32 %260, 24
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = xor i32 %264, %236
  %280 = xor i32 %279, %269
  %281 = xor i32 %280, %274
  %282 = xor i32 %281, %278
  %283 = add i32 %282, %130
  %284 = and i32 %283, 255
  %285 = zext i32 %284 to i64
  %286 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %285
  %287 = load i32, i32* %286, align 4
  %288 = lshr i32 %283, 8
  %289 = and i32 %288, 255
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = lshr i32 %283, 16
  %294 = and i32 %293, 255
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = lshr i32 %283, 24
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %299
  %301 = load i32, i32* %300, align 4
  %302 = xor i32 %287, %259
  %303 = xor i32 %302, %292
  %304 = xor i32 %303, %297
  %305 = xor i32 %304, %301
  %306 = add i32 %305, %139
  %307 = and i32 %306, 255
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = lshr i32 %306, 8
  %312 = and i32 %311, 255
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = lshr i32 %306, 16
  %317 = and i32 %316, 255
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = lshr i32 %306, 24
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = xor i32 %310, %282
  %326 = xor i32 %325, %315
  %327 = xor i32 %326, %320
  %328 = xor i32 %327, %324
  %329 = add i32 %328, %72
  %330 = and i32 %329, 255
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %331
  %333 = load i32, i32* %332, align 4
  %334 = lshr i32 %329, 8
  %335 = and i32 %334, 255
  %336 = zext i32 %335 to i64
  %337 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %336
  %338 = load i32, i32* %337, align 4
  %339 = lshr i32 %329, 16
  %340 = and i32 %339, 255
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = lshr i32 %329, 24
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %345
  %347 = load i32, i32* %346, align 4
  %348 = xor i32 %333, %305
  %349 = xor i32 %348, %338
  %350 = xor i32 %349, %343
  %351 = xor i32 %350, %347
  %352 = add i32 %351, %82
  %353 = and i32 %352, 255
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %354
  %356 = load i32, i32* %355, align 4
  %357 = lshr i32 %352, 8
  %358 = and i32 %357, 255
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %359
  %361 = load i32, i32* %360, align 4
  %362 = lshr i32 %352, 16
  %363 = and i32 %362, 255
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %364
  %366 = load i32, i32* %365, align 4
  %367 = lshr i32 %352, 24
  %368 = zext i32 %367 to i64
  %369 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %368
  %370 = load i32, i32* %369, align 4
  %371 = xor i32 %356, %328
  %372 = xor i32 %371, %361
  %373 = xor i32 %372, %366
  %374 = xor i32 %373, %370
  %375 = add i32 %374, %92
  %376 = and i32 %375, 255
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %377
  %379 = load i32, i32* %378, align 4
  %380 = lshr i32 %375, 8
  %381 = and i32 %380, 255
  %382 = zext i32 %381 to i64
  %383 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %382
  %384 = load i32, i32* %383, align 4
  %385 = lshr i32 %375, 16
  %386 = and i32 %385, 255
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %387
  %389 = load i32, i32* %388, align 4
  %390 = lshr i32 %375, 24
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %391
  %393 = load i32, i32* %392, align 4
  %394 = xor i32 %379, %351
  %395 = xor i32 %394, %384
  %396 = xor i32 %395, %389
  %397 = xor i32 %396, %393
  %398 = add i32 %397, %101
  %399 = and i32 %398, 255
  %400 = zext i32 %399 to i64
  %401 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = lshr i32 %398, 8
  %404 = and i32 %403, 255
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %405
  %407 = load i32, i32* %406, align 4
  %408 = lshr i32 %398, 16
  %409 = and i32 %408, 255
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %410
  %412 = load i32, i32* %411, align 4
  %413 = lshr i32 %398, 24
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %414
  %416 = load i32, i32* %415, align 4
  %417 = xor i32 %402, %374
  %418 = xor i32 %417, %407
  %419 = xor i32 %418, %412
  %420 = xor i32 %419, %416
  %421 = add i32 %420, %110
  %422 = and i32 %421, 255
  %423 = zext i32 %422 to i64
  %424 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %423
  %425 = load i32, i32* %424, align 4
  %426 = lshr i32 %421, 8
  %427 = and i32 %426, 255
  %428 = zext i32 %427 to i64
  %429 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %428
  %430 = load i32, i32* %429, align 4
  %431 = lshr i32 %421, 16
  %432 = and i32 %431, 255
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %433
  %435 = load i32, i32* %434, align 4
  %436 = lshr i32 %421, 24
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %437
  %439 = load i32, i32* %438, align 4
  %440 = xor i32 %425, %397
  %441 = xor i32 %440, %430
  %442 = xor i32 %441, %435
  %443 = xor i32 %442, %439
  %444 = add i32 %443, %120
  %445 = and i32 %444, 255
  %446 = zext i32 %445 to i64
  %447 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %446
  %448 = load i32, i32* %447, align 4
  %449 = lshr i32 %444, 8
  %450 = and i32 %449, 255
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %451
  %453 = load i32, i32* %452, align 4
  %454 = lshr i32 %444, 16
  %455 = and i32 %454, 255
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %456
  %458 = load i32, i32* %457, align 4
  %459 = lshr i32 %444, 24
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %460
  %462 = load i32, i32* %461, align 4
  %463 = xor i32 %448, %420
  %464 = xor i32 %463, %453
  %465 = xor i32 %464, %458
  %466 = xor i32 %465, %462
  %467 = add i32 %466, %130
  %468 = and i32 %467, 255
  %469 = zext i32 %468 to i64
  %470 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %469
  %471 = load i32, i32* %470, align 4
  %472 = lshr i32 %467, 8
  %473 = and i32 %472, 255
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %474
  %476 = load i32, i32* %475, align 4
  %477 = lshr i32 %467, 16
  %478 = and i32 %477, 255
  %479 = zext i32 %478 to i64
  %480 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %479
  %481 = load i32, i32* %480, align 4
  %482 = lshr i32 %467, 24
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %483
  %485 = load i32, i32* %484, align 4
  %486 = xor i32 %471, %443
  %487 = xor i32 %486, %476
  %488 = xor i32 %487, %481
  %489 = xor i32 %488, %485
  %490 = add i32 %489, %139
  %491 = and i32 %490, 255
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %492
  %494 = load i32, i32* %493, align 4
  %495 = lshr i32 %490, 8
  %496 = and i32 %495, 255
  %497 = zext i32 %496 to i64
  %498 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %497
  %499 = load i32, i32* %498, align 4
  %500 = lshr i32 %490, 16
  %501 = and i32 %500, 255
  %502 = zext i32 %501 to i64
  %503 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %502
  %504 = load i32, i32* %503, align 4
  %505 = lshr i32 %490, 24
  %506 = zext i32 %505 to i64
  %507 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %506
  %508 = load i32, i32* %507, align 4
  %509 = xor i32 %494, %466
  %510 = xor i32 %509, %499
  %511 = xor i32 %510, %504
  %512 = xor i32 %511, %508
  %513 = add i32 %512, %72
  %514 = and i32 %513, 255
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %515
  %517 = load i32, i32* %516, align 4
  %518 = lshr i32 %513, 8
  %519 = and i32 %518, 255
  %520 = zext i32 %519 to i64
  %521 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %520
  %522 = load i32, i32* %521, align 4
  %523 = lshr i32 %513, 16
  %524 = and i32 %523, 255
  %525 = zext i32 %524 to i64
  %526 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %525
  %527 = load i32, i32* %526, align 4
  %528 = lshr i32 %513, 24
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %529
  %531 = load i32, i32* %530, align 4
  %532 = xor i32 %517, %489
  %533 = xor i32 %532, %522
  %534 = xor i32 %533, %527
  %535 = xor i32 %534, %531
  %536 = add i32 %535, %82
  %537 = and i32 %536, 255
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %538
  %540 = load i32, i32* %539, align 4
  %541 = lshr i32 %536, 8
  %542 = and i32 %541, 255
  %543 = zext i32 %542 to i64
  %544 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %543
  %545 = load i32, i32* %544, align 4
  %546 = lshr i32 %536, 16
  %547 = and i32 %546, 255
  %548 = zext i32 %547 to i64
  %549 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %548
  %550 = load i32, i32* %549, align 4
  %551 = lshr i32 %536, 24
  %552 = zext i32 %551 to i64
  %553 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %552
  %554 = load i32, i32* %553, align 4
  %555 = xor i32 %540, %512
  %556 = xor i32 %555, %545
  %557 = xor i32 %556, %550
  %558 = xor i32 %557, %554
  %559 = add i32 %558, %92
  %560 = and i32 %559, 255
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %561
  %563 = load i32, i32* %562, align 4
  %564 = lshr i32 %559, 8
  %565 = and i32 %564, 255
  %566 = zext i32 %565 to i64
  %567 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %566
  %568 = load i32, i32* %567, align 4
  %569 = lshr i32 %559, 16
  %570 = and i32 %569, 255
  %571 = zext i32 %570 to i64
  %572 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %571
  %573 = load i32, i32* %572, align 4
  %574 = lshr i32 %559, 24
  %575 = zext i32 %574 to i64
  %576 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %575
  %577 = load i32, i32* %576, align 4
  %578 = xor i32 %563, %535
  %579 = xor i32 %578, %568
  %580 = xor i32 %579, %573
  %581 = xor i32 %580, %577
  %582 = add i32 %581, %101
  %583 = and i32 %582, 255
  %584 = zext i32 %583 to i64
  %585 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %584
  %586 = load i32, i32* %585, align 4
  %587 = lshr i32 %582, 8
  %588 = and i32 %587, 255
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %589
  %591 = load i32, i32* %590, align 4
  %592 = lshr i32 %582, 16
  %593 = and i32 %592, 255
  %594 = zext i32 %593 to i64
  %595 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %594
  %596 = load i32, i32* %595, align 4
  %597 = lshr i32 %582, 24
  %598 = zext i32 %597 to i64
  %599 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %598
  %600 = load i32, i32* %599, align 4
  %601 = xor i32 %586, %558
  %602 = xor i32 %601, %591
  %603 = xor i32 %602, %596
  %604 = xor i32 %603, %600
  %605 = add i32 %604, %110
  %606 = and i32 %605, 255
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %607
  %609 = load i32, i32* %608, align 4
  %610 = lshr i32 %605, 8
  %611 = and i32 %610, 255
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %612
  %614 = load i32, i32* %613, align 4
  %615 = lshr i32 %605, 16
  %616 = and i32 %615, 255
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %617
  %619 = load i32, i32* %618, align 4
  %620 = lshr i32 %605, 24
  %621 = zext i32 %620 to i64
  %622 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %621
  %623 = load i32, i32* %622, align 4
  %624 = xor i32 %609, %581
  %625 = xor i32 %624, %614
  %626 = xor i32 %625, %619
  %627 = xor i32 %626, %623
  %628 = add i32 %627, %120
  %629 = and i32 %628, 255
  %630 = zext i32 %629 to i64
  %631 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %630
  %632 = load i32, i32* %631, align 4
  %633 = lshr i32 %628, 8
  %634 = and i32 %633, 255
  %635 = zext i32 %634 to i64
  %636 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = lshr i32 %628, 16
  %639 = and i32 %638, 255
  %640 = zext i32 %639 to i64
  %641 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = lshr i32 %628, 24
  %644 = zext i32 %643 to i64
  %645 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %644
  %646 = load i32, i32* %645, align 4
  %647 = xor i32 %632, %604
  %648 = xor i32 %647, %637
  %649 = xor i32 %648, %642
  %650 = xor i32 %649, %646
  %651 = add i32 %650, %130
  %652 = and i32 %651, 255
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %653
  %655 = load i32, i32* %654, align 4
  %656 = lshr i32 %651, 8
  %657 = and i32 %656, 255
  %658 = zext i32 %657 to i64
  %659 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %658
  %660 = load i32, i32* %659, align 4
  %661 = lshr i32 %651, 16
  %662 = and i32 %661, 255
  %663 = zext i32 %662 to i64
  %664 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %663
  %665 = load i32, i32* %664, align 4
  %666 = lshr i32 %651, 24
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %667
  %669 = load i32, i32* %668, align 4
  %670 = xor i32 %655, %627
  %671 = xor i32 %670, %660
  %672 = xor i32 %671, %665
  %673 = xor i32 %672, %669
  %674 = add i32 %673, %139
  %675 = and i32 %674, 255
  %676 = zext i32 %675 to i64
  %677 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %676
  %678 = load i32, i32* %677, align 4
  %679 = lshr i32 %674, 8
  %680 = and i32 %679, 255
  %681 = zext i32 %680 to i64
  %682 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %681
  %683 = load i32, i32* %682, align 4
  %684 = lshr i32 %674, 16
  %685 = and i32 %684, 255
  %686 = zext i32 %685 to i64
  %687 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %686
  %688 = load i32, i32* %687, align 4
  %689 = lshr i32 %674, 24
  %690 = zext i32 %689 to i64
  %691 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %690
  %692 = load i32, i32* %691, align 4
  %693 = xor i32 %678, %650
  %694 = xor i32 %693, %683
  %695 = xor i32 %694, %688
  %696 = xor i32 %695, %692
  %697 = add i32 %696, %139
  %698 = and i32 %697, 255
  %699 = zext i32 %698 to i64
  %700 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %699
  %701 = load i32, i32* %700, align 4
  %702 = lshr i32 %697, 8
  %703 = and i32 %702, 255
  %704 = zext i32 %703 to i64
  %705 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %704
  %706 = load i32, i32* %705, align 4
  %707 = lshr i32 %697, 16
  %708 = and i32 %707, 255
  %709 = zext i32 %708 to i64
  %710 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %709
  %711 = load i32, i32* %710, align 4
  %712 = lshr i32 %697, 24
  %713 = zext i32 %712 to i64
  %714 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %713
  %715 = load i32, i32* %714, align 4
  %716 = xor i32 %701, %673
  %717 = xor i32 %716, %706
  %718 = xor i32 %717, %711
  %719 = xor i32 %718, %715
  %720 = add i32 %719, %130
  %721 = and i32 %720, 255
  %722 = zext i32 %721 to i64
  %723 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %722
  %724 = load i32, i32* %723, align 4
  %725 = lshr i32 %720, 8
  %726 = and i32 %725, 255
  %727 = zext i32 %726 to i64
  %728 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %727
  %729 = load i32, i32* %728, align 4
  %730 = lshr i32 %720, 16
  %731 = and i32 %730, 255
  %732 = zext i32 %731 to i64
  %733 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %732
  %734 = load i32, i32* %733, align 4
  %735 = lshr i32 %720, 24
  %736 = zext i32 %735 to i64
  %737 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %736
  %738 = load i32, i32* %737, align 4
  %739 = xor i32 %724, %696
  %740 = xor i32 %739, %729
  %741 = xor i32 %740, %734
  %742 = xor i32 %741, %738
  %743 = add i32 %742, %120
  %744 = and i32 %743, 255
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %745
  %747 = load i32, i32* %746, align 4
  %748 = lshr i32 %743, 8
  %749 = and i32 %748, 255
  %750 = zext i32 %749 to i64
  %751 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %750
  %752 = load i32, i32* %751, align 4
  %753 = lshr i32 %743, 16
  %754 = and i32 %753, 255
  %755 = zext i32 %754 to i64
  %756 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %755
  %757 = load i32, i32* %756, align 4
  %758 = lshr i32 %743, 24
  %759 = zext i32 %758 to i64
  %760 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %759
  %761 = load i32, i32* %760, align 4
  %762 = xor i32 %747, %719
  %763 = xor i32 %762, %752
  %764 = xor i32 %763, %757
  %765 = xor i32 %764, %761
  %766 = add i32 %765, %110
  %767 = and i32 %766, 255
  %768 = zext i32 %767 to i64
  %769 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %768
  %770 = load i32, i32* %769, align 4
  %771 = lshr i32 %766, 8
  %772 = and i32 %771, 255
  %773 = zext i32 %772 to i64
  %774 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %773
  %775 = load i32, i32* %774, align 4
  %776 = lshr i32 %766, 16
  %777 = and i32 %776, 255
  %778 = zext i32 %777 to i64
  %779 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %778
  %780 = load i32, i32* %779, align 4
  %781 = lshr i32 %766, 24
  %782 = zext i32 %781 to i64
  %783 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %782
  %784 = load i32, i32* %783, align 4
  %785 = xor i32 %770, %742
  %786 = xor i32 %785, %775
  %787 = xor i32 %786, %780
  %788 = xor i32 %787, %784
  %789 = add i32 %788, %101
  %790 = and i32 %789, 255
  %791 = zext i32 %790 to i64
  %792 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %791
  %793 = load i32, i32* %792, align 4
  %794 = lshr i32 %789, 8
  %795 = and i32 %794, 255
  %796 = zext i32 %795 to i64
  %797 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %796
  %798 = load i32, i32* %797, align 4
  %799 = lshr i32 %789, 16
  %800 = and i32 %799, 255
  %801 = zext i32 %800 to i64
  %802 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %801
  %803 = load i32, i32* %802, align 4
  %804 = lshr i32 %789, 24
  %805 = zext i32 %804 to i64
  %806 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %805
  %807 = load i32, i32* %806, align 4
  %808 = xor i32 %793, %765
  %809 = xor i32 %808, %798
  %810 = xor i32 %809, %803
  %811 = xor i32 %810, %807
  %812 = add i32 %811, %92
  %813 = and i32 %812, 255
  %814 = zext i32 %813 to i64
  %815 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = lshr i32 %812, 8
  %818 = and i32 %817, 255
  %819 = zext i32 %818 to i64
  %820 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %819
  %821 = load i32, i32* %820, align 4
  %822 = lshr i32 %812, 16
  %823 = and i32 %822, 255
  %824 = zext i32 %823 to i64
  %825 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %824
  %826 = load i32, i32* %825, align 4
  %827 = lshr i32 %812, 24
  %828 = zext i32 %827 to i64
  %829 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %828
  %830 = load i32, i32* %829, align 4
  %831 = xor i32 %816, %788
  %832 = xor i32 %831, %821
  %833 = xor i32 %832, %826
  %834 = xor i32 %833, %830
  %835 = add i32 %834, %82
  %836 = and i32 %835, 255
  %837 = zext i32 %836 to i64
  %838 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %837
  %839 = load i32, i32* %838, align 4
  %840 = lshr i32 %835, 8
  %841 = and i32 %840, 255
  %842 = zext i32 %841 to i64
  %843 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %842
  %844 = load i32, i32* %843, align 4
  %845 = lshr i32 %835, 16
  %846 = and i32 %845, 255
  %847 = zext i32 %846 to i64
  %848 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %847
  %849 = load i32, i32* %848, align 4
  %850 = lshr i32 %835, 24
  %851 = zext i32 %850 to i64
  %852 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %851
  %853 = load i32, i32* %852, align 4
  %854 = xor i32 %839, %811
  %855 = xor i32 %854, %844
  %856 = xor i32 %855, %849
  %857 = xor i32 %856, %853
  %858 = add i32 %857, %72
  %859 = and i32 %858, 255
  %860 = zext i32 %859 to i64
  %861 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 0, i64 %860
  %862 = load i32, i32* %861, align 4
  %863 = lshr i32 %858, 8
  %864 = and i32 %863, 255
  %865 = zext i32 %864 to i64
  %866 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 1, i64 %865
  %867 = load i32, i32* %866, align 4
  %868 = lshr i32 %858, 16
  %869 = and i32 %868, 255
  %870 = zext i32 %869 to i64
  %871 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 2, i64 %870
  %872 = load i32, i32* %871, align 4
  %873 = lshr i32 %858, 24
  %874 = zext i32 %873 to i64
  %875 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %37, i64 0, i64 3, i64 %874
  %876 = load i32, i32* %875, align 4
  %877 = xor i32 %862, %834
  %878 = xor i32 %877, %867
  %879 = xor i32 %878, %872
  %880 = xor i32 %879, %876
  %881 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %39
  store i32 %857, i32* %881, align 8
  %882 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 %142
  store i32 %880, i32* %882, align 4
  %883 = icmp eq i64 %39, 6
  br i1 %883, label %912, label %884

884:                                              ; preds = %38
  %885 = xor i32 %45, %55
  %886 = xor i32 %44, %46
  %887 = icmp eq i64 %39, 2
  br i1 %887, label %888, label %897

888:                                              ; preds = %884
  %889 = xor i32 %45, -16711936
  %890 = xor i32 %44, -16711936
  %891 = xor i32 %43, 16711935
  %892 = xor i32 %42, 16711935
  %893 = xor i32 %41, 16776960
  %894 = xor i32 %40, -16776961
  %895 = xor i32 %885, 255
  %896 = xor i32 %886, -16711681
  br label %897

897:                                              ; preds = %884, %888
  %898 = phi i32 [ %889, %888 ], [ %45, %884 ]
  %899 = phi i32 [ %890, %888 ], [ %44, %884 ]
  %900 = phi i32 [ %891, %888 ], [ %43, %884 ]
  %901 = phi i32 [ %892, %888 ], [ %42, %884 ]
  %902 = phi i32 [ %893, %888 ], [ %41, %884 ]
  %903 = phi i32 [ %894, %888 ], [ %40, %884 ]
  %904 = phi i32 [ %895, %888 ], [ %885, %884 ]
  %905 = phi i32 [ %896, %888 ], [ %886, %884 ]
  %906 = xor i32 %47, %49
  %907 = xor i32 %49, %51
  %908 = xor i32 %48, %50
  %909 = xor i32 %50, %52
  %910 = add nuw nsw i64 %39, 2
  %911 = icmp ult i64 %910, 8
  br i1 %911, label %38, label %912

912:                                              ; preds = %38, %897
  %913 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 6
  %914 = load i32, i32* %913, align 8
  %915 = xor i32 %914, %21
  %916 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 7
  %917 = load i32, i32* %916, align 4
  %918 = xor i32 %917, %23
  %919 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %920 = load i32, i32* %919, align 16
  %921 = shl i32 %920, 16
  %922 = lshr i32 %920, 16
  %923 = and i32 %920, 65535
  %924 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  %925 = load i32, i32* %924, align 4
  %926 = and i32 %925, 65535
  %927 = lshr i32 %925, 16
  %928 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  %929 = load i32, i32* %928, align 8
  %930 = shl i32 %929, 16
  %931 = or i32 %927, %921
  %932 = xor i32 %931, %25
  %933 = xor i32 %932, %914
  %934 = xor i32 %933, %922
  %935 = xor i32 %934, %920
  %936 = xor i32 %935, %925
  %937 = xor i32 %933, %930
  %938 = shl i32 %914, 16
  %939 = xor i32 %917, %938
  %940 = xor i32 %939, %937
  %941 = lshr i32 %917, 16
  %942 = xor i32 %936, %941
  %943 = shl i32 %925, 16
  %944 = lshr i32 %929, 16
  %945 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  %946 = load i32, i32* %945, align 4
  %947 = shl i32 %946, 16
  %948 = xor i32 %931, %27
  %949 = xor i32 %948, %914
  %950 = xor i32 %949, %923
  %951 = xor i32 %950, %926
  %952 = xor i32 %951, %943
  %953 = xor i32 %952, %930
  %954 = xor i32 %951, %944
  %955 = xor i32 %953, %947
  %956 = lshr i32 %914, 16
  %957 = and i32 %917, 65535
  %958 = shl i32 %917, 16
  %959 = xor i32 %958, %938
  %960 = xor i32 %959, %955
  %961 = xor i32 %941, %956
  %962 = xor i32 %961, %917
  %963 = xor i32 %962, %954
  %964 = and i32 %920, -65536
  %965 = xor i32 %931, %29
  %966 = xor i32 %965, %964
  %967 = xor i32 %966, %922
  %968 = xor i32 %967, %925
  %969 = xor i32 %968, %930
  %970 = xor i32 %967, %944
  %971 = xor i32 %969, %947
  %972 = lshr i32 %946, 16
  %973 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 4
  %974 = load i32, i32* %973, align 16
  %975 = shl i32 %974, 16
  %976 = xor i32 %959, %975
  %977 = xor i32 %976, %971
  %978 = xor i32 %962, %972
  %979 = xor i32 %978, %970
  %980 = xor i32 %921, %31
  %981 = xor i32 %980, %922
  %982 = xor i32 %981, %964
  %983 = xor i32 %982, %926
  %984 = xor i32 %983, %929
  %985 = xor i32 %984, %944
  %986 = xor i32 %984, %947
  %987 = xor i32 %985, %972
  %988 = xor i32 %986, %975
  %989 = lshr i32 %974, 16
  %990 = xor i32 %987, %989
  %991 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 5
  %992 = load i32, i32* %991, align 4
  %993 = shl i32 %992, 16
  %994 = xor i32 %959, %917
  %995 = xor i32 %994, %993
  %996 = xor i32 %995, %988
  %997 = xor i32 %961, %990
  %998 = lshr i32 %992, 16
  %999 = xor i32 %914, %33
  %1000 = xor i32 %999, %920
  %1001 = xor i32 %1000, %927
  %1002 = xor i32 %1001, %930
  %1003 = xor i32 %1002, %946
  %1004 = xor i32 %1003, %972
  %1005 = xor i32 %1003, %975
  %1006 = xor i32 %1004, %989
  %1007 = xor i32 %1005, %993
  %1008 = xor i32 %1006, %998
  %1009 = xor i32 %1008, %956
  %1010 = xor i32 %959, %1007
  %1011 = xor i32 %956, %35
  %1012 = xor i32 %1011, %957
  %1013 = xor i32 %1012, %964
  %1014 = xor i32 %1013, %921
  %1015 = xor i32 %1014, %926
  %1016 = xor i32 %1015, %943
  %1017 = xor i32 %1016, %944
  %1018 = xor i32 %1017, %947
  %1019 = xor i32 %1018, %974
  %1020 = xor i32 %1019, %989
  %1021 = xor i32 %1020, %993
  %1022 = xor i32 %1021, %998
  %1023 = xor i32 %1022, %958
  %1024 = xor i32 %1022, %941
  %1025 = shl i32 %918, 16
  %1026 = xor i32 %1025, %6
  %1027 = lshr i32 %915, 16
  %1028 = xor i32 %1026, %1027
  %1029 = shl i32 %942, 16
  %1030 = xor i32 %1029, %8
  %1031 = lshr i32 %918, 16
  %1032 = xor i32 %1030, %1031
  %1033 = shl i32 %963, 16
  %1034 = xor i32 %1033, %10
  %1035 = lshr i32 %940, 16
  %1036 = xor i32 %1034, %1035
  %1037 = shl i32 %979, 16
  %1038 = xor i32 %1037, %12
  %1039 = lshr i32 %960, 16
  %1040 = xor i32 %1038, %1039
  %1041 = shl i32 %997, 16
  %1042 = xor i32 %1041, %14
  %1043 = lshr i32 %977, 16
  %1044 = xor i32 %1042, %1043
  %1045 = shl i32 %1009, 16
  %1046 = xor i32 %1045, %16
  %1047 = lshr i32 %996, 16
  %1048 = xor i32 %1047, %1046
  %1049 = shl i32 %1024, 16
  %1050 = xor i32 %1049, %18
  %1051 = lshr i32 %1010, 16
  %1052 = xor i32 %1050, %1051
  %1053 = and i32 %915, -65536
  %1054 = xor i32 %1053, %20
  %1055 = shl i32 %915, 16
  %1056 = xor i32 %1054, %1055
  %1057 = lshr i32 %1023, 16
  %1058 = xor i32 %1056, %1057
  %1059 = and i32 %918, -65536
  %1060 = and i32 %1023, -65536
  %1061 = xor i32 %1025, %1059
  %1062 = xor i32 %1061, %1045
  %1063 = xor i32 %1062, %1060
  %1064 = xor i32 %1063, %1058
  %1065 = and i32 %1026, -65536
  %1066 = shl i32 %1028, 16
  %1067 = xor i32 %1066, %1065
  %1068 = lshr i32 %1026, 16
  %1069 = or i32 %1067, %1068
  %1070 = lshr i32 %1030, 16
  %1071 = xor i32 %1070, %1069
  %1072 = and i32 %1030, -65536
  %1073 = xor i32 %1071, %1072
  %1074 = shl i32 %1036, 16
  %1075 = lshr i32 %1038, 16
  %1076 = shl i32 %1044, 16
  %1077 = lshr i32 %1046, 16
  %1078 = lshr i32 %1050, 16
  %1079 = shl i32 %1058, 16
  %1080 = lshr i32 %1064, 16
  %1081 = and i32 %1058, 65535
  %1082 = xor i32 %1073, %1077
  %1083 = xor i32 %1082, %1075
  %1084 = xor i32 %1083, %1074
  %1085 = xor i32 %1084, %1076
  %1086 = xor i32 %1085, %1048
  %1087 = xor i32 %1086, %1078
  %1088 = xor i32 %1087, %1079
  %1089 = xor i32 %1088, %1081
  %1090 = xor i32 %1089, %1080
  store i32 %1090, i32* %5, align 4
  %1091 = or i32 %1066, %1068
  %1092 = xor i32 %1091, %1065
  %1093 = and i32 %1032, 65535
  %1094 = xor i32 %1093, %1092
  %1095 = xor i32 %1094, %1036
  %1096 = lshr i32 %1034, 16
  %1097 = xor i32 %1095, %1096
  %1098 = shl i32 %1040, 16
  %1099 = lshr i32 %1042, 16
  %1100 = shl i32 %1048, 16
  %1101 = shl i32 %1052, 16
  %1102 = and i32 %1064, -65536
  %1103 = xor i32 %1097, %1099
  %1104 = xor i32 %1103, %1098
  %1105 = xor i32 %1104, %1052
  %1106 = xor i32 %1105, %1100
  %1107 = xor i32 %1106, %1101
  %1108 = xor i32 %1107, %1102
  %1109 = xor i32 %1108, %1080
  store i32 %1109, i32* %7, align 4
  %1110 = and i32 %1028, 65535
  %1111 = or i32 %1110, %1066
  %1112 = shl i32 %1032, 16
  %1113 = xor i32 %1070, %1111
  %1114 = xor i32 %1113, %1072
  %1115 = xor i32 %1114, %1112
  %1116 = xor i32 %1115, %1077
  %1117 = xor i32 %1116, %1075
  %1118 = xor i32 %1117, %1040
  %1119 = xor i32 %1118, %1074
  %1120 = xor i32 %1119, %1076
  %1121 = xor i32 %1120, %1052
  %1122 = xor i32 %1121, %1078
  %1123 = xor i32 %1122, %1081
  %1124 = xor i32 %1123, %1079
  %1125 = xor i32 %1124, %1080
  store i32 %1125, i32* %9, align 4
  %1126 = xor i32 %1072, %1092
  %1127 = xor i32 %1126, %1070
  %1128 = xor i32 %1127, %1096
  %1129 = xor i32 %1128, %1036
  %1130 = xor i32 %1129, %1099
  %1131 = xor i32 %1130, %1044
  %1132 = xor i32 %1131, %1074
  %1133 = xor i32 %1132, %1098
  %1134 = xor i32 %1133, %1081
  %1135 = xor i32 %1134, %1100
  %1136 = xor i32 %1135, %1101
  %1137 = xor i32 %1136, %1080
  store i32 %1137, i32* %11, align 4
  %1138 = or i32 %1112, %1068
  %1139 = xor i32 %1138, %1032
  %1140 = xor i32 %1139, %1077
  %1141 = xor i32 %1140, %1096
  %1142 = xor i32 %1141, %1036
  %1143 = xor i32 %1142, %1075
  %1144 = xor i32 %1143, %1040
  %1145 = xor i32 %1144, %1098
  %1146 = xor i32 %1145, %1076
  %1147 = xor i32 %1146, %1048
  %1148 = xor i32 %1147, %1078
  %1149 = xor i32 %1148, %1079
  %1150 = xor i32 %1149, %1101
  store i32 %1150, i32* %13, align 4
  %1151 = xor i32 %1112, %1067
  %1152 = or i32 %1151, %1070
  %1153 = xor i32 %1152, %1072
  %1154 = xor i32 %1153, %1036
  %1155 = xor i32 %1154, %1075
  %1156 = xor i32 %1155, %1040
  %1157 = xor i32 %1156, %1099
  %1158 = xor i32 %1157, %1044
  %1159 = xor i32 %1158, %1074
  %1160 = xor i32 %1159, %1076
  %1161 = xor i32 %1160, %1078
  %1162 = xor i32 %1161, %1052
  %1163 = xor i32 %1162, %1079
  %1164 = xor i32 %1163, %1100
  %1165 = xor i32 %1164, %1101
  %1166 = xor i32 %1165, %1080
  %1167 = xor i32 %1166, %1102
  store i32 %1167, i32* %15, align 4
  %1168 = xor i32 %1077, %1028
  %1169 = xor i32 %1168, %1036
  %1170 = xor i32 %1169, %1096
  %1171 = xor i32 %1170, %1040
  %1172 = xor i32 %1171, %1044
  %1173 = xor i32 %1172, %1099
  %1174 = xor i32 %1173, %1098
  %1175 = xor i32 %1174, %1048
  %1176 = xor i32 %1175, %1078
  %1177 = xor i32 %1176, %1052
  %1178 = xor i32 %1177, %1079
  %1179 = xor i32 %1178, %1100
  %1180 = xor i32 %1179, %1101
  %1181 = xor i32 %1180, %1064
  store i32 %1181, i32* %17, align 4
  %1182 = xor i32 %1028, %1068
  %1183 = xor i32 %1182, %1070
  %1184 = xor i32 %1183, %1112
  %1185 = xor i32 %1184, %1077
  %1186 = xor i32 %1185, %1075
  %1187 = xor i32 %1186, %1040
  %1188 = xor i32 %1187, %1044
  %1189 = xor i32 %1188, %1074
  %1190 = xor i32 %1189, %1076
  %1191 = xor i32 %1190, %1048
  %1192 = xor i32 %1191, %1078
  %1193 = xor i32 %1192, %1079
  %1194 = xor i32 %1193, %1101
  %1195 = xor i32 %1194, %1064
  store i32 %1195, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #6
  ret void
}

declare dso_local i32 @php_hash_copy(i8*, i8*, i8*) #5

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn writeonly }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
