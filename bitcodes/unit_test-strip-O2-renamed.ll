; ModuleID = 'unit_test-strip-O2-renamed.bc'
source_filename = "daemon/unit_test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %1*, %0*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%1 = type { %1*, %0*, i32 }
%2 = type { i64, i64 }
%3 = type { [100 x i8], [1024 x i8], i32, i64, i64, i32, i64, i64, %2*, x86_fp80*, i64*, x86_fp80* }
%4 = type { %5, i8*, i32, i8*, [37 x i8], i32, i8*, i8*, i8*, i32, i32*, i32, i64, i32, i8*, i8*, i8*, i8*, %6*, i8, i8*, i8*, i8, i64, i8, i32, i8, i8*, %7, [2 x i32], %10*, i32, i64, i64, i8, i64, i8*, i8*, i8*, i64, %0*, i32, i32, %11*, %11*, %34, %34, %14, i32, i32, i32, %16*, %16*, %17*, %32, %31*, %32, i32, %34, %34, %34, %34, %36, %36, %4* }
%5 = type { [2 x %5*], i8 }
%6 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%7 = type { %8 }
%8 = type { i32, i32, i32, i32, i32, i16, i16, %9 }
%9 = type { %9*, %9* }
%10 = type { i64, i64, i8*, i8, i8, i64, i64 }
%11 = type { %5, i32, i32, i8*, i32, i8*, i8*, i8*, i32, i8*, i8*, i8*, i32, x86_fp80, x86_fp80, i8*, i8*, i8*, i32, i32, i32, i32, i32, %12*, %12*, %12*, i32, i32, i32, float, i32, i32, i8*, i8*, i32, i32, x86_fp80, x86_fp80, i32, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, %13*, %13*, %13*, %13*, %17*, %11*, %11*, %11* }
%12 = type { i8*, i8*, i32*, x86_fp80*, i64*, i64*, x86_fp80, i32, %10*, i8*, %11* }
%13 = type { %5, i8*, i32, i32, i32, i8*, i64 }
%14 = type { i32, i32, i32, i32, %15*, %32 }
%15 = type { i32, i32, i32, i64, i64, i64, i8*, i32, i8*, i32, i8*, i8*, i8*, i64, i32, i64, i8*, i8*, i8*, x86_fp80, x86_fp80, i8*, i8*, i32, i32, i32, i32, i64, i32, i32, i64, %15*, %15*, %15* }
%16 = type { i8*, i32, i8*, i8*, i8*, i32, i8*, i8*, i8*, i8*, i8*, i32, x86_fp80, x86_fp80, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i8*, i8*, %12*, %12*, %12*, %16*, [8 x i8] }
%17 = type { %5, %5, [201 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i64, i64, i32, i32*, i32, i64, i32, i8*, [4097 x i8], %32, i64, i64, i64, i64, i8*, i8*, [5 x i64], i64, i32, i32, i64, %18, %18, i64, i64, %19*, %4*, %17*, x86_fp80, x86_fp80, %34, %20*, %11*, i64, [27 x i8], %34, %21* }
%18 = type { i64, i64 }
%19 = type { %5, i8*, i32, i64, %34 }
%20 = type { i8*, i32, i8*, i8*, i32, i8*, i32, %13*, %13*, %13*, %13*, %13*, %17*, %20* }
%21 = type { %5, i8*, i8*, i32, i32, i64, i64, i32, i32, i32, i8*, i64, %22*, [8 x i64], i64, i8, %18, x86_fp80, x86_fp80, x86_fp80, i64, i64, x86_fp80, x86_fp80, %21*, %17*, i64, i32, i64, [33 x i8], %30*, [0 x i32], [8 x i8] }
%22 = type { %23, %25, %26 }
%23 = type { %24 }
%24 = type { i64, i64 }
%25 = type { void (%21*)*, void (%21*, i64, i32)*, void (%21*)* }
%26 = type { void (%21*, %27*, i64, i64)*, i32 (%27*, i64*)*, i32 (%27*)*, void (%27*)*, i64 (%21*)*, i64 (%21*)* }
%27 = type { %21*, i64, i64, %28 }
%28 = type { %29 }
%29 = type { i64, i64, i8 }
%30 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i8*, i32, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %13*, %21*, %30* }
%31 = type { i8*, i8*, i32, i32, %31* }
%32 = type { %33 }
%33 = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%34 = type { %35, %32 }
%35 = type { %5*, i32 (i8*, i8*)* }
%36 = type { %37*, i32 }
%37 = type opaque
%38 = type { i8*, i8*, i8* }
%39 = type { %18, %18, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %50, %51, %52, %53 }
%40 = type { i64 }
%41 = type { i64 }
%42 = type { i64 }
%43 = type { i64 }
%44 = type { i64 }
%45 = type { i64 }
%46 = type { i64 }
%47 = type { i64 }
%48 = type { i64 }
%49 = type { i64 }
%50 = type { i64 }
%51 = type { i64 }
%52 = type { i64 }
%53 = type { i64 }
%54 = type { x86_fp80, i8*, [8 x i8] }

@stderr = external dso_local local_unnamed_addr global %0*, align 8
@0 = private unnamed_addr constant [41 x i8] c"Exists flags missing for number %0.7Lf!\0A\00", align 1
@1 = private unnamed_addr constant [180 x i8] c"%0.7Lf original\0A%0.7Lf packed and unpacked, (stored as 0x%08X, diff %0.7Lf, %0.7Lf%%)\0A%s printed after unpacked (%zu bytes)\0A%0.7Lf re-parsed from printed (diff %0.7Lf, %0.7Lf%%)\0A\0A\00", align 1
@2 = private unnamed_addr constant [72 x i8] c"ERROR: printed number %s is reported to have length %zu but it has %zu\0A\00", align 1
@3 = private unnamed_addr constant [60 x i8] c"WARNING: packing number %0.7Lf has accuracy loss %0.7Lf %%\0A\00", align 1
@4 = private unnamed_addr constant [96 x i8] c"WARNING: re-parsing the packed, unpacked and printed number %0.7Lf has accuracy loss %0.7Lf %%\0A\00", align 1
@5 = private unnamed_addr constant [44 x i8] c"\0A\0ABenchmarking %d numbers, please wait...\0A\0A\00", align 1
@6 = private unnamed_addr constant [40 x i8] c"SYSTEM  LONG DOUBLE    SIZE: %zu bytes\0A\00", align 1
@7 = private unnamed_addr constant [40 x i8] c"NETDATA FLOATING POINT SIZE: %zu bytes\0A\00", align 1
@8 = private unnamed_addr constant [49 x i8] c"\0ANETDATA NEEDS %0.2Lf TIMES MORE MEMORY. Sorry!\0A\00", align 1
@9 = private unnamed_addr constant [78 x i8] c"\0ANETDATA INTERNAL FLOATING POINT ARITHMETICS NEEDS %0.2Lf TIMES LESS MEMORY.\0A\00", align 1
@10 = private unnamed_addr constant [25 x i8] c"\0ANETDATA FLOATING POINT\0A\00", align 1
@11 = private unnamed_addr constant [27 x i8] c"MIN POSITIVE VALUE %0.7Lf\0A\00", align 1
@12 = private unnamed_addr constant [27 x i8] c"MAX POSITIVE VALUE %0.7Lf\0A\00", align 1
@13 = private unnamed_addr constant [27 x i8] c"MIN NEGATIVE VALUE %0.7Lf\0A\00", align 1
@14 = private unnamed_addr constant [27 x i8] c"MAX NEGATIVE VALUE %0.7Lf\0A\00", align 1
@15 = private unnamed_addr constant [44 x i8] c"Maximum accuracy loss accepted: %0.7Lf%%\0A\0A\0A\00", align 1
@16 = private unnamed_addr constant [32 x i8] c"INTERNAL LONG DOUBLE PRINTING: \00", align 1
@17 = private unnamed_addr constant [42 x i8] c"user %0.5Lf, system %0.5Lf, total %0.5Lf\0A\00", align 1
@18 = private unnamed_addr constant [32 x i8] c"SYSTEM   LONG DOUBLE PRINTING: \00", align 1
@19 = private unnamed_addr constant [7 x i8] c"%0.7Lf\00", align 1
@20 = private unnamed_addr constant [34 x i8] c"NETDATA CODE IS SLOWER %0.2Lf %%\0A\00", align 1
@21 = private unnamed_addr constant [41 x i8] c"NETDATA CODE IS  F A S T E R  %0.2Lf %%\0A\00", align 1
@22 = private unnamed_addr constant [52 x i8] c"\0AINTERNAL LONG DOUBLE PRINTING WITH PACK / UNPACK: \00", align 1
@23 = private unnamed_addr constant [57 x i8] c"WITH PACKING UNPACKING NETDATA CODE IS SLOWER %0.2Lf %%\0A\00", align 1
@24 = private unnamed_addr constant [74 x i8] c"EVEN WITH PACKING AND UNPACKING, NETDATA CODE IS  F A S T E R  %0.2Lf %%\0A\00", align 1
@25 = private unnamed_addr constant [10 x i8] c"1.2345678\00", align 1
@26 = private unnamed_addr constant [6 x i8] c"-35.6\00", align 1
@27 = private unnamed_addr constant [8 x i8] c"0.00123\00", align 1
@28 = private unnamed_addr constant [17 x i8] c"23842384234234.2\00", align 1
@29 = private unnamed_addr constant [3 x i8] c".1\00", align 1
@30 = private unnamed_addr constant [8 x i8] c"1.2e-10\00", align 1
@31 = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@32 = private unnamed_addr constant [7 x i8] c"1wrong\00", align 1
@33 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@34 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@35 = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @27, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @28, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @29, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @32, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @33, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @34, i32 0, i32 0), i8* null], align 16
@36 = private unnamed_addr constant [6 x i8] c"world\00", align 1
@37 = private unnamed_addr constant [61 x i8] c"Value '%s' is parsed as %Lf, but system believes it is %Lf.\0A\00", align 1
@38 = private unnamed_addr constant [72 x i8] c"Value '%s' is parsed as %Lf, but system believes it is %Lf, delta %Lf.\0A\00", align 1
@39 = private unnamed_addr constant [57 x i8] c"Value '%s' is parsed correctly, but endptr is not right\0A\00", align 1
@40 = private unnamed_addr constant [85 x i8] c"str2ld() parsed value '%s' exactly the same way with strtold(), returned %Lf vs %Lf\0A\00", align 1
@41 = private unnamed_addr constant [48 x i8] c"string1: %s\0Astring2: %s\0Astring3: %s\0Astring4: %s\00", align 1
@42 = private unnamed_addr constant [30 x i8] c"\0Abuffer_sprintf() is faulty.\0A\00", align 1
@43 = private unnamed_addr constant [28 x i8] c"\0Astring  : %s (length %zu)\0A\00", align 1
@44 = private unnamed_addr constant [28 x i8] c"\0Abuffer  : %s (length %zu)\0A\00", align 1
@45 = private unnamed_addr constant [28 x i8] c"\0Aexpected: %s (length %zu)\0A\00", align 1
@46 = private unnamed_addr constant [37 x i8] c"buffer_sprintf() works as expected.\0A\00", align 1
@test1_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test1_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003A000000000000000, x86_fp80 0xK4003F000000000000000, x86_fp80 0xK4004A000000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004F000000000000000, x86_fp80 0xK40058C00000000000000, x86_fp80 0xK4005A000000000000000, x86_fp80 0xK4005B400000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test1 = dso_local global %3 { [100 x i8] c"test1\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values stored at exactly second boundariesi32 1, i64 1, i64 1, i32 0, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test1_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test1_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test2_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test2_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003A000000000000000, x86_fp80 0xK4003F000000000000000, x86_fp80 0xK4004A000000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004F000000000000000, x86_fp80 0xK40058C00000000000000, x86_fp80 0xK4005A000000000000000, x86_fp80 0xK4005B400000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test2 = dso_local global %3 { [100 x i8] c"test2\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values stored in the middle of second boundariesi32 1, i64 1, i64 1, i32 0, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test2_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test2_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test3_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test3_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000], align 16
@test3 = dso_local global %3 { [100 x i8] c"test3\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values stored at exactly second boundariesi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test3_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test3_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test4_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test4_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000, x86_fp80 0xK4002A000000000000000], align 16
@test4 = dso_local global %3 { [100 x i8] c"test4\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values stored in the middle of second boundariesi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test4_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test4_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test5_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 2004318071 }, %2 { i64 1000000, i64 4008636142 }, %2 { i64 1000000, i64 0 }], align 16
@test5_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401DEEEEEEEE00000000, x86_fp80 0xK401B8888888800000000], align 16
@test5 = dso_local global %3 { [100 x i8] c"test5\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test 32-bit incremental values overflowi32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test5_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test5_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test5b_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }, %2 { i64 1000000, i64 8608480567731124087 }, %2 { i64 1000000, i64 -1229782938247303442 }, %2 { i64 1000000, i64 0 }], align 16
@test5b_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403DEEEEEEEEEEEEEEEE, x86_fp80 0xK403B8888888888888888], align 16
@test5b = dso_local global %3 { [100 x i8] c"test5b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test 64-bit incremental values overflow\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test5b_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test5b_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test6_feed = dso_local global [16 x %2] [%2 { i64 250000, i64 1000 }, %2 { i64 250000, i64 2000 }, %2 { i64 250000, i64 3000 }, %2 { i64 250000, i64 4000 }, %2 { i64 250000, i64 5000 }, %2 { i64 250000, i64 6000 }, %2 { i64 250000, i64 7000 }, %2 { i64 250000, i64 8000 }, %2 { i64 250000, i64 9000 }, %2 { i64 250000, i64 10000 }, %2 { i64 250000, i64 11000 }, %2 { i64 250000, i64 12000 }, %2 { i64 250000, i64 13000 }, %2 { i64 250000, i64 14000 }, %2 { i64 250000, i64 15000 }, %2 { i64 250000, i64 16000 }], align 16
@test6_results = dso_local global [4 x x86_fp80] [x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400AFA00000000000000], align 16
@test6 = dso_local global %3 { [100 x i8] c"test6\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated within the same secondi32 1, i64 1, i64 1, i32 1, i64 16, i64 4, %2* getelementptr inbounds ([16 x %2], [16 x %2]* @test6_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([4 x x86_fp80], [4 x x86_fp80]* @test6_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test7_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 2000000, i64 2000 }, %2 { i64 2000000, i64 3000 }, %2 { i64 2000000, i64 4000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 2000000, i64 6000 }, %2 { i64 2000000, i64 7000 }, %2 { i64 2000000, i64 8000 }, %2 { i64 2000000, i64 9000 }, %2 { i64 2000000, i64 10000 }], align 16
@test7_results = dso_local global [19 x x86_fp80] [x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000, x86_fp80 0xK4007FA00000000000000], align 16
@test7 = dso_local global %3 { [100 x i8] c"test7\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in long durations\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 1, i64 10, i64 18, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test7_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([19 x x86_fp80], [19 x x86_fp80]* @test7_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test8_feed = dso_local global [6 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 2000000, i64 2000 }, %2 { i64 2000000, i64 3000 }, %2 { i64 2000000, i64 4000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 2000000, i64 6000 }], align 16
@test8_results = dso_local global [10 x x86_fp80] [x86_fp80 0xK40099C40000000000000, x86_fp80 0xK4009FA00000000000000, x86_fp80 0xK400A8CA0000000000000, x86_fp80 0xK400ABB80000000000000, x86_fp80 0xK400ACB20000000000000, x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400B84D0000000000000, x86_fp80 0xK400B9C40000000000000, x86_fp80 0xK400BA410000000000000, x86_fp80 0xK400BBB80000000000000], align 16
@test8 = dso_local global %3 { [100 x i8] c"test8\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values updated in long durationsi32 1, i64 1, i64 1, i32 0, i64 6, i64 10, %2* getelementptr inbounds ([6 x %2], [6 x %2]* @test8_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([10 x x86_fp80], [10 x x86_fp80]* @test8_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test9_feed = dso_local global [16 x %2] [%2 { i64 250000, i64 1000 }, %2 { i64 250000, i64 2000 }, %2 { i64 250000, i64 3000 }, %2 { i64 250000, i64 4000 }, %2 { i64 250000, i64 5000 }, %2 { i64 250000, i64 6000 }, %2 { i64 250000, i64 7000 }, %2 { i64 250000, i64 8000 }, %2 { i64 250000, i64 9000 }, %2 { i64 250000, i64 10000 }, %2 { i64 250000, i64 11000 }, %2 { i64 250000, i64 12000 }, %2 { i64 250000, i64 13000 }, %2 { i64 250000, i64 14000 }, %2 { i64 250000, i64 15000 }, %2 { i64 250000, i64 16000 }], align 16
@test9_results = dso_local global [4 x x86_fp80] [x86_fp80 0xK400AFA00000000000000, x86_fp80 0xK400BFA00000000000000, x86_fp80 0xK400CBB80000000000000, x86_fp80 0xK400CFA00000000000000], align 16
@test9 = dso_local global %3 { [100 x i8] c"test9\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test absolute values updated within the same secondi32 1, i64 1, i64 1, i32 0, i64 16, i64 4, %2* getelementptr inbounds ([16 x %2], [16 x %2]* @test9_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([4 x x86_fp80], [4 x x86_fp80]* @test9_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test10_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 600000, i64 1600 }, %2 { i64 200000, i64 1800 }, %2 { i64 1000000, i64 2800 }, %2 { i64 200000, i64 3000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 600000, i64 5600 }, %2 { i64 400000, i64 6000 }, %2 { i64 900000, i64 6900 }, %2 { i64 1000000, i64 7900 }], align 16
@test10_results = dso_local global [7 x x86_fp80] [x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000, x86_fp80 0xK4008FA00000000000000], align 16
@test10 = dso_local global %3 { [100 x i8] c"test10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in short and long durations\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", i32 1, i64 1, i64 1, i32 1, i64 10, i64 7, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test10_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([7 x x86_fp80], [7 x x86_fp80]* @test10_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test11_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test11_feed2 = dso_local global [10 x i64] [i64 10, i64 20, i64 30, i64 40, i64 50, i64 60, i64 70, i64 80, i64 90, i64 100], align 16
@test11_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000], align 16
@test11_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000, x86_fp80 0xK4004C800000000000000], align 16
@test11 = dso_local global %3 { [100 x i8] c"test11\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test percentage-of-incremental-row with equal valuesi32 1, i64 1, i64 1, i32 2, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test11_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test11_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test11_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test11_results2, i32 0, i32 0) }, align 8
@test12_feed = dso_local global [10 x %2] [%2 { i64 0, i64 10 }, %2 { i64 1000000, i64 20 }, %2 { i64 1000000, i64 30 }, %2 { i64 1000000, i64 40 }, %2 { i64 1000000, i64 50 }, %2 { i64 1000000, i64 60 }, %2 { i64 1000000, i64 70 }, %2 { i64 1000000, i64 80 }, %2 { i64 1000000, i64 90 }, %2 { i64 1000000, i64 100 }], align 16
@test12_feed2 = dso_local global [10 x i64] [i64 30, i64 60, i64 90, i64 120, i64 150, i64 180, i64 210, i64 240, i64 270, i64 300], align 16
@test12_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000, x86_fp80 0xK4003C800000000000000], align 16
@test12_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000, x86_fp80 0xK40059600000000000000], align 16
@test12 = dso_local global %3 { [100 x i8] c"test12\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test percentage-of-incremental-row with equal valuesi32 1, i64 1, i64 1, i32 2, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test12_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test12_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test12_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test12_results2, i32 0, i32 0) }, align 8
@test13_feed = dso_local global [10 x %2] [%2 { i64 500000, i64 1000 }, %2 { i64 600000, i64 1600 }, %2 { i64 200000, i64 1800 }, %2 { i64 1000000, i64 2800 }, %2 { i64 200000, i64 3000 }, %2 { i64 2000000, i64 5000 }, %2 { i64 600000, i64 5600 }, %2 { i64 400000, i64 6000 }, %2 { i64 900000, i64 6900 }, %2 { i64 1000000, i64 7900 }], align 16
@test13_results = dso_local global [7 x x86_fp80] [x86_fp80 0xK4005A6AAAA3AD18D2800, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000, x86_fp80 0xK4005C800000000000000], align 16
@test13 = dso_local global %3 { [100 x i8] c"test13\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental values updated in short and long durationsi32 1, i64 1, i64 1, i32 2, i64 10, i64 7, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test13_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([7 x x86_fp80], [7 x x86_fp80]* @test13_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14_feed = dso_local global [10 x %2] [%2 { i64 0, i64 95586989362191425 }, %2 { i64 13573000, i64 95587031520116573 }, %2 { i64 29969000, i64 95587112906971816 }, %2 { i64 29958000, i64 95587195123709412 }, %2 { i64 30054000, i64 95587277093403523 }, %2 { i64 34952000, i64 95587372099099340 }, %2 { i64 25046000, i64 95587442350557688 }, %2 { i64 29947000, i64 95587526344914973 }, %2 { i64 30054000, i64 95587608265762786 }, %2 { i64 29942000, i64 95587690623894224 }], align 16
@test14_results = dso_local global [8 x x86_fp80] [x86_fp80 0xK4003B91B4CC250720800, x86_fp80 0xK4003AECFFEB074A77000, x86_fp80 0xK4003AF0B2E9CCB7D4000, x86_fp80 0xK4003AE3AFB7E90FF9800, x86_fp80 0xK4003B016FA82E87D3000, x86_fp80 0xK4003B38245F5AD96A800, x86_fp80 0xK4003B0B991BC55864800, x86_fp80 0xK4003AF52157689CA1800], align 16
@test14 = dso_local global %3 { [100 x i8] c"test14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with real datai32 30, i64 8, i64 1000000000, i32 1, i64 10, i64 8, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([8 x x86_fp80], [8 x x86_fp80]* @test14_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14b_feed = dso_local global [10 x %2] [%2 zeroinitializer, %2 { i64 13573000, i64 13573000 }, %2 { i64 29969000, i64 43542000 }, %2 { i64 29958000, i64 73500000 }, %2 { i64 30054000, i64 103554000 }, %2 { i64 34952000, i64 138506000 }, %2 { i64 25046000, i64 163552000 }, %2 { i64 29947000, i64 193499000 }, %2 { i64 30054000, i64 223553000 }, %2 { i64 29942000, i64 253495000 }], align 16
@test14b_results = dso_local global [8 x x86_fp80] [x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000], align 16
@test14b = dso_local global %3 { [100 x i8] c"test14b\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with dummy datai32 30, i64 1, i64 1, i32 1, i64 10, i64 8, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14b_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([8 x x86_fp80], [8 x x86_fp80]* @test14b_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test14c_feed = dso_local global [10 x %2] [%2 { i64 29000000, i64 29000000 }, %2 { i64 1000000, i64 30000000 }, %2 { i64 30000000, i64 60000000 }, %2 { i64 30000000, i64 90000000 }, %2 { i64 30000000, i64 120000000 }, %2 { i64 30000000, i64 150000000 }, %2 { i64 30000000, i64 180000000 }, %2 { i64 30000000, i64 210000000 }, %2 { i64 30000000, i64 240000000 }, %2 { i64 30000000, i64 270000000 }], align 16
@test14c_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000, x86_fp80 0xK4012F424000000000000], align 16
@test14c = dso_local global %3 { [100 x i8] c"test14c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"issue #981 with dummy data, checking for late starti32 30, i64 1, i64 1, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test14c_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test14c_results, i32 0, i32 0), i64* null, x86_fp80* null }, align 8
@test15_feed = dso_local global [10 x %2] [%2 { i64 0, i64 1068066388 }, %2 { i64 1008752, i64 1068822698 }, %2 { i64 993809, i64 1069573072 }, %2 { i64 995911, i64 1070324135 }, %2 { i64 1014562, i64 1071078166 }, %2 { i64 994684, i64 1071831349 }, %2 { i64 993128, i64 1072235739 }, %2 { i64 1010332, i64 1072958871 }, %2 { i64 1003394, i64 1073707019 }, %2 { i64 995201, i64 1074460255 }], align 16
@test15_feed2 = dso_local global [10 x i64] [i64 178825286, i64 178825286, i64 178825286, i64 178825286, i64 178825498, i64 178825498, i64 179165652, i64 179202964, i64 179203282, i64 179204130], align 16
@test15_results = dso_local global [9 x x86_fp80] [x86_fp80 0xK400BB70B439581062800, x86_fp80 0xK400BB853A1CAC0831000, x86_fp80 0xK400BB81D45A1CAC08000, x86_fp80 0xK400BB572872B020C4800, x86_fp80 0xK400BB8D21CAC08312800, x86_fp80 0xK400AC824353F7CED9000, x86_fp80 0xK400BAEAD3F7CED916800, x86_fp80 0xK400BB5F4353F7CED9000, x86_fp80 0xK400BB8BE04189374C000], align 16
@test15_results2 = dso_local global [9 x x86_fp80] [x86_fp80 0xK00000000000000000000, x86_fp80 0xK00000000000000000000, x86_fp80 0xK3FF6A379166C530F7000, x86_fp80 0xK3FFFD0F5092BF8AC5000, x86_fp80 0xK3FF9AE4E92344A8A6800, x86_fp80 0xK400AA5F30624DD2F1800, x86_fp80 0xK40079144F41F212D7800, x86_fp80 0xK4001B58C2C5E2CDC0000, x86_fp80 0xK4001D3129CBAB649D000], align 16
@test15 = dso_local global %3 { [100 x i8] c"test15\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", [1024 x i8] c"test incremental with 2 dimensionsi32 1, i64 8, i64 1024, i32 1, i64 10, i64 9, %2* getelementptr inbounds ([10 x %2], [10 x %2]* @test15_feed, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test15_results, i32 0, i32 0), i64* getelementptr inbounds ([10 x i64], [10 x i64]* @test15_feed2, i32 0, i32 0), x86_fp80* getelementptr inbounds ([9 x x86_fp80], [9 x x86_fp80]* @test15_results2, i32 0, i32 0) }, align 8
@47 = private unnamed_addr constant [24 x i8] c"\0ARunning test '%s':\0A%s\0A\00", align 1
@default_rrd_memory_mode = external dso_local local_unnamed_addr global i32, align 4
@default_rrd_update_every = external dso_local local_unnamed_addr global i32, align 4
@48 = private unnamed_addr constant [12 x i8] c"unittest-%s\00", align 1
@localhost = external dso_local local_unnamed_addr global %4*, align 8
@49 = private unnamed_addr constant [8 x i8] c"netdata\00", align 1
@50 = private unnamed_addr constant [13 x i8] c"Unit Testing\00", align 1
@51 = private unnamed_addr constant [8 x i8] c"a value\00", align 1
@52 = private unnamed_addr constant [9 x i8] c"unittest\00", align 1
@53 = private unnamed_addr constant [5 x i8] c"dim1\00", align 1
@54 = private unnamed_addr constant [5 x i8] c"dim2\00", align 1
@debug_flags = external dso_local local_unnamed_addr global i64, align 8
@55 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@56 = private unnamed_addr constant [107 x i8] c"    > %s: feeding position %lu, after %0.3f seconds (%0.3f seconds from start), delta %0.7Lf, rate %0.7Lf\0A\00", align 1
@57 = private unnamed_addr constant [32 x i8] c"    > %s: feeding position %lu\0A\00", align 1
@58 = private unnamed_addr constant [30 x i8] c"       >> %s with value %lld\0A\00", align 1
@59 = private unnamed_addr constant [83 x i8] c"    > %s: fixing first collection time to be %llu microseconds to second boundary\0A\00", align 1
@60 = private unnamed_addr constant [73 x i8] c"    %s stored %zu entries, but we were expecting %lu, ### E R R O R ###\0A\00", align 1
@61 = private unnamed_addr constant [90 x i8] c"    %s/%s: checking position %lu (at %lu secs), expecting value %0.7Lf, found %0.7Lf, %s\0A\00", align 1
@62 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@63 = private unnamed_addr constant [18 x i8] c"### E R R O R ###\00", align 1
@64 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@65 = private unnamed_addr constant [2 x i8] c".\00", align 1
@66 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@67 = private unnamed_addr constant [13 x i8] c"/etc/netdata\00", align 1
@68 = private unnamed_addr constant [16 x i8] c"/etc/netdata///\00", align 1
@69 = private unnamed_addr constant [9 x i8] c"health.d\00", align 1
@70 = private unnamed_addr constant [22 x i8] c"/etc/netdata/health.d\00", align 1
@71 = private unnamed_addr constant [12 x i8] c"///health.d\00", align 1
@72 = private unnamed_addr constant [11 x i8] c"./health.d\00", align 1
@73 = private unnamed_addr constant [10 x i8] c"/health.d\00", align 1
@74 = private unnamed_addr constant [10 x %38] [%38 { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @65, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @69, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @68, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @67, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @70, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @64, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @72, i32 0, i32 0) }, %38 { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @66, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @73, i32 0, i32 0) }, %38 zeroinitializer], align 16
@75 = private unnamed_addr constant [42 x i8] c"strdupz_path_subpath(\22%s\22, \22%s\22) = \22%s\22: \00", align 1
@76 = private unnamed_addr constant [8 x i8] c"FAILED\0A\00", align 1
@77 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@78 = internal unnamed_addr global i32 0, align 4
@79 = private unnamed_addr constant [20 x i8] c"unittest-%d-%ld-%ld\00", align 1
@80 = private unnamed_addr constant [9 x i8] c"absolute\00", align 1
@81 = private unnamed_addr constant [12 x i8] c"incremental\00", align 1
@82 = private unnamed_addr constant [41 x i8] c"\0A\0ALOOP = %lu, DELAY = %ld, VALUE = %lld\0A\00", align 1
@83 = private unnamed_addr constant [64 x i8] c"\0A\0AORIGINAL INCREMENT: %lu, INCREMENT %ld, DELAY %ld, SHIFT %ld\0A\00", align 1
@84 = private unnamed_addr constant [40 x i8] c"\0APOSITION: c = %lu, EXPECTED VALUE %lu\0A\00", align 1
@85 = private unnamed_addr constant [35 x i8] c"\09 %s %0.7Lf (PACKED AS %u)   ->   \00", align 1
@86 = private unnamed_addr constant [9 x i8] c"passed.\0A\00", align 1
@87 = private unnamed_addr constant [26 x i8] c"ERROR! (expected %0.7Lf)\0A\00", align 1
@88 = private unnamed_addr constant [31 x i8] c"\0A\0AUNIT TEST(%ld, %ld) FAILED\0A\0A\00", align 1
@89 = private unnamed_addr constant [36 x i8] c"Wrong flags. Given %08x, Got %08x!\0A\00", align 1
@90 = private unnamed_addr constant [58 x i8] c"Wrong number returned. Expected %0.7Lf, returned %0.7Lf!\0A\00", align 1
@91 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@92 = private unnamed_addr constant [10 x i8] c"0.0000001\00", align 1
@93 = private unnamed_addr constant [4 x i8] c"100\00", align 1
@94 = private unnamed_addr constant [5 x i8] c"-100\00", align 1
@95 = private unnamed_addr constant [11 x i8] c"123.456789\00", align 1
@96 = private unnamed_addr constant [13 x i8] c"9999.9999999\00", align 1
@97 = private unnamed_addr constant [14 x i8] c"-9999.9999999\00", align 1
@98 = private unnamed_addr constant [10 x { x86_fp80, i8* }] [{ x86_fp80, i8* } { x86_fp80 0xK00000000000000000000, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @91, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE7D6BF94D5E57A4000, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @92, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE7C14605F3B4EE0800, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @92, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK3FE189705F4136B4A800, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @91, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK4005C800000000000000, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @93, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xKC005C800000000000000, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @94, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK4005F6E9E03FDA64C800, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @95, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xK400C9C3FFFFFF94A0000, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @96, i32 0, i32 0) }, { x86_fp80, i8* } { x86_fp80 0xKC00C9C3FFFFFF94A0000, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @97, i32 0, i32 0) }, { x86_fp80, i8* } zeroinitializer], align 16
@99 = private unnamed_addr constant [8 x i8] c"%0.12Lf\00", align 1
@100 = private unnamed_addr constant [45 x i8] c"'%s' (system) printed as '%s' (netdata): %s\0A\00", align 1
@101 = private unnamed_addr constant [7 x i8] c"FAILED\00", align 1
@102 = private unnamed_addr constant [32 x i8] c"RRDCALC_STATUSes are sortable.\0A\00", align 1
@103 = private unnamed_addr constant [16 x i8] c"Creating chart\0A\00", align 1
@104 = private unnamed_addr constant [6 x i8] c"chart\00", align 1
@105 = private unnamed_addr constant [3 x i8] c"ID\00", align 1
@106 = private unnamed_addr constant [7 x i8] c"family\00", align 1
@107 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@108 = private unnamed_addr constant [39 x i8] c"Created chart with id '%s', name '%s'\0A\00", align 1
@109 = private unnamed_addr constant [25 x i8] c"Creating dimension DIM1\0A\00", align 1
@110 = private unnamed_addr constant [5 x i8] c"DIM1\00", align 1
@111 = private unnamed_addr constant [43 x i8] c"Created dimension with id '%s', name '%s'\0A\00", align 1
@112 = private unnamed_addr constant [25 x i8] c"Creating dimension DIM2\0A\00", align 1
@113 = private unnamed_addr constant [5 x i8] c"DIM2\00", align 1
@114 = private unnamed_addr constant [30 x i8] c"Renaming chart to CHARTNAME1\0A\00", align 1
@115 = private unnamed_addr constant [11 x i8] c"CHARTNAME1\00", align 1
@116 = private unnamed_addr constant [41 x i8] c"Renamed chart with id '%s' to name '%s'\0A\00", align 1
@117 = private unnamed_addr constant [30 x i8] c"Renaming chart to CHARTNAME2\0A\00", align 1
@118 = private unnamed_addr constant [11 x i8] c"CHARTNAME2\00", align 1
@119 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM1 to DIM1NAME1\0A\00", align 1
@120 = private unnamed_addr constant [10 x i8] c"DIM1NAME1\00", align 1
@121 = private unnamed_addr constant [45 x i8] c"Renamed dimension with id '%s' to name '%s'\0A\00", align 1
@122 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM1 to DIM1NAME2\0A\00", align 1
@123 = private unnamed_addr constant [10 x i8] c"DIM1NAME2\00", align 1
@124 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM2 to DIM2NAME1\0A\00", align 1
@125 = private unnamed_addr constant [10 x i8] c"DIM2NAME1\00", align 1
@126 = private unnamed_addr constant [38 x i8] c"Renaming dimension DIM2 to DIM2NAME2\0A\00", align 1
@127 = private unnamed_addr constant [10 x i8] c"DIM2NAME2\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @check_storage_number(x86_fp80 %0, i32 %1) local_unnamed_addr #0 {
  %3 = alloca [100 x i8], align 16
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %4) #9
  %5 = tail call i32 @pack_storage_number(x86_fp80 %0, i32 16777216) #9
  %6 = tail call x86_fp80 @unpack_storage_number(i32 %5) #9
  %7 = and i32 %5, 117440512
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = load %0*, %0** @stderr, align 8
  %11 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %10, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @0, i64 0, i64 0), x86_fp80 %0) #10
  br label %55

12:                                               ; preds = %2
  %13 = fsub x86_fp80 %6, %0
  %14 = fmul x86_fp80 %13, 0xK4005C800000000000000
  %15 = fdiv x86_fp80 %14, %0
  %16 = fcmp olt x86_fp80 %15, 0xK00000000000000000000
  %17 = fsub x86_fp80 0xK80000000000000000000, %15
  %18 = select i1 %16, x86_fp80 %17, x86_fp80 %15
  %19 = call i32 @print_calculated_number(i8* nonnull %4, x86_fp80 %6) #9
  %20 = sext i32 %19 to i64
  %21 = call fastcc x86_fp80 @128(i8* nonnull %4, i8** null)
  %22 = fsub x86_fp80 %0, %21
  %23 = fmul x86_fp80 %22, 0xK4005C800000000000000
  %24 = fdiv x86_fp80 %23, %0
  %25 = fcmp olt x86_fp80 %24, 0xK00000000000000000000
  %26 = fsub x86_fp80 0xK80000000000000000000, %24
  %27 = select i1 %25, x86_fp80 %26, x86_fp80 %24
  %28 = icmp eq i32 %1, 0
  br i1 %28, label %47, label %29

29:                                               ; preds = %12
  %30 = load %0*, %0** @stderr, align 8
  %31 = call i32 (%0*, i8*, ...) @fprintf(%0* %30, i8* getelementptr inbounds ([180 x i8], [180 x i8]* @1, i64 0, i64 0), x86_fp80 %0, x86_fp80 %6, i32 %5, x86_fp80 %13, x86_fp80 %18, i8* nonnull %4, i64 %20, x86_fp80 %21, x86_fp80 %22, x86_fp80 %27) #10
  %32 = call i64 @strlen(i8* nonnull %4) #11
  %33 = icmp eq i64 %32, %20
  br i1 %33, label %37, label %34

34:                                               ; preds = %29
  %35 = load %0*, %0** @stderr, align 8
  %36 = call i32 (%0*, i8*, ...) @fprintf(%0* %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @2, i64 0, i64 0), i8* nonnull %4, i64 %20, i64 %32) #10
  br label %37

37:                                               ; preds = %29, %34
  %38 = fcmp ogt x86_fp80 %18, 0xK3FF1D1B71758E2196800
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  %40 = load %0*, %0** @stderr, align 8
  %41 = call i32 (%0*, i8*, ...) @fprintf(%0* %40, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @3, i64 0, i64 0), x86_fp80 %0, x86_fp80 %18) #10
  br label %42

42:                                               ; preds = %39, %37
  %43 = fcmp ogt x86_fp80 %27, 0xK3FF1D1B71758E2196800
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = load %0*, %0** @stderr, align 8
  %46 = call i32 (%0*, i8*, ...) @fprintf(%0* %45, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @4, i64 0, i64 0), x86_fp80 %0, x86_fp80 %27) #10
  br label %47

47:                                               ; preds = %12, %42, %44
  %48 = call i64 @strlen(i8* nonnull %4) #11
  %49 = icmp eq i64 %48, %20
  br i1 %49, label %50, label %55

50:                                               ; preds = %47
  %51 = fcmp ogt x86_fp80 %18, 0xK3FF1D1B71758E2196800
  br i1 %51, label %55, label %52

52:                                               ; preds = %50
  %53 = fcmp ogt x86_fp80 %27, 0xK3FF1D1B71758E2196800
  %54 = select i1 %53, i32 4, i32 0
  br label %55

55:                                               ; preds = %47, %50, %52, %9
  %56 = phi i32 [ 5, %9 ], [ 1, %47 ], [ 3, %50 ], [ %54, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %4) #9
  ret i32 %56
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @pack_storage_number(x86_fp80, i32) local_unnamed_addr #2

declare dso_local x86_fp80 @unpack_storage_number(i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare dso_local i32 @fprintf(%0* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #3

declare dso_local i32 @print_calculated_number(i8*, x86_fp80) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc x86_fp80 @128(i8* %0, i8** %1) unnamed_addr #4 {
  %3 = load i8, i8* %0, align 1
  %4 = sext i8 %3 to i32
  switch i32 %4, label %33 [
    i32 45, label %5
    i32 43, label %7
    i32 110, label %9
    i32 105, label %21
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  br label %33

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  br label %33

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 97
  br i1 %12, label %13, label %33

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 110
  br i1 %16, label %17, label %33

17:                                               ; preds = %13
  %18 = icmp eq i8** %1, null
  br i1 %18, label %109, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds i8, i8* %0, i64 3
  store i8* %20, i8** %1, align 8
  br label %109

21:                                               ; preds = %2
  %22 = getelementptr inbounds i8, i8* %0, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 110
  br i1 %24, label %25, label %33

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %0, i64 2
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 102
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = icmp eq i8** %1, null
  br i1 %30, label %109, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds i8, i8* %0, i64 3
  store i8* %32, i8** %1, align 8
  br label %109

33:                                               ; preds = %2, %21, %25, %9, %13, %7, %5
  %34 = phi i8* [ %0, %2 ], [ %0, %25 ], [ %0, %21 ], [ %0, %13 ], [ %0, %9 ], [ %8, %7 ], [ %6, %5 ]
  %35 = phi i64 [ 0, %2 ], [ 0, %25 ], [ 0, %21 ], [ 0, %13 ], [ 0, %9 ], [ 0, %7 ], [ 1, %5 ]
  %36 = load i8, i8* %34, align 1
  %37 = add i8 %36, -48
  %38 = icmp ult i8 %37, 10
  br i1 %38, label %39, label %53

39:                                               ; preds = %33, %39
  %40 = phi i8 [ %48, %39 ], [ %36, %33 ]
  %41 = phi i64 [ %46, %39 ], [ 0, %33 ]
  %42 = phi i8* [ %47, %39 ], [ %34, %33 ]
  %43 = sext i8 %40 to i64
  %44 = mul i64 %41, 10
  %45 = add i64 %44, -48
  %46 = add i64 %45, %43
  %47 = getelementptr inbounds i8, i8* %42, i64 1
  %48 = load i8, i8* %47, align 1
  %49 = add i8 %48, -48
  %50 = icmp ult i8 %49, 10
  br i1 %50, label %39, label %51

51:                                               ; preds = %39
  %52 = uitofp i64 %46 to x86_fp80
  br label %53

53:                                               ; preds = %51, %33
  %54 = phi i8* [ %34, %33 ], [ %47, %51 ]
  %55 = phi x86_fp80 [ 0xK00000000000000000000, %33 ], [ %52, %51 ]
  %56 = phi i8 [ %36, %33 ], [ %48, %51 ]
  %57 = icmp eq i8 %56, 46
  br i1 %57, label %58, label %79

58:                                               ; preds = %53
  %59 = getelementptr inbounds i8, i8* %54, i64 1
  %60 = load i8, i8* %59, align 1
  %61 = add i8 %60, -48
  %62 = icmp ult i8 %61, 10
  br i1 %62, label %63, label %79

63:                                               ; preds = %58, %63
  %64 = phi i8 [ %74, %63 ], [ %60, %58 ]
  %65 = phi i8* [ %73, %63 ], [ %59, %58 ]
  %66 = phi i64 [ %72, %63 ], [ 0, %58 ]
  %67 = phi i64 [ %71, %63 ], [ 0, %58 ]
  %68 = sext i8 %64 to i64
  %69 = mul i64 %67, 10
  %70 = add i64 %69, -48
  %71 = add i64 %70, %68
  %72 = add i64 %66, 1
  %73 = getelementptr inbounds i8, i8* %65, i64 1
  %74 = load i8, i8* %73, align 1
  %75 = add i8 %74, -48
  %76 = icmp ult i8 %75, 10
  br i1 %76, label %63, label %77

77:                                               ; preds = %63
  %78 = uitofp i64 %71 to x86_fp80
  br label %79

79:                                               ; preds = %77, %58, %53
  %80 = phi i8 [ %56, %53 ], [ %60, %58 ], [ %74, %77 ]
  %81 = phi i8* [ %54, %53 ], [ %59, %58 ], [ %73, %77 ]
  %82 = phi x86_fp80 [ 0xK00000000000000000000, %53 ], [ 0xK00000000000000000000, %58 ], [ %78, %77 ]
  %83 = phi i64 [ 0, %53 ], [ 0, %58 ], [ %72, %77 ]
  %84 = or i8 %80, 32
  %85 = icmp eq i8 %84, 101
  br i1 %85, label %86, label %88

86:                                               ; preds = %79
  %87 = tail call x86_fp80 @strtold(i8* %0, i8** %1) #9
  br label %109

88:                                               ; preds = %79
  %89 = icmp eq i8** %1, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %88
  store i8* %81, i8** %1, align 8
  br label %91

91:                                               ; preds = %88, %90
  %92 = icmp eq i64 %35, 0
  %93 = icmp ne i64 %83, 0
  br i1 %92, label %103, label %94

94:                                               ; preds = %91
  br i1 %93, label %95, label %101

95:                                               ; preds = %94
  %96 = uitofp i64 %83 to x86_fp80
  %97 = tail call x86_fp80 @powl(x86_fp80 0xK4002A000000000000000, x86_fp80 %96) #9
  %98 = fdiv x86_fp80 %82, %97
  %99 = fadd x86_fp80 %98, %55
  %100 = fsub x86_fp80 0xK80000000000000000000, %99
  br label %109

101:                                              ; preds = %94
  %102 = fsub x86_fp80 0xK80000000000000000000, %55
  br label %109

103:                                              ; preds = %91
  br i1 %93, label %104, label %109

104:                                              ; preds = %103
  %105 = uitofp i64 %83 to x86_fp80
  %106 = tail call x86_fp80 @powl(x86_fp80 0xK4002A000000000000000, x86_fp80 %105) #9
  %107 = fdiv x86_fp80 %82, %106
  %108 = fadd x86_fp80 %107, %55
  br label %109

109:                                              ; preds = %103, %31, %29, %19, %17, %104, %101, %95, %86
  %110 = phi x86_fp80 [ %87, %86 ], [ %100, %95 ], [ %102, %101 ], [ %108, %104 ], [ 0xK7FFFC000000000000000, %17 ], [ 0xK7FFFC000000000000000, %19 ], [ 0xK7FFF8000000000000000, %29 ], [ 0xK7FFF8000000000000000, %31 ], [ %55, %103 ]
  ret x86_fp80 %110
}

; Function Attrs: argmemonly nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define dso_local x86_fp80 @storage_number_min(x86_fp80 %0) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi x86_fp80 [ %0, %1 ], [ %4, %2 ]
  %4 = fmul x86_fp80 %3, 0xK3FFE8000000000000000
  %5 = tail call i32 @pack_storage_number(x86_fp80 %4, i32 16777216) #9
  %6 = tail call x86_fp80 @unpack_storage_number(i32 %5) #9
  %7 = fcmp une x86_fp80 %6, 0xK00000000000000000000
  %8 = fcmp une x86_fp80 %6, %3
  %9 = and i1 %7, %8
  br i1 %9, label %2, label %10

10:                                               ; preds = %2
  ret x86_fp80 %3
}

; Function Attrs: nounwind uwtable
define dso_local void @benchmark_storage_number(i32 %0, i32 %1) local_unnamed_addr #0 {
  %3 = alloca [100 x i8], align 16
  %4 = alloca %39, align 8
  %5 = alloca %39, align 8
  %6 = tail call x86_fp80 @unpack_storage_number(i32 956301313) #9
  %7 = tail call x86_fp80 @unpack_storage_number(i32 2113929215) #9
  %8 = getelementptr inbounds [100 x i8], [100 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %8) #9
  %9 = bitcast %39* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %9) #9
  %10 = bitcast %39* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %10) #9
  %11 = load %0*, %0** @stderr, align 8
  %12 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %11, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @5, i64 0, i64 0), i32 %0) #10
  %13 = load %0*, %0** @stderr, align 8
  %14 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %13, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @6, i64 0, i64 0), i64 16) #10
  %15 = load %0*, %0** @stderr, align 8
  %16 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %15, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @7, i64 0, i64 0), i64 4) #10
  %17 = sext i32 %0 to i64
  %18 = shl nsw i64 %17, 2
  %19 = shl nsw i64 %17, 4
  %20 = icmp ugt i64 %18, %19
  %21 = load %0*, %0** @stderr, align 8
  br i1 %20, label %22, label %26

22:                                               ; preds = %2
  %23 = udiv i64 %18, %19
  %24 = uitofp i64 %23 to x86_fp80
  %25 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %21, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @8, i64 0, i64 0), x86_fp80 %24) #10
  br label %30

26:                                               ; preds = %2
  %27 = udiv i64 %19, %18
  %28 = uitofp i64 %27 to x86_fp80
  %29 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %21, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @9, i64 0, i64 0), x86_fp80 %28) #10
  br label %30

30:                                               ; preds = %26, %22
  %31 = load %0*, %0** @stderr, align 8
  %32 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @10, i64 0, i64 0), i64 24, i64 1, %0* %31) #10
  %33 = load %0*, %0** @stderr, align 8
  %34 = tail call x86_fp80 @unpack_storage_number(i32 956301313) #9
  %35 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %33, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @11, i64 0, i64 0), x86_fp80 %34) #10
  %36 = load %0*, %0** @stderr, align 8
  %37 = tail call x86_fp80 @unpack_storage_number(i32 2113929215) #9
  %38 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %36, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @12, i64 0, i64 0), x86_fp80 %37) #10
  %39 = load %0*, %0** @stderr, align 8
  %40 = tail call x86_fp80 @unpack_storage_number(i32 -33554433) #9
  %41 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %39, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @13, i64 0, i64 0), x86_fp80 %40) #10
  %42 = load %0*, %0** @stderr, align 8
  %43 = tail call x86_fp80 @unpack_storage_number(i32 -1191182335) #9
  %44 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %42, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @14, i64 0, i64 0), x86_fp80 %43) #10
  %45 = load %0*, %0** @stderr, align 8
  %46 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %45, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @15, i64 0, i64 0), x86_fp80 0xK3FF1D1B71758E2196800) #10
  %47 = load %0*, %0** @stderr, align 8
  %48 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @16, i64 0, i64 0), i64 31, i64 1, %0* %47) #10
  %49 = call i32 @getrusage(i32 0, %39* nonnull %5) #9
  %50 = icmp sgt i32 %0, 0
  %51 = sitofp i32 %1 to x86_fp80
  br label %52

52:                                               ; preds = %66, %30
  %53 = phi i32 [ 1, %30 ], [ %67, %66 ]
  br i1 %50, label %54, label %66

54:                                               ; preds = %52
  %55 = sitofp i32 %53 to x86_fp80
  %56 = fmul x86_fp80 %6, %55
  br label %57

57:                                               ; preds = %57, %54
  %58 = phi i32 [ %64, %57 ], [ 0, %54 ]
  %59 = phi x86_fp80 [ %62, %57 ], [ %56, %54 ]
  %60 = fmul x86_fp80 %59, %51
  %61 = fcmp ogt x86_fp80 %60, %7
  %62 = select i1 %61, x86_fp80 %6, x86_fp80 %60
  %63 = call i32 @print_calculated_number(i8* nonnull %8, x86_fp80 %62) #9
  %64 = add nuw nsw i32 %58, 1
  %65 = icmp eq i32 %64, %0
  br i1 %65, label %66, label %57

66:                                               ; preds = %57, %52
  %67 = add nuw nsw i32 %53, 1
  %68 = icmp eq i32 %67, 11
  br i1 %68, label %69, label %52

69:                                               ; preds = %66
  %70 = call i32 @getrusage(i32 0, %39* nonnull %4) #9
  %71 = getelementptr inbounds %39, %39* %4, i64 0, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %39, %39* %4, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %39, %39* %5, i64 0, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %39, %39* %5, i64 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %72, %76
  %80 = mul i64 %79, 1000000
  %81 = add i64 %78, %74
  %82 = add i64 %81, %80
  %83 = getelementptr inbounds %39, %39* %4, i64 0, i32 1, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %39, %39* %4, i64 0, i32 1, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %39, %39* %5, i64 0, i32 1, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %39, %39* %5, i64 0, i32 1, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %84, %88
  %92 = mul i64 %91, 1000000
  %93 = add i64 %90, %86
  %94 = add i64 %93, %92
  %95 = add i64 %94, %82
  %96 = load %0*, %0** @stderr, align 8
  %97 = uitofp i64 %82 to double
  %98 = fdiv double %97, 1.000000e+06
  %99 = fpext double %98 to x86_fp80
  %100 = uitofp i64 %94 to double
  %101 = fdiv double %100, 1.000000e+06
  %102 = fpext double %101 to x86_fp80
  %103 = uitofp i64 %95 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = fpext double %104 to x86_fp80
  %106 = call i32 (%0*, i8*, ...) @fprintf(%0* %96, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i64 0, i64 0), x86_fp80 %99, x86_fp80 %102, x86_fp80 %105) #10
  %107 = load %0*, %0** @stderr, align 8
  %108 = call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @18, i64 0, i64 0), i64 31, i64 1, %0* %107) #10
  %109 = call i32 @getrusage(i32 0, %39* nonnull %5) #9
  br label %110

110:                                              ; preds = %124, %69
  %111 = phi i32 [ 1, %69 ], [ %125, %124 ]
  br i1 %50, label %112, label %124

112:                                              ; preds = %110
  %113 = sitofp i32 %111 to x86_fp80
  %114 = fmul x86_fp80 %6, %113
  br label %115

115:                                              ; preds = %115, %112
  %116 = phi i32 [ %122, %115 ], [ 0, %112 ]
  %117 = phi x86_fp80 [ %120, %115 ], [ %114, %112 ]
  %118 = fmul x86_fp80 %117, %51
  %119 = fcmp ogt x86_fp80 %118, %7
  %120 = select i1 %119, x86_fp80 %6, x86_fp80 %118
  %121 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* nonnull %8, i64 100, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @19, i64 0, i64 0), x86_fp80 %120) #9
  %122 = add nuw nsw i32 %116, 1
  %123 = icmp eq i32 %122, %0
  br i1 %123, label %124, label %115

124:                                              ; preds = %115, %110
  %125 = add nuw nsw i32 %111, 1
  %126 = icmp eq i32 %125, 11
  br i1 %126, label %127, label %110

127:                                              ; preds = %124
  %128 = call i32 @getrusage(i32 0, %39* nonnull %4) #9
  %129 = load i64, i64* %71, align 8
  %130 = load i64, i64* %73, align 8
  %131 = load i64, i64* %75, align 8
  %132 = load i64, i64* %77, align 8
  %133 = sub i64 %129, %131
  %134 = mul i64 %133, 1000000
  %135 = add i64 %132, %130
  %136 = add i64 %135, %134
  %137 = load i64, i64* %83, align 8
  %138 = load i64, i64* %85, align 8
  %139 = load i64, i64* %87, align 8
  %140 = load i64, i64* %89, align 8
  %141 = sub i64 %137, %139
  %142 = mul i64 %141, 1000000
  %143 = add i64 %140, %138
  %144 = add i64 %143, %142
  %145 = add i64 %144, %136
  %146 = load %0*, %0** @stderr, align 8
  %147 = uitofp i64 %136 to double
  %148 = fdiv double %147, 1.000000e+06
  %149 = fpext double %148 to x86_fp80
  %150 = uitofp i64 %144 to double
  %151 = fdiv double %150, 1.000000e+06
  %152 = fpext double %151 to x86_fp80
  %153 = uitofp i64 %145 to double
  %154 = fdiv double %153, 1.000000e+06
  %155 = fpext double %154 to x86_fp80
  %156 = call i32 (%0*, i8*, ...) @fprintf(%0* %146, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i64 0, i64 0), x86_fp80 %149, x86_fp80 %152, x86_fp80 %155) #10
  %157 = icmp ugt i64 %95, %145
  %158 = load %0*, %0** @stderr, align 8
  br i1 %157, label %159, label %165

159:                                              ; preds = %127
  %160 = fmul double %103, 1.000000e+02
  %161 = fdiv double %160, %153
  %162 = fadd double %161, -1.000000e+02
  %163 = fpext double %162 to x86_fp80
  %164 = call i32 (%0*, i8*, ...) @fprintf(%0* %158, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @20, i64 0, i64 0), x86_fp80 %163) #10
  br label %171

165:                                              ; preds = %127
  %166 = fmul double %153, 1.000000e+02
  %167 = fdiv double %166, %103
  %168 = fadd double %167, -1.000000e+02
  %169 = fpext double %168 to x86_fp80
  %170 = call i32 (%0*, i8*, ...) @fprintf(%0* %158, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @21, i64 0, i64 0), x86_fp80 %169) #10
  br label %171

171:                                              ; preds = %165, %159
  %172 = load %0*, %0** @stderr, align 8
  %173 = call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @22, i64 0, i64 0), i64 51, i64 1, %0* %172) #10
  %174 = call i32 @getrusage(i32 0, %39* nonnull %5) #9
  br label %175

175:                                              ; preds = %191, %171
  %176 = phi i32 [ 1, %171 ], [ %192, %191 ]
  br i1 %50, label %177, label %191

177:                                              ; preds = %175
  %178 = sitofp i32 %176 to x86_fp80
  %179 = fmul x86_fp80 %6, %178
  br label %180

180:                                              ; preds = %180, %177
  %181 = phi i32 [ %189, %180 ], [ 0, %177 ]
  %182 = phi x86_fp80 [ %185, %180 ], [ %179, %177 ]
  %183 = fmul x86_fp80 %182, %51
  %184 = fcmp ogt x86_fp80 %183, %7
  %185 = select i1 %184, x86_fp80 %6, x86_fp80 %183
  %186 = call i32 @pack_storage_number(x86_fp80 %185, i32 16777216) #9
  %187 = call x86_fp80 @unpack_storage_number(i32 %186) #9
  %188 = call i32 @print_calculated_number(i8* nonnull %8, x86_fp80 %187) #9
  %189 = add nuw nsw i32 %181, 1
  %190 = icmp eq i32 %189, %0
  br i1 %190, label %191, label %180

191:                                              ; preds = %180, %175
  %192 = add nuw nsw i32 %176, 1
  %193 = icmp eq i32 %192, 11
  br i1 %193, label %194, label %175

194:                                              ; preds = %191
  %195 = call i32 @getrusage(i32 0, %39* nonnull %4) #9
  %196 = load i64, i64* %71, align 8
  %197 = load i64, i64* %73, align 8
  %198 = load i64, i64* %75, align 8
  %199 = load i64, i64* %77, align 8
  %200 = sub i64 %196, %198
  %201 = mul i64 %200, 1000000
  %202 = add i64 %199, %197
  %203 = add i64 %202, %201
  %204 = load i64, i64* %83, align 8
  %205 = load i64, i64* %85, align 8
  %206 = load i64, i64* %87, align 8
  %207 = load i64, i64* %89, align 8
  %208 = sub i64 %204, %206
  %209 = mul i64 %208, 1000000
  %210 = add i64 %207, %205
  %211 = add i64 %210, %209
  %212 = add i64 %211, %203
  %213 = load %0*, %0** @stderr, align 8
  %214 = uitofp i64 %203 to double
  %215 = fdiv double %214, 1.000000e+06
  %216 = fpext double %215 to x86_fp80
  %217 = uitofp i64 %211 to double
  %218 = fdiv double %217, 1.000000e+06
  %219 = fpext double %218 to x86_fp80
  %220 = uitofp i64 %212 to double
  %221 = fdiv double %220, 1.000000e+06
  %222 = fpext double %221 to x86_fp80
  %223 = call i32 (%0*, i8*, ...) @fprintf(%0* %213, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @17, i64 0, i64 0), x86_fp80 %216, x86_fp80 %219, x86_fp80 %222) #10
  %224 = icmp ugt i64 %212, %145
  %225 = load %0*, %0** @stderr, align 8
  br i1 %224, label %226, label %232

226:                                              ; preds = %194
  %227 = fmul double %220, 1.000000e+02
  %228 = fdiv double %227, %153
  %229 = fadd double %228, -1.000000e+02
  %230 = fpext double %229 to x86_fp80
  %231 = call i32 (%0*, i8*, ...) @fprintf(%0* %225, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @23, i64 0, i64 0), x86_fp80 %230) #10
  br label %238

232:                                              ; preds = %194
  %233 = fmul double %153, 1.000000e+02
  %234 = fdiv double %233, %220
  %235 = fadd double %234, -1.000000e+02
  %236 = fpext double %235 to x86_fp80
  %237 = call i32 (%0*, i8*, ...) @fprintf(%0* %225, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @24, i64 0, i64 0), x86_fp80 %236) #10
  br label %238

238:                                              ; preds = %232, %226
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @getrusage(i32, %39*) local_unnamed_addr #3

declare dso_local i32 @snprintfz(i8*, i64, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_storage() local_unnamed_addr #0 {
  %1 = tail call i32 @pack_storage_number(x86_fp80 0xK00000000000000000000, i32 16777216) #9
  %2 = tail call x86_fp80 @unpack_storage_number(i32 %1) #9
  %3 = and i32 %1, 117440512
  %4 = icmp eq i32 %3, 16777216
  br i1 %4, label %8, label %5

5:                                                ; preds = %0
  %6 = load %0*, %0** @stderr, align 8
  %7 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %6, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @89, i64 0, i64 0), i32 16777216, i32 %3) #12
  br label %41

8:                                                ; preds = %0
  %9 = fcmp une x86_fp80 %2, 0xK00000000000000000000
  br i1 %9, label %10, label %13

10:                                               ; preds = %8
  %11 = load %0*, %0** @stderr, align 8
  %12 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %11, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @90, i64 0, i64 0), x86_fp80 0xK00000000000000000000, x86_fp80 %2) #12
  br label %41

13:                                               ; preds = %8
  %14 = tail call x86_fp80 @unpack_storage_number(i32 956301313) #9
  %15 = tail call x86_fp80 @unpack_storage_number(i32 -1191182335) #9
  br label %16

16:                                               ; preds = %13, %38
  %17 = phi i32 [ 0, %13 ], [ %39, %38 ]
  %18 = phi x86_fp80 [ 0xK00000000000000000000, %13 ], [ %19, %38 ]
  %19 = fadd x86_fp80 %18, 0xK3FE7D6BF94D5E57A4000
  %20 = fsub x86_fp80 0xK80000000000000000000, %19
  br label %21

21:                                               ; preds = %16, %34
  %22 = phi i32 [ 0, %16 ], [ %35, %34 ]
  %23 = phi x86_fp80 [ %20, %16 ], [ %36, %34 ]
  %24 = fcmp ogt x86_fp80 %23, 0xK00000000000000000000
  %25 = fcmp olt x86_fp80 %23, %14
  %26 = and i1 %24, %25
  br i1 %26, label %34, label %27

27:                                               ; preds = %21
  %28 = fcmp olt x86_fp80 %23, 0xK00000000000000000000
  %29 = fcmp ogt x86_fp80 %23, %15
  %30 = and i1 %28, %29
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = tail call i32 @check_storage_number(x86_fp80 %23, i32 1)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %41

34:                                               ; preds = %27, %21, %31
  %35 = add nuw nsw i32 %22, 1
  %36 = fmul x86_fp80 %23, 0xK4002A000000000000000
  %37 = icmp ult i32 %35, 21
  br i1 %37, label %21, label %38

38:                                               ; preds = %34
  %39 = add nuw nsw i32 %17, 1
  %40 = icmp ult i32 %39, 9
  br i1 %40, label %16, label %43

41:                                               ; preds = %31, %57, %10, %5, %67
  %42 = phi i32 [ 0, %67 ], [ 0, %5 ], [ 0, %10 ], [ 1, %57 ], [ 1, %31 ]
  ret i32 %42

43:                                               ; preds = %38, %64
  %44 = phi i32 [ %65, %64 ], [ 0, %38 ]
  %45 = phi x86_fp80 [ %46, %64 ], [ 0xK00000000000000000000, %38 ]
  %46 = fadd x86_fp80 %45, 0xK3FE7D6BF94D5E57A4000
  br label %47

47:                                               ; preds = %60, %43
  %48 = phi i32 [ 0, %43 ], [ %61, %60 ]
  %49 = phi x86_fp80 [ %46, %43 ], [ %62, %60 ]
  %50 = fcmp ogt x86_fp80 %49, 0xK00000000000000000000
  %51 = fcmp olt x86_fp80 %49, %14
  %52 = and i1 %50, %51
  br i1 %52, label %60, label %53

53:                                               ; preds = %47
  %54 = fcmp olt x86_fp80 %49, 0xK00000000000000000000
  %55 = fcmp ogt x86_fp80 %49, %15
  %56 = and i1 %54, %55
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = tail call i32 @check_storage_number(x86_fp80 %49, i32 1)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %41

60:                                               ; preds = %57, %53, %47
  %61 = add nuw nsw i32 %48, 1
  %62 = fmul x86_fp80 %49, 0xK4002A000000000000000
  %63 = icmp ult i32 %61, 21
  br i1 %63, label %47, label %64

64:                                               ; preds = %60
  %65 = add nuw nsw i32 %44, 1
  %66 = icmp ult i32 %65, 9
  br i1 %66, label %43, label %67

67:                                               ; preds = %64
  tail call void @benchmark_storage_number(i32 1000000, i32 2)
  br label %41
}

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_str2ld() local_unnamed_addr #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = bitcast i8** %1 to i8*
  %4 = bitcast i8** %2 to i8*
  br label %5

5:                                                ; preds = %0, %47
  %6 = phi i64 [ 0, %0 ], [ %49, %47 ]
  %7 = getelementptr inbounds [11 x i8*], [11 x i8*]* @35, i64 0, i64 %6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #9
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @31, i64 0, i64 0), i8** %1, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #9
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @36, i64 0, i64 0), i8** %2, align 8
  %8 = load i8*, i8** %7, align 8
  %9 = call fastcc x86_fp80 @128(i8* %8, i8** nonnull %1)
  %10 = call x86_fp80 @strtold(i8* %8, i8** nonnull %2) #9
  %11 = call i32 @__isnanl(x86_fp80 %9) #13
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %19, label %13

13:                                               ; preds = %5
  %14 = call i32 @__isnanl(x86_fp80 %10) #13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %40

16:                                               ; preds = %13
  %17 = load %0*, %0** @stderr, align 8
  %18 = call i32 (%0*, i8*, ...) @fprintf(%0* %17, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @37, i64 0, i64 0), i8* %8, x86_fp80 %9, x86_fp80 %10) #10
  br label %51

19:                                               ; preds = %5
  %20 = call i32 @__isinfl(x86_fp80 %9) #13
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %19
  %23 = call i32 @__isinfl(x86_fp80 %10) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %40

25:                                               ; preds = %22
  %26 = load %0*, %0** @stderr, align 8
  %27 = call i32 (%0*, i8*, ...) @fprintf(%0* %26, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @37, i64 0, i64 0), i8* %8, x86_fp80 %9, x86_fp80 %10) #10
  br label %51

28:                                               ; preds = %19
  %29 = fcmp une x86_fp80 %9, %10
  br i1 %29, label %30, label %40

30:                                               ; preds = %28
  %31 = fsub x86_fp80 %9, %10
  %32 = fcmp olt x86_fp80 %31, 0xK00000000000000000000
  %33 = fsub x86_fp80 0xK80000000000000000000, %31
  %34 = select i1 %32, x86_fp80 %33, x86_fp80 %31
  %35 = fcmp ogt x86_fp80 %34, 0xK3FEB8637BD05AF6C6800
  br i1 %35, label %36, label %40

36:                                               ; preds = %30
  %37 = load %0*, %0** @stderr, align 8
  %38 = fsub x86_fp80 %10, %9
  %39 = call i32 (%0*, i8*, ...) @fprintf(%0* %37, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @38, i64 0, i64 0), i8* %8, x86_fp80 %9, x86_fp80 %10, x86_fp80 %38) #10
  br label %51

40:                                               ; preds = %13, %22, %30, %28
  %41 = load i8*, i8** %1, align 8
  %42 = load i8*, i8** %2, align 8
  %43 = icmp eq i8* %41, %42
  %44 = load %0*, %0** @stderr, align 8
  br i1 %43, label %47, label %45

45:                                               ; preds = %40
  %46 = call i32 (%0*, i8*, ...) @fprintf(%0* %44, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @39, i64 0, i64 0), i8* %8) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #9
  br label %52

47:                                               ; preds = %40
  %48 = call i32 (%0*, i8*, ...) @fprintf(%0* %44, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @40, i64 0, i64 0), i8* %8, x86_fp80 %9, x86_fp80 %10) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #9
  %49 = add nuw nsw i64 %6, 1
  %50 = icmp eq i64 %49, 10
  br i1 %50, label %52, label %5

51:                                               ; preds = %36, %25, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #9
  br label %52

52:                                               ; preds = %47, %51, %45
  %53 = phi i32 [ -1, %51 ], [ -1, %45 ], [ 0, %47 ]
  ret i32 %53
}

; Function Attrs: nounwind
declare dso_local x86_fp80 @strtold(i8* readonly, i8** nocapture) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare dso_local i32 @__isnanl(x86_fp80) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare dso_local i32 @__isinfl(x86_fp80) local_unnamed_addr #6

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test_buffer() local_unnamed_addr #0 {
  %1 = alloca [2049 x i8], align 16
  %2 = alloca [9001 x i8], align 16
  %3 = tail call %10* @buffer_create(i64 1) #9
  %4 = getelementptr inbounds [2049 x i8], [2049 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2049, i8* nonnull %4) #9
  %5 = getelementptr inbounds [9001 x i8], [9001 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9001, i8* nonnull %5) #9
  br label %6

6:                                                ; preds = %6, %0
  %7 = phi i64 [ 0, %0 ], [ %21, %6 ]
  %8 = phi <16 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>, %0 ], [ %22, %6 ]
  %9 = urem <16 x i16> %8, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %10 = trunc <16 x i16> %9 to <16 x i8>
  %11 = add nuw <16 x i8> %10, <i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97>
  %12 = getelementptr inbounds [2049 x i8], [2049 x i8]* %1, i64 0, i64 %7
  %13 = bitcast i8* %12 to <16 x i8>*
  store <16 x i8> %11, <16 x i8>* %13, align 16
  %14 = or i64 %7, 16
  %15 = add <16 x i16> %8, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %16 = urem <16 x i16> %15, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %17 = trunc <16 x i16> %16 to <16 x i8>
  %18 = add nuw <16 x i8> %17, <i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97, i8 97>
  %19 = getelementptr inbounds [2049 x i8], [2049 x i8]* %1, i64 0, i64 %14
  %20 = bitcast i8* %19 to <16 x i8>*
  store <16 x i8> %18, <16 x i8>* %20, align 16
  %21 = add nuw nsw i64 %7, 32
  %22 = add <16 x i16> %8, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %23 = icmp eq i64 %21, 2048
  br i1 %23, label %24, label %6

24:                                               ; preds = %6
  %25 = getelementptr inbounds [2049 x i8], [2049 x i8]* %1, i64 0, i64 2048
  store i8 0, i8* %25, align 16
  call void (%10*, i8*, ...) @buffer_sprintf(%10* %3, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @41, i64 0, i64 0), i8* nonnull %4, i8* nonnull %4, i8* nonnull %4, i8* nonnull %4) #9
  %26 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* nonnull %5, i64 9000, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @41, i64 0, i64 0), i8* nonnull %4, i8* nonnull %4, i8* nonnull %4, i8* nonnull %4) #9
  %27 = call i8* @buffer_tostring(%10* %3) #9
  %28 = getelementptr inbounds %10, %10* %3, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = call i64 @strlen(i8* nonnull %5) #11
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %24
  %33 = call i32 @strcmp(i8* %27, i8* nonnull %5) #11
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %47, label %35

35:                                               ; preds = %32, %24
  %36 = load %0*, %0** @stderr, align 8
  %37 = call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @42, i64 0, i64 0), i64 29, i64 1, %0* %36) #10
  %38 = load %0*, %0** @stderr, align 8
  %39 = call i64 @strlen(i8* nonnull %4) #11
  %40 = call i32 (%0*, i8*, ...) @fprintf(%0* %38, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @43, i64 0, i64 0), i8* nonnull %4, i64 %39) #10
  %41 = load %0*, %0** @stderr, align 8
  %42 = load i64, i64* %28, align 8
  %43 = call i32 (%0*, i8*, ...) @fprintf(%0* %41, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @44, i64 0, i64 0), i8* %27, i64 %42) #10
  %44 = load %0*, %0** @stderr, align 8
  %45 = call i64 @strlen(i8* nonnull %5) #11
  %46 = call i32 (%0*, i8*, ...) @fprintf(%0* %44, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @45, i64 0, i64 0), i8* nonnull %5, i64 %45) #10
  call void @buffer_free(%10* nonnull %3) #9
  br label %50

47:                                               ; preds = %32
  %48 = load %0*, %0** @stderr, align 8
  %49 = call i64 @fwrite(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @46, i64 0, i64 0), i64 36, i64 1, %0* %48) #10
  call void @buffer_free(%10* nonnull %3) #9
  br label %50

50:                                               ; preds = %47, %35
  %51 = phi i32 [ -1, %35 ], [ 0, %47 ]
  call void @llvm.lifetime.end.p0i8(i64 9001, i8* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 2049, i8* nonnull %4) #9
  ret i32 %51
}

declare dso_local %10* @buffer_create(i64) local_unnamed_addr #2

declare dso_local void @buffer_sprintf(%10*, i8*, ...) local_unnamed_addr #2

declare dso_local i8* @buffer_tostring(%10*) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #7

declare dso_local void @buffer_free(%10*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @run_test(%3* %0) local_unnamed_addr #0 {
  %2 = alloca [101 x i8], align 16
  %3 = load %0*, %0** @stderr, align 8
  %4 = getelementptr inbounds %3, %3* %0, i64 0, i32 0, i64 0
  %5 = getelementptr inbounds %3, %3* %0, i64 0, i32 1, i64 0
  %6 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @47, i64 0, i64 0), i8* %4, i8* nonnull %5) #10
  store i32 4, i32* @default_rrd_memory_mode, align 4
  %7 = getelementptr inbounds %3, %3* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* @default_rrd_update_every, align 4
  %9 = getelementptr inbounds [101 x i8], [101 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 101, i8* nonnull %9) #9
  %10 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* nonnull %9, i64 100, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @48, i64 0, i64 0), i8* %4) #9
  %11 = load %4*, %4** @localhost, align 8
  %12 = load i32, i32* %7, align 4
  %13 = getelementptr inbounds %4, %4* %11, i64 0, i32 13
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %4, %4* %11, i64 0, i32 12
  %16 = load i64, i64* %15, align 8
  %17 = call %17* @rrdset_create_custom(%4* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i64 0, i64 0), i8* nonnull %9, i8* nonnull %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i64 0, i64 0), i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i64 0, i64 0), i8* null, i64 1, i32 %12, i32 0, i32 %14, i64 %16) #9
  %18 = getelementptr inbounds %3, %3* %0, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %3, %3* %0, i64 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %3, %3* %0, i64 0, i32 5
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %17, %17* %17, i64 0, i32 19
  %25 = load i32, i32* %24, align 8
  %26 = call %21* @rrddim_add_custom(%17* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i64 0, i64 0), i8* null, i64 %19, i64 %21, i32 %23, i32 %25) #9
  %27 = getelementptr inbounds %3, %3* %0, i64 0, i32 10
  %28 = load i64*, i64** %27, align 8
  %29 = icmp eq i64* %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %1
  %31 = load i64, i64* %18, align 8
  %32 = load i64, i64* %20, align 8
  %33 = load i32, i32* %22, align 8
  %34 = load i32, i32* %24, align 8
  %35 = call %21* @rrddim_add_custom(%17* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @54, i64 0, i64 0), i8* null, i64 %31, i64 %32, i32 %33, i32 %34) #9
  br label %36

36:                                               ; preds = %1, %30
  %37 = phi %21* [ %35, %30 ], [ null, %1 ]
  %38 = getelementptr inbounds %17, %17* %17, i64 0, i32 15
  %39 = atomicrmw or i32* %38, i32 4 seq_cst
  %40 = call i64 @now_realtime_sec() #9
  %41 = getelementptr inbounds %3, %3* %0, i64 0, i32 6
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %139, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %3, %3* %0, i64 0, i32 8
  %46 = getelementptr inbounds %17, %17* %17, i64 0, i32 33
  %47 = getelementptr inbounds %21, %21* %26, i64 0, i32 2
  %48 = icmp eq %21* %37, null
  %49 = getelementptr inbounds %21, %21* %37, i64 0, i32 2
  %50 = getelementptr inbounds %17, %17* %17, i64 0, i32 34, i32 1
  %51 = getelementptr inbounds %17, %17* %17, i64 0, i32 35, i32 1
  %52 = getelementptr inbounds %21, %21* %26, i64 0, i32 16, i32 1
  br label %53

53:                                               ; preds = %44, %135
  %54 = phi i64 [ 0, %44 ], [ %101, %135 ]
  %55 = phi i64 [ 0, %44 ], [ %136, %135 ]
  %56 = phi i64 [ 0, %44 ], [ %113, %135 ]
  %57 = load i64, i64* @debug_flags, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %53
  %60 = load %0*, %0** @stderr, align 8
  %61 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @55, i64 0, i64 0), i64 2, i64 1, %0* %60) #10
  br label %62

62:                                               ; preds = %53, %59
  %63 = icmp ne i64 %55, 0
  br i1 %63, label %64, label %95

64:                                               ; preds = %62
  %65 = load %2*, %2** %45, align 8
  %66 = getelementptr inbounds %2, %2* %65, i64 %55, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, %54
  %69 = load %0*, %0** @stderr, align 8
  %70 = add nuw i64 %55, 1
  %71 = uitofp i64 %67 to float
  %72 = fpext float %71 to double
  %73 = fdiv double %72, 1.000000e+06
  %74 = sitofp i64 %68 to float
  %75 = fpext float %74 to double
  %76 = fdiv double %75, 1.000000e+06
  %77 = getelementptr inbounds %2, %2* %65, i64 %55, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = sitofp i64 %78 to x86_fp80
  %80 = sitofp i64 %56 to x86_fp80
  %81 = fsub x86_fp80 %79, %80
  %82 = load i64, i64* %18, align 8
  %83 = uitofp i64 %82 to x86_fp80
  %84 = fmul x86_fp80 %81, %83
  %85 = load i64, i64* %20, align 8
  %86 = uitofp i64 %85 to x86_fp80
  %87 = fdiv x86_fp80 %84, %86
  %88 = uitofp i64 %67 to x86_fp80
  %89 = fdiv x86_fp80 %87, %88
  %90 = fmul x86_fp80 %89, 0xK4012F424000000000000
  %91 = call i32 (%0*, i8*, ...) @fprintf(%0* %69, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @56, i64 0, i64 0), i8* nonnull %4, i64 %70, double %73, double %76, x86_fp80 %87, x86_fp80 %90) #10
  %92 = load %2*, %2** %45, align 8
  %93 = getelementptr inbounds %2, %2* %92, i64 %55, i32 0
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %46, align 16
  br label %99

95:                                               ; preds = %62
  %96 = load %0*, %0** @stderr, align 8
  %97 = call i32 (%0*, i8*, ...) @fprintf(%0* %96, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @57, i64 0, i64 0), i8* nonnull %4, i64 1) #10
  %98 = load %2*, %2** %45, align 8
  br label %99

99:                                               ; preds = %95, %64
  %100 = phi %2* [ %92, %64 ], [ %98, %95 ]
  %101 = phi i64 [ %68, %64 ], [ %54, %95 ]
  %102 = load %0*, %0** @stderr, align 8
  %103 = load i8*, i8** %47, align 16
  %104 = getelementptr inbounds %2, %2* %100, i64 %55, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = call i32 (%0*, i8*, ...) @fprintf(%0* %102, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @58, i64 0, i64 0), i8* %103, i64 %105) #10
  %107 = load %2*, %2** %45, align 8
  %108 = getelementptr inbounds %2, %2* %107, i64 %55, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = call i64 @rrddim_set(%17* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @53, i64 0, i64 0), i64 %109) #9
  %111 = load %2*, %2** %45, align 8
  %112 = getelementptr inbounds %2, %2* %111, i64 %55, i32 1
  %113 = load i64, i64* %112, align 8
  br i1 %48, label %125, label %114

114:                                              ; preds = %99
  %115 = load %0*, %0** @stderr, align 8
  %116 = load i8*, i8** %49, align 16
  %117 = load i64*, i64** %27, align 8
  %118 = getelementptr inbounds i64, i64* %117, i64 %55
  %119 = load i64, i64* %118, align 8
  %120 = call i32 (%0*, i8*, ...) @fprintf(%0* %115, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @58, i64 0, i64 0), i8* %116, i64 %119) #10
  %121 = load i64*, i64** %27, align 8
  %122 = getelementptr inbounds i64, i64* %121, i64 %55
  %123 = load i64, i64* %122, align 8
  %124 = call i64 @rrddim_set(%17* %17, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @54, i64 0, i64 0), i64 %123) #9
  br label %125

125:                                              ; preds = %99, %114
  call void @rrdset_done(%17* %17) #9
  br i1 %63, label %135, label %126

126:                                              ; preds = %125
  %127 = load %0*, %0** @stderr, align 8
  %128 = load %2*, %2** %45, align 8
  %129 = getelementptr inbounds %2, %2* %128, i64 0, i32 0
  %130 = load i64, i64* %129, align 8
  %131 = call i32 (%0*, i8*, ...) @fprintf(%0* %127, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @59, i64 0, i64 0), i8* nonnull %4, i64 %130) #10
  %132 = load %2*, %2** %45, align 8
  %133 = getelementptr inbounds %2, %2* %132, i64 0, i32 0
  %134 = load i64, i64* %133, align 8
  store i64 %134, i64* %50, align 8
  store i64 %134, i64* %51, align 8
  store i64 %134, i64* %52, align 8
  br label %135

135:                                              ; preds = %125, %126
  %136 = add nuw i64 %55, 1
  %137 = load i64, i64* %41, align 8
  %138 = icmp ult i64 %136, %137
  br i1 %138, label %53, label %139

139:                                              ; preds = %135, %36
  %140 = getelementptr inbounds %17, %17* %17, i64 0, i32 23
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %3, %3* %0, i64 0, i32 7
  %143 = load i64, i64* %142, align 8
  %144 = icmp eq i64 %141, %143
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = load %0*, %0** @stderr, align 8
  %147 = call i32 (%0*, i8*, ...) @fprintf(%0* %146, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @60, i64 0, i64 0), i8* nonnull %4, i64 %141, i64 %143) #10
  %148 = load i64, i64* %140, align 8
  %149 = load i64, i64* %142, align 8
  br label %150

150:                                              ; preds = %139, %145
  %151 = phi i64 [ %149, %145 ], [ %141, %139 ]
  %152 = phi i64 [ %148, %145 ], [ %141, %139 ]
  %153 = phi i32 [ 1, %145 ], [ 0, %139 ]
  %154 = icmp ult i64 %152, %151
  %155 = select i1 %154, i64 %152, i64 %151
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %315, label %157

157:                                              ; preds = %150
  %158 = getelementptr inbounds %3, %3* %0, i64 0, i32 9
  %159 = getelementptr inbounds %21, %21* %26, i64 0, i32 2
  %160 = getelementptr inbounds %17, %17* %17, i64 0, i32 22
  %161 = getelementptr inbounds %17, %17* %17, i64 0, i32 49
  %162 = getelementptr inbounds %17, %17* %17, i64 0, i32 12
  %163 = icmp eq %21* %37, null
  %164 = getelementptr inbounds %17, %17* %17, i64 0, i32 34, i32 0
  %165 = getelementptr inbounds %17, %17* %17, i64 0, i32 13
  %166 = getelementptr inbounds %3, %3* %0, i64 0, i32 11
  %167 = getelementptr inbounds %21, %21* %37, i64 0, i32 2
  br label %168

168:                                              ; preds = %157, %312
  %169 = phi i64 [ 0, %157 ], [ %186, %312 ]
  %170 = phi i32 [ %153, %157 ], [ %313, %312 ]
  %171 = getelementptr inbounds %21, %21* %26, i64 0, i32 31, i64 %169
  %172 = load i32, i32* %171, align 4
  %173 = call x86_fp80 @unpack_storage_number(i32 %172) #9
  %174 = load x86_fp80*, x86_fp80** %158, align 8
  %175 = getelementptr inbounds x86_fp80, x86_fp80* %174, i64 %169
  %176 = load x86_fp80, x86_fp80* %175, align 16
  %177 = call i32 @pack_storage_number(x86_fp80 %176, i32 16777216) #9
  %178 = call x86_fp80 @unpack_storage_number(i32 %177) #9
  %179 = fmul x86_fp80 %173, 0xK40169896800000000000
  %180 = call x86_fp80 @llvm.round.f80(x86_fp80 %179)
  %181 = fmul x86_fp80 %178, 0xK40169896800000000000
  %182 = call x86_fp80 @llvm.round.f80(x86_fp80 %181)
  %183 = fcmp oeq x86_fp80 %180, %182
  %184 = load %0*, %0** @stderr, align 8
  %185 = load i8*, i8** %159, align 16
  %186 = add nuw i64 %169, 1
  %187 = load i32, i32* %24, align 8
  %188 = icmp eq i32 %187, 5
  br i1 %188, label %189, label %222

189:                                              ; preds = %168
  %190 = call i32 @__netdata_rwlock_tryrdlock(%32* nonnull %160) #9
  %191 = load %21*, %21** %161, align 8
  %192 = icmp eq %21* %191, null
  br i1 %192, label %212, label %193

193:                                              ; preds = %189, %207
  %194 = phi %21* [ %210, %207 ], [ %191, %189 ]
  %195 = phi i64 [ %208, %207 ], [ 9223372036854775807, %189 ]
  %196 = getelementptr inbounds %21, %21* %194, i64 0, i32 12
  %197 = load %22*, %22** %196, align 16
  %198 = getelementptr inbounds %22, %22* %197, i64 0, i32 2, i32 5
  %199 = load i64 (%21*)*, i64 (%21*)** %198, align 8
  %200 = call i64 %199(%21* nonnull %194) #9
  %201 = icmp slt i64 %195, %200
  br i1 %201, label %207, label %202

202:                                              ; preds = %193
  %203 = load %22*, %22** %196, align 16
  %204 = getelementptr inbounds %22, %22* %203, i64 0, i32 2, i32 5
  %205 = load i64 (%21*)*, i64 (%21*)** %204, align 8
  %206 = call i64 %205(%21* nonnull %194) #9
  br label %207

207:                                              ; preds = %202, %193
  %208 = phi i64 [ %206, %202 ], [ %195, %193 ]
  %209 = getelementptr inbounds %21, %21* %194, i64 0, i32 24
  %210 = load %21*, %21** %209, align 8
  %211 = icmp eq %21* %210, null
  br i1 %211, label %212, label %193

212:                                              ; preds = %207, %189
  %213 = phi i64 [ 9223372036854775807, %189 ], [ %208, %207 ]
  %214 = icmp eq i32 %190, 0
  br i1 %214, label %215, label %217

215:                                              ; preds = %212
  %216 = call i32 @__netdata_rwlock_unlock(%32* nonnull %160) #9
  br label %217

217:                                              ; preds = %215, %212
  %218 = icmp eq i64 %213, 9223372036854775807
  %219 = select i1 %218, i64 0, i64 %213
  %220 = load i32, i32* %162, align 16
  %221 = sext i32 %220 to i64
  br label %232

222:                                              ; preds = %168
  %223 = load i64, i64* %164, align 8
  %224 = load i64, i64* %140, align 8
  %225 = load i64, i64* %165, align 8
  %226 = icmp ult i64 %224, %225
  %227 = select i1 %226, i64 %224, i64 %225
  %228 = load i32, i32* %162, align 16
  %229 = sext i32 %228 to i64
  %230 = mul i64 %227, %229
  %231 = sub nsw i64 %223, %230
  br label %232

232:                                              ; preds = %217, %222
  %233 = phi i64 [ %221, %217 ], [ %229, %222 ]
  %234 = phi i64 [ %219, %217 ], [ %231, %222 ]
  %235 = mul i64 %169, %233
  %236 = sub i64 %234, %40
  %237 = add i64 %236, %235
  %238 = select i1 %183, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @63, i64 0, i64 0)
  %239 = call i32 (%0*, i8*, ...) @fprintf(%0* %184, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @61, i64 0, i64 0), i8* %4, i8* %185, i64 %186, i64 %237, x86_fp80 %178, x86_fp80 %173, i8* %238) #10
  %240 = xor i1 %183, true
  %241 = zext i1 %240 to i32
  %242 = add nsw i32 %170, %241
  br i1 %163, label %312, label %243

243:                                              ; preds = %232
  %244 = getelementptr inbounds %21, %21* %37, i64 0, i32 31, i64 %169
  %245 = load i32, i32* %244, align 4
  %246 = call x86_fp80 @unpack_storage_number(i32 %245) #9
  %247 = load x86_fp80*, x86_fp80** %166, align 8
  %248 = getelementptr inbounds x86_fp80, x86_fp80* %247, i64 %169
  %249 = load x86_fp80, x86_fp80* %248, align 16
  %250 = fmul x86_fp80 %246, 0xK40169896800000000000
  %251 = call x86_fp80 @llvm.round.f80(x86_fp80 %250)
  %252 = fmul x86_fp80 %249, 0xK40169896800000000000
  %253 = call x86_fp80 @llvm.round.f80(x86_fp80 %252)
  %254 = fcmp oeq x86_fp80 %251, %253
  %255 = load %0*, %0** @stderr, align 8
  %256 = load i8*, i8** %167, align 16
  %257 = load i32, i32* %24, align 8
  %258 = icmp eq i32 %257, 5
  br i1 %258, label %259, label %292

259:                                              ; preds = %243
  %260 = call i32 @__netdata_rwlock_tryrdlock(%32* nonnull %160) #9
  %261 = load %21*, %21** %161, align 8
  %262 = icmp eq %21* %261, null
  br i1 %262, label %282, label %263

263:                                              ; preds = %259, %277
  %264 = phi %21* [ %280, %277 ], [ %261, %259 ]
  %265 = phi i64 [ %278, %277 ], [ 9223372036854775807, %259 ]
  %266 = getelementptr inbounds %21, %21* %264, i64 0, i32 12
  %267 = load %22*, %22** %266, align 16
  %268 = getelementptr inbounds %22, %22* %267, i64 0, i32 2, i32 5
  %269 = load i64 (%21*)*, i64 (%21*)** %268, align 8
  %270 = call i64 %269(%21* nonnull %264) #9
  %271 = icmp slt i64 %265, %270
  br i1 %271, label %277, label %272

272:                                              ; preds = %263
  %273 = load %22*, %22** %266, align 16
  %274 = getelementptr inbounds %22, %22* %273, i64 0, i32 2, i32 5
  %275 = load i64 (%21*)*, i64 (%21*)** %274, align 8
  %276 = call i64 %275(%21* nonnull %264) #9
  br label %277

277:                                              ; preds = %272, %263
  %278 = phi i64 [ %276, %272 ], [ %265, %263 ]
  %279 = getelementptr inbounds %21, %21* %264, i64 0, i32 24
  %280 = load %21*, %21** %279, align 8
  %281 = icmp eq %21* %280, null
  br i1 %281, label %282, label %263

282:                                              ; preds = %277, %259
  %283 = phi i64 [ 9223372036854775807, %259 ], [ %278, %277 ]
  %284 = icmp eq i32 %260, 0
  br i1 %284, label %285, label %287

285:                                              ; preds = %282
  %286 = call i32 @__netdata_rwlock_unlock(%32* nonnull %160) #9
  br label %287

287:                                              ; preds = %285, %282
  %288 = icmp eq i64 %283, 9223372036854775807
  %289 = select i1 %288, i64 0, i64 %283
  %290 = load i32, i32* %162, align 16
  %291 = sext i32 %290 to i64
  br label %302

292:                                              ; preds = %243
  %293 = load i64, i64* %164, align 8
  %294 = load i64, i64* %140, align 8
  %295 = load i64, i64* %165, align 8
  %296 = icmp ult i64 %294, %295
  %297 = select i1 %296, i64 %294, i64 %295
  %298 = load i32, i32* %162, align 16
  %299 = sext i32 %298 to i64
  %300 = mul i64 %297, %299
  %301 = sub nsw i64 %293, %300
  br label %302

302:                                              ; preds = %287, %292
  %303 = phi i64 [ %291, %287 ], [ %299, %292 ]
  %304 = phi i64 [ %289, %287 ], [ %301, %292 ]
  %305 = mul i64 %169, %303
  %306 = sub i64 %304, %40
  %307 = add i64 %306, %305
  %308 = select i1 %254, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @63, i64 0, i64 0)
  %309 = call i32 (%0*, i8*, ...) @fprintf(%0* %255, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @61, i64 0, i64 0), i8* %4, i8* %256, i64 %186, i64 %307, x86_fp80 %249, x86_fp80 %246, i8* %308) #10
  br i1 %254, label %312, label %310

310:                                              ; preds = %302
  %311 = add nsw i32 %242, 1
  br label %312

312:                                              ; preds = %232, %302, %310
  %313 = phi i32 [ %242, %302 ], [ %311, %310 ], [ %242, %232 ]
  %314 = icmp ult i64 %186, %155
  br i1 %314, label %168, label %315

315:                                              ; preds = %312, %150
  %316 = phi i32 [ %153, %150 ], [ %313, %312 ]
  call void @llvm.lifetime.end.p0i8(i64 101, i8* nonnull %9) #9
  ret i32 %316
}

declare dso_local %17* @rrdset_create_custom(%4*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i64, i32, i32, i32, i64) local_unnamed_addr #2

declare dso_local %21* @rrddim_add_custom(%17*, i8*, i8*, i64, i64, i32, i32) local_unnamed_addr #2

declare dso_local i64 @now_realtime_sec() local_unnamed_addr #2

declare dso_local i64 @rrddim_set(%17*, i8*, i64) local_unnamed_addr #2

declare dso_local void @rrdset_done(%17*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable willreturn
declare x86_fp80 @llvm.round.f80(x86_fp80) #8

; Function Attrs: nounwind uwtable
define dso_local i32 @check_strdupz_path_subpath() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %0, %19
  %2 = phi i8** [ getelementptr inbounds ([10 x %38], [10 x %38]* @74, i64 0, i64 0, i32 2), %0 ], [ %23, %19 ]
  %3 = phi i64 [ 0, %0 ], [ %22, %19 ]
  %4 = getelementptr inbounds [10 x %38], [10 x %38]* @74, i64 0, i64 %3, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds [10 x %38], [10 x %38]* @74, i64 0, i64 %3, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i8* @strdupz_path_subpath(i8* %5, i8* %7) #9
  %9 = load %0*, %0** @stderr, align 8
  %10 = tail call i32 (%0*, i8*, ...) @fprintf(%0* %9, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @75, i64 0, i64 0), i8* %5, i8* %7, i8* %8) #10
  %11 = icmp eq i8* %8, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %1
  %13 = load i8*, i8** %2, align 8
  %14 = tail call i32 @strcmp(i8* nonnull %8, i8* %13) #11
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %12, %1
  tail call void @freez(i8* %8) #9
  %17 = load %0*, %0** @stderr, align 8
  %18 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @76, i64 0, i64 0), i64 7, i64 1, %0* %17) #10
  br label %25

19:                                               ; preds = %12
  tail call void @freez(i8* nonnull %8) #9
  %20 = load %0*, %0** @stderr, align 8
  %21 = tail call i64 @fwrite(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @77, i64 0, i64 0), i64 3, i64 1, %0* %20) #10
  %22 = add nuw nsw i64 %3, 1
  %23 = getelementptr inbounds [10 x %38], [10 x %38]* @74, i64 0, i64 %22, i32 2
  %24 = icmp eq i64 %22, 9
  br i1 %24, label %25, label %1

25:                                               ; preds = %19, %16
  %26 = phi i32 [ 1, %16 ], [ 0, %19 ]
  ret i32 %26
}

declare dso_local i8* @strdupz_path_subpath(i8*, i8*) local_unnamed_addr #2

declare dso_local void @freez(i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @run_all_mockup_tests() local_unnamed_addr #0 {
  %1 = alloca [50 x i8], align 16
  %2 = alloca [50 x i8], align 16
  %3 = tail call i32 @check_strdupz_path_subpath()
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %165

5:                                                ; preds = %0
  %6 = getelementptr inbounds [50 x i8], [50 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %6) #9
  %7 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %7) #9
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi i64 [ 0, %5 ], [ %24, %8 ]
  %10 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @91, i64 0, i64 0), %5 ], [ %26, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %20, %8 ]
  %12 = getelementptr inbounds [10 x %54], [10 x %54]* bitcast ([10 x { x86_fp80, i8* }]* @98 to [10 x %54]*), i64 0, i64 %9, i32 0
  %13 = load x86_fp80, x86_fp80* %12, align 16
  %14 = call i32 @print_calculated_number(i8* nonnull %6, x86_fp80 %13) #9
  %15 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* nonnull %7, i64 49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @99, i64 0, i64 0), x86_fp80 %13) #9
  %16 = call i32 @strcmp(i8* nonnull %6, i8* nonnull %10) #11
  %17 = icmp eq i32 %16, 0
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = add nuw nsw i32 %11, %19
  %21 = select i1 %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @62, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @101, i64 0, i64 0)
  %22 = load %0*, %0** @stderr, align 8
  %23 = call i32 (%0*, i8*, ...) @fprintf(%0* %22, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @100, i64 0, i64 0), i8* nonnull %7, i8* nonnull %6, i8* %21) #12
  %24 = add nuw nsw i64 %9, 1
  %25 = getelementptr inbounds [10 x %54], [10 x %54]* bitcast ([10 x { x86_fp80, i8* }]* @98 to [10 x %54]*), i64 0, i64 %24, i32 1
  %26 = load i8*, i8** %25, align 16
  %27 = icmp eq i64 %24, 9
  br i1 %27, label %28, label %8

28:                                               ; preds = %8
  %29 = icmp eq i32 %20, 0
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %6) #9
  br i1 %29, label %30, label %165

30:                                               ; preds = %28
  %31 = load %0*, %0** @stderr, align 8
  %32 = call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @102, i64 0, i64 0), i64 31, i64 1, %0* %31) #12
  %33 = load %0*, %0** @stderr, align 8
  %34 = call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @103, i64 0, i64 0), i64 15, i64 1, %0* %33) #12
  %35 = load %4*, %4** @localhost, align 8
  %36 = getelementptr inbounds %4, %4* %35, i64 0, i32 13
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %4, %4* %35, i64 0, i32 12
  %39 = load i64, i64* %38, align 8
  %40 = call %17* @rrdset_create_custom(%4* %35, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @104, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @105, i64 0, i64 0), i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @106, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @107, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i64 0, i64 0), i8* null, i64 1, i32 1, i32 0, i32 %37, i64 %39) #9
  %41 = load %0*, %0** @stderr, align 8
  %42 = getelementptr inbounds %17, %17* %40, i64 0, i32 2, i64 0
  %43 = getelementptr inbounds %17, %17* %40, i64 0, i32 3
  %44 = load i8*, i8** %43, align 16
  %45 = call i32 (%0*, i8*, ...) @fprintf(%0* %41, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @108, i64 0, i64 0), i8* nonnull %42, i8* %44) #12
  %46 = load %0*, %0** @stderr, align 8
  %47 = call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @109, i64 0, i64 0), i64 24, i64 1, %0* %46) #12
  %48 = getelementptr inbounds %17, %17* %40, i64 0, i32 19
  %49 = load i32, i32* %48, align 8
  %50 = call %21* @rrddim_add_custom(%17* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @110, i64 0, i64 0), i8* null, i64 1, i64 1, i32 1, i32 %49) #9
  %51 = load %0*, %0** @stderr, align 8
  %52 = getelementptr inbounds %21, %21* %50, i64 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %21, %21* %50, i64 0, i32 2
  %55 = load i8*, i8** %54, align 16
  %56 = call i32 (%0*, i8*, ...) @fprintf(%0* %51, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @111, i64 0, i64 0), i8* %53, i8* %55) #12
  %57 = load %0*, %0** @stderr, align 8
  %58 = call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @112, i64 0, i64 0), i64 24, i64 1, %0* %57) #12
  %59 = load i32, i32* %48, align 8
  %60 = call %21* @rrddim_add_custom(%17* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @113, i64 0, i64 0), i8* null, i64 1, i64 1, i32 1, i32 %59) #9
  %61 = load %0*, %0** @stderr, align 8
  %62 = getelementptr inbounds %21, %21* %60, i64 0, i32 1
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %21, %21* %60, i64 0, i32 2
  %65 = load i8*, i8** %64, align 16
  %66 = call i32 (%0*, i8*, ...) @fprintf(%0* %61, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @111, i64 0, i64 0), i8* %63, i8* %65) #12
  %67 = load %0*, %0** @stderr, align 8
  %68 = call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @114, i64 0, i64 0), i64 29, i64 1, %0* %67) #12
  %69 = call i32 @rrdset_set_name(%17* %40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @115, i64 0, i64 0)) #9
  %70 = load %0*, %0** @stderr, align 8
  %71 = load i8*, i8** %43, align 16
  %72 = call i32 (%0*, i8*, ...) @fprintf(%0* %70, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @116, i64 0, i64 0), i8* nonnull %42, i8* %71) #12
  %73 = load %0*, %0** @stderr, align 8
  %74 = call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @117, i64 0, i64 0), i64 29, i64 1, %0* %73) #12
  %75 = call i32 @rrdset_set_name(%17* %40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @118, i64 0, i64 0)) #9
  %76 = load %0*, %0** @stderr, align 8
  %77 = load i8*, i8** %43, align 16
  %78 = call i32 (%0*, i8*, ...) @fprintf(%0* %76, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @116, i64 0, i64 0), i8* nonnull %42, i8* %77) #12
  %79 = load %0*, %0** @stderr, align 8
  %80 = call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @119, i64 0, i64 0), i64 37, i64 1, %0* %79) #12
  %81 = call i32 @rrddim_set_name(%17* %40, %21* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @120, i64 0, i64 0)) #9
  %82 = load %0*, %0** @stderr, align 8
  %83 = load i8*, i8** %52, align 8
  %84 = load i8*, i8** %54, align 16
  %85 = call i32 (%0*, i8*, ...) @fprintf(%0* %82, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @121, i64 0, i64 0), i8* %83, i8* %84) #12
  %86 = load %0*, %0** @stderr, align 8
  %87 = call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @122, i64 0, i64 0), i64 37, i64 1, %0* %86) #12
  %88 = call i32 @rrddim_set_name(%17* %40, %21* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @123, i64 0, i64 0)) #9
  %89 = load %0*, %0** @stderr, align 8
  %90 = load i8*, i8** %52, align 8
  %91 = load i8*, i8** %54, align 16
  %92 = call i32 (%0*, i8*, ...) @fprintf(%0* %89, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @121, i64 0, i64 0), i8* %90, i8* %91) #12
  %93 = load %0*, %0** @stderr, align 8
  %94 = call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @124, i64 0, i64 0), i64 37, i64 1, %0* %93) #12
  %95 = call i32 @rrddim_set_name(%17* %40, %21* %60, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @125, i64 0, i64 0)) #9
  %96 = load %0*, %0** @stderr, align 8
  %97 = load i8*, i8** %62, align 8
  %98 = load i8*, i8** %64, align 16
  %99 = call i32 (%0*, i8*, ...) @fprintf(%0* %96, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @121, i64 0, i64 0), i8* %97, i8* %98) #12
  %100 = load %0*, %0** @stderr, align 8
  %101 = call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @126, i64 0, i64 0), i64 37, i64 1, %0* %100) #12
  %102 = call i32 @rrddim_set_name(%17* %40, %21* %60, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @127, i64 0, i64 0)) #9
  %103 = load %0*, %0** @stderr, align 8
  %104 = load i8*, i8** %62, align 8
  %105 = load i8*, i8** %64, align 16
  %106 = call i32 (%0*, i8*, ...) @fprintf(%0* %103, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @121, i64 0, i64 0), i8* %104, i8* %105) #12
  %107 = call %10* @buffer_create(i64 1) #9
  call void @health_api_v1_chart_variables2json(%17* %40, %10* %107) #9
  %108 = load %0*, %0** @stderr, align 8
  %109 = call i8* @buffer_tostring(%10* %107) #9
  %110 = call i32 @fputs(i8* %109, %0* %108) #12
  call void @buffer_free(%10* %107) #9
  %111 = call i32 @run_test(%3* nonnull @test1)
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %165

113:                                              ; preds = %30
  %114 = call i32 @run_test(%3* nonnull @test2)
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %165

116:                                              ; preds = %113
  %117 = call i32 @run_test(%3* nonnull @test3)
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %165

119:                                              ; preds = %116
  %120 = call i32 @run_test(%3* nonnull @test4)
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %165

122:                                              ; preds = %119
  %123 = call i32 @run_test(%3* nonnull @test5)
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %165

125:                                              ; preds = %122
  %126 = call i32 @run_test(%3* nonnull @test5b)
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %165

128:                                              ; preds = %125
  %129 = call i32 @run_test(%3* nonnull @test6)
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %165

131:                                              ; preds = %128
  %132 = call i32 @run_test(%3* nonnull @test7)
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %165

134:                                              ; preds = %131
  %135 = call i32 @run_test(%3* nonnull @test8)
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %165

137:                                              ; preds = %134
  %138 = call i32 @run_test(%3* nonnull @test9)
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %165

140:                                              ; preds = %137
  %141 = call i32 @run_test(%3* nonnull @test10)
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %165

143:                                              ; preds = %140
  %144 = call i32 @run_test(%3* nonnull @test11)
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %165

146:                                              ; preds = %143
  %147 = call i32 @run_test(%3* nonnull @test12)
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %165

149:                                              ; preds = %146
  %150 = call i32 @run_test(%3* nonnull @test13)
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %165

152:                                              ; preds = %149
  %153 = call i32 @run_test(%3* nonnull @test14)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %165

155:                                              ; preds = %152
  %156 = call i32 @run_test(%3* nonnull @test14b)
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %165

158:                                              ; preds = %155
  %159 = call i32 @run_test(%3* nonnull @test14c)
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %165

161:                                              ; preds = %158
  %162 = call i32 @run_test(%3* nonnull @test15)
  %163 = icmp ne i32 %162, 0
  %164 = zext i1 %163 to i32
  br label %165

165:                                              ; preds = %161, %158, %155, %152, %149, %146, %143, %140, %137, %134, %131, %128, %125, %122, %119, %116, %113, %30, %28, %0
  %166 = phi i32 [ 1, %0 ], [ 1, %28 ], [ 1, %30 ], [ 1, %113 ], [ 1, %116 ], [ 1, %119 ], [ 1, %122 ], [ 1, %125 ], [ 1, %128 ], [ 1, %131 ], [ 1, %134 ], [ 1, %137 ], [ 1, %140 ], [ 1, %143 ], [ 1, %146 ], [ 1, %149 ], [ 1, %152 ], [ 1, %155 ], [ 1, %158 ], [ %164, %161 ]
  ret i32 %166
}

; Function Attrs: nounwind uwtable
define dso_local i32 @unit_test(i64 %0, i64 %1) local_unnamed_addr #0 {
  %3 = alloca [101 x i8], align 16
  %4 = load i32, i32* @78, align 4
  %5 = add nsw i32 %4, 1
  store i32 %5, i32* @78, align 4
  %6 = getelementptr inbounds [101 x i8], [101 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 101, i8* nonnull %6) #9
  %7 = call i32 (i8*, i64, i8*, ...) @snprintfz(i8* nonnull %6, i64 100, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @79, i64 0, i64 0), i32 %5, i64 %0, i64 %1) #9
  store i32 4, i32* @default_rrd_memory_mode, align 4
  store i32 1, i32* @default_rrd_update_every, align 4
  %8 = load %4*, %4** @localhost, align 8
  %9 = getelementptr inbounds %4, %4* %8, i64 0, i32 13
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %4, %4* %8, i64 0, i32 12
  %12 = load i64, i64* %11, align 8
  %13 = call %17* @rrdset_create_custom(%4* %8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i64 0, i64 0), i8* nonnull %6, i8* nonnull %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @49, i64 0, i64 0), i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @50, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @51, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @52, i64 0, i64 0), i8* null, i64 1, i32 1, i32 0, i32 %10, i64 %12) #9
  %14 = getelementptr inbounds %17, %17* %13, i64 0, i32 15
  %15 = atomicrmw or i32* %14, i32 4 seq_cst
  %16 = getelementptr inbounds %17, %17* %13, i64 0, i32 19
  %17 = load i32, i32* %16, align 8
  %18 = call %21* @rrddim_add_custom(%17* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i64 0, i64 0), i64 1, i64 1, i32 0, i32 %17) #9
  %19 = load i32, i32* %16, align 8
  %20 = call %21* @rrddim_add_custom(%17* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i64 0, i64 0), i64 1, i64 1, i32 1, i32 %19) #9
  %21 = getelementptr inbounds %17, %17* %13, i64 0, i32 49
  br label %22

22:                                               ; preds = %22, %2
  %23 = phi %21** [ %21, %2 ], [ %26, %22 ]
  %24 = load %21*, %21** %23, align 8
  %25 = icmp eq %21* %24, null
  %26 = getelementptr inbounds %21, %21* %24, i64 0, i32 24
  br i1 %25, label %27, label %22

27:                                               ; preds = %22
  %28 = getelementptr inbounds %17, %17* %13, i64 0, i32 35
  %29 = getelementptr inbounds %17, %17* %13, i64 0, i32 35, i32 1
  %30 = getelementptr inbounds %17, %17* %13, i64 0, i32 33
  %31 = getelementptr inbounds %17, %17* %13, i64 0, i32 35, i32 0
  br label %32

32:                                               ; preds = %56, %27
  %33 = phi i64 [ 0, %27 ], [ %57, %56 ]
  %34 = phi i64 [ 0, %27 ], [ %35, %56 ]
  %35 = add nuw nsw i64 %34, 1000
  %36 = load %0*, %0** @stderr, align 8
  %37 = call i32 (%0*, i8*, ...) @fprintf(%0* %36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @82, i64 0, i64 0), i64 %33, i64 %0, i64 %35) #10
  %38 = icmp eq i64 %33, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %32
  store i64 %0, i64* %30, align 16
  %40 = call i64 @rrddim_set(%17* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i64 0, i64 0), i64 %35) #9
  %41 = call i64 @rrddim_set(%17* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i64 0, i64 0), i64 %35) #9
  br label %46

42:                                               ; preds = %32
  %43 = call i64 @rrddim_set(%17* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @80, i64 0, i64 0), i64 %35) #9
  %44 = call i64 @rrddim_set(%17* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @81, i64 0, i64 0), i64 %35) #9
  %45 = call i32 @now_realtime_timeval(%18* nonnull %28) #9
  store i64 %1, i64* %29, align 8
  br label %46

46:                                               ; preds = %39, %42
  %47 = load %21*, %21** %21, align 8
  %48 = icmp eq %21* %47, null
  br i1 %48, label %56, label %49

49:                                               ; preds = %46, %49
  %50 = phi %21* [ %54, %49 ], [ %47, %46 ]
  %51 = load i64, i64* %31, align 8
  %52 = getelementptr inbounds %21, %21* %50, i64 0, i32 16, i32 0
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %21, %21* %50, i64 0, i32 24
  %54 = load %21*, %21** %53, align 8
  %55 = icmp eq %21* %54, null
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %46
  call void @rrdset_done(%17* nonnull %13) #9
  %57 = add nuw nsw i64 %33, 1
  %58 = icmp eq i64 %57, 20
  br i1 %58, label %59, label %32

59:                                               ; preds = %56
  %60 = getelementptr inbounds %17, %17* %13, i64 0, i32 12
  %61 = load i32, i32* %60, align 16
  %62 = sext i32 %61 to i64
  %63 = mul nsw i64 %62, 1000000000
  %64 = sdiv i64 %63, %0
  %65 = load %0*, %0** @stderr, align 8
  %66 = mul nsw i64 %64, 10
  %67 = call i32 (%0*, i8*, ...) @fprintf(%0* %65, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @83, i64 0, i64 0), i64 10000, i64 %66, i64 %0, i64 %1) #10
  %68 = getelementptr inbounds %17, %17* %13, i64 0, i32 23
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %128, label %71

71:                                               ; preds = %59
  %72 = sub nsw i64 1000000, %1
  %73 = mul nsw i64 %64, %72
  %74 = sdiv i64 %73, 1000000
  %75 = add nsw i64 %74, 1000
  br label %76

76:                                               ; preds = %71, %119
  %77 = phi i32 [ 0, %71 ], [ %120, %119 ]
  %78 = phi i64 [ 0, %71 ], [ %86, %119 ]
  %79 = load %0*, %0** @stderr, align 8
  %80 = mul i64 %78, %64
  %81 = add i64 %75, %80
  %82 = mul i64 %81, 10
  %83 = call i32 (%0*, i8*, ...) @fprintf(%0* %79, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @84, i64 0, i64 0), i64 %78, i64 %82) #10
  %84 = load %21*, %21** %21, align 8
  %85 = icmp eq %21* %84, null
  %86 = add nuw i64 %78, 1
  br i1 %85, label %119, label %87

87:                                               ; preds = %76
  %88 = mul i64 %86, %64
  %89 = add i64 %88, 1000
  %90 = uitofp i64 %89 to x86_fp80
  %91 = icmp eq i64 %78, 0
  %92 = select i1 %91, i64 %74, i64 %64
  %93 = sitofp i64 %92 to x86_fp80
  br label %94

94:                                               ; preds = %87, %114
  %95 = phi %21* [ %84, %87 ], [ %117, %114 ]
  %96 = phi i32 [ %77, %87 ], [ %115, %114 ]
  %97 = getelementptr inbounds %21, %21* %95, i64 0, i32 31, i64 %78
  %98 = load i32, i32* %97, align 4
  %99 = call x86_fp80 @unpack_storage_number(i32 %98) #9
  %100 = load %0*, %0** @stderr, align 8
  %101 = getelementptr inbounds %21, %21* %95, i64 0, i32 1
  %102 = load i8*, i8** %101, align 8
  %103 = call i32 (%0*, i8*, ...) @fprintf(%0* %100, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @85, i64 0, i64 0), i8* %102, x86_fp80 %99, i32 %98) #10
  %104 = icmp eq %21* %95, %18
  %105 = icmp eq %21* %95, %20
  %106 = select i1 %105, x86_fp80 %93, x86_fp80 0xK00000000000000000000
  %107 = select i1 %104, x86_fp80 %90, x86_fp80 %106
  %108 = fcmp oeq x86_fp80 %107, %99
  %109 = load %0*, %0** @stderr, align 8
  br i1 %108, label %110, label %112

110:                                              ; preds = %94
  %111 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @86, i64 0, i64 0), i64 8, i64 1, %0* %109) #10
  br label %114

112:                                              ; preds = %94
  %113 = call i32 (%0*, i8*, ...) @fprintf(%0* %109, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @87, i64 0, i64 0), x86_fp80 %107) #10
  br label %114

114:                                              ; preds = %110, %112
  %115 = phi i32 [ %96, %110 ], [ 1, %112 ]
  %116 = getelementptr inbounds %21, %21* %95, i64 0, i32 24
  %117 = load %21*, %21** %116, align 8
  %118 = icmp eq %21* %117, null
  br i1 %118, label %119, label %94

119:                                              ; preds = %114, %76
  %120 = phi i32 [ %77, %76 ], [ %115, %114 ]
  %121 = load i64, i64* %68, align 8
  %122 = icmp ult i64 %86, %121
  br i1 %122, label %76, label %123

123:                                              ; preds = %119
  %124 = icmp eq i32 %120, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %123
  %126 = load %0*, %0** @stderr, align 8
  %127 = call i32 (%0*, i8*, ...) @fprintf(%0* %126, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @88, i64 0, i64 0), i64 %0, i64 %1) #10
  br label %128

128:                                              ; preds = %59, %123, %125
  %129 = phi i32 [ 0, %123 ], [ %120, %125 ], [ 0, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 101, i8* nonnull %6) #9
  ret i32 %129
}

declare dso_local i32 @now_realtime_timeval(%18*) local_unnamed_addr #2

; Function Attrs: nounwind
declare dso_local x86_fp80 @powl(x86_fp80, x86_fp80) local_unnamed_addr #3

declare dso_local i32 @__netdata_rwlock_tryrdlock(%32*) local_unnamed_addr #2

declare dso_local i32 @__netdata_rwlock_unlock(%32*) local_unnamed_addr #2

declare dso_local i32 @rrdset_set_name(%17*, i8*) local_unnamed_addr #2

declare dso_local i32 @rrddim_set_name(%17*, %21*, i8*) local_unnamed_addr #2

declare dso_local void @health_api_v1_chart_variables2json(%17*, %10*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %0* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind
declare i32 @fputs(i8* nocapture readonly, %0* nocapture) local_unnamed_addr #9

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }
attributes #10 = { cold }
attributes #11 = { nounwind readonly }
attributes #12 = { cold nounwind }
attributes #13 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
